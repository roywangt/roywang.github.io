<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Managing Workbooks and Worksheets on Aspose.Cells Product Family</title>
    <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/</link>
    <description>Recent content in Managing Workbooks and Worksheets on Aspose.Cells Product Family</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Export Visible Rows Data from Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/export&#43;visible&#43;rows&#43;data&#43;from&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/export&#43;visible&#43;rows&#43;data&#43;from&#43;worksheet/</guid>
      <description>You can export data from worksheets into data tables using Aspose.Cells. Sometimes you want to export the data of visible rows only. Aspose.Cells provides a way to achieve this. Use the ExportTableOptions.PlotVisibleRows to specify that you want to export visible rows data only.
This example shows how to export data from the following worksheet. Rows 5, 6 and 7 are hidden.
   Sample data in worksheet, rows 5, 6 and 7 are hidden        Once the data is exported to a data table using the Worksheet.</description>
    </item>
    
    <item>
      <title>Show Formulas Instead of Values in a Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/show&#43;formulas&#43;instead&#43;of&#43;values&#43;in&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/show&#43;formulas&#43;instead&#43;of&#43;values&#43;in&#43;a&#43;worksheet/</guid>
      <description>It is possible to show formulas instead of calculated values in Microsoft Excel using the Show Formulas option from the Formulas ribbon. When formulas are shown, Microsoft Excel displays formulas in the worksheet. You can achieve the same thing using Aspose.Cells.
Aspose.Cells provides a Worksheet.ShowFormulas property. Set this to **true **to set Microsoft Excel to display formulas.
\
Attachments: show-formulas-1.PNG (image/png) show-formulas-2.PNG (image/png)</description>
    </item>
    
    <item>
      <title>Load a Web Image from a URL into an Excel Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;a&#43;web&#43;image&#43;from&#43;a&#43;url&#43;into&#43;an&#43;excel&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;a&#43;web&#43;image&#43;from&#43;a&#43;url&#43;into&#43;an&#43;excel&#43;worksheet/</guid>
      <description>Insert a Linked Picture from Web Address explained how to insert an image from the web into a spreadsheet. As well as linking to the image, you can extract and download the image data into a stream and then insert the image from the stream into the worksheet with Aspose.Cells. This adds the image to the spreadsheet&amp;rsquo;s image collection whereas the other method loads the image from the web each time the spreadsheet is opened.</description>
    </item>
    
    <item>
      <title>Create Workbook and Worksheet Scoped Named Ranges</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/create&#43;workbook&#43;and&#43;worksheet&#43;scoped&#43;named&#43;ranges/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/create&#43;workbook&#43;and&#43;worksheet&#43;scoped&#43;named&#43;ranges/</guid>
      <description>Microsoft Excel allows users to define named ranges with two different scopes: workbook (also known as global scope) and worksheet.
 Named ranges with a workbook scope can be accessed from any worksheet within that workbook by simply using its name. Worksheet scoped named ranges are accessed with the reference of the particular worksheet in which it was created.  Aspose.Cells provides the same functionality as Microsoft Excel for adding workbook and worksheet scoped named ranges.</description>
    </item>
    
    <item>
      <title>Hiding the Display of Zero Values in the Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/hiding&#43;the&#43;display&#43;of&#43;zero&#43;values&#43;in&#43;the&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/hiding&#43;the&#43;display&#43;of&#43;zero&#43;values&#43;in&#43;the&#43;worksheet/</guid>
      <description>Sometimes, you need to hide zero values in a spreadsheet. It might be a personal preference or a formatting standard.
To hide zero values in a worksheet in Microsoft Excel (for example Microsoft Excel 2003):
 From the Tools menu, select Options, and then select the View tab. Deselect the Zero values option. Click OK.  Please see the following sample code that demonstrates hiding zeros using Aspose.Cells.
\
Attachments: Hiding the Display of Zero Values in the Worksheet-001.</description>
    </item>
    
    <item>
      <title>Setting Strong Encryption Type</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/setting&#43;strong&#43;encryption&#43;type/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/setting&#43;strong&#43;encryption&#43;type/</guid>
      <description>Microsoft Excel (97-2007/2010) enables you to encrypt and password protect spreadsheets. It uses algorithms provided by a Crypto Service Provider. A Crypto Service Provider (or CSP) is a set of cryptographic algorithms with different properties. The default CSP is &amp;ldquo;Office 97/2000 Compatible&amp;rdquo;. This is a CSP with some publicly known security issues. Spreadsheets that are secured with the &amp;ldquo;weak encryption (XOR)&amp;rdquo; or with the &amp;ldquo;Office 97/2000 Compatible&amp;rdquo; encryption type can be cracked easily.</description>
    </item>
    
    <item>
      <title>Inserting a WAV file as an Ole Object</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/inserting&#43;a&#43;wav&#43;file&#43;as&#43;an&#43;ole&#43;object/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/inserting&#43;a&#43;wav&#43;file&#43;as&#43;an&#43;ole&#43;object/</guid>
      <description>Aspose.Cells provides the functionality to add different types of OLE objects to the excel worksheets. We will see in the following code examples, how to add a wav file as an OLE object using simple APIs provided by Aspose.Cells.</description>
    </item>
    
    <item>
      <title>Copy and Move Worksheets Within and Between Workbooks</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/copy&#43;and&#43;move&#43;worksheets&#43;within&#43;and&#43;between&#43;workbooks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/copy&#43;and&#43;move&#43;worksheets&#43;within&#43;and&#43;between&#43;workbooks/</guid>
      <description>Sometimes, you do need a number of worksheets with common formatting and data entry. For example, if you work with quarterly budgets, you might want to create a workbook with sheets that contain the same column headings, row headings, and formulas. There is a way to do this: by creating one sheet and then copying it three times.
Aspose.Cells supports copying or moving worksheets within or between workbooks. Worksheets including data, formatting, tables, matrices, charts, images and other objects are copied with the highest degree of precision.</description>
    </item>
    
    <item>
      <title>Set Background Picture for a Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/set&#43;background&#43;picture&#43;for&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/set&#43;background&#43;picture&#43;for&#43;a&#43;worksheet/</guid>
      <description>You can make a worksheet more appealing by adding a picture as a worksheet background. This feature can be quite effective if you have a special corporate graphic that adds a hint of background without obscuring the data on the sheet. You can set background picture for a sheet using Aspose.Cells API.
   Contents Summary
1 Setting Sheet Background in Microsoft Excel
2 Setting Sheet Background with Aspose.Cells</description>
    </item>
    
    <item>
      <title>Load Specific Sheets in a Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;specific&#43;sheets&#43;in&#43;a&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;specific&#43;sheets&#43;in&#43;a&#43;workbook/</guid>
      <description>By default, Aspose.Cells loads the whole spreadsheet into memory. It is possible to only load specific sheets. This can improve performance and consume less memory. This approach is useful when working with a large workbook made up of many worksheets.
Here is the implementation of the CustomLoad class.</description>
    </item>
    
    <item>
      <title>Extract OLE Objects from Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/extract&#43;ole&#43;objects&#43;from&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/extract&#43;ole&#43;objects&#43;from&#43;workbook/</guid>
      <description>Sometimes, you do need to extract OLE objects from a workbook. Aspose.Cells supports extracting and saving those OLe objects.
This article shows how to create a console application in Visual Studio.Net and extract different OLE objects from a workbook with a few simple lines of code.
   Contents Summary
1 Extract OLE Objects from a Workbook 1.1 Creating a Template Workbook
1.2 Download and Install Aspose.Cells
1.3 Create a Project</description>
    </item>
    
    <item>
      <title>Set Worksheet Tab Color</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/set&#43;worksheet&#43;tab&#43;color/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/set&#43;worksheet&#43;tab&#43;color/</guid>
      <description>Aspose.Cells allows you to change the color of individual worksheet tabs to make them prominent from the rest. For example, you can make Expenses red, Sales green, Assets blue, etc.
   Contents Summary
1 Setting Worksheet Tab Color with Microsoft Excel
2 Setting Worksheet Tab Color with Aspose.Cells
 ||      Setting Worksheet Tab Color with Microsoft Excel       Right-click a tab in the tab-sheet at the bottom of the current worksheet.</description>
    </item>
    
    <item>
      <title>Apply Conditional Formatting in Worksheets</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/apply&#43;conditional&#43;formatting&#43;in&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/apply&#43;conditional&#43;formatting&#43;in&#43;worksheets/</guid>
      <description>This article is designed to provide a detailed understanding of how to add conditional formatting to a range of cells in a worksheet.
Conditional formatting is an advanced feature in Microsoft Excel that allows you to apply formats to a range of cells, and have that formatting change depending on the value of the cell or the value of a formula. For example, the background of a cell may be red to highlight a negative value, or the text color might be green for a positive value.</description>
    </item>
    
    <item>
      <title>Combine Multiple Workbooks into a Single Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/combine&#43;multiple&#43;workbooks&#43;into&#43;a&#43;single&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/combine&#43;multiple&#43;workbooks&#43;into&#43;a&#43;single&#43;workbook/</guid>
      <description>Sometimes, you need to combine workbooks with various content like images, charts and data into a single workbook. Aspose.Cells supports this feature. This article shows how to create a console application in Visual Studio and combine workbooks with a few, simple lines of code using Aspose.Cells.
Combining Workbooks with Images and Charts
The example code combines two workbooks into a single workbook using Aspose.Cells. The code loads the source workbooks, uses the Workbook.</description>
    </item>
    
    <item>
      <title>Opening Excel File without Open Save Cancel Dialog Box</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/opening&#43;excel&#43;file&#43;without&#43;open&#43;save&#43;cancel&#43;dialog&#43;box/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/opening&#43;excel&#43;file&#43;without&#43;open&#43;save&#43;cancel&#43;dialog&#43;box/</guid>
      <description>This document explains how to open a Microsoft Excel file in a browser without showing the Open-Save-Cancel dialog box.
It is to be noted here that the security restriction that does not allow direct download of a file is enforced by Microsoft (or other browser vendors), not by Aspose. It is imposed to block and restrict potentially harmful files from getting downloaded to local machines.
It is risky for the client’s local system to allow download without showing the Open-Save-Cancel dialog to prompt for download.</description>
    </item>
    
    <item>
      <title>Combine Multiple Worksheets into a Single Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/combine&#43;multiple&#43;worksheets&#43;into&#43;a&#43;single&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/combine&#43;multiple&#43;worksheets&#43;into&#43;a&#43;single&#43;worksheet/</guid>
      <description>Sometimes, you need to combine multiple worksheets into a single worksheet. This can easily be achieved using Aspose.Cells API. This article will show you a code example that reads a source workbook and combines the data of all source worksheets into a single worksheet inside a destination workbook.
The following code snippet shows you how to combine multiple worksheets into a single worksheet.
\
Attachments: sheet1.JPG (image/png) sheet2.JPG (image/png) sheet3.JPG (image/png) outputsheet.</description>
    </item>
    
    <item>
      <title>Disable Compatibility Checker in Excel</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/disable&#43;compatibility&#43;checker&#43;in&#43;excel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/disable&#43;compatibility&#43;checker&#43;in&#43;excel/</guid>
      <description>Microsoft Excel&amp;rsquo;s Compatibility Checker flags when saving a file in an earlier file format might cause functionality issues or loss of fidelity. The Compatibility Checker is a feature of Microsoft Office Excel 2007 and Microsoft Excel 2010.
When you save a workbook in a previous version, Excel 97 through Excel 2003, from Excel 2007 or Excel 2010, the Compatibility Checker scans the workbook to see if it contains features that are not supported by the earlier version.</description>
    </item>
    
    <item>
      <title>Optimizing Memory Usage while Working with Big Files having Large Datasets</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/optimizing&#43;memory&#43;usage&#43;while&#43;working&#43;with&#43;big&#43;files&#43;having&#43;large&#43;datasets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/optimizing&#43;memory&#43;usage&#43;while&#43;working&#43;with&#43;big&#43;files&#43;having&#43;large&#43;datasets/</guid>
      <description>When building a workbook with large data sets, or reading a big Microsoft Excel file, the total amount of RAM the process will take is always a concern. There are measures that can be adapted to cope with the challenge. Aspose.Cells provides some relevant options and API calls to lower, reduce and optimize memory use. Also, it can help the process work more efficiently and run faster.
Use the MemorySetting.MemoryPreference option to optimize memory use for cells data and decrease the overall memory cost.</description>
    </item>
    
    <item>
      <title>Create, Manipulate or Remove Scenarios from Worksheets</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/create%2c&#43;manipulate&#43;or&#43;remove&#43;scenarios&#43;from&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/create%2c&#43;manipulate&#43;or&#43;remove&#43;scenarios&#43;from&#43;worksheets/</guid>
      <description>Sometimes, you need to create, manipulate or delete scenarios in spreadsheets. A scenario is a named &amp;lsquo;what if?&amp;rsquo; model that includes variable input cells linked by one or more formulas. Before creating a scenario, design the worksheet so that it contains at least one formula that depends on cells that different values can be inserted into. The following example shows how to create and remove scenarios from a worksheet in a workbook via Aspose.</description>
    </item>
    
    <item>
      <title>Reading CSV File with Multiple Encodings</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/reading&#43;csv&#43;file&#43;with&#43;multiple&#43;encodings/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/reading&#43;csv&#43;file&#43;with&#43;multiple&#43;encodings/</guid>
      <description>Sometimes, your CSV file contains multiple Encodings (Unicode, ANSI, UTF8, UTF7, etc). Aspose.Cells allows you to load such CSV files and converting them into other formats, for example, PDF or XLSX.
Aspose.Cells provides the TxtLoadOptions.IsMultiEncoded property, which you need to set to true to load your CSV file with multiple encodings properly.
The following screenshot shows a sample CSV file that contains two lines. The first line is in ANSI encoding and the second line is in Unicode encoding</description>
    </item>
    
    <item>
      <title>Get the Version Number of the Application that Created the Excel Document</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/get&#43;the&#43;version&#43;number&#43;of&#43;the&#43;application&#43;that&#43;created&#43;the&#43;excel&#43;document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/get&#43;the&#43;version&#43;number&#43;of&#43;the&#43;application&#43;that&#43;created&#43;the&#43;excel&#43;document/</guid>
      <description>Often you need to know the version number of the application that created a Microsoft Excel document. Aspose.Cells provides the Workbook.BuiltInDocumentProperties.Version property for this purpose.
The following sample code demonstrates the use of the Workbook.BuiltInDocumentProperties.Version property. It loads Excel files created with Microsoft Excel 2003, 2007, 2010 and 2013 and prints the version number of the application that created these Excel documents.
\</description>
    </item>
    
    <item>
      <title>How to set AutoRecover property of Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/how&#43;to&#43;set&#43;autorecover&#43;property&#43;of&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/how&#43;to&#43;set&#43;autorecover&#43;property&#43;of&#43;workbook/</guid>
      <description>You can use Aspose.Cells to set AutoRecover property of workbook. The default value of this property is true. When you set it false on a workbook, Microsoft Excel disables Autorecover (Autosave) on that Excel file.
Aspose.Cells provides Workbook.Settings.AutoRecover property to enable or disable this option.
The following code explains how to use Workbook.Settings.AutoRecover property of the workbook. The code first reads the default value of this property which is true, then it sets it as false and saves the workbook.</description>
    </item>
    
    <item>
      <title>Save ODS File in ODF 1.1 and 1.2 Specifications</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/save&#43;ods&#43;file&#43;in&#43;odf&#43;1.1&#43;and&#43;1.2&#43;specifications/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/save&#43;ods&#43;file&#43;in&#43;odf&#43;1.1&#43;and&#43;1.2&#43;specifications/</guid>
      <description>Aspose.Cells supports saving an ODS file (OpenDocument Spreadsheet) in the ODF (OpenDocument Format) 1.1 and 1.2 specifications. Aspose.Cells has OdsSaveOptions.IsStrictSchema11 property that specifies the use of ODF 1.1 specification for saving ODS files. The default value of this property is false, so the ODS file saved without this setting uses the 1.2 specifications.
The sample code below creates a workbook object, adds some value to cell A1 on the first worksheet and then saves the ODS file in ODF 1.</description>
    </item>
    
    <item>
      <title>Check Password to modify using Aspose.Cells</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/check&#43;password&#43;to&#43;modify&#43;using&#43;aspose.cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/check&#43;password&#43;to&#43;modify&#43;using&#43;aspose.cells/</guid>
      <description>Sometimes, you need to check if the given password matches with the Password to modify programmatically. Aspose.Cells provides WorkbookSettings.WriteProtection.ValidatePassword() method which you can use to check if the given Password to modify is correct or not.
   Contents Summary
1 Check Password to modify in Microsoft Excel
2 Check Password to modify using Aspose.Cells 2.1 Console Output
 ||      Check Password to modify in Microsoft Excel      You can assign Password to open and Password to modify while creating your workbooks in Microsoft Excel.</description>
    </item>
    
    <item>
      <title>Adding Custom Properties visible inside Document Information Panel</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/adding&#43;custom&#43;properties&#43;visible&#43;inside&#43;document&#43;information&#43;panel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/adding&#43;custom&#43;properties&#43;visible&#43;inside&#43;document&#43;information&#43;panel/</guid>
      <description>Contents Summary
1 Adding Custom Properties visible inside Document Information Panel 1.1 Related Article
 ||      Adding Custom Properties visible inside Document Information Panel      Aspose.Cells can be used to add custom properties inside the workbook object which are visible inside the Document Information Panel. You can open the Document Information Panel in Microsoft Excel using File &amp;gt; Info &amp;gt; Properties &amp;gt; Show Document Panel menu commands.</description>
    </item>
    
    <item>
      <title>Determining if the License is loaded successfully</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/determining&#43;if&#43;the&#43;license&#43;is&#43;loaded&#43;successfully/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/determining&#43;if&#43;the&#43;license&#43;is&#43;loaded&#43;successfully/</guid>
      <description>Aspose.Cells provides Workbook.IsLicensed property which you can use to determine if the license is loaded successfully or not. If you access this property before setting the license, it will return false and if you will call this property after setting the license, it will return true indicating that license has been loaded successfully.
The following code accesses the Workbook.IsLicensed property before setting a license and it returns false. Then it loads the license and accesses the property again which now returns true.</description>
    </item>
    
    <item>
      <title>How to Detect a File Format and Check if the File is Encrypted</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/how&#43;to&#43;detect&#43;a&#43;file&#43;format&#43;and&#43;check&#43;if&#43;the&#43;file&#43;is&#43;encrypted/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/how&#43;to&#43;detect&#43;a&#43;file&#43;format&#43;and&#43;check&#43;if&#43;the&#43;file&#43;is&#43;encrypted/</guid>
      <description>Sometimes you need to detect a file&amp;rsquo;s format before opening it because the file extension does not guarantee that the file content is appropriate. The file might be encrypted (a password-protected file) so it can&amp;rsquo;t be read it directly, or we should not read it. Aspose.Cells provides the FileFormatUtil.DetectFileFormat() static method and some relevant APIs that you can use to process documents.
The following sample code illustrates how to detect a file format (using the file path) and check its extension.</description>
    </item>
    
    <item>
      <title>Export Excel Data to DataTable without any Formatting</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/export&#43;excel&#43;data&#43;to&#43;datatable&#43;without&#43;any&#43;formatting/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/export&#43;excel&#43;data&#43;to&#43;datatable&#43;without&#43;any&#43;formatting/</guid>
      <description>Sometimes users want to export excel data into a data table without any formatting. For example, if some cell has a value 0.012345 and it is formatted as to display two decimal places, then when the user will export excel data to a data table, it will be exported as 0.01 and not as 0.012345. To deal with this problem, Aspose.Cells has provided ExportTableOptions.FormatStrategy property which can take one of these three values</description>
    </item>
    
    <item>
      <title>Convert Revision of XLSB to XLSM</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/convert&#43;revision&#43;of&#43;xlsb&#43;to&#43;xlsm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/convert&#43;revision&#43;of&#43;xlsb&#43;to&#43;xlsm/</guid>
      <description>Aspose.Cells now supports to fully convert revisions of XLSB file into XLSM file. Revisions are found inside the path \xl\revisions. You can view them by changing your XLSB file extension to ZIP. The \xl\revisions path contains files ending with .bin extensions.
When you convert your XLSB file into XLSM file using Aspose.Cells, these .bin files successfully converts to .xml files as shown in these two screenshots.
The following code sample shows you how to convert the XLSB file into XLSM format using Aspose.</description>
    </item>
    
    <item>
      <title>Calculate Page Setup Scaling Factor</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/calculate&#43;page&#43;setup&#43;scaling&#43;factor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/calculate&#43;page&#43;setup&#43;scaling&#43;factor/</guid>
      <description>When you set Page Setup Scaling using Fit to n page(s) wide by m tall option, Microsoft Excel calculates the Page Setup Scaling Factor. You can calculate the same thing using SheetRender.PageScale property. This property returns a double value which can be converted to percentage value. For example, if it returns 0.5 then it means scaling factor is 50%.
The following sample code illustrates how to calculate page setup scaling factor using SheetRender.</description>
    </item>
    
    <item>
      <title>Release Unmanaged Resources of the Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/release&#43;unmanaged&#43;resources&#43;of&#43;the&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/release&#43;unmanaged&#43;resources&#43;of&#43;the&#43;workbook/</guid>
      <description>Aspose.Cells provides Workbook.Dispose() method to release the unmanaged resources of the Workbook object. The dispose pattern is used only for objects that access unmanaged resources, such as file and pipe handles, registry handles, wait handles or pointers to blocks of unmanaged memory. This is because the garbage collector is very efficient at reclaiming unused managed objects, but it is unable to reclaim unmanaged objects.
Workbook object now implements the System.IDisposable interface which has a single method Dispose().</description>
    </item>
    
    <item>
      <title>Using WorkbookMetadata</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/using&#43;workbookmetadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/using&#43;workbookmetadata/</guid>
      <description>Aspose.Cells allows you to load a light-weight version of workbook into memory to edit its metadata information. Please use the WorkbookMetadata class to load the workbook.
The following sample code uses WorkbookMetadata class to edit custom document properties of a workbook. Once you open the workbook using Workbook class, you will be able to read the document properties. Here is a sample code using the WorkbookMetadata class.
\</description>
    </item>
    
    <item>
      <title>Editing Hyperlinks of Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/editing&#43;hyperlinks&#43;of&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/editing&#43;hyperlinks&#43;of&#43;worksheet/</guid>
      <description>Aspose.Cells allows you to access all the hyperlinks of the worksheet using the Worksheet.Hyperlinks collection. You can access each hyperlink from this collection one by one and edit its properties.
The following sample code accesses all the hyperlinks of the worksheet and changes their Hyperlink.Address property to the Aspose website.
\</description>
    </item>
    
    <item>
      <title>Remove Unused Styles inside the Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/remove&#43;unused&#43;styles&#43;inside&#43;the&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/remove&#43;unused&#43;styles&#43;inside&#43;the&#43;workbook/</guid>
      <description>Unused styles in excel file not only take space but also cause performance issues while converting to different formats like PDF, HTML, etc. Aspose.Cells provides the Workbook.RemoveUnusedStyles() to remove all the unused styles inside the workbook.
The following code explains the usage of Workbook.RemoveUnusedStyles(). The code loads the template excel file which you can download from the provided link. It contains an unused style named AsposeStyle, this style and all other unused styles will be removed after the execution of the code.</description>
    </item>
    
    <item>
      <title>Load or Import CSV file with Formulas</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;or&#43;import&#43;csv&#43;file&#43;with&#43;formulas/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;or&#43;import&#43;csv&#43;file&#43;with&#43;formulas/</guid>
      <description>CSV file mostly contains textual data and they do not contain any formulas. However, sometimes it happens that CSV files also contain formulas. Such CSV files should be loaded by setting the TxtLoadOptions.HasFormula as true. Once this property will be set true, Aspose.Cells will not treat formula as simple text. They will be treated as formula and Aspose.Cells formula calculation engine will process them as usual.
The following code illustrates how you can load as well as import a CSV file with formulas.</description>
    </item>
    
    <item>
      <title>Detect if Worksheet is Password Protected</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/detect&#43;if&#43;worksheet&#43;is&#43;password&#43;protected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/detect&#43;if&#43;worksheet&#43;is&#43;password&#43;protected/</guid>
      <description>It is possible to protect the workbooks and worksheets separately. For instance, a spreadsheet may contain one or more worksheets that are password-protected, however, the spreadsheet itself may or may not be protected. Aspose.Cells APIs provide the means to detect if a given worksheet is password protected or not. This article demonstrates the usage of Aspose.Cells for .NET API to achieve the same.
Aspose.Cells for .NET 8.7.0 has exposed the Protection.</description>
    </item>
    
    <item>
      <title>Verify Password Used to Protect the Worksheet</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/verify&#43;password&#43;used&#43;to&#43;protect&#43;the&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/verify&#43;password&#43;used&#43;to&#43;protect&#43;the&#43;worksheet/</guid>
      <description>Aspose.Cells APIs have enhanced the Protection class by introducing some useful properties &amp;amp; methods. One such method is the VerifyPassword which allows specifying a password as an instance of *string *and verifies if the same password has been used to protect the Worksheet.
The Protection.VerifyPassword method returns **true **if the specified password matches the password used to protect the given worksheet and **false **if the specified password does not match. Following piece of code uses the Protection.</description>
    </item>
    
    <item>
      <title>Search Data using Original Values</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/search&#43;data&#43;using&#43;original&#43;values/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/search&#43;data&#43;using&#43;original&#43;values/</guid>
      <description>Sometimes the value of the data is hidden because it is formatted in some way. For example, suppose cell D4 has formula =Sum(A1:A2) and its value is 20 but it is formatted as &amp;mdash;, then the value 20 is hidden and cannot be found using Microsoft Excel find options. However, you can find it using Aspose.Cells using LookInType.OriginalValues
The following sample code illustrates the above point. It finds cell D4 which cannot be found using Microsoft Excel find options but Aspose.</description>
    </item>
    
    <item>
      <title>Use Custom XML Parts in Aspose.Cells</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/use&#43;custom&#43;xml&#43;parts&#43;in&#43;aspose.cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/use&#43;custom&#43;xml&#43;parts&#43;in&#43;aspose.cells/</guid>
      <description>Contents Summary
1 Using Custom XML Parts in Aspose.Cells 1.1 Related Article
 ||      Using Custom XML Parts in Aspose.Cells      Custom XML Parts are the XML data that is stored by different applications like SharePoint etc inside the excel file. This data is consumed by different applications that need it. Microsoft Excel does not make use of this data so there is no GUI to add it.</description>
    </item>
    
    <item>
      <title>Filtering the kind of data while loading the workbook from template file</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/filtering&#43;the&#43;kind&#43;of&#43;data&#43;while&#43;loading&#43;the&#43;workbook&#43;from&#43;template&#43;file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/filtering&#43;the&#43;kind&#43;of&#43;data&#43;while&#43;loading&#43;the&#43;workbook&#43;from&#43;template&#43;file/</guid>
      <description>Sometimes, you want to specify which kind of data should be loaded when building the workbook from the template file. Filtering loaded data can improve the performance for your special purpose, especially when using LightCells APIs. Please use the LoadOptions.LoadFilter property for this purpose.
The following sample code loads only shape objects while loading the workbook from the template file which you can download from the given link. The following screenshot shows the template file contents and also explains that the data in Red color and Yellow background will not be loaded because LoadOptions.</description>
    </item>
    
    <item>
      <title>Detecting Empty Worksheets</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/detecting&#43;empty&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/detecting&#43;empty&#43;worksheets/</guid>
      <description>Contents Summary
1 Check for Populated Cells
2 Check for Empty Initialized Cells
3 Check for Shapes
4 Programming Sample
 ||      Check for Populated Cells      Worksheets can have one or more cells populated with values where a value can be simple (text, numeric, date/time) or a formula or a formula based value. In such a case, it is easy to detect if a given worksheet is empty or not.</description>
    </item>
    
    <item>
      <title>Load Source Excel File Without Charts</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;source&#43;excel&#43;file&#43;without&#43;charts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;source&#43;excel&#43;file&#43;without&#43;charts/</guid>
      <description>Aspose.Cells allows you to load your excel file without charts. Please use LoadOptions.LoadFilter property for this purpose.
Load Spreadsheet Without Charts
The following sample code loads the sample excel file without charts and saves it in output PDF format.
\</description>
    </item>
    
    <item>
      <title>Load Workbook with specified Printer Paper Size</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;workbook&#43;with&#43;specified&#43;printer&#43;paper&#43;size/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load&#43;workbook&#43;with&#43;specified&#43;printer&#43;paper&#43;size/</guid>
      <description>You can specify the printer paper size of your choice while loading your workbook using the LoadOptions.SetPaperSize() method. Please note, if you create a new file in MS Excel, you will find the paper size is the same as the setting of the default printer in your machine.
The following sample code illustrates the usage of LoadOptions.SetPaperSize() method. It first creates a workbook, then saves it in memory stream in XLSX format.</description>
    </item>
    
    <item>
      <title>Change Data Source of the Chart to Destination Worksheet while Copying Rows or Range</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/change&#43;data&#43;source&#43;of&#43;the&#43;chart&#43;to&#43;destination&#43;worksheet&#43;while&#43;copying&#43;rows&#43;or&#43;range/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/change&#43;data&#43;source&#43;of&#43;the&#43;chart&#43;to&#43;destination&#43;worksheet&#43;while&#43;copying&#43;rows&#43;or&#43;range/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Change Data Source of the Chart to Destination Worksheet while Copying Rows or Range
 ||      Possible Usage Scenarios      When you copy rows or range which contains charts to a new worksheet, then the data source of the chart does not change. For example, if the data source of chart is =Sheet1!</description>
    </item>
    
    <item>
      <title>Insert a Linked Picture from Web Address</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/insert&#43;a&#43;linked&#43;picture&#43;from&#43;web&#43;address/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/insert&#43;a&#43;linked&#43;picture&#43;from&#43;web&#43;address/</guid>
      <description>Sometimes you need to insert a picture from the web (http://) into a worksheet. To do so, specify the picture’s URL and the picture will be downloaded every time the spreadsheet is opened in Microsoft Excel. The image is not physically embedded into the Excel document, but points to a web resource.
Using Microsoft Excel
In Microsoft Excel (for example 2007):
 Click the Insert menu and select Picture. Specify the web address for the picture in the Insert Picture dialog.</description>
    </item>
    
  </channel>
</rss>