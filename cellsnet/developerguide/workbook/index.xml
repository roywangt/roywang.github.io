<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workbook on Aspose.Cells Product Family</title>
    <link>https://roywangt.github.io/cellsnet/developerguide/workbook/</link>
    <description>Recent content in Workbook on Aspose.Cells Product Family</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://roywangt.github.io/cellsnet/developerguide/workbook/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Add Custom XML Parts and Select them by ID</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/add&#43;custom&#43;xml&#43;parts&#43;and&#43;select&#43;them&#43;by&#43;id/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/add&#43;custom&#43;xml&#43;parts&#43;and&#43;select&#43;them&#43;by&#43;id/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Add Custom XML Parts and Select them by ID
3 Sample Code
4 Console Output
 |     Possible Usage Scenarios     Custom XML Parts are the XML data that is stored inside the Microsoft Excel documents and are used by the applications that deal with them. There is no direct way of adding them using Microsoft Excel UI at the moment.</description>
    </item>
    
    <item>
      <title>Add Digital Signature to an already signed Excel file</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/add&#43;digital&#43;signature&#43;to&#43;an&#43;already&#43;signed&#43;excel&#43;file/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/add&#43;digital&#43;signature&#43;to&#43;an&#43;already&#43;signed&#43;excel&#43;file/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Add Digital Signature to an already signed Excel file
3 Sample Code
 |     Possible Usage Scenarios     Aspose.Cells provides the Workbook.AddDigitalSignature(DigitalSignatureCollection digitalSignatureCollection) method that you can use to add digital signature to an already signed Excel file. Please note while adding a digital signature to an already signed Excel document, if the original document is Aspose.</description>
    </item>
    
    <item>
      <title>Assign and Validate Digital Signatures</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/assign&#43;and&#43;validate&#43;digital&#43;signatures/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/assign&#43;and&#43;validate&#43;digital&#43;signatures/</guid>
      <description>A digital signature provides assurance that a workbook file is valid and no one has altered it. You can create a personal digital signature by using the Microsoft Selfcert.exe or any other tool, or you can purchase a digital signature. After you create a digital signature, you must attach it to your workbook. Attaching a digital signature is similar to sealing an envelope. If an envelope arrives sealed, you have some level of assurance that no one has tampered with its contents.</description>
    </item>
    
    <item>
      <title>Create Shared Workbook with Aspose.Cells</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/create&#43;shared&#43;workbook&#43;with&#43;aspose.cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/create&#43;shared&#43;workbook&#43;with&#43;aspose.cells/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Create Shared Workbook with Aspose.Cells
3 Sample Code
 |     Possible Usage Scenarios     Microsoft Excel allows you to share the workbook as shown in the following screenshot. When you share the workbook, then more than one user can edit the workbook on the network. Aspose.Cells enables you to create a shared workbook with Workbook.</description>
    </item>
    
    <item>
      <title>Filter Defined Names while loading Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/filter&#43;defined&#43;names&#43;while&#43;loading&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/filter&#43;defined&#43;names&#43;while&#43;loading&#43;workbook/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Filter Defined Names while loading Workbook
3 Sample Code
 |     Possible Usage Scenarios     Aspose.Cells allows you to filter or remove defined names present inside the workbook. Please use LoadDataFilterOptions.DefinedNames to load defined names and use ~LoadDataFilterOptions.DefinedNames to remove them while loading the workbook. Please note, if you will remove defined names, then formulas inside the workbook may break up.</description>
    </item>
    
    <item>
      <title>How to get OData Connection Information</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/how&#43;to&#43;get&#43;odata&#43;connection&#43;information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/how&#43;to&#43;get&#43;odata&#43;connection&#43;information/</guid>
      <description>Contents Summary
1 Get OData Connection Information 1.1 Sample Code
1.2 Console Output
 |     Get OData Connection Information     There might be cases where developers need to extract OData information from the excel file. Aspose.Cells provides the Workbook.DataMashup property which returns the DataMashup information present in the Excel file. This information is represented by the DataMashup class. The DataMashup class provides the PowerQueryFormulas property that returns the PowerQueryFormulaCollction collection.</description>
    </item>
    
    <item>
      <title>Password Protect or Unprotect the Shared Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/password&#43;protect&#43;or&#43;unprotect&#43;the&#43;shared&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/password&#43;protect&#43;or&#43;unprotect&#43;the&#43;shared&#43;workbook/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Password Protect or Unprotect the Shared Workbook
3 Sample Code
 |     Possible Usage Scenarios     You can protect or unprotect the shared workbook with Microsoft Excel as shown in the following screenshot. Aspose.Cells also supports this feature with the Workbook.ProtectSharedWorkbook() and Workbook.UnprotectSharedWorkbook() methods.
Password Protect or Unprotect the Shared Workbook
The following sample code creates a workbook and protects it while enabling sharing and saves it as output Excel file.</description>
    </item>
    
    <item>
      <title>Read and Write External Connection of XLS and XLSB files</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/read&#43;and&#43;write&#43;external&#43;connection&#43;of&#43;xls&#43;and&#43;xlsb&#43;files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/read&#43;and&#43;write&#43;external&#43;connection&#43;of&#43;xls&#43;and&#43;xlsb&#43;files/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Read and Write External Connection of XLS/XLSB file
3 Sample Code
4 Console Output
 |     Possible Usage Scenarios     Aspose.Cells already supports read and write external connection of XLSX file but now, it also supports this feature for XLSB and XLS file. However, the code is the same for all types of formats.</description>
    </item>
    
    <item>
      <title>Replace text in a workbook using Regular Expression</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/replace&#43;text&#43;in&#43;a&#43;workbook&#43;using&#43;regular&#43;expression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/replace&#43;text&#43;in&#43;a&#43;workbook&#43;using&#43;regular&#43;expression/</guid>
      <description>Contents Summary
1 Replace text in a workbook using Regular Expression 1.1 Sample Code
 |     Replace text in a workbook using Regular Expression     Aspose.Cells provides the feature to replace text in a workbook using a regular expression. For this, the API provides RegexKey property of the ReplaceOptions class. Setting the RegexKey to true indicates that the searched key will be a regular expression.</description>
    </item>
    
    <item>
      <title>Stop conversion or loading using InterruptMonitor when it is taking too long</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/stop&#43;conversion&#43;or&#43;loading&#43;using&#43;interruptmonitor&#43;when&#43;it&#43;is&#43;taking&#43;too&#43;long/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/stop&#43;conversion&#43;or&#43;loading&#43;using&#43;interruptmonitor&#43;when&#43;it&#43;is&#43;taking&#43;too&#43;long/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Stop conversion or loading using InterruptMonitor when it is taking too long
3 Sample Code
 |     Possible Usage Scenarios     Aspose.Cells allows you to stop the conversion of Workbook to various formats like PDF, HTML etc. using the InterruptMonitor object when it is taking too long. The conversion process is often both CPU and Memory intensive and it is often useful to halt it when resources are limited.</description>
    </item>
    
    <item>
      <title>Support for XAdES Signature</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/support&#43;for&#43;xades&#43;signature/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/support&#43;for&#43;xades&#43;signature/</guid>
      <description>Contents Summary
1 Support for XAdES Signature 1.1 Sample Code
 |     Support for XAdES Signature     Aspose.Cells provides supports signing workbooks with XAdES Signature. For this, the API provides DigitalSignature class and XAdESType enumeration.
The following code snippet demonstrates the use of the DigitalSignature class to sign the source workbook.
Sample Code
Attachments: RegexReplace_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SampleRegexReplace.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sourceFile.</description>
    </item>
    
    <item>
      <title>Update Power Query Formula Item</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/update&#43;power&#43;query&#43;formula&#43;item/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/update&#43;power&#43;query&#43;formula&#43;item/</guid>
      <description>Contents Summary
1 Usage Scenario
2 Updating Power Query Formula Item 2.1 Sample Code
 |     Usage Scenario     There might be cases where the data source files are moved and the excel file is unable to locate the file. In such cases, Aspose.Cells API provides the option to update the Power Query Formula item by using the PowerQueryFormulaItem class to update the location of the source file.</description>
    </item>
    
    <item>
      <title>Web Extensions - Office Add-ins</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/web&#43;extensions&#43;-&#43;office&#43;add-ins/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/web&#43;extensions&#43;-&#43;office&#43;add-ins/</guid>
      <description>Contents Summary
1 Web Extensions - Office Add-ins
2 Add Web Extension 2.1 Sample Code
3 Access Web Extension Information 3.1 Sample Code
3.2 Console Output
 |     Web Extensions - Office Add-ins     Web Extensions extend Office applications and interact with the content in Office documents. Web Extensions add additional functionality to Office client to improve the user experience and productivity.</description>
    </item>
    
    <item>
      <title>Workbook and Worksheet Print Preview</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/workbook&#43;and&#43;worksheet&#43;print&#43;preview/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/workbook&#43;and&#43;worksheet&#43;print&#43;preview/</guid>
      <description>Contents Summary
1 Usage Scenario
2 Workbook and Worksheet Print Preview 2.1 Sample Code
2.2 Console Output
 |     Usage Scenario     There may be cases where Excel files with millions of pages need to be converted to PDF or images. Processing such files will consume a lot of time and resources. In such cases, the Workbook and Worksheet Print Preview feature might prove to be useful.</description>
    </item>
    
    <item>
      <title>Working with ContentTypeProperties</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbook/working&#43;with&#43;contenttypeproperties/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbook/working&#43;with&#43;contenttypeproperties/</guid>
      <description>Contents Summary
1 Working with ContentTypeProperties 1.1 Sample Code
 |     Working with ContentTypeProperties     Aspose.Cells provides Workbook.ContentTypeProperties.Add method to add custom ContentTypeProperties to an excel file. You may also make the property optional by setting the ContentTypeProperty.IsNillable property to true. The following code snippet demonstrates adding optional custom ContentTypeProperties to an excel file. The following image shows both properties that were added by the sample code.</description>
    </item>
    
  </channel>
</rss>