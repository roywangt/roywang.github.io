<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Workbook VBA Project on Aspose.Cells Product Family</title>
    <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/</link>
    <description>Recent content in Workbook VBA Project on Aspose.Cells Product Family</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Password Protect the VBA Project of Excel Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/password&#43;protect&#43;the&#43;vba&#43;project&#43;of&#43;excel&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/password&#43;protect&#43;the&#43;vba&#43;project&#43;of&#43;excel&#43;workbook/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Sample Code
 ||      Possible Usage Scenarios      You can password protect the VBA (Visual Basic for Applications) Project of workbook with Aspose.Cells using VbaProject.Protect() method.
Sample Code
The following sample code loads the sample Excel file, accesses its VBA Project and protects it with a password. Finally it saves it as the output Excel file.</description>
    </item>
    
    <item>
      <title>Find out if VBA Project is Protected</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/find&#43;out&#43;if&#43;vba&#43;project&#43;is&#43;protected/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/find&#43;out&#43;if&#43;vba&#43;project&#43;is&#43;protected/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Sample Code
3 Console Output
 ||      Possible Usage Scenarios      You can find if the VBA (Visual Basic Applications) Project of your Excel file is protected or not with Aspose.Cells using VbaProject.IsProtected property.
Sample Code
The following sample code creates a workbook and then checks if its VBA project is protected or not.</description>
    </item>
    
    <item>
      <title>Check if VBA Project is Protected and Locked for Viewing</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;vba&#43;project&#43;is&#43;protected&#43;and&#43;locked&#43;for&#43;viewing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;vba&#43;project&#43;is&#43;protected&#43;and&#43;locked&#43;for&#43;viewing/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Sample Code
3 Console Output
 ||      Possible Usage Scenarios      Aspose.Cells allows you to check if VBA (Visual Basic for Applications) Project of Excel file is protected and locked for viewing. For this, the API provides the VbaProject.IslockedForViewing property. If it is locked for viewing, then the VbaProject.IslockedForViewing property returns true.</description>
    </item>
    
    <item>
      <title>Modifying VBA or Macro Code using Aspose.Cells</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/modifying&#43;vba&#43;or&#43;macro&#43;code&#43;using&#43;aspose.cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/modifying&#43;vba&#43;or&#43;macro&#43;code&#43;using&#43;aspose.cells/</guid>
      <description>You can modify VBA or Macro Code using Aspose.Cells. Aspose.Cells has added the following namespace and classes to read and modify the VBA project in the Excel file.
 Aspose.Cells.Vba VbaProject VbaModuleCollection VbaModule  This article will show you how to change the VBA or Macro Code inside the source Excel file using Aspose.Cells.
The following sample code loads the source Excel file which has a following VBA or Macro code inside it</description>
    </item>
    
    <item>
      <title>Adding VBA Module and Code using Aspose.Cells</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/adding&#43;vba&#43;module&#43;and&#43;code&#43;using&#43;aspose.cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/adding&#43;vba&#43;module&#43;and&#43;code&#43;using&#43;aspose.cells/</guid>
      <description>Aspose.Cells allows you to add a new VBA Module and Macro Code using Aspose.Cells. Please use the Workbook.VbaProject.Modules.Add() method to add the new VBA Module inside the workbook
The following sample code creates a new workbook and adds a new VBA Module and Macro Code and saves the output in the XLSM format. Once, you will open the output XLSM file in Microsoft Excel and click the Developer &amp;gt; Visual Basic menu commands, you will see a module named &amp;ldquo;TestModule&amp;rdquo; and inside it, you will see the following macro code.</description>
    </item>
    
    <item>
      <title>Assign Macro to Form Control</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/assign&#43;macro&#43;to&#43;form&#43;control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/assign&#43;macro&#43;to&#43;form&#43;control/</guid>
      <description>Aspose.Cells allows you to assign a Macro Code to a Form Control like a Button. Please use the Shape.MarcoName property to assign a new Macro Code to a Form Control inside the workbook.
The following sample code creates a new workbook, assign a Macro Code to a Form Buttom and saves the output in the XLSM format. Once, you will open the output XLSM file in Microsoft Excel you will see the following macro code.</description>
    </item>
    
    <item>
      <title>Check if VBA project in a Workbook is Signed</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;vba&#43;project&#43;in&#43;a&#43;workbook&#43;is&#43;signed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;vba&#43;project&#43;in&#43;a&#43;workbook&#43;is&#43;signed/</guid>
      <description>You can check if your VBA project is signed or not using Microsoft Excel via Tools &amp;gt; Digital Signatures&amp;hellip; menu command. Similarly, you can check it programmatically using Aspose.Cells Workbook.VbaProject.IsSigned property.
The following code loads the workbook and checks if its VBA project is signed using Workbook.VbaProject.IsSigned property. The property will return true if the project is signed otherwise it will return false.
\</description>
    </item>
    
    <item>
      <title>Add a library reference to VBA project in workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/add&#43;a&#43;library&#43;reference&#43;to&#43;vba&#43;project&#43;in&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/add&#43;a&#43;library&#43;reference&#43;to&#43;vba&#43;project&#43;in&#43;workbook/</guid>
      <description>Sometimes, you need to add or register the library reference to the VBA project through code. You can do it using Aspose.Cells VbaProject.References.AddRegisteredReference() method.
   Contents Summary
1 Add a library reference to VBA project in Microsoft Excel
2 Add a library reference to the VBA project in a workbook using Aspose.Cells
 ||      Add a library reference to VBA project in Microsoft Excel      In Microsoft Excel, you can add a library reference to the VBA project by clicking the Tools &amp;gt; References&amp;hellip; manually.</description>
    </item>
    
    <item>
      <title>Export VBA Certificate to File or Stream</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/export&#43;vba&#43;certificate&#43;to&#43;file&#43;or&#43;stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/export&#43;vba&#43;certificate&#43;to&#43;file&#43;or&#43;stream/</guid>
      <description>Aspose.Cells allows you to export VBA Digital Certificate to stream such as file or memory stream. You can access the raw data of the VBA digital certificate using the Workbook.VbaProject.CertRawData property.
Please see the following sample code that saves the raw data of the VBA Certificate into a file. You can download the sample excel file used in this code from the provided link.
\
Attachments: sampleVBAProjectSigned.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)</description>
    </item>
    
    <item>
      <title>Check if VBA Code is Signed</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;vba&#43;code&#43;is&#43;signed/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;vba&#43;code&#43;is&#43;signed/</guid>
      <description>Aspose.Cells allows the user to check if the VBA code project is signed or not. Please use the Workbook.VbaProject.IsSigned property to check if the VBA code project is signed or not.
The following code explains how to check if the VBA code is signed or not using the Workbook.VbaProject.IsSigned property. You can use any of your excel files to test this code. For testing purposes, you can use this excel file used in the code.</description>
    </item>
    
    <item>
      <title>Digitally Sign a VBA Code Project with Certificate</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/digitally&#43;sign&#43;a&#43;vba&#43;code&#43;project&#43;with&#43;certificate/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/digitally&#43;sign&#43;a&#43;vba&#43;code&#43;project&#43;with&#43;certificate/</guid>
      <description>You can digitally sign your VBA code project using Aspose.Cells with its Workbook.VbaProject.Sign() method. Please follow these steps to check if your excel file is digitally signed with a certificate.
 Click Visual Basic from the Developer tab to open Visual Basic for Applications IDE Click Tools &amp;gt; Digital Signatures&amp;hellip; of Visual Basic for Applications IDE  and it will show the Digital Signature Form showing if the document is digitally signed with a certificate or not.</description>
    </item>
    
    <item>
      <title>Check if Digital Signature of VBA Code is Valid</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;digital&#43;signature&#43;of&#43;vba&#43;code&#43;is&#43;valid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check&#43;if&#43;digital&#43;signature&#43;of&#43;vba&#43;code&#43;is&#43;valid/</guid>
      <description>Aspose.Cells allows you to check if the digital signature of the VBA code is valid using the Workbook.VbaProject.IsValidSigned property. It will return true if the signature is valid otherwise it will return false. The digital signature of the VBA code becomes invalid when you change the VBA code.
The following code demonstrates the usage of this property using the sample excel file which you can download from the provided link. The same excel file has a valid signature but when we modify its VBA code and save the workbook and then recheck, we find its signature has become invalid.</description>
    </item>
    
    <item>
      <title>Copy VBA Macro UserForm DesignerStorage from Template to Target Workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/copy&#43;vba&#43;macro&#43;userform&#43;designerstorage&#43;from&#43;template&#43;to&#43;target&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/copy&#43;vba&#43;macro&#43;userform&#43;designerstorage&#43;from&#43;template&#43;to&#43;target&#43;workbook/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Copy VBA Macro UserForm DesignerStorage from Template to Target Workbook
3 Sample Code
 |     Possible Usage Scenarios     Aspose.Cells allows you to copy a VBA project from one Excel file into another Excel file. VBA project consists of various types of modules i.e. Document, Procedural, Designer, etc. All modules can be copied with simple code but for the Designer module, there is some extra data called Designer Storage that needs to be accessed or copied.</description>
    </item>
    
    <item>
      <title>Filter VBA Project while loading a workbook</title>
      <link>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/filter&#43;vba&#43;project&#43;while&#43;loading&#43;a&#43;workbook/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/filter&#43;vba&#43;project&#43;while&#43;loading&#43;a&#43;workbook/</guid>
      <description>Contents Summary
1 Possible Usage Scenarios
2 Sample Code
 ||      Possible Usage Scenarios      Some .xlsm/.xslb files have an extremely large amount of macros (or very, very long macros). Aspose.Cells will unconditionally load this (meta) data when opening such workbooks. You may require to control this though LoadDataFilterOptions when you really only need to extract sheet names for a large number of workbooks thus skipping over such unneeded content.</description>
    </item>
    
  </channel>
</rss>