<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation – Working with Worksheet</title>
    <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/</link>
    <description>Recent content in Working with Worksheet on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: Accessing Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/accessing&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/accessing&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--accessing-worksheet&#34;&gt;Aspose.Cells for .NET : Accessing Worksheet&lt;/h1&gt;
&lt;p&gt;A worksheet is an integral part of an Excel file. In fact, an Excel file is composed of one or more worksheets. Each worksheet can be composed of up tp 65,536 rows and 256 columns only. It is the worksheet that holds data in an Excel file.&lt;/p&gt;
&lt;p&gt;Aspose.Cells.GridDesktop can create and manipulate existing and new Excel files so there is, of course, a way to access worksheets using Aspose.Cells.GridDesktop. This topic discusses how.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#using-worksheet-index&#34;&gt;Using Worksheet Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#using-worksheet-name&#34;&gt;Using Worksheet Name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#accessing-an-active-worksheet&#34;&gt;Accessing an Active Worksheet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;3.1 &lt;a href=&#34;#using-the-acrivesheetindex-property&#34;&gt;Using the AcriveSheetIndex Property&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3.2 &lt;a href=&#34;#using-the-getactiveworksheet-method&#34;&gt;Using the GetActiveWorksheet Method&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;using-worksheet-index&#34;&gt;Using Worksheet Index&lt;/h2&gt;
&lt;p&gt;Developers can access an instance of any Worksheet by using the worksheet index of any desired worksheet as shown below in the example. This approach is good for iterating through a number of worksheets in an Excel file.&lt;/p&gt;
&lt;h2 id=&#34;using-worksheet-name&#34;&gt;Using Worksheet Name&lt;/h2&gt;
&lt;p&gt;If the name of the worksheet is known, it is possible to access a worksheet using its name as shown below.&lt;/p&gt;
&lt;h2 id=&#34;accessing-an-active-worksheet&#34;&gt;Accessing an Active Worksheet&lt;/h2&gt;
&lt;p&gt;It is possbile that an Excel file will have more than one worksheet. The one htat a user is working on is called the active worksheet. It is possible to access the active sheet.&lt;/p&gt;
&lt;p&gt;To access an active worksheet, Aspose.Cells.GridDesktop offers two approaches:&lt;/p&gt;
&lt;h3 id=&#34;using-the-acrivesheetindex-property&#34;&gt;Using the AcriveSheetIndex Property&lt;/h3&gt;
&lt;p&gt;One way to access an active worksheet using Aspose.Cells.GridDesktop control is to use the GridDesktop control&amp;rsquo;s &lt;code&gt;ActiveSheetIndex&lt;/code&gt; property. Using this property, it is possible to get the index of the active worksheet in the Aspose.Cells.GridDesktop control. Then that index can be used to access the worksheet in a traditional manner as shown below.&lt;/p&gt;
&lt;h3 id=&#34;using-the-getactiveworksheet-method&#34;&gt;Using the GetActiveWorksheet Method&lt;/h3&gt;
&lt;p&gt;The other approach is to call the GridDesktop control&amp;rsquo;s &lt;code&gt;GetActiveWorksheet&lt;/code&gt; method. This method provides a reference of the worksheet that is currently active in Aspose.Cells.GridDesktop control as shown below.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Add or Insert a Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/add&#43;or&#43;insert&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/add&#43;or&#43;insert&#43;a&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--add-or-insert-a-worksheet&#34;&gt;Aspose.Cells for .NET : Add or Insert a Worksheet&lt;/h1&gt;
&lt;p&gt;In this topic, we will discuss the techniques to add or insert worksheets in an Excel file using Aspose.Cells.GridDesktop. The difference between adding and inserting worksheets is that in addition, a worksheet is simply added at the end of the worksheets collection of the Excel file however insertion means adding a worksheet to a specific position in the worksheets collection.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#adding-a-worksheet&#34;&gt;Adding a Worksheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#inserting-a-worksheet&#34;&gt;Inserting a Worksheet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;adding-a-worksheet&#34;&gt;Adding a Worksheet&lt;/h2&gt;
&lt;p&gt;To add a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to a form.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;Worksheet&lt;/code&gt; collection&amp;rsquo;s &lt;code&gt;Add&lt;/code&gt; method in the GridDesktop control.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Many overloaded versions of the &lt;code&gt;Add&lt;/code&gt; method are available. Using the above overloaded version, for example, a worksheet is added to the Excel file with a default sheet name. Using other overloaded versions of the &lt;code&gt;Add&lt;/code&gt; method, it is possible to define the name as shown below in the example.&lt;/p&gt;
&lt;h2 id=&#34;inserting-a-worksheet&#34;&gt;Inserting a Worksheet&lt;/h2&gt;
&lt;p&gt;To insert a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the Aspose.Cells.GridDesktop control to a form.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;Worksheets&lt;/code&gt; collection&amp;rsquo;s &lt;code&gt;Insert&lt;/code&gt; method in the GridDesktop control.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;IMPORTANT: Microsoft Excel (97-2003 XLS) supports Excel sheets with up to 65,536 rows and 256 columns. Aspose.Cells.GridDesktop follows the same standards. In the Aspose.Cells.GridDesktop control, developers can add or insert worksheets with more rows and columns than the standard limit but when they try to save the Grid data to an Excel file, an exception will be thrown. It means that only data contained in the 65,536 rows and 256 columns can be saved to an Excel XLS file using Aspose.Cells.GridDesktop, if you use XLSX (MS Excel 2007/2010) file format, there is no such limitation though.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Remove a Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/remove&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/remove&#43;a&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--remove-a-worksheet&#34;&gt;Aspose.Cells for .NET : Remove a Worksheet&lt;/h1&gt;
&lt;p&gt;This topic discusses removing worksheets using the Aspose.Cells.GridDesktop control. There are a few simple approaches to accomplish this basic task.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#removing-a-worksheet&#34;&gt;Removing a Worksheet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href=&#34;#using-worksheet-index&#34;&gt;Using Worksheet Index&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.2 &lt;a href=&#34;#using-worksheet-name&#34;&gt;Using Worksheet Name&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;removing-a-worksheet&#34;&gt;Removing a Worksheet&lt;/h2&gt;
&lt;p&gt;To remove a worksheet using Aspose.Cells.GridDesktop control, please follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add the Aspose.Cells.GridDesktop control to a form.&lt;/li&gt;
&lt;li&gt;Call the &lt;code&gt;Worksheets&lt;/code&gt; collection&amp;rsquo;s &lt;code&gt;Remove&lt;/code&gt; method in the GridDesktop control.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;using-worksheet-index&#34;&gt;Using Worksheet Index&lt;/h3&gt;
&lt;p&gt;In this approach, simply pass the worksheet index (in the worksheets collection of the grid) of the worksheet to be removed.&lt;/p&gt;
&lt;h3 id=&#34;using-worksheet-name&#34;&gt;Using Worksheet Name&lt;/h3&gt;
&lt;p&gt;If the name of the worksheet is known, it is possible to remove a specific worksheet by specifying its name.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Remove&lt;/code&gt; is a method. Use it to remove a worksheet using its index (in the worksheets collection) or use &lt;code&gt;RemoveAt&lt;/code&gt; method to remove the worksheet using its index/name.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Rename a Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/rename&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/rename&#43;a&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--rename-a-worksheet&#34;&gt;Aspose.Cells for .NET : Rename a Worksheet&lt;/h1&gt;
&lt;p&gt;This topic discusses how to change the name of a worksheet using Aspose.Cells.GridDesktop.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;Renaming a worksheet is a simple task that can be very useful. For example, if you want to label worksheets so that it is obvious what each one contains. For example, a model might have 12 worksheets, each named by month, to hold expense information.&lt;/p&gt;
&lt;p&gt;To rename a worksheet using Aspose.Cells.GridDesktop control:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add a Aspose.Cells.GridDesktop control to a form.&lt;/li&gt;
&lt;li&gt;Get the reference of a desired worksheet.&lt;/li&gt;
&lt;li&gt;Set the name of the worksheet using its reference.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Before changing the name of the worksheet, it&amp;rsquo;s required to access the reference of that worksheet. There are many ways to access a worksheet reference. To learn about those ways, please refer to &lt;a href=&#34;https://docs2.aspose.com/cells/net/developerguide/griddesktop/worksheet/accessing+worksheet&#34;&gt;Accessing Worksheets&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Importing Data from a DataTable to Grid</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/importing&#43;data&#43;from&#43;a&#43;datatable&#43;to&#43;grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/importing&#43;data&#43;from&#43;a&#43;datatable&#43;to&#43;grid/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--importing-data-from-a-datatable-to-grid&#34;&gt;Aspose.Cells for .NET : Importing Data from a DataTable to Grid&lt;/h1&gt;
&lt;p&gt;Since the release of the .NET Framework, Microsoft has provided an excellent way to store data in offline mode in the form of a &lt;code&gt;DataTable&lt;/code&gt; object. Understanding the needs of developers, Aspose.Cells.GridDesktop also supports importing data from a data table. This topic discusses how to do this.&lt;/p&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;To import the contents of a data table using Aspose.Cells.GridDesktop control:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to a form.&lt;/li&gt;
&lt;li&gt;Create a &lt;code&gt;DataTable&lt;/code&gt; object that contains the data to be imported.&lt;/li&gt;
&lt;li&gt;Get the reference of a desired worksheet.&lt;/li&gt;
&lt;li&gt;Import the data table contents to the worksheet.&lt;/li&gt;
&lt;li&gt;Set the column headers of the worksheet according to column names of the data table.&lt;/li&gt;
&lt;li&gt;Set the width of the columns, if desired/&lt;/li&gt;
&lt;li&gt;Display the worksheet.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the example given below, we have created a &lt;code&gt;DataTable&lt;/code&gt; object and filled it with some data fetched from a database table named Products. Finally, we have imported data from that &lt;code&gt;DataTable&lt;/code&gt; object to a desired worksheet using Aspose.Cells.GridDesktop.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Exporting Data from Grid</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/exporting&#43;data&#43;from&#43;grid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/exporting&#43;data&#43;from&#43;grid/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--exporting-data-from-grid&#34;&gt;Aspose.Cells for .NET : Exporting Data from Grid&lt;/h1&gt;
&lt;p&gt;In our previous topic, we have talked about importing the contents of a &lt;code&gt;DataTable&lt;/code&gt; to &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; control but we purposely didn&amp;rsquo;t mention that &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; supports the reverse process too. So, in this topic, we will discuss about exporting the data inside &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; control to a &lt;code&gt;DataTable&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#exporting-grid-contents&#34;&gt;Exporting Grid Contents&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href=&#34;#exporting-to-a-specific-datatable&#34;&gt;Exporting To a Specific DataTable&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.2 &lt;a href=&#34;#exporting-to-a-new-datatable&#34;&gt;Exporting To a New DataTable&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;exporting-grid-contents&#34;&gt;Exporting Grid Contents&lt;/h2&gt;
&lt;h3 id=&#34;exporting-to-a-specific-datatable&#34;&gt;Exporting To a Specific DataTable&lt;/h3&gt;
&lt;p&gt;To export the Grid contents to a specific &lt;code&gt;DataTable&lt;/code&gt; object, please follow the steps below:Add &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; control to your &lt;strong&gt;Form&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a specific &lt;code&gt;DataTable&lt;/code&gt; object according to your needs.&lt;/li&gt;
&lt;li&gt;Export the data of a selected &lt;strong&gt;Worksheet&lt;/strong&gt; to your specified &lt;code&gt;DataTable&lt;/code&gt; object.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the example given below, we have created a specific &lt;code&gt;DataTable&lt;/code&gt; object having four columns inside. Finally, we exported worksheet data (starting from first cell with 69 rows and 4 columns) to a &lt;code&gt;DataTable&lt;/code&gt; object already created by us.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;exporting-to-a-new-datatable&#34;&gt;Exporting To a New DataTable&lt;/h3&gt;
&lt;p&gt;Sometimes, developers may not be interested in creating their own &lt;code&gt;DataTable&lt;/code&gt; object and might have a simple need to just export the worksheet data to a new &lt;code&gt;DataTable&lt;/code&gt; object. It would be more quickest way for the developers to just export the worksheet data.&lt;/p&gt;
&lt;p&gt;In the example given below, we have tried a different way to explain the usage of &lt;code&gt;ExportDataTable&lt;/code&gt; method. We have taken the reference of the worksheet that is currently active and then we exported the complete data of that active worksheet to a new &lt;code&gt;DataTable&lt;/code&gt; object. Now, this &lt;code&gt;DataTable&lt;/code&gt; object can be used in any way a developer wants. Just for an instance, a developer may bind this &lt;code&gt;DataTable&lt;/code&gt; object to a &lt;code&gt;DataGrid&lt;/code&gt; to view the data.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In above case, we will use an overloaded version of &lt;code&gt;ExportDataTable&lt;/code&gt; method that will simply return a new &lt;code&gt;DataTable&lt;/code&gt; object containing data exported from worksheet.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Working with Validations in Worksheets</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/working&#43;with&#43;validations&#43;in&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/working&#43;with&#43;validations&#43;in&#43;worksheets/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--working-with-validations-in-worksheets&#34;&gt;Aspose.Cells for .NET : Working with Validations in Worksheets&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; also supports adding validations (or validation rules) to the cells of a worksheet. By applying validation rules to cells, developers can restrict users to enter data into Grid in a specific format. Different modes of validations are supported by &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt;. In this topic, we will not only discuss about those validation modes but also explain the manipulation of these validations.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#validation-modes&#34;&gt;Validation Modes&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href=&#34;#is-required-validation-mode&#34;&gt;Is Required Validation Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.2 &lt;a href=&#34;#regular-expressions-validation-mode&#34;&gt;Regular Expressions Validation Mode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.3 &lt;a href=&#34;#custom-validation-mode&#34;&gt;Custom Validation Mode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#working-with-validations-in-%60aspose.cells.griddesktop%60&#34;&gt;Working With Validations in &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt;&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;2.1 &lt;a href=&#34;#adding-validation&#34;&gt;Adding Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.2 &lt;a href=&#34;#implementing-%60icustomvalidation%60&#34;&gt;Implementing &lt;code&gt;ICustomValidation&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.3 &lt;a href=&#34;#accessing-validation&#34;&gt;Accessing Validation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.4 &lt;a href=&#34;#removing-validation&#34;&gt;Removing Validation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;validation-modes&#34;&gt;Validation Modes&lt;/h2&gt;
&lt;p&gt;There are three validation modes supported by &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is Required Validation Mode&lt;/li&gt;
&lt;li&gt;Regular Expressions Validation Mode&lt;/li&gt;
&lt;li&gt;Custom Validation Mode&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;is-required-validation-mode&#34;&gt;Is Required Validation Mode&lt;/h3&gt;
&lt;p&gt;In this validation mode, users are restricted to enter values into specified cells. Once &lt;strong&gt;Is Required Validation&lt;/strong&gt; is applied on a worksheet cell, it becomes must for a user to enter value into that cell.&lt;/p&gt;
&lt;h3 id=&#34;regular-expressions-validation-mode&#34;&gt;Regular Expressions Validation Mode&lt;/h3&gt;
&lt;p&gt;In this mode, restrictions are applied on worksheet cells for the users to submit data into cells in a specific format. The pattern of data format is provided in the form of a &lt;strong&gt;Regular Expression&lt;/strong&gt;.&lt;/p&gt;
&lt;h3 id=&#34;custom-validation-mode&#34;&gt;Custom Validation Mode&lt;/h3&gt;
&lt;p&gt;To use &lt;strong&gt;Custom Validation&lt;/strong&gt;, It is must for developers to implement &lt;code&gt;Aspose.Cells.GridDesktop.ICustomValidation&lt;/code&gt; interface. The interface provides a &lt;strong&gt;Validate&lt;/strong&gt; method. This method returns &lt;code&gt;true&lt;/code&gt; if data is valid otherwise returns &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;working-with-validations-in-asposecellsgriddesktop&#34;&gt;Working With Validations in &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt;&lt;/h2&gt;
&lt;h3 id=&#34;adding-validation&#34;&gt;Adding Validation&lt;/h3&gt;
&lt;p&gt;To add any kind of validation to a worksheet cell, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add a desired validation to the &lt;strong&gt;Validations&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; to specify that which validation would be applied on which cell.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the above figure, we have also mentioned the validation rules in front of cells where these validation rules are applied. If any invalid value (that is not valid according to the validation rule defined for that cell) is entered, a &lt;strong&gt;&lt;code&gt;MessageBox&lt;/code&gt;&lt;/strong&gt; would appear to notify user about the invalid entry.&lt;/p&gt;
&lt;h3 id=&#34;implementing-icustomvalidation&#34;&gt;Implementing &lt;code&gt;ICustomValidation&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In the above code snippet, we have added a custom validation in &lt;strong&gt;A8&lt;/strong&gt; cell but we have not implemented that custom validation yet. As we have explained in the beginning of this topic that to apply custom validation, we have to implement &lt;strong&gt;ICustomValidation&lt;/strong&gt; interface. So, let&amp;rsquo;s try creating a class to implement &lt;strong&gt;ICustomValidation&lt;/strong&gt; interface.&lt;/p&gt;
&lt;p&gt;In the code snippet given below, we have implemented a custom validation to perform the following checks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check if the cell&amp;rsquo;s address is accurate in which the validation is added&lt;/li&gt;
&lt;li&gt;Check if the data type of the cell&amp;rsquo;s value is double&lt;/li&gt;
&lt;li&gt;Check if the value of the cell is greater than 100&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;accessing-validation&#34;&gt;Accessing Validation&lt;/h3&gt;
&lt;p&gt;Once a validation is added to a specific worksheet cell, it may be required by developers to access and modify the the attributes of a specific validation at run-time. So, &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; has made it simple for developers to accomplish this task.&lt;/p&gt;
&lt;p&gt;To access a specific validation, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access a desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access a specific &lt;strong&gt;Validation&lt;/strong&gt; in the worksheet by specifying the cell name on which the validation was applied&lt;/li&gt;
&lt;li&gt;Edit &lt;strong&gt;Validation&lt;/strong&gt; attributes, if desired&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Validations&lt;/strong&gt; collection has two indexers. One indexer (that is used in the example below) allows to access a &lt;strong&gt;Validation&lt;/strong&gt; object by taking a cell name as its index while the other indexer takes two parameters (that is row and column numbers) to perform the same task.&lt;/p&gt;
&lt;h3 id=&#34;removing-validation&#34;&gt;Removing Validation&lt;/h3&gt;
&lt;p&gt;To remove a specific validation from the worksheet, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access a desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Remove a specific &lt;strong&gt;Validation&lt;/strong&gt; from the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell name on which the validation was applied&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Sorting Worksheet Data</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/sorting&#43;worksheet&#43;data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/sorting&#43;worksheet&#43;data/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--sorting-worksheet-data&#34;&gt;Aspose.Cells for .NET : Sorting Worksheet Data&lt;/h1&gt;
&lt;p&gt;Sorting is an important routine task that we mostly use while processing data. In this topic, we will discuss with the help of a simple example that how can we sort data in a worksheet.&lt;/p&gt;
&lt;h2 id=&#34;sorting-worksheet-data&#34;&gt;Sorting Worksheet Data&lt;/h2&gt;
&lt;p&gt;To sort data in a worksheet using the API of Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First of all create a global object of &lt;strong&gt;CellRange&lt;/strong&gt; so that it can be accessed anywhere in the scope of your class&lt;/li&gt;
&lt;li&gt;Create an event handler for &lt;strong&gt;SelectedCellRangeChanged&lt;/strong&gt; event of &lt;strong&gt;GridDesktop&lt;/strong&gt;. &lt;strong&gt;SelectedCellRangeChanged&lt;/strong&gt; event is triggered every time when a cell range selected by a user is changed. For example, if a user selects cells (containing data to be sorted) then every time his range of selection would change, this event would be triggered.&lt;/li&gt;
&lt;li&gt;The event handler provides &lt;strong&gt;CellRangeEventArgs&lt;/strong&gt; argument that further provides the update range of cells (selected by user) in the form of a &lt;strong&gt;CellRange&lt;/strong&gt; object. So, in this event handler, we will assign this &lt;strong&gt;CellRange&lt;/strong&gt; object (containing updated range of cells) to the global &lt;strong&gt;CellRange&lt;/strong&gt; object so that it can also be used in other part of the code. To make sure that we don&amp;rsquo;t lost the range of cells, we will write event handler code inside a condition&lt;/li&gt;
&lt;li&gt;Now we can write some code to sort worskheet data. First of all, access a desired worksheet&lt;/li&gt;
&lt;li&gt;Create a &lt;strong&gt;SortRange&lt;/strong&gt; object that will keep the range of cells whose data is to be sorted. In &lt;strong&gt;SortRange&lt;/strong&gt; constructor, we can specify the worksheet, indices of start row and column, number of rows and columns to sort, orientation of sorting (like top to bottom or left to right) etc.&lt;/li&gt;
&lt;li&gt;Now we can call &lt;strong&gt;Sort&lt;/strong&gt; method of &lt;strong&gt;SortRange&lt;/strong&gt; object to perform the sorting of data. In &lt;strong&gt;Sort&lt;/strong&gt; method, we can specify the index of column or row to be sorted and sorting order (that can be &lt;strong&gt;Ascending&lt;/strong&gt; or &lt;strong&gt;Descending&lt;/strong&gt; according to your requirements)&lt;/li&gt;
&lt;li&gt;Finally, we can call &lt;strong&gt;Invalidate&lt;/strong&gt; method of &lt;strong&gt;GridDesktop&lt;/strong&gt; to redraw cells.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the example given below, we have demonstrated about how to sort data in a column.&lt;/p&gt;
&lt;p&gt;Create a global object of &lt;code&gt;CellRange&lt;/code&gt; and &lt;strong&gt;SelectedCellRangeChanged&lt;/strong&gt; event of GridDesktop. Now write the code like given below:&lt;/p&gt;
&lt;p&gt;Now we write method for &lt;strong&gt;Ascending Sort&lt;/strong&gt;. You can create a button for &lt;strong&gt;Ascending Sort&lt;/strong&gt; and write below code inside its &lt;strong&gt;Click&lt;/strong&gt; Event.&lt;/p&gt;
&lt;p&gt;Finally, we write some code to achieve &lt;strong&gt;Descending Sort&lt;/strong&gt; functionality. Create a &lt;strong&gt;Descending Sort&lt;/strong&gt; button and write below code inside its &lt;strong&gt;Click&lt;/strong&gt; Event.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Managing Hyperlinks in a Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;hyperlinks&#43;in&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;hyperlinks&#43;in&#43;a&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--managing-hyperlinks-in-a-worksheet&#34;&gt;Aspose.Cells for .NET : Managing Hyperlinks in a Worksheet&lt;/h1&gt;
&lt;p&gt;Using Aspose.Cells.GridDesktop, it is also possible to add hyperlinks to simple values stored in cells of a worksheet. Let&amp;rsquo;s say that in some cells, you might have some values that you would like to link with more detailed information on a webpage. In that case, it would be desirable to add a hyperlink to that cell so that if a user click on the cell then he would be directed to that webpage. In this topic, we will explain that how developers can add and manipulate hyperlinks in their worksheets.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#adding-hyperlinks&#34;&gt;Adding Hyperlinks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#accessing-hyperlinks&#34;&gt;Accessing Hyperlinks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#removing-hyperlinks&#34;&gt;Removing Hyperlinks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;adding-hyperlinks&#34;&gt;Adding Hyperlinks&lt;/h2&gt;
&lt;p&gt;To add a hyperlink to a cell using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access a desired &lt;strong&gt;Cell&lt;/strong&gt; in the worksheet that will be hyperlinked&lt;/li&gt;
&lt;li&gt;Add some value to the cell to be hyperlinked&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;Hyperlink&lt;/strong&gt; to the worksheet by specifying the cell name on which the hyperlink would be applied&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Hyperlinks&lt;/strong&gt; collection in the &lt;strong&gt;Worksheet&lt;/strong&gt; object provides an overloaded &lt;strong&gt;Add&lt;/strong&gt; method. Developers can use any overloaded version of &lt;strong&gt;Add&lt;/strong&gt; method according to their specific needs.&lt;/p&gt;
&lt;p&gt;Below code will add a hyperlink to &lt;strong&gt;B2&lt;/strong&gt; and &lt;strong&gt;C3&lt;/strong&gt; cells of the worksheet.&lt;/p&gt;
&lt;h2 id=&#34;accessing-hyperlinks&#34;&gt;Accessing Hyperlinks&lt;/h2&gt;
&lt;p&gt;Once a hyperlink will be added to a cell, it may also be required to access and modify the hyperlink at runtime. To do so, developers can simply access the hyperlink from the &lt;strong&gt;Hyperlinks&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using cell name or its location in terms of row and column number) to which the hyperlink is added. Once the hyperlink is accessed, developers can modify its URL at runtime.&lt;/p&gt;
&lt;h2 id=&#34;removing-hyperlinks&#34;&gt;Removing Hyperlinks&lt;/h2&gt;
&lt;p&gt;To remove an existing hyperlink, developers can simply access a desired worksheet and then &lt;strong&gt;Remove&lt;/strong&gt; hyperlink from the &lt;strong&gt;Hyperlinks&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the hyperlinked cell (using its name or row &amp;amp; column number).&lt;/p&gt;
&lt;p&gt;If you want to add a hyperlink to a cell and want to display the hyperlink URL in the cell instead of some value then don&amp;rsquo;t add any value to the cell and simply add the hyperlink to that cell. Doing so, the cell will be hyperlinked and the hyperlink URL will also be displayed in the cell as its value.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Managing Pictures in a Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;pictures&#43;in&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;pictures&#43;in&#43;a&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--managing-pictures-in-a-worksheet&#34;&gt;Aspose.Cells for .NET : Managing Pictures in a Worksheet&lt;/h1&gt;
&lt;p&gt;Most of the people believe that a picture can explain things better than words. That&amp;rsquo;s why Aspose.Cells.GridDesktop supports adding pictures to worksheets to execute this belief of the people. In this topic, we will discuss about adding and manipulating pictures in worksheets.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#adding-pictures&#34;&gt;Adding Pictures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#accessing-pictures&#34;&gt;Accessing Pictures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#removing-pictures&#34;&gt;Removing Pictures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;adding-pictures&#34;&gt;Adding Pictures&lt;/h2&gt;
&lt;p&gt;To add a hyperlink to a cell using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;Picture&lt;/strong&gt; to the worksheet by specifying the file path of picture and cell name where the picture will be inserted&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Pictures&lt;/strong&gt; collection in the &lt;strong&gt;Worksheet&lt;/strong&gt; object provides an overloaded &lt;strong&gt;Add&lt;/strong&gt; method. Developers can use any overloaded version of &lt;strong&gt;Add&lt;/strong&gt; method according to their specific needs. Using these overloaded versions of &lt;strong&gt;Add&lt;/strong&gt; method, it is possible to add a picture from file, stream or &lt;strong&gt;Image&lt;/strong&gt; object.&lt;/p&gt;
&lt;p&gt;Below is the sample code for adding pictures into worksheets.&lt;/p&gt;
&lt;h2 id=&#34;accessing-pictures&#34;&gt;Accessing Pictures&lt;/h2&gt;
&lt;p&gt;To access and modify an existing picture in the worksheet, developers can access the picture from the &lt;strong&gt;Pictures&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using cell name or its location in terms of row and column number) in which the picture is inserted. Once the picture is accessed, developers can modify its Image at runtime.&lt;/p&gt;
&lt;p&gt;Below is the sample code to access and modify the pictures in a worksheet.&lt;/p&gt;
&lt;h2 id=&#34;removing-pictures&#34;&gt;Removing Pictures&lt;/h2&gt;
&lt;p&gt;To remove an existing picture, developers can simply access a desired worksheet and then &lt;strong&gt;Remove&lt;/strong&gt; picture from the &lt;strong&gt;Pictures&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using its name or row &amp;amp; column number) that contains the picture.&lt;/p&gt;
&lt;p&gt;In code below it is shown how to remove pictures from worksheet.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Managing Comments in a Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;comments&#43;in&#43;a&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;comments&#43;in&#43;a&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--managing-comments-in-a-worksheet&#34;&gt;Aspose.Cells for .NET : Managing Comments in a Worksheet&lt;/h1&gt;
&lt;p&gt;In MS Excel, you must be familiar with the comments feature that allows users to add comments to cells. This feature is helpful in those cases when it is required to provide some information to the users when they are about to enter values into the cells. Whenever a user places his mouse cursor on a commented cell, a small popup message is appeared to provide some information to the user. Using Aspose.Cells.GridDesktop, developers can create comments on cells. In this topic, we will explain the usage of this feature in detail.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#adding-comments&#34;&gt;Adding Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#accessing-comments&#34;&gt;Accessing Comments&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;3 &lt;a href=&#34;#removing-comments&#34;&gt;Removing Comments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;adding-comments&#34;&gt;Adding Comments&lt;/h2&gt;
&lt;p&gt;To add a comment to a cell using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;Comment&lt;/strong&gt; to the worksheet by specifying the cell (using its name or row &amp;amp; column number) in which the comment would be added.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The code below will add comments to the &lt;strong&gt;b2&lt;/strong&gt; and &lt;strong&gt;b4&lt;/strong&gt; cells of the worksheet.&lt;/p&gt;
&lt;p&gt;**&lt;br&gt;
Comments** collection in the **Worksheet** object provides an overloaded **Add** method. Developers can use any overloaded version of **Add** method according to their specific needs.&lt;/p&gt;
&lt;h2 id=&#34;accessing-comments&#34;&gt;Accessing Comments&lt;/h2&gt;
&lt;p&gt;To access and modify an existing comment in the worksheet, developers can access the comment from the &lt;strong&gt;Comments&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using cell name or its location in terms of row and column number) in which the comment is inserted. Once the comment is accessed, developers can modify its Text at runtime.&lt;/p&gt;
&lt;h2 id=&#34;removing-comments&#34;&gt;Removing Comments&lt;/h2&gt;
&lt;p&gt;To remove an existing comment, developers can simply access a desired worksheet and then &lt;strong&gt;Remove&lt;/strong&gt; comment from the &lt;strong&gt;Comments&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using its name or row &amp;amp; column number) containing comment.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Adding Cell Controls in Worksheets</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/adding&#43;cell&#43;controls&#43;in&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/adding&#43;cell&#43;controls&#43;in&#43;worksheets/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--adding-cell-controls-in-worksheets&#34;&gt;Aspose.Cells for .NET : Adding Cell Controls in Worksheets&lt;/h1&gt;
&lt;p&gt;Cell controls are in fact those controls that can be added to worksheets. We call them &lt;strong&gt;Cell Controls&lt;/strong&gt; because these controls are displayed in cells. In this topic, we will discuss about adding and handling the events of these cell controls.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#introduction&#34;&gt;Introduction&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href=&#34;#adding-button&#34;&gt;Adding Button&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1.1 &lt;a href=&#34;#event-handling-of-button&#34;&gt;Event Handling of Button&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.1.2 &lt;a href=&#34;#specifying-a-background-image-for-the-button-control&#34;&gt;Specifying a Background Image for the Button Control&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1.2 &lt;a href=&#34;#adding-checkbox&#34;&gt;Adding CheckBox&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.2.1 &lt;a href=&#34;#event-handling-of-checkbox&#34;&gt;Event Handling of CheckBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;1.3 &lt;a href=&#34;#adding-combobox&#34;&gt;Adding ComboBox&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.3.1 &lt;a href=&#34;#event-handling-of-combobox&#34;&gt;Event Handling of ComboBox&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Currently, Aspose.Cells.GridDesktop support adding three types of cell controls, which include the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Button&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CheckBox&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ComboBox&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these controls are derived from an abstract class, &lt;strong&gt;CellControl&lt;/strong&gt;. Each worksheet contains a collection of &lt;strong&gt;Controls&lt;/strong&gt;. New cell controls can be added and existing ones can be accessed using this &lt;strong&gt;Controls&lt;/strong&gt; collection easily.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; If you want to add cell controls to all cells of a column instead of adding one by one then you can refer to &lt;a href=&#34;https://docs2.aspose.com/cells/net/developerguide/griddesktop/worksheet/adding+cell+controls+in+worksheets&#34;&gt;Managing Cell Controls in Columns.&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;adding-button&#34;&gt;Adding Button&lt;/h3&gt;
&lt;p&gt;To add a button into the worksheet using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;Button&lt;/strong&gt; to the &lt;strong&gt;Controls&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While adding &lt;strong&gt;Button&lt;/strong&gt; , we can specify the cell&amp;rsquo;s location (where to display it), width &amp;amp; height and the caption of the button.&lt;/p&gt;
&lt;h4 id=&#34;event-handling-of-button&#34;&gt;Event Handling of Button&lt;/h4&gt;
&lt;p&gt;We have discussed about adding &lt;strong&gt;Button&lt;/strong&gt; control to the &lt;strong&gt;Worksheet&lt;/strong&gt; but what is the advantage of just having a button in the worksheet if we cannot use it. So, here comes the need of event handling of the button.&lt;/p&gt;
&lt;p&gt;To handle the &lt;strong&gt;Click&lt;/strong&gt; event of the &lt;strong&gt;Button&lt;/strong&gt; control, Aspose.Cells.GridDesktop provides &lt;strong&gt;CellButtonClick&lt;/strong&gt; event that should be implemented by the developers according to their needs. For an instance, we have just displayed a message when the button is clicked as shown below:&lt;/p&gt;
&lt;h4 id=&#34;specifying-a-background-image-for-the-button-control&#34;&gt;Specifying a Background Image for the Button Control&lt;/h4&gt;
&lt;p&gt;We can set background image/picture for the button control with its label/text as shown in the code below:&lt;/p&gt;
&lt;p&gt;**&lt;br&gt;
IMPORTANT:** All events of cell controls contain a **CellControlEventArgs** argument that provides the row and column numbers of the cell that contains the cell control (whose event is triggered).&lt;/p&gt;
&lt;h3 id=&#34;adding-checkbox&#34;&gt;Adding CheckBox&lt;/h3&gt;
&lt;p&gt;To add a checkbox into the worksheet using Aspose.Cells.GridDesktop, please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;CheckBox&lt;/strong&gt; to the &lt;strong&gt;Controls&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While adding &lt;strong&gt;CheckBox&lt;/strong&gt; , we can specify the cell&amp;rsquo;s location (where to display it) and state of the checkbox.&lt;/p&gt;
&lt;h4 id=&#34;event-handling-of-checkbox&#34;&gt;Event Handling of CheckBox&lt;/h4&gt;
&lt;p&gt;Aspose.Cells.GridDesktop provides &lt;strong&gt;CellCheckedChanged&lt;/strong&gt; event that is triggered when the &lt;strong&gt;Checked&lt;/strong&gt; state of the checkbox is changed. Developers can handle this event according to their requirements. For an instance, we have just displayed a message to show the &lt;strong&gt;Checked&lt;/strong&gt; state of the checkbox in the code below:&lt;/p&gt;
&lt;h3 id=&#34;adding-combobox&#34;&gt;Adding ComboBox&lt;/h3&gt;
&lt;p&gt;To add a combobox into the worksheet using Aspose.Cells.GridDesktop , please follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Add Aspose.Cells.GridDesktop control to your &lt;strong&gt;Form&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Access any desired &lt;strong&gt;Worksheet&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create an array of items (or values) that will be added to &lt;strong&gt;ComboBox&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Add &lt;strong&gt;ComboBox&lt;/strong&gt; to the &lt;strong&gt;Controls&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the location of cell (where combobox will be displayed) and the items/values that will be displayed when the combobox will be clicked&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;event-handling-of-combobox&#34;&gt;Event Handling of ComboBox&lt;/h4&gt;
&lt;p&gt;Aspose.Cells.GridDesktop provides &lt;strong&gt;CellSelectedIndexChanged&lt;/strong&gt; event that is triggered when the &lt;strong&gt;Selected Index&lt;/strong&gt; of combobox is changed. Developers can handle this event according to their desires. For an instance, we have just displayed a message to show the &lt;strong&gt;Selected Item&lt;/strong&gt; of the combobox:&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Managing Cell Controls in Worksheets</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;cell&#43;controls&#43;in&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/managing&#43;cell&#43;controls&#43;in&#43;worksheets/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--managing-cell-controls-in-worksheets&#34;&gt;Aspose.Cells for .NET : Managing Cell Controls in Worksheets&lt;/h1&gt;
&lt;p&gt;This topic discusses some important concepts about managing cell controls using the API of Aspose.Cells.GridDesktop. We will explain that how can developer access, modify and remove cell controls from their worksheets. Let&amp;rsquo;s have a look into it.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#accessing-cell-controls&#34;&gt;Accessing Cell Controls&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#removing-cell-controls&#34;&gt;Removing Cell Controls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;accessing-cell-controls&#34;&gt;Accessing Cell Controls&lt;/h2&gt;
&lt;p&gt;To access and modify an existing cell control in the worksheet, developers can access a specific cell control from the &lt;strong&gt;Controls&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using cell name or its location in terms of row and column numbers) in which the cell control is being displayed. Once a cell control is accessed, developers can modify its properties at runtime. For an instance, in the example given below, we have accessed an existing &lt;strong&gt;CheckBox&lt;/strong&gt; cell control from the &lt;strong&gt;Worksheet&lt;/strong&gt; and modified its Checked property.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; &lt;strong&gt;Controls&lt;/strong&gt; collection contains all types of cell controls in the form of &lt;strong&gt;CellControl&lt;/strong&gt; objects. So, if you need to access a specific type of cell control, say &lt;strong&gt;CheckBox&lt;/strong&gt; then you will have to typecast the &lt;strong&gt;CellControl&lt;/strong&gt; object to &lt;strong&gt;CheckBox&lt;/strong&gt; class.&lt;/p&gt;
&lt;h2 id=&#34;removing-cell-controls&#34;&gt;Removing Cell Controls&lt;/h2&gt;
&lt;p&gt;To remove an existing cell control, developers can simply access a desired worksheet and then &lt;strong&gt;Remove&lt;/strong&gt; the cell control from the &lt;strong&gt;Controls&lt;/strong&gt; collection of the &lt;strong&gt;Worksheet&lt;/strong&gt; by specifying the cell (using its name or row &amp;amp; column number) containing cell control.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Display and Hide Scroll Bars</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/display&#43;and&#43;hide&#43;scroll&#43;bars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/display&#43;and&#43;hide&#43;scroll&#43;bars/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--display-and-hide-scroll-bars&#34;&gt;Aspose.Cells for .NET : Display and Hide Scroll Bars&lt;/h1&gt;
&lt;p&gt;Scroll bars are useful for navigating the contents of spreadsheets that are wide and deep, that is, that have many rows and columns. Most applications support two types of scroll bar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vertical scroll bar&lt;/li&gt;
&lt;li&gt;Horizontal scroll bar&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both of these are found in Microsoft Excel.&lt;/p&gt;
&lt;p&gt;Aspose.Cell&amp;rsquo;s &lt;a href=&#34;https://roywangt.github.io/cells/pages/createpage.action?spaceKey=cellsnet&amp;amp;title=Aspose.Cells.GridDesktop+namespace&amp;amp;linkCreation=true&amp;amp;fromPageId=5017753&#34;&gt;&lt;code&gt;GridDesktop&lt;/code&gt; API&lt;/a&gt; provides horizontal and vertical scroll bars for scrolling through the contents of a worksheet. With the &lt;code&gt;Aspose.Cells.GridDesktop&lt;/code&gt; APIs, developers can control the visibility of both of these scroll bars.&lt;/p&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#controlling-scroll-bar-visibility&#34;&gt;Controlling Scroll Bar Visibility&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;1.1 &lt;a href=&#34;#programming-samples:-hiding-scroll-bars&#34;&gt;Programming Samples: Hiding Scroll Bars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;1.2 &lt;a href=&#34;#programming-samples:-making-scroll-bars-visible&#34;&gt;Programming Samples: Making Scroll Bars Visible&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2 id=&#34;controlling-scroll-bar-visibility&#34;&gt;Controlling Scroll Bar Visibility&lt;/h2&gt;
&lt;p&gt;To control scroll bar&amp;rsquo;s visibility in the &lt;code&gt;GridDesktop&lt;/code&gt;, use the &lt;code&gt;IsVerticalScrollBarVisible&lt;/code&gt; and &lt;code&gt;IsHorizontalScrollBarVisible&lt;/code&gt; properties. The examples below show how to hide and show scroll bars.&lt;/p&gt;
&lt;h3 id=&#34;programming-samples-hiding-scroll-bars&#34;&gt;Programming Samples: Hiding Scroll Bars&lt;/h3&gt;
&lt;p&gt;To hide scrollbars, set the properties that control visibility to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;programming-samples-making-scroll-bars-visible&#34;&gt;Programming Samples: Making Scroll Bars Visible&lt;/h3&gt;
&lt;p&gt;To make scrollbars visible, set the properties that control visibility to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Moving Worksheets</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/moving&#43;worksheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/moving&#43;worksheets/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--moving-worksheets&#34;&gt;Aspose.Cells for .NET : Moving Worksheets&lt;/h1&gt;
&lt;p&gt;Aspose.Cells.GridDesktop supports moving worksheets within the workbook.&lt;/p&gt;
&lt;h2 id=&#34;move-worksheets-within-a-workbook&#34;&gt;Move Worksheets within a Workbook&lt;/h2&gt;
&lt;p&gt;Aspose.Cells.GridDesktop provides a method, &lt;code&gt;Aspose.Cells.GridDesktop.WorksheetCollection.MoveTo()&lt;/code&gt;, that is used to move a worksheet to the specified index. It takes the indexes (zero-based) of the source worksheet and destination worksheet as parameters. It is basically used to move a worksheet to another location in the same spreadsheet.&lt;/p&gt;
&lt;p&gt;The following example shows how to move a worksheet to another location within the workbook.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Zooming In or Out On the Worksheet in GridDesktop</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/zooming&#43;in&#43;or&#43;out&#43;on&#43;the&#43;worksheet&#43;in&#43;griddesktop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/zooming&#43;in&#43;or&#43;out&#43;on&#43;the&#43;worksheet&#43;in&#43;griddesktop/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--zooming-in-or-out-on-the-worksheet-in-griddesktop&#34;&gt;Aspose.Cells for .NET : Zooming In or Out On the Worksheet in GridDesktop&lt;/h1&gt;
&lt;p&gt;Sometimes, when working with your data, you may want to enlarge the contents on the screen without actually changing the font size. For instance, you may have formatted your text so that it uses a small font. (This is often necessary to get all your information on a printout.) When working in the worksheet, however, the font is difficult to read because it is so small.&lt;/p&gt;
&lt;p&gt;In Microsoft Excel, a zoom slider is available for zooming in and out of documents quickly and easily. The zoom slider is usually in the lower right corner of the software window.&lt;/p&gt;
&lt;p&gt;Aspose.Cells also allows developers to set the worksheet&amp;rsquo;s zoom factor, so the contents should be appeared as per your desired percentage value.&lt;/p&gt;
&lt;h2 id=&#34;zooming-in-or-out-using-asposecellsgriddesktop&#34;&gt;Zooming In or Out Using Aspose.Cells.GridDesktop&lt;/h2&gt;
&lt;p&gt;Aspose.Cells provides Aspose.Cells.GridDesktop.Worksheet class that has a wide range of properties and methods for managing worksheets. To set a worksheet&amp;rsquo;s zoom factor, use the &lt;code&gt;Worksheet&lt;/code&gt; class&amp;rsquo; &lt;code&gt;Zoom&lt;/code&gt; property. The zoom factor is set by assigned a numeric (integer) value to the &lt;code&gt;Zoom&lt;/code&gt; property.&lt;/p&gt;
&lt;p&gt;We build an MS Excel like zoom slider using TrackBar (.NET) control. In a WinForm project, we place the Aspose.Cells.GridDesktop control from Toolbox to the form and specify some properties to set its name, size or other aspects accordingly. Now, we place the TrackBar control @ lower right corner below the GridDesktop control, we also put a Label control that would show the percentage value you specify via TrackBar control&amp;rsquo;s handle. We add relative lines of code in TrackBar&amp;rsquo;s Scroll event, so when you scroll the Trackbar control, GridDesktop should zoom in or out to show the data/ contents in it.&lt;/p&gt;
&lt;p&gt;A complete example is given below that demonstrates how to use the &lt;code&gt;Zoom&lt;/code&gt; property to set the zoom factor of the active worksheet of GridDesktop. We first import a template Excel file to GridDesktop.&lt;/p&gt;
&lt;p&gt;Write below code in the &lt;code&gt;Load&lt;/code&gt; event of form to set the template Excel file in GridDesktop and trackbar value.&lt;/p&gt;
&lt;p&gt;Now copy below code inside track &lt;code&gt;scroll&lt;/code&gt; event and run the application. You will notice that moving track bar will change the zoom property of worksheet.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Reading Data Validations in Excel file using Aspose.Cells.GridDesktop</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/reading&#43;data&#43;validations&#43;in&#43;excel&#43;file&#43;using&#43;aspose.cells.griddesktop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/reading&#43;data&#43;validations&#43;in&#43;excel&#43;file&#43;using&#43;aspose.cells.griddesktop/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--reading-data-validations-in-excel-file-using-asposecellsgriddesktop&#34;&gt;Aspose.Cells for .NET : Reading Data Validations in Excel file using Aspose.Cells.GridDesktop&lt;/h1&gt;
&lt;p&gt;Aspose.Cells.GridDesktop can read and apply &lt;strong&gt;Data Validations&lt;/strong&gt; in your Excel file. Please load your Excel file in GridDesktop and all the Data Validations inside it will start working as they do in Microsoft Excel.&lt;/p&gt;
&lt;h2 id=&#34;reading-data-validations-in-excel-file-using-asposecellsgriddesktop&#34;&gt;Reading Data Validations in Excel file using Aspose.Cells.GridDesktop&lt;/h2&gt;
&lt;p&gt;The following sample code imports the &lt;a href=&#34;https://docs2.aspose.com/cells/net/attachments/5013594/5115550.xlsx&#34;&gt;sample excel file&lt;/a&gt; which contains some &lt;strong&gt;Data Validations&lt;/strong&gt; inside the GridDesktop.&lt;/p&gt;
&lt;p&gt;After importing the file into GridDesktop when we try to change the value of cell A2 greater than 100 which pops up the &lt;strong&gt;Validation Error message box&lt;/strong&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Split Panes in GridDesktop Worksheet</title>
      <link>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/split&#43;panes&#43;in&#43;griddesktop&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/developerguide/griddesktop/worksheet/split&#43;panes&#43;in&#43;griddesktop&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--split-panes-in-griddesktop-worksheet&#34;&gt;Aspose.Cells for .NET : Split Panes in GridDesktop Worksheet&lt;/h1&gt;
&lt;p&gt;

&lt;div class=&#34;card my-3 border-top-0 border-right-0 border-bottom-0 border-left border-primary rounded&#34; style=&#34;border-width:4px !important;&#34;&gt;
    &lt;div class=&#34;wrap border border-left-0 rounded&#34;&gt;
        
        &lt;div class=&#34;card-header border-0 bg-white pl-3 text-primary&#34;&gt;
            &lt;h3&gt;Contents Summary&lt;/h3&gt;
        &lt;/div&gt;
        
        &lt;div class=&#34;card-body pt-1&#34;&gt;
            &lt;ul&gt;
&lt;li&gt;1 &lt;a href=&#34;#possible-usage-scenarios&#34;&gt;Possible Usage Scenarios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2 &lt;a href=&#34;#split-panes-in-griddesktop-worksheet&#34;&gt;Split Panes in GridDesktop Worksheet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;2.1 &lt;a href=&#34;#griddesktop-before-split-panes&#34;&gt;GridDesktop Before Split Panes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2.2 &lt;a href=&#34;#griddesktop-after-split-panes&#34;&gt;GridDesktop After Split Panes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

 &lt;/p&gt;
&lt;h2 id=&#34;possible-usage-scenarios&#34;&gt;Possible Usage Scenarios&lt;/h2&gt;
&lt;p&gt;Microsoft Excel allows you to split panes using &lt;code&gt;View &amp;gt; Split&lt;/code&gt; menu command. Aspose.Cells also provides this feature. Please use &lt;code&gt;GridDesktop.DoSplit()&lt;/code&gt; and &lt;code&gt;GridDesktop.UnDoSplit()&lt;/code&gt; methods to split and unsplit panes in GridDesktop worksheet.&lt;/p&gt;
&lt;h2 id=&#34;split-panes-in-griddesktop-worksheet&#34;&gt;Split Panes in GridDesktop Worksheet&lt;/h2&gt;
&lt;p&gt;The following screenshots shows the GridDesktop before split planes and after split planes.&lt;/p&gt;
&lt;h3 id=&#34;griddesktop-before-split-panes&#34;&gt;GridDesktop Before Split Panes&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://docs2.aspose.com/cells/net/attachments/25002956/25395238.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;griddesktop-after-split-panes&#34;&gt;GridDesktop After Split Panes&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://docs2.aspose.com/cells/net/attachments/25002956/25395239.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
