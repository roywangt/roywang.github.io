<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Documentation â€“ Code Comparison for common features with OpenXML</title>
    <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/</link>
    <description>Recent content in Code Comparison for common features with OpenXML on Documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    
	  <atom:link href="https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Net: Calculate the sum of a range of cells</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/calculate&#43;the&#43;sum&#43;of&#43;a&#43;range&#43;of&#43;cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/calculate&#43;the&#43;sum&#43;of&#43;a&#43;range&#43;of&#43;cells/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--calculate-the-sum-of-a-range-of-cells&#34;&gt;Aspose.Cells for .NET : Calculate the sum of a range of cells&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;Following are the namespaces we need to use in code:&lt;/p&gt;






    
    




&lt;div class=&#34;position-relative&#34;&gt;
    &lt;div class=&#34;position-absolute&#34; style=&#34;right:0;&#34;&gt;
        &lt;button class=&#34;btn btn-light&#34; data-clipboard-target=&#34;#clipboard_0ea600044d&#34;&gt;
        Copy
        &lt;/button&gt;
    &lt;/div&gt;
    &lt;div id=&#34;clipboard_0ea600044d&#34;&gt;
    &lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-cs&#34; data-lang=&#34;cs&#34;&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DocumentFormat.OpenXml&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DocumentFormat.OpenXml.Packaging&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DocumentFormat.OpenXml.Spreadsheet&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;




&lt;p&gt;Below is the code:&lt;/p&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Calculate the sum of a range of cells.xlsx&amp;rdquo;;string worksheetName = &amp;ldquo;Sheet1&amp;rdquo;;string firstCellName = &amp;ldquo;A1&amp;rdquo;;string lastCellName = &amp;ldquo;A3&amp;rdquo;;string resultCell = &amp;ldquo;A4&amp;rdquo;;CalculateSumOfCellRange(FileName, worksheetName, firstCellName, lastCellName, resultCell);private static void CalculateSumOfCellRange(string docName, string worksheetName, string firstCellName, string lastCellName, string resultCell){    // Open the document for editing.    using (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))    {        IEnumerable&lt;Sheet&gt; sheets = document.WorkbookPart.Workbook.Descendants&lt;Sheet&gt;().Where(s =&amp;gt; s.Name == worksheetName);        if (sheets.Count() == 0)        {            // The specified worksheet does not exist.            return;        }        WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);        Worksheet worksheet = worksheetPart.Worksheet;        // Get the row number and column name for the first and last cells in the range.        uint firstRowNum = GetRowIndex(firstCellName);        uint lastRowNum = GetRowIndex(lastCellName);        string firstColumn = GetColumnName(firstCellName);        string lastColumn = GetColumnName(lastCellName);        double sum = 0;        // Iterate through the cells within the range and add their values to the sum.        foreach (Row row in worksheet.Descendants&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex.Value &amp;gt;= firstRowNum &amp;amp;&amp;amp; r.RowIndex.Value &amp;lt;= lastRowNum))        {            foreach (Cell cell in row)            {                string columnName = GetColumnName(cell.CellReference.Value);                if (CompareColumn(columnName, firstColumn) &amp;gt;= 0 &amp;amp;&amp;amp; CompareColumn(columnName, lastColumn) &amp;lt;= 0)                {                    sum += double.Parse(cell.CellValue.Text);                }            }        }        // Get the SharedStringTablePart and add the result to it.        // If the SharedStringPart does not exist, create a new one.        SharedStringTablePart shareStringPart;        if (document.WorkbookPart.GetPartsOfType&lt;SharedStringTablePart&gt;().Count() &amp;gt; 0)        {            shareStringPart = document.WorkbookPart.GetPartsOfType&lt;SharedStringTablePart&gt;().First();        }        else        {            shareStringPart = document.WorkbookPart.AddNewPart&lt;SharedStringTablePart&gt;();        }        // Insert the result into the SharedStringTablePart.        int index = InsertSharedStringItem(&amp;ldquo;Result: &amp;quot; + sum, shareStringPart);        Cell result = InsertCellInWorksheet(GetColumnName(resultCell), GetRowIndex(resultCell), worksheetPart);        // Set the value of the cell.        result.CellValue = new CellValue(index.ToString());        result.DataType = new EnumValue&lt;CellValues&gt;(CellValues.SharedString);        worksheetPart.Worksheet.Save();    }}// Given a cell name, parses the specified cell to get the row index.private static uint GetRowIndex(string cellName){    // Create a regular expression to match the row index portion the cell name.    Regex regex = new Regex(@&amp;quot;\d+&amp;rdquo;);    Match match = regex.Match(cellName);    return uint.Parse(match.Value);}// Given a cell name, parses the specified cell to get the column name.private static string GetColumnName(string cellName){    // Create a regular expression to match the column name portion of the cell name.    Regex regex = new Regex(&amp;quot;[A-Za-z]+&amp;rdquo;);    Match match = regex.Match(cellName);    return match.Value;}// Given two columns, compares the columns.private static int CompareColumn(string column1, string column2){    if (column1.Length &amp;gt; column2.Length)    {        return 1;    }    else if (column1.Length &amp;lt; column2.Length)    {        return -1;    }    else    {        return string.Compare(column1, column2, true);    }}// Given text and a SharedStringTablePart, creates a SharedStringItem with the specified text // and inserts it into the SharedStringTablePart. If the item already exists, returns its index.private static int InsertSharedStringItem(string text, SharedStringTablePart shareStringPart){    // If the part does not contain a SharedStringTable, create it.    if (shareStringPart.SharedStringTable == null)    {        shareStringPart.SharedStringTable = new SharedStringTable();    }    int i = 0;    foreach (SharedStringItem item in shareStringPart.SharedStringTable.Elements&lt;SharedStringItem&gt;())    {        if (item.InnerText == text)        {            // The text already exists in the part. Return its index.            return i;        }        i++;    }    // The text does not exist in the part. Create the SharedStringItem.    shareStringPart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(text)));    shareStringPart.SharedStringTable.Save();    return i;}// Given a column name, a row index, and a WorksheetPart, inserts a cell into the worksheet. // If the cell already exists, returns it. private static Cell InsertCellInWorksheet(string columnName, uint rowIndex, WorksheetPart worksheetPart){    Worksheet worksheet = worksheetPart.Worksheet;    SheetData sheetData = worksheet.GetFirstChild&lt;SheetData&gt;();    string cellReference = columnName + rowIndex;    // If the worksheet does not contain a row with the specified row index, insert one.    Row row;    if (sheetData.Elements&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex == rowIndex).Count() != 0)    {        row = sheetData.Elements&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex == rowIndex).First();    }    else    {        row = new Row() { RowIndex = rowIndex };        sheetData.Append(row);    }    // If there is not a cell with the specified column name, insert one.      if (row.Elements&lt;Cell&gt;().Where(c =&amp;gt; c.CellReference.Value == columnName + rowIndex).Count() &amp;gt; 0)    {        return row.Elements&lt;Cell&gt;().Where(c =&amp;gt; c.CellReference.Value == cellReference).First();    }    else    {        // Cells must be in sequential order according to CellReference. Determine where to insert the new cell.        Cell refCell = null;        foreach (Cell cell in row.Elements&lt;Cell&gt;())        {            if (string.Compare(cell.CellReference.Value, cellReference, true) &amp;gt; 0)            {                refCell = cell;                break;            }        }        Cell newCell = new Cell() { CellReference = cellReference };        row.InsertBefore(newCell, refCell);        worksheet.Save();        return newCell;    }}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Calculate the sum of a range of cells.xlsx&amp;rdquo;;string worksheetName = &amp;ldquo;Sheet1&amp;rdquo;;string firstCellName = &amp;ldquo;A1&amp;rdquo;;string lastCellName = &amp;ldquo;A3&amp;rdquo;;string resultCell = &amp;ldquo;A4&amp;rdquo;;CalculateSumOfCellRange(FileName, worksheetName, firstCellName, lastCellName, resultCell);private static void CalculateSumOfCellRange(string docName, string worksheetName, string firstCellName, string lastCellName, string resultCell){    //Instantiating a Workbook object    Workbook workbook = new Workbook(docName);    //Obtaining the reference of the worksheet by passing its Name    Worksheet worksheet = workbook.Worksheets[worksheetName];    //Adding a SUM formula to &amp;ldquo;A4&amp;rdquo; cell    worksheet.Cells[resultCell].Formula = &amp;ldquo;=SUM(&amp;rdquo; + firstCellName + &amp;ldquo;:&amp;rdquo; + lastCellName + &amp;ldquo;)&amp;quot;; // =SUM(A1:A3)    //Calculating the results of formulas    workbook.CalculateFormula();    //Get the calculated value of the cell    string value = worksheet.Cells[&amp;ldquo;A4&amp;rdquo;].Value.ToString();    //Saving the Excel file    workbook.Save(docName);}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://goo.gl/IvaspK&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Calculate%20the%20sum%20of%20a%20range%20of%20cells%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Create a spreadsheet document</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/create&#43;a&#43;spreadsheet&#43;document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/create&#43;a&#43;spreadsheet&#43;document/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--create-a-spreadsheet-document&#34;&gt;Aspose.Cells for .NET : Create a spreadsheet document&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Create a spreadsheet document.xlsx&amp;rdquo;;CreateSpreadsheetWorkbook(FileName);private static void CreateSpreadsheetWorkbook(string filepath){    // Create a spreadsheet document by supplying the filepath.    // By default, AutoSave = true, Editable = true, and Type = xlsx.    SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.        Create(filepath, SpreadsheetDocumentType.Workbook);    // Add a WorkbookPart to the document.    WorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();    workbookpart.Workbook = new Workbook();    // Add a WorksheetPart to the WorkbookPart.    WorksheetPart worksheetPart = workbookpart.AddNewPart&lt;WorksheetPart&gt;();    worksheetPart.Worksheet = new Worksheet(new SheetData());    // Add Sheets to the Workbook.    Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.        AppendChild&lt;Sheets&gt;(new Sheets());    // Append a new worksheet and associate it with the workbook.    Sheet sheet = new Sheet()    {        Id = spreadsheetDocument.WorkbookPart.            GetIdOfPart(worksheetPart),        SheetId = 1,        Name = &amp;ldquo;mySheet&amp;rdquo;    };    sheets.Append(sheet);    workbookpart.Workbook.Save();    // Close the document.    spreadsheetDocument.Close();}}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Create a spreadsheet document.xlsx&amp;rdquo;;CreateSpreadsheetWorkbook(FileName);private static void CreateSpreadsheetWorkbook(string filepath){    //Instantiating a Workbook object    Workbook workbook = new Workbook();    //Adding a new worksheet to the Excel object    Worksheet worksheet = workbook.Worksheets.Add(&amp;ldquo;MySheet&amp;rdquo;);    //Saving the Excel file    workbook.Save(filepath);}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Create%20a%20spreadsheet%20document%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Create%20a%20spreadsheet%20document%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Delete text from a cell</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/delete&#43;text&#43;from&#43;a&#43;cell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/delete&#43;text&#43;from&#43;a&#43;cell/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--delete-text-from-a-cell&#34;&gt;Aspose.Cells for .NET : Delete text from a cell&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Delete text from a cell.xlsx&amp;rdquo;;string sheetName = &amp;ldquo;Sheet1&amp;rdquo;;string colName = &amp;ldquo;B&amp;rdquo;;uint rowIndex = 2;DeleteTextFromCell(FileName, sheetName, colName, rowIndex);// Given a document, a worksheet name, a column name, and a one-based row index,// deletes the text from the cell at the specified column and row on the specified worksheet.public static void DeleteTextFromCell(string docName, string sheetName, string colName, uint rowIndex){    // Open the document for editing.    using (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))    {        IEnumerable&lt;Sheet&gt; sheets = document.WorkbookPart.Workbook.GetFirstChild&lt;Sheets&gt;().Elements&lt;Sheet&gt;().Where(s =&amp;gt; s.Name == sheetName);        if (sheets.Count() == 0)        {            // The specified worksheet does not exist.            return;        }        string relationshipId = sheets.First().Id.Value;        WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(relationshipId);        // Get the cell at the specified column and row.        Cell cell = GetSpreadsheetCell(worksheetPart.Worksheet, colName, rowIndex);        if (cell == null)        {            // The specified cell does not exist.            return;        }        cell.Remove();        worksheetPart.Worksheet.Save();    }}// Given a worksheet, a column name, and a row index, gets the cell at the specified column and row.private static Cell GetSpreadsheetCell(Worksheet worksheet, string columnName, uint rowIndex){    IEnumerable&lt;Row&gt; rows = worksheet.GetFirstChild&lt;SheetData&gt;().Elements&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex == rowIndex);    if (rows.Count() == 0)    {        // A cell does not exist at the specified row.        return null;    }    IEnumerable&lt;Cell&gt; cells = rows.First().Elements&lt;Cell&gt;().Where(c =&amp;gt; string.Compare(c.CellReference.Value, columnName + rowIndex, true) == 0);    if (cells.Count() == 0)    {        // A cell does not exist at the specified column, in the specified row.        return null;    }    return cells.First();}// Given a shared string ID and a SpreadsheetDocument, verifies that other cells in the document no longer // reference the specified SharedStringItem and removes the item.private static void RemoveSharedStringItem(int shareStringId, SpreadsheetDocument document){    bool remove = true;    foreach (var part in document.WorkbookPart.GetPartsOfType&lt;WorksheetPart&gt;())    {        Worksheet worksheet = part.Worksheet;        foreach (var cell in worksheet.GetFirstChild&lt;SheetData&gt;().Descendants&lt;Cell&gt;())        {            // Verify if other cells in the document reference the item.            if (cell.DataType != null &amp;amp;&amp;amp;                cell.DataType.Value == CellValues.SharedString &amp;amp;&amp;amp;                cell.CellValue.Text == shareStringId.ToString())            {                // Other cells in the document still reference the item. Do not remove the item.                remove = false;                break;            }        }        if (!remove)        {            break;        }    }    // Other cells in the document do not reference the item. Remove the item.    if (remove)    {        SharedStringTablePart shareStringTablePart = document.WorkbookPart.SharedStringTablePart;        if (shareStringTablePart == null)        {            return;        }        SharedStringItem item = shareStringTablePart.SharedStringTable.Elements&lt;SharedStringItem&gt;().ElementAt(shareStringId);        if (item != null)        {            item.Remove();            // Refresh all the shared string references.            foreach (var part in document.WorkbookPart.GetPartsOfType&lt;WorksheetPart&gt;())            {                Worksheet worksheet = part.Worksheet;                foreach (var cell in worksheet.GetFirstChild&lt;SheetData&gt;().Descendants&lt;Cell&gt;())                {                    if (cell.DataType != null &amp;amp;&amp;amp;                        cell.DataType.Value == CellValues.SharedString)                    {                        int itemIndex = int.Parse(cell.CellValue.Text);                        if (itemIndex &amp;gt; shareStringId)                        {                            cell.CellValue.Text = (itemIndex - 1).ToString();                        }                    }                }                worksheet.Save();            }            document.WorkbookPart.SharedStringTablePart.SharedStringTable.Save();        }    }}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Delete text from a cell.xlsx&amp;rdquo;;string sheetName = &amp;ldquo;Sheet1&amp;rdquo;;string colName = &amp;ldquo;B&amp;rdquo;;uint rowIndex = 2;DeleteTextFromCell(FileName, sheetName, colName, rowIndex);private static void DeleteTextFromCell(string docName, string sheetName, string colName, uint rowIndex)    {        //Instantiating a Workbook object        Workbook workbook = new Workbook(docName);        //Obtaining the reference of the worksheet by passing its Name        Worksheet worksheet = workbook.Worksheets[sheetName];        //Removing value from cell        worksheet.Cells[colName + rowIndex].PutValue(&amp;quot;&amp;quot;);        //Saving the Excel file        workbook.Save(docName);    }&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Delete%20text%20from%20a%20cell%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Delete%20text%20from%20a%20cell%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Get a column heading</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/get&#43;a&#43;column&#43;heading/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/get&#43;a&#43;column&#43;heading/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--get-a-column-heading&#34;&gt;Aspose.Cells for .NET : Get a column heading&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Get a column heading.xlsx&amp;rdquo;;string worksheetName = &amp;ldquo;Sheet1&amp;rdquo;;string cellName = &amp;ldquo;B3&amp;rdquo;;string s1 = GetColumnHeading(FileName, worksheetName, cellName);// Given a document name, a worksheet name, and a cell name, gets the column of the cell and returns// the content of the first cell in that column.public static string GetColumnHeading(string docName, string worksheetName, string cellName){// Open the document as read-only.using (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, false)){    IEnumerable&lt;Sheet&gt; sheets = document.WorkbookPart.Workbook.Descendants&lt;Sheet&gt;().Where(s =&amp;gt; s.Name == worksheetName);    if (sheets.Count() == 0)    {        // The specified worksheet does not exist.        return null;    }    WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);    // Get the column name for the specified cell.    string columnName = GetColumnName(cellName);    // Get the cells in the specified column and order them by row.    IEnumerable&lt;Cell&gt; cells = worksheetPart.Worksheet.Descendants&lt;Cell&gt;().Where(c =&amp;gt; string.Compare(GetColumnName(c.CellReference.Value), columnName, true) == 0)        .OrderBy(r =&amp;gt; GetRowIndex(r.CellReference));    if (cells.Count() == 0)    {        // The specified column does not exist.        return null;    }    // Get the first cell in the column.    Cell headCell = cells.First();    // If the content of the first cell is stored as a shared string, get the text of the first cell    // from the SharedStringTablePart and return it. Otherwise, return the string value of the cell.    if (headCell.DataType != null &amp;amp;&amp;amp; headCell.DataType.Value == CellValues.SharedString)    {        SharedStringTablePart shareStringPart = document.WorkbookPart.GetPartsOfType&lt;SharedStringTablePart&gt;().First();        SharedStringItem[] items = shareStringPart.SharedStringTable.Elements&lt;SharedStringItem&gt;().ToArray();        return items[int.Parse(headCell.CellValue.Text)].InnerText;    }    else    {        return headCell.CellValue.Text;    }}}// Given a cell name, parses the specified cell to get the column name.private static string GetColumnName(string cellName){// Create a regular expression to match the column name portion of the cell name.Regex regex = new Regex(&amp;quot;[A-Za-z]+&amp;rdquo;);Match match = regex.Match(cellName);return match.Value;}// Given a cell name, parses the specified cell to get the row index.private static uint GetRowIndex(string cellName){// Create a regular expression to match the row index portion the cell name.Regex regex = new Regex(@&amp;quot;\d+&amp;rdquo;);Match match = regex.Match(cellName);return uint.Parse(match.Value);}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Get a column heading.xlsx&amp;rdquo;;string worksheetName = &amp;ldquo;Sheet1&amp;rdquo;;string cellName = &amp;ldquo;B3&amp;rdquo;;string s1 = GetColumnHeading(FileName, worksheetName, cellName);private static string GetColumnHeading(string docName, string worksheetName, string cellName){    //Instantiating a Workbook object    Workbook workbook = new Workbook(docName);    //Obtaining the reference of the worksheet by passing its Name    Worksheet worksheet = workbook.Worksheets[worksheetName];    //Removing value from cell    Cell Cell = worksheet.Cells[cellName];    //Get First row of the column    string ColumnHeadingName = CellsHelper.CellIndexToName(0, Cell.Column);    //return value of heading cell    return worksheet.Cells[ColumnHeadingName].Value.ToString();}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Get%20a%20column%20heading%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Get%20a%20column%20heading%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Get worksheet information</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/get&#43;worksheet&#43;information/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/get&#43;worksheet&#43;information/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--get-worksheet-information&#34;&gt;Aspose.Cells for .NET : Get worksheet information&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Get worksheet information.xlsx&amp;rdquo;;GetSheetInfo(FileName);Console.ReadKey();}public static void GetSheetInfo(string fileName){// Open file as read-only.using (SpreadsheetDocument mySpreadsheet = SpreadsheetDocument.Open(fileName, false)){    S sheets = mySpreadsheet.WorkbookPart.Workbook.Sheets;    // For each sheet, display the sheet information.    foreach (E sheet in sheets)    {        foreach (A attr in sheet.GetAttributes())        {            Console.WriteLine(&amp;quot;{0}: {1}&amp;rdquo;, attr.LocalName, attr.Value);        }    }}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Get worksheet information.xlsx&amp;rdquo;;GetSheetInfo(FileName);Console.ReadKey();}private static void GetSheetInfo(string fileName){//Instantiating a Workbook objectWorkbook workbook = new Workbook(fileName);//Loop through all Sheets in the workbookforeach (Worksheet Sheet in workbook.Worksheets){    //Get Name and Index of Sheet    Console.WriteLine(&amp;ldquo;Sheet Name: {0}&amp;rdquo;, Sheet.Name);    Console.WriteLine(&amp;ldquo;Sheet Index: {0}&amp;rdquo;, Sheet.Index);    //Loop through all custom properties    foreach (CustomProperty Property in Sheet.CustomProperties)    {        Console.WriteLine(&amp;quot;{0}: {1}&amp;rdquo;, Property.Name, Property.Value);    }}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Get%20worksheet%20information%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Get%20worksheet%20information%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Insert a chart</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/insert&#43;a&#43;chart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/insert&#43;a&#43;chart/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--insert-a-chart&#34;&gt;Aspose.Cells for .NET : Insert a chart&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Insert a chart.xlsx&amp;rdquo;;string worksheetName = &amp;ldquo;Sheet1&amp;rdquo;;string title = &amp;ldquo;New Chart&amp;rdquo;;Dictionary&amp;lt;string, int&amp;gt; data = new Dictionary&amp;lt;string, int&amp;gt;();data.Add(&amp;ldquo;abc&amp;rdquo;, 1);InsertChartInSpreadsheet(FileName, worksheetName, title, data);// Given a document name, a worksheet name, a chart title, and a Dictionary collection of text keys// and corresponding integer data, creates a column chart with the text as the series and the integers as the values.private static void InsertChartInSpreadsheet(string docName, string worksheetName, string title,Dictionary&amp;lt;string, int&amp;gt; data){    // Open the document for editing.    using (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))    {        IEnumerable&lt;Sheet&gt; sheets = document.WorkbookPart.Workbook.Descendants&lt;Sheet&gt;().Where(s =&amp;gt; s.Name == worksheetName);        if (sheets.Count() == 0)        {            // The specified worksheet does not exist.            return;        }        WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);        // Add a new drawing to the worksheet.        DrawingsPart drawingsPart = worksheetPart.AddNewPart&lt;DrawingsPart&gt;();        worksheetPart.Worksheet.Append(new DocumentFormat.OpenXml.Spreadsheet.Drawing() { Id = worksheetPart.GetIdOfPart(drawingsPart) });        worksheetPart.Worksheet.Save();        // Add a new chart and set the chart language to English-US.        ChartPart chartPart = drawingsPart.AddNewPart&lt;ChartPart&gt;();        chartPart.ChartSpace = new ChartSpace();        chartPart.ChartSpace.Append(new EditingLanguage() { Val = new StringValue(&amp;ldquo;en-US&amp;rdquo;) });        DocumentFormat.OpenXml.Drawing.Charts.Chart chart = chartPart.ChartSpace.AppendChild&amp;lt;DocumentFormat.OpenXml.Drawing.Charts.Chart&amp;gt;(            new DocumentFormat.OpenXml.Drawing.Charts.Chart());        // Create a new clustered column chart.        PlotArea plotArea = chart.AppendChild&lt;PlotArea&gt;(new PlotArea());        Layout layout = plotArea.AppendChild&lt;Layout&gt;(new Layout());        BarChart barChart = plotArea.AppendChild&lt;BarChart&gt;(new BarChart(new BarDirection() { Val = new EnumValue&lt;BarDirectionValues&gt;(BarDirectionValues.Column) },            new BarGrouping() { Val = new EnumValue&lt;BarGroupingValues&gt;(BarGroupingValues.Clustered) }));        uint i = 0;        // Iterate through each key in the Dictionary collection and add the key to the chart Series        // and add the corresponding value to the chart Values.        foreach (string key in data.Keys)        {            BarChartSeries barChartSeries = barChart.AppendChild&lt;BarChartSeries&gt;(new BarChartSeries(new Index()            {                Val =                    new UInt32Value(i)            },                new Order() { Val = new UInt32Value(i) },                new SeriesText(new NumericValue() { Text = key })));            StringLiteral strLit = barChartSeries.AppendChild&lt;CategoryAxisData&gt;(new CategoryAxisData()).AppendChild&lt;StringLiteral&gt;(new StringLiteral());            strLit.Append(new PointCount() { Val = new UInt32Value(1U) });            strLit.AppendChild&lt;StringPoint&gt;(new StringPoint() { Index = new UInt32Value(0U) }).Append(new NumericValue(title));            NumberLiteral numLit = barChartSeries.AppendChild&amp;lt;DocumentFormat.OpenXml.Drawing.Charts.Values&amp;gt;(                new DocumentFormat.OpenXml.Drawing.Charts.Values()).AppendChild&lt;NumberLiteral&gt;(new NumberLiteral());            numLit.Append(new FormatCode(&amp;ldquo;General&amp;rdquo;));            numLit.Append(new PointCount() { Val = new UInt32Value(1U) });            numLit.AppendChild&lt;NumericPoint&gt;(new NumericPoint() { Index = new UInt32Value(0u) }).Append(new NumericValue(data[key].ToString()));            i++;        }        barChart.Append(new AxisId() { Val = new UInt32Value(48650112u) });        barChart.Append(new AxisId() { Val = new UInt32Value(48672768u) });        // Add the Category Axis.        CategoryAxis catAx = plotArea.AppendChild&lt;CategoryAxis&gt;(new CategoryAxis(new AxisId() { Val = new UInt32Value(48650112u) }, new Scaling(new Orientation()        {            Val = new EnumValue&amp;lt;DocumentFormat.                OpenXml.Drawing.Charts.OrientationValues&amp;gt;(DocumentFormat.OpenXml.Drawing.Charts.OrientationValues.MinMax)        }),            new AxisPosition() { Val = new EnumValue&lt;AxisPositionValues&gt;(AxisPositionValues.Bottom) },            new TickLabelPosition() { Val = new EnumValue&lt;TickLabelPositionValues&gt;(TickLabelPositionValues.NextTo) },            new CrossingAxis() { Val = new UInt32Value(48672768U) },            new Crosses() { Val = new EnumValue&lt;CrossesValues&gt;(CrossesValues.AutoZero) },            new AutoLabeled() { Val = new BooleanValue(true) },            new LabelAlignment() { Val = new EnumValue&lt;LabelAlignmentValues&gt;(LabelAlignmentValues.Center) },            new LabelOffset() { Val = new UInt16Value((ushort)100) }));        // Add the Value Axis.        ValueAxis valAx = plotArea.AppendChild&lt;ValueAxis&gt;(new ValueAxis(new AxisId() { Val = new UInt32Value(48672768u) },            new Scaling(new Orientation()            {                Val = new EnumValue&amp;lt;DocumentFormat.OpenXml.Drawing.Charts.OrientationValues&amp;gt;(                    DocumentFormat.OpenXml.Drawing.Charts.OrientationValues.MinMax)            }),            new AxisPosition() { Val = new EnumValue&lt;AxisPositionValues&gt;(AxisPositionValues.Left) },            new MajorGridlines(),            new DocumentFormat.OpenXml.Drawing.Charts.NumberingFormat()            {                FormatCode = new StringValue(&amp;ldquo;General&amp;rdquo;),                SourceLinked = new BooleanValue(true)            }, new TickLabelPosition()            {                Val = new EnumValue&lt;TickLabelPositionValues&gt;                    (TickLabelPositionValues.NextTo)            }, new CrossingAxis() { Val = new UInt32Value(48650112U) },            new Crosses() { Val = new EnumValue&lt;CrossesValues&gt;(CrossesValues.AutoZero) },            new CrossBetween() { Val = new EnumValue&lt;CrossBetweenValues&gt;(CrossBetweenValues.Between) }));        // Add the chart Legend.        Legend legend = chart.AppendChild&lt;Legend&gt;(new Legend(new LegendPosition() { Val = new EnumValue&lt;LegendPositionValues&gt;(LegendPositionValues.Right) },            new Layout()));        chart.Append(new PlotVisibleOnly() { Val = new BooleanValue(true) });        // Save the chart part.        chartPart.ChartSpace.Save();        // Position the chart on the worksheet using a TwoCellAnchor object.        drawingsPart.WorksheetDrawing = new WorksheetDrawing();        TwoCellAnchor twoCellAnchor = drawingsPart.WorksheetDrawing.AppendChild&lt;TwoCellAnchor&gt;(new TwoCellAnchor());        twoCellAnchor.Append(new DocumentFormat.OpenXml.Drawing.Spreadsheet.FromMarker(new ColumnId(&amp;ldquo;9&amp;rdquo;),            new ColumnOffset(&amp;ldquo;581025&amp;rdquo;),            new RowId(&amp;ldquo;17&amp;rdquo;),            new RowOffset(&amp;ldquo;114300&amp;rdquo;)));        twoCellAnchor.Append(new DocumentFormat.OpenXml.Drawing.Spreadsheet.ToMarker(new ColumnId(&amp;ldquo;17&amp;rdquo;),            new ColumnOffset(&amp;ldquo;276225&amp;rdquo;),            new RowId(&amp;ldquo;32&amp;rdquo;),            new RowOffset(&amp;ldquo;0&amp;rdquo;)));        // Append a GraphicFrame to the TwoCellAnchor object.        DocumentFormat.OpenXml.Drawing.Spreadsheet.GraphicFrame graphicFrame =            twoCellAnchor.AppendChild&amp;lt;DocumentFormat.OpenXml.Drawing.Spreadsheet.GraphicFrame&amp;gt;(new DocumentFormat.OpenXml.Drawing.Spreadsheet.GraphicFrame());        graphicFrame.Macro = &amp;ldquo;&amp;quot;;        graphicFrame.Append(new DocumentFormat.OpenXml.Drawing.Spreadsheet.NonVisualGraphicFrameProperties(            new DocumentFormat.OpenXml.Drawing.Spreadsheet.NonVisualDrawingProperties() { Id = new UInt32Value(2u), Name = &amp;ldquo;Chart 1&amp;rdquo; },            new DocumentFormat.OpenXml.Drawing.Spreadsheet.NonVisualGraphicFrameDrawingProperties()));        graphicFrame.Append(new Transform(new Offset() { X = 0L, Y = 0L },                                                                new Extents() { Cx = 0L, Cy = 0L }));        graphicFrame.Append(new Graphic(new GraphicData(new ChartReference() { Id = drawingsPart.GetIdOfPart(chartPart) }) { Uri = &amp;ldquo;&lt;a href=&#34;http://schemas.openxmlformats.org/drawingml/2006/chart%22&#34;&gt;http://schemas.openxmlformats.org/drawingml/2006/chart&amp;quot;&lt;/a&gt; }));        twoCellAnchor.Append(new ClientData());        // Save the WorksheetDrawing object.        drawingsPart.WorksheetDrawing.Save();    }}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Insert a chart.xlsx&amp;rdquo;;string worksheetName = &amp;ldquo;Sheet1&amp;rdquo;;string title = &amp;ldquo;New Chart&amp;rdquo;;string dataRange = &amp;ldquo;A1:B3&amp;rdquo;;InsertChartInSpreadsheet(FileName, worksheetName, title, dataRange);private static void InsertChartInSpreadsheet(string docName, string worksheetName, string title, string dataRange){    //Instantiating a Workbook object    Workbook workbook = new Workbook(docName);    //Obtaining the reference of the worksheet by passing its Name    Worksheet worksheet = workbook.Worksheets[worksheetName];    //Adding a chart to the worksheet    int chartIndex = worksheet.Charts.Add(Aspose.Cells.Charts.ChartType.Bar, 5, 0, 15, 5);    //Accessing the instance of the newly added chart    Aspose.Cells.Charts.Chart chart = worksheet.Charts[chartIndex];    //Set title of the chart    chart.Name = title;    //Adding SeriesCollection (chart data source) to the chart ranging from &amp;ldquo;A1&amp;rdquo; cell to &amp;ldquo;B3&amp;rdquo;    chart.NSeries.Add(dataRange, true);    //Saving the Excel file    workbook.Save(docName);}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Insert%20a%20chart%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Insert%20a%20chart%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Insert a new worksheet</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/insert&#43;a&#43;new&#43;worksheet/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/insert&#43;a&#43;new&#43;worksheet/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--insert-a-new-worksheet&#34;&gt;Aspose.Cells for .NET : Insert a new worksheet&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Insert a new worksheet.xlsx&amp;rdquo;;InsertWorksheet(FileName);}private static void InsertWorksheet(string docName){// Open the document for editing.using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(docName, true)){    // Add a blank WorksheetPart.    WorksheetPart newWorksheetPart = spreadSheet.WorkbookPart.AddNewPart&lt;WorksheetPart&gt;();    newWorksheetPart.Worksheet = new Worksheet(new SheetData());    Sheets sheets = spreadSheet.WorkbookPart.Workbook.GetFirstChild&lt;Sheets&gt;();    string relationshipId = spreadSheet.WorkbookPart.GetIdOfPart(newWorksheetPart);    // Get a unique ID for the new worksheet.    uint sheetId = 1;    if (sheets.Elements&lt;Sheet&gt;().Count() &amp;gt; 0)    {        sheetId = sheets.Elements&lt;Sheet&gt;().Select(s =&amp;gt; s.SheetId.Value).Max() + 1;    }    // Give the new worksheet a name.    string sheetName = &amp;ldquo;Sheet&amp;rdquo; + sheetId;    // Append the new worksheet and associate it with the workbook.    Sheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId, Name = sheetName };    sheets.Append(sheet);}}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Insert a new worksheet.xlsx&amp;rdquo;;InsertWorksheet(FileName);private static void InsertWorksheet(string docName){  //Instantiating a Workbook object  Workbook workbook = new Workbook(docName);  //Adding a new worksheet to the Excel object  int SheetIndex = workbook.Worksheets.Add();  //Saving the Excel file  workbook.Save(docName);}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Insert%20a%20new%20worksheet%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Insert%20a%20new%20worksheet%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Insert text into a cell</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/insert&#43;text&#43;into&#43;a&#43;cell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/insert&#43;text&#43;into&#43;a&#43;cell/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--insert-text-into-a-cell&#34;&gt;Aspose.Cells for .NET : Insert text into a cell&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Insert text into a cell.xlsx&amp;rdquo;;InsertText(FileName, &amp;ldquo;Inserted Text&amp;rdquo;);// Given a document name and text, // inserts a new work sheet and writes the text to cell &amp;ldquo;A1&amp;rdquo; of the new worksheet.public static void InsertText(string docName, string text){    // Open the document for editing.    using (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(docName, true))    {        // Get the SharedStringTablePart. If it does not exist, create a new one.        SharedStringTablePart shareStringPart;        if (spreadSheet.WorkbookPart.GetPartsOfType&lt;SharedStringTablePart&gt;().Count() &amp;gt; 0)        {            shareStringPart = spreadSheet.WorkbookPart.GetPartsOfType&lt;SharedStringTablePart&gt;().First();        }        else        {            shareStringPart = spreadSheet.WorkbookPart.AddNewPart&lt;SharedStringTablePart&gt;();        }        // Insert the text into the SharedStringTablePart.        int index = InsertSharedStringItem(text, shareStringPart);        // Insert a new worksheet.        WorksheetPart worksheetPart = InsertWorksheet(spreadSheet.WorkbookPart);        // Insert cell A1 into the new worksheet.        Cell cell = InsertCellInWorksheet(&amp;ldquo;A&amp;rdquo;, 1, worksheetPart);        // Set the value of cell A1.        cell.CellValue = new CellValue(index.ToString());        cell.DataType = new EnumValue&lt;CellValues&gt;(CellValues.SharedString);        // Save the new worksheet.        worksheetPart.Worksheet.Save();    }}// Given text and a SharedStringTablePart, creates a SharedStringItem with the specified text // and inserts it into the SharedStringTablePart. If the item already exists, returns its index.private static int InsertSharedStringItem(string text, SharedStringTablePart shareStringPart){    // If the part does not contain a SharedStringTable, create one.    if (shareStringPart.SharedStringTable == null)    {        shareStringPart.SharedStringTable = new SharedStringTable();    }    int i = 0;    // Iterate through all the items in the SharedStringTable. If the text already exists, return its index.    foreach (SharedStringItem item in shareStringPart.SharedStringTable.Elements&lt;SharedStringItem&gt;())    {        if (item.InnerText == text)        {            return i;        }        i++;    }    // The text does not exist in the part. Create the SharedStringItem and return its index.    shareStringPart.SharedStringTable.AppendChild(new SharedStringItem(new DocumentFormat.OpenXml.Spreadsheet.Text(text)));    shareStringPart.SharedStringTable.Save();    return i;}// Given a WorkbookPart, inserts a new worksheet.private static WorksheetPart InsertWorksheet(WorkbookPart workbookPart){    // Add a new worksheet part to the workbook.    WorksheetPart newWorksheetPart = workbookPart.AddNewPart&lt;WorksheetPart&gt;();    newWorksheetPart.Worksheet = new Worksheet(new SheetData());    newWorksheetPart.Worksheet.Save();    Sheets sheets = workbookPart.Workbook.GetFirstChild&lt;Sheets&gt;();    string relationshipId = workbookPart.GetIdOfPart(newWorksheetPart);    // Get a unique ID for the new sheet.    uint sheetId = 1;    if (sheets.Elements&lt;Sheet&gt;().Count() &amp;gt; 0)    {        sheetId = sheets.Elements&lt;Sheet&gt;().Select(s =&amp;gt; s.SheetId.Value).Max() + 1;    }    string sheetName = &amp;ldquo;Sheet&amp;rdquo; + sheetId;    // Append the new worksheet and associate it with the workbook.    Sheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId, Name = sheetName };    sheets.Append(sheet);    workbookPart.Workbook.Save();    return newWorksheetPart;}// Given a column name, a row index, and a WorksheetPart, inserts a cell into the worksheet. // If the cell already exists, returns it. private static Cell InsertCellInWorksheet(string columnName, uint rowIndex, WorksheetPart worksheetPart){    Worksheet worksheet = worksheetPart.Worksheet;    SheetData sheetData = worksheet.GetFirstChild&lt;SheetData&gt;();    string cellReference = columnName + rowIndex;    // If the worksheet does not contain a row with the specified row index, insert one.    Row row;    if (sheetData.Elements&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex == rowIndex).Count() != 0)    {        row = sheetData.Elements&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex == rowIndex).First();    }    else    {        row = new Row() { RowIndex = rowIndex };        sheetData.Append(row);    }    // If there is not a cell with the specified column name, insert one.      if (row.Elements&lt;Cell&gt;().Where(c =&amp;gt; c.CellReference.Value == columnName + rowIndex).Count() &amp;gt; 0)    {        return row.Elements&lt;Cell&gt;().Where(c =&amp;gt; c.CellReference.Value == cellReference).First();    }    else    {        // Cells must be in sequential order according to CellReference. Determine where to insert the new cell.        Cell refCell = null;        foreach (Cell cell in row.Elements&lt;Cell&gt;())        {            if (string.Compare(cell.CellReference.Value, cellReference, true) &amp;gt; 0)            {                refCell = cell;                break;            }        }        Cell newCell = new Cell() { CellReference = cellReference };        row.InsertBefore(newCell, refCell);        worksheet.Save();        return newCell;    }}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Insert text into a cell.xlsx&amp;rdquo;;InsertText(FileName, &amp;ldquo;Inserted Text&amp;rdquo;);private static void InsertText(string docName, string text){    //Instantiating a Workbook object    Workbook workbook = new Workbook(docName);    //Obtaining the reference of the Active worksheet    Worksheet worksheet = workbook.Worksheets[workbook.Worksheets.ActiveSheetIndex];    //insert value from cell    worksheet.Cells[&amp;ldquo;A1&amp;rdquo;].PutValue(text);    //Saving the Excel file    workbook.Save(docName);}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Insert%20text%20into%20a%20cell%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Insert%20text%20into%20a%20cell%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Merge two adjacent cells</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/merge&#43;two&#43;adjacent&#43;cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/merge&#43;two&#43;adjacent&#43;cells/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--merge-two-adjacent-cells&#34;&gt;Aspose.Cells for .NET : Merge two adjacent cells&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Merge two adjacent cells.xlsx&amp;rdquo;;string sheetName = &amp;ldquo;Sheet1&amp;rdquo;;string cell1Name = &amp;ldquo;A2&amp;rdquo;;string cell2Name = &amp;ldquo;B2&amp;rdquo;;MergeTwoCells(FileName, sheetName, cell1Name, cell2Name);// Given a document name, a worksheet name, and the names of two adjacent cells, merges the two cells.// When two cells are merged, only the content from one cell is preserved:// the upper-left cell for left-to-right languages or the upper-right cell for right-to-left languages.private static void MergeTwoCells(string docName, string sheetName, string cell1Name, string cell2Name){    // Open the document for editing.    using (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))    {        Worksheet worksheet = GetWorksheet(document, sheetName);        if (worksheet == null || string.IsNullOrEmpty(cell1Name) || string.IsNullOrEmpty(cell2Name))        {            return;        }        // Verify if the specified cells exist, and if they do not exist, create them.        CreateSpreadsheetCellIfNotExist(worksheet, cell1Name);        CreateSpreadsheetCellIfNotExist(worksheet, cell2Name);        MergeCells mergeCells;        if (worksheet.Elements&lt;MergeCells&gt;().Count() &amp;gt; 0)        {            mergeCells = worksheet.Elements&lt;MergeCells&gt;().First();        }        else        {            mergeCells = new MergeCells();            // Insert a MergeCells object into the specified position.            if (worksheet.Elements&lt;CustomSheetView&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;CustomSheetView&gt;().First());            }            else if (worksheet.Elements&lt;DataConsolidate&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;DataConsolidate&gt;().First());            }            else if (worksheet.Elements&lt;SortState&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;SortState&gt;().First());            }            else if (worksheet.Elements&lt;AutoFilter&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;AutoFilter&gt;().First());            }            else if (worksheet.Elements&lt;Scenarios&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;Scenarios&gt;().First());            }            else if (worksheet.Elements&lt;ProtectedRanges&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;ProtectedRanges&gt;().First());            }            else if (worksheet.Elements&lt;SheetProtection&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;SheetProtection&gt;().First());            }            else if (worksheet.Elements&lt;SheetCalculationProperties&gt;().Count() &amp;gt; 0)            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;SheetCalculationProperties&gt;().First());            }            else            {                worksheet.InsertAfter(mergeCells, worksheet.Elements&lt;SheetData&gt;().First());            }        }        // Create the merged cell and append it to the MergeCells collection.        MergeCell mergeCell = new MergeCell() { Reference = new StringValue(cell1Name + &amp;ldquo;:&amp;rdquo; + cell2Name) };        mergeCells.Append(mergeCell);        worksheet.Save();    }}// Given a Worksheet and a cell name, verifies that the specified cell exists.// If it does not exist, creates a new cell. private static void CreateSpreadsheetCellIfNotExist(Worksheet worksheet, string cellName){    string columnName = GetColumnName(cellName);    uint rowIndex = GetRowIndex(cellName);    IEnumerable&lt;Row&gt; rows = worksheet.Descendants&lt;Row&gt;().Where(r =&amp;gt; r.RowIndex.Value == rowIndex);    // If the Worksheet does not contain the specified row, create the specified row.    // Create the specified cell in that row, and insert the row into the Worksheet.    if (rows.Count() == 0)    {        Row row = new Row() { RowIndex = new UInt32Value(rowIndex) };        Cell cell = new Cell() { CellReference = new StringValue(cellName) };        row.Append(cell);        worksheet.Descendants&lt;SheetData&gt;().First().Append(row);        worksheet.Save();    }    else    {        Row row = rows.First();        IEnumerable&lt;Cell&gt; cells = row.Elements&lt;Cell&gt;().Where(c =&amp;gt; c.CellReference.Value == cellName);        // If the row does not contain the specified cell, create the specified cell.        if (cells.Count() == 0)        {            Cell cell = new Cell() { CellReference = new StringValue(cellName) };            row.Append(cell);            worksheet.Save();        }    }}// Given a SpreadsheetDocument and a worksheet name, get the specified worksheet.private static Worksheet GetWorksheet(SpreadsheetDocument document, string worksheetName){IEnumerable&lt;Sheet&gt; sheets = document.WorkbookPart.Workbook.Descendants&lt;Sheet&gt;().Where(s =&amp;gt; s.Name == worksheetName);WorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);if (sheets.Count() == 0)return null;elsereturn worksheetPart.Worksheet;}// Given a cell name, parses the specified cell to get the column name.private static string GetColumnName(string cellName){    // Create a regular expression to match the column name portion of the cell name.    Regex regex = new Regex(&amp;quot;[A-Za-z]+&amp;rdquo;);    Match match = regex.Match(cellName);    return match.Value;}// Given a cell name, parses the specified cell to get the row index.private static uint GetRowIndex(string cellName){    // Create a regular expression to match the row index portion the cell name.    Regex regex = new Regex(@&amp;quot;\d+&amp;rdquo;);    Match match = regex.Match(cellName);    return uint.Parse(match.Value);}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Merge two adjacent cells.xlsx&amp;rdquo;;string sheetName = &amp;ldquo;Sheet1&amp;rdquo;;string cell1Name = &amp;ldquo;A2&amp;rdquo;;string cell2Name = &amp;ldquo;B2&amp;rdquo;;MergeTwoCells(FileName, sheetName, cell1Name, cell2Name);private static void MergeTwoCells(string docName, string sheetName, string cell1Name, string cell2Name){    //Instantiating a Workbook object    Workbook workbook = new Workbook(docName);    //Obtaining the reference of the worksheet by passing its Name    Worksheet worksheet = workbook.Worksheets[sheetName];    //Get the range of cells i.e.., A1:C1.    Range range = worksheet.Cells.CreateRange(cell1Name,cell2Name);    //Merge the cells.    range.Merge();    //Saving the Excel file    workbook.Save(docName);}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Merge%20two%20adjacent%20cells%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Merge%20two%20adjacent%20cells%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Open a spreadsheet document for read-only access</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/open&#43;a&#43;spreadsheet&#43;document&#43;for&#43;read-only&#43;access/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/open&#43;a&#43;spreadsheet&#43;document&#43;for&#43;read-only&#43;access/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--open-a-spreadsheet-document-for-read-only-access&#34;&gt;Aspose.Cells for .NET : Open a spreadsheet document for read-only access&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Open a spreadsheet document for read-only access.xlsx&amp;rdquo;;OpenSpreadsheetDocumentReadonly(FileName);}public static void OpenSpreadsheetDocumentReadonly(string filepath){// Open a SpreadsheetDocument based on a filepath.using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(filepath, false)){    // Attempt to add a new WorksheetPart.    // The call to AddNewPart generates an exception because the file is read-only.    WorksheetPart newWorksheetPart = spreadsheetDocument.WorkbookPart.AddNewPart&lt;WorksheetPart&gt;();    // The rest of the code will not be called.}}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Open a spreadsheet document for read-only access.xlsx&amp;rdquo;;OpenSpreadsheetDocumentReadonly(FileName);public static void OpenSpreadsheetDocumentReadonly(string filepath){  // Open a SpreadsheetDocument based on a filepath.  Workbook workbook = new Workbook(filepath);}&lt;/p&gt;
&lt;h2 id=&#34;download-running-code-example&#34;&gt;Download Running Code Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[CodePlex](&lt;a href=&#34;http://asposeopenxml.codeplex.com/SourceControl/latest#Aspose.Cells&#34;&gt;http://asposeopenxml.codeplex.com/SourceControl/latest#Aspose.Cells&lt;/a&gt; VS OpenXML/Open read-only access/)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells%20Vs%20OpenXML%20Spreadsheets/Aspose.Cells%20VS%20OpenXML/Open%20read-only%20access&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Open a spreadsheet document from a stream</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/open&#43;a&#43;spreadsheet&#43;document&#43;from&#43;a&#43;stream/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/open&#43;a&#43;spreadsheet&#43;document&#43;from&#43;a&#43;stream/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--open-a-spreadsheet-document-from-a-stream&#34;&gt;Aspose.Cells for .NET : Open a spreadsheet document from a stream&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Open a spreadsheet document from a stream.xlsx&amp;rdquo;;Stream stream = File.Open(FileName, FileMode.Open);OpenAndAddToSpreadsheetStream(stream);stream.Close();public static void OpenAndAddToSpreadsheetStream(Stream stream){    // Open a SpreadsheetDocument based on a stream.    SpreadsheetDocument spreadsheetDocument =        SpreadsheetDocument.Open(stream, true);    // Add a new worksheet.    WorksheetPart newWorksheetPart = spreadsheetDocument.WorkbookPart.AddNewPart&lt;WorksheetPart&gt;();    newWorksheetPart.Worksheet = new Worksheet(new SheetData());    newWorksheetPart.Worksheet.Save();    Sheets sheets = spreadsheetDocument.WorkbookPart.Workbook.GetFirstChild&lt;Sheets&gt;();    string relationshipId = spreadsheetDocument.WorkbookPart.GetIdOfPart(newWorksheetPart);    // Get a unique ID for the new worksheet.    uint sheetId = 1;    if (sheets.Elements&lt;Sheet&gt;().Count() &amp;gt; 0)    {        sheetId = sheets.Elements&lt;Sheet&gt;().Select(s =&amp;gt; s.SheetId.Value).Max() + 1;    }    // Give the new worksheet a name.    string sheetName = &amp;ldquo;Sheet&amp;rdquo; + sheetId;    // Append the new worksheet and associate it with the workbook.    Sheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId, Name = sheetName };    sheets.Append(sheet);    spreadsheetDocument.WorkbookPart.Workbook.Save();    // Close the document handle.    spreadsheetDocument.Close();    // Caller must close the stream.}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Open a spreadsheet document from a stream.xlsx&amp;rdquo;;Stream stream = File.Open(FileName, FileMode.Open);OpenAndAddToSpreadsheetStream(stream);stream.Close();public static void OpenAndAddToSpreadsheetStream(Stream stream){    //Creating a Workbook object, open the file from a Stream object    //that contains the content of file and it should support seeking    Workbook workbook = new Workbook(stream);}&lt;/p&gt;
&lt;h2 id=&#34;download-running-code-example&#34;&gt;Download Running Code Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[CodePlex](&lt;a href=&#34;https://asposeopenxml.codeplex.com/SourceControl/latest#Aspose.Cells&#34;&gt;https://asposeopenxml.codeplex.com/SourceControl/latest#Aspose.Cells&lt;/a&gt; Vs OpenXML/Open spreadsheet document from a stream/)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells%20Vs%20OpenXML%20Spreadsheets/Code%20Comparison%20of%20Common%20Features/Open%20spreadsheet%20document%20from%20a%20stream&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Retrieve a dictionary of all named ranges in a spreadsheet document</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/retrieve&#43;a&#43;dictionary&#43;of&#43;all&#43;named&#43;ranges&#43;in&#43;a&#43;spreadsheet&#43;document/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/retrieve&#43;a&#43;dictionary&#43;of&#43;all&#43;named&#43;ranges&#43;in&#43;a&#43;spreadsheet&#43;document/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--retrieve-a-dictionary-of-all-named-ranges-in-a-spreadsheet-document&#34;&gt;Aspose.Cells for .NET : Retrieve a dictionary of all named ranges in a spreadsheet document&lt;/h1&gt;
&lt;h2 id=&#34;openxml-excel&#34;&gt;OpenXML Excel&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Retrieve a dictionary of all named ranges.xlsx&amp;rdquo;;Dictionary&amp;lt;String, String&amp;gt; ranges = GetDefinedNames(FileName);public static Dictionary&amp;lt;String, String&amp;gt; GetDefinedNames(String fileName){    // Given a workbook name, return a dictionary of defined names.    // The pairs include the range name and a string representing the range.    var returnValue = new Dictionary&amp;lt;String, String&amp;gt;();    // Open the spreadsheet document for read-only access.    using (SpreadsheetDocument document =        SpreadsheetDocument.Open(fileName, false))    {        // Retrieve a reference to the workbook part.        var wbPart = document.WorkbookPart;        // Retrieve a reference to the defined names collection.        DefinedNames definedNames = wbPart.Workbook.DefinedNames;        // If there are defined names, add them to the dictionary.        if (definedNames != null)        {            foreach (DefinedName dn in definedNames)                returnValue.Add(dn.Name.Value, dn.Text);        }    }    return returnValue;}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Retrieve a dictionary of all named ranges.xlsx&amp;rdquo;;Dictionary&amp;lt;String, String&amp;gt; ranges = GetDefinedNames(FileName);public static Dictionary&amp;lt;String, String&amp;gt; GetDefinedNames(String fileName){    // Given a workbook name, return a dictionary of defined names.    // The pairs include the range name and a string representing the range.    var returnValue = new Dictionary&amp;lt;String, String&amp;gt;();        // Open a SpreadsheetDocument based on a filepath.    Workbook workbook = new Workbook(fileName);        //Getting all named ranges    Range[] range = workbook.Worksheets.GetNamedRanges();        // If there are items in Ranges, add them to the dictionary.    if (range != null)    {        foreach (Range rn in range)            returnValue.Add(rn.Name, rn.Value.ToString());    }    return returnValue;}&lt;/p&gt;
&lt;h2 id=&#34;download-running-code-example&#34;&gt;Download Running Code Example&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;sample-code&#34;&gt;Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;[CodePlex](&lt;a href=&#34;http://asposeopenxml.codeplex.com/SourceControl/latest#Aspose.Cells&#34;&gt;http://asposeopenxml.codeplex.com/SourceControl/latest#Aspose.Cells&lt;/a&gt; VS OpenXML/Retrieve a dictionary of all named ranges/)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells%20Vs%20OpenXML%20Spreadsheets/Aspose.Cells%20VS%20OpenXML/Retrieve%20a%20dictionary%20of%20all%20named%20ranges&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Net: Retrieve the values of cells</title>
      <link>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/retrieve&#43;the&#43;values&#43;of&#43;cells/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://roywangt.github.io/cells/net/plugins/openxml/codeinopenxml/retrieve&#43;the&#43;values&#43;of&#43;cells/</guid>
      <description>
        
        
        &lt;h1 id=&#34;asposecells-for-net--retrieve-the-values-of-cells&#34;&gt;Aspose.Cells for .NET : Retrieve the values of cells&lt;/h1&gt;
&lt;h2 id=&#34;openxml-sdk&#34;&gt;OpenXML SDK&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Retrieve the values of cells.xlsx&amp;rdquo;;// Retrieve the value in cell A1.string value = GetCellValue(FileName, &amp;ldquo;Sheet1&amp;rdquo;, &amp;ldquo;A1&amp;rdquo;);Console.WriteLine(value);// Retrieve the value of a cell, given a file name, sheet name, // and address name.public static string GetCellValue(string fileName,string sheetName,string addressName){string value = null;// Open the spreadsheet document for read-only access.using (SpreadsheetDocument document =    SpreadsheetDocument.Open(fileName, false)){    // Retrieve a reference to the workbook part.    WorkbookPart wbPart = document.WorkbookPart;    // Find the sheet with the supplied name, and then use that     // Sheet object to retrieve a reference to the first worksheet.    Sheet theSheet = wbPart.Workbook.Descendants&lt;Sheet&gt;().      Where(s =&amp;gt; s.Name == sheetName).FirstOrDefault();    // Throw an exception if there is no sheet.    if (theSheet == null)    {        throw new ArgumentException(&amp;ldquo;sheetName&amp;rdquo;);    }    // Retrieve a reference to the worksheet part.    WorksheetPart wsPart =        (WorksheetPart)(wbPart.GetPartById(theSheet.Id));    // Use its Worksheet property to get a reference to the cell     // whose address matches the address you supplied.    Cell theCell = wsPart.Worksheet.Descendants&lt;Cell&gt;().      Where(c =&amp;gt; c.CellReference == addressName).FirstOrDefault();    // If the cell does not exist, return an empty string.    if (theCell != null)    {        value = theCell.InnerText;        // If the cell represents an integer number, you are done.         // For dates, this code returns the serialized value that         // represents the date. The code handles strings and         // Booleans individually. For shared strings, the code         // looks up the corresponding value in the shared string         // table. For Booleans, the code converts the value into         // the words TRUE or FALSE.        if (theCell.DataType != null)        {            switch (theCell.DataType.Value)            {                case CellValues.SharedString:                    // For shared strings, look up the value in the                    // shared strings table.                    var stringTable =                        wbPart.GetPartsOfType&lt;SharedStringTablePart&gt;()                        .FirstOrDefault();                    // If the shared string table is missing, something                     // is wrong. Return the index that is in                    // the cell. Otherwise, look up the correct text in                     // the table.                    if (stringTable != null)                    {                        value =                            stringTable.SharedStringTable                            .ElementAt(int.Parse(value)).InnerText;                    }                    break;                case CellValues.Boolean:                    switch (value)                    {                        case &amp;ldquo;0&amp;rdquo;:                            value = &amp;ldquo;FALSE&amp;rdquo;;                            break;                        default:                            value = &amp;ldquo;TRUE&amp;rdquo;;                            break;                    }                    break;            }        }    }}return value;}&lt;/p&gt;
&lt;h2 id=&#34;asposecells&#34;&gt;Aspose.Cells&lt;/h2&gt;
&lt;p&gt;string FilePath = @&amp;rdquo;..\..\..\..\Sample Files\&amp;quot;;string FileName = FilePath + &amp;ldquo;Retrieve the values of cells.xlsx&amp;rdquo;;// Retrieve the value in cell A1.string value = GetCellValue(FileName, &amp;ldquo;Sheet1&amp;rdquo;, &amp;ldquo;A1&amp;rdquo;);Console.WriteLine(value);Console.ReadKey();    // Retrieve the value of a cell, given a file name, sheet name, // and address name.public static string GetCellValue(string fileName,    string sheetName,    string addressName){    //Instantiating a Workbook object    Workbook workbook = new Workbook(fileName);    //Obtaining the reference of the Active worksheet    Worksheet worksheet = workbook.Worksheets.GetSheetByCodeName(sheetName);    //retrieve value from cell    string returnValue = worksheet.Cells[addressName].Value.ToString();    return returnValue;}&lt;/p&gt;
&lt;h2 id=&#34;download-sample-code&#34;&gt;Download Sample Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://asposeopenxml.codeplex.com/releases/view/616479&#34;&gt;CodePlex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aspose-cells/Aspose.Cells-for-.NET/releases/tag/AsposeCellsVsOpenXMLv1.1&#34;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells%20Vs%20OpenXML/Retrieve%20the%20values%20of%20cells%20(Aspose.Cells).zip/download&#34;&gt;Sourceforge&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Retrieve%20the%20values%20of%20cells%20(Aspose.Cells).zip&#34;&gt;Bitbucket&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
