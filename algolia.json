[{"content":"**Aspose.Cells Product Family : Aspose.Cells for .NET **\nThis page last changed on Apr 24, 2016 by muhammad.sabir.\nWelcome to Aspose.Cells for .NET\nAspose.Cells for .NET is a spreadsheet programming library that allows software developers to manipulate and convert spreadsheet files from within their own applications. A combination of APIs and GUI controls, Aspose.Cells for .NET speeds up Microsoft Excel® programming and conversion. Aspose.Cells for .NET supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP and SVG.\nAspose.Cells for .NET Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for .NET Online Documentation Aspose.Cells for .NET Features Aspose.Cells for .NET Limitations Aspose.Cells for .NET Release Notes Aspose.Cells for .NET Product Page Install Aspose.Cells for .NET NuGet Package Aspose.Cells for .NET API Reference Guide Aspose.Cells for .NET Free Support Forum Aspose.Cells for .NET Paid Support Helpdesk  Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"f55b728053ccc375482b82a3e12225ea","permalink":"https://roywangt.github.io/aspose.cells+for+.net/","title":"Aspose.Cells for .NET"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for Android via Java **\nThis page last changed on Jun 20, 2018 by amjad.sahi.\nWelcome to the Aspose.Cells for Android via Java\nAspose.Cells for Android via Java is a flexible component that enables Android applications to create and manage Excel spreadsheets without requiring Microsoft Excel. Aspose.Cells for Android via Java\u0026amp;rsquo;s ultimate goal is to bring all stunning features of Aspose.Cells for Java to the Android platform that makes it possible to do native Android development in Java, with either Android Studio or any IDE that supports Android development. Aspose.Cells for Android via Java is a class library that enables your native Android applications to perform a great range of document processing tasks. Aspose.Cells for Android via Java supports XLS, XLSX, CSV, SpreadsheetML, ODS, Tab Delimited, HTML, PDF, XPS and other formats. With Aspose.Cells for Android via Java you can generate, modify, convert and render spreadsheets.\nAspose.Cells for Android via Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for Android via Java is very similar to Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for Android via Java Features Aspose.Cells for Android via Java Limitations and API Differences Aspose.Cells for Android via Java Release Notes Aspose.Cells for Android via Java Product Page Download Aspose.Cells for Android via Java Install Aspose.Cells for Android via Java from Maven Aspose.Cells for Android via Java API Reference Guide (Aspose.Cells for Android via Java is very similar to Aspose.Cells for Java. So, you can use the same API Reference Guide)     ||      \\     Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"eb4dffc8d022bb1f7bac195d32bddd68","permalink":"https://roywangt.github.io/aspose.cells+for+android+via+java/","title":"Aspose.Cells for Android via Java"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for CPP **\nThis page last changed on Apr 17, 2020 by muhammad.ahmad.\nWelcome to the Aspose.Cells for C++\nAspose.Cells for C++ is a native C++ library that enables C++ developers to create, manipulate and convert spreadsheets programmatically without requiring Office Automation or Microsoft Excel application. Aspose.Cells for C++ supports spreadsheet formats such as MS Excel 97-2003 (XLS), MS Excel 2007-2013/2016 (XLSX, XLSM, XLSB, etc.), Open Office XML and other formats. You may also render images from worksheets and convert MS Excel spreadsheet to PDF format. The API also allows you to create, manipulate and render charts and shapes. Moreover, formula calculations is another good aspect provided by component and you may utilize it.\n.\nAspose.Cells for C++ Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for C++ Online Documentation Aspose.Cells for C++ Features Aspose.Cells for C++ Release Notes Aspose.Cells for C++ Product Page Install Aspose.Cells for C++ NuGet Package Aspose.Cells for C++ API Reference Guide Download Examples at GitHub Repository Aspose.Cells for C++ Free Support Forum Aspose.Cells for C++ Paid Support Helpdesk  Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"bc4beb39507a31bf70b3899e195078c9","permalink":"https://roywangt.github.io/aspose.cells+for+cpp/","title":"Aspose.Cells for CPP"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for JasperReports **\nThis page last changed on Apr 24, 2016 by muhammad.sabir.\nAspose.Cells for JasperReports\nCollapse all\nExpand all Collapse all\nDocument generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"07d4469a520f02ef685d47e5f425ebbb","permalink":"https://roywangt.github.io/aspose.cells+for+jasperreports/","title":"Aspose.Cells for JasperReports"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for Java **\nThis page last changed on Apr 24, 2016 by muhammad.sabir.\nWelcome to Aspose.Cells for Java\nAspose.Cells for Java is a class library that enables your applications to perform a great range of spreadsheet processing tasks. Aspose.Cells for Java supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel® files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP and SVG.\nAspose.Cells for Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation Aspose.Cells for Java Features Aspose.Cells for Java Limitations Aspose.Cells for Java Release Notes Aspose.Cells for Java Product Page Download Aspose.Cells for Java Install Aspose.Cells for Java from Maven Repository Aspose.Cells for Java API Reference Guide Aspose.Cells for Java Free Support Forum Aspose.Cells for Java Paid Support Helpdesk  Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"ab6c8ee1c162e5c1448eb34ddf46820e","permalink":"https://roywangt.github.io/aspose.cells+for+java/","title":"Aspose.Cells for Java"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for Node.js via Java **\nThis page last changed on Sep 06, 2019 by muhammad.ahmad.\nWelcome to Aspose.Cells for Node.js via Java\nAspose.Cells for Node.js via Java presents all the useful features of Aspose.Cells for Java using Node.js. Aspose.Cells for Node.js via Java is a class library that enables you to perform a great range of spreadsheet processing tasks. Aspose.Cells for Node.js via Java is a scalable and feature-rich API that offers spreadsheet format conversion, styling of worksheets to the most granular level, chart management \u0026amp;amp; rendering, and our reliable Formula Calculation Engine. Aspose.Cells for Node.js via Java supports XLS, XLSX, ODS, SpreadsheetML, CSV, Tab Delimited, HTML/MHTML, PDF, XPS and other formats. With Aspose.Cells for Node.js via Java you can generate, modify, convert and render Excel documents.\nAspose.Cells for Node.js via Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for Node.js via Java is ported from Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for Node.js via Java Features Aspose.Cells for Node.js via Java Limitations and API Differences Aspose.Cells for Node.js via Java Release Notes Aspose.Cells for Node.js via Java Product Page Download Aspose.Cells for Node.js via Java Aspose.Cells for Node.js via Java API Reference Guide Aspose.Cells for Node.js via Java Free Support Forum Aspose.Cells for Node.js via Java Paid Support Helpdesk  Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"20fe82b790f7da35c1527ddb0c1ba761","permalink":"https://roywangt.github.io/aspose.cells+for+node.js+via+java/","title":"Aspose.Cells for Node.js via Java"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for PHP via Java **\nThis page last changed on Apr 23, 2019 by muhammad.ahmad.\nWelcome to Aspose.Cells for PHP via Java\nAspose.Cells for PHP via Java provides all the valuable features of Aspose.Cells for Java using JavaBridge. Aspose.Cells for PHP via Java is a class library that enables you to perform a great range of spreadsheet processing tasks. Aspose.Cells for PHP via Java is a scalable and feature rich API that offers spreadsheet format conversion, styling of worksheets to the most granular level, chart management \u0026amp;amp; rendering, and our reliable Formula Calculation Engine. Aspose.Cells for PHP via Java supports XLS, XLSX, ODS, SpreadsheetML, CSV, Tab Delimited, HTML/MHTML, PDF, XPS and other formats. With Aspose.Cells for PHP via Java you can generate, modify, convert and render Excel documents.\nAspose.Cells for PHP via Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for PHP via Java is ported from Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for PHP via Java Features Aspose.Cells for PHP via Java Limitations and API Differences Aspose.Cells for PHP via Java Release Notes Aspose.Cells for PHP via Java Product Page Download Aspose.Cells for PHP via Java Aspose.Cells for PHP via Java API Reference Guide Aspose.Cells for PHP via Java Free Support Forum Aspose.Cells for PHP via Java Paid Support Helpdesk     ||      \\     Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"c015d124b20ae52ce0f331d198f3003e","permalink":"https://roywangt.github.io/aspose.cells+for+php+via+java/","title":"Aspose.Cells for PHP via Java"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for Python via Java **\nThis page last changed on Feb 03, 2020 by muhammad.ahmad.\nWelcome to Aspose.Cells for Python via Java\nAspose.Cells for Python via Java enables your applications to perform a great range of spreadsheet processing tasks. Aspose.Cells for Python via Java supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel® files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP, and SVG.\nAspose.Cells for Python via Java Resources\nThe following are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for Python via Java is very similar to Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for Python via Java Features Aspose.Cells for Python via Java Release Notes Aspose.Cells for Python via Java Product Page Download Aspose.Cells for Python via Java Aspose.Cells for Python via Java API Reference Guide Aspose.Cells for Python via Java Free Support Forum Aspose.Cells for Python via Java Paid Support Helpdesk  Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"e3484f641b3d2cb7d0cb537c2ac24c9a","permalink":"https://roywangt.github.io/aspose.cells+for+python+via+java/","title":"Aspose.Cells for Python via Java"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for ReportingServices **\nThis page last changed on Apr 24, 2016 by muhammad.sabir.\nWelcome to Aspose.Cells for Reporting Services\nAspose.Cells for Reporting Services is a solution for developers who need to deliver Microsoft Excel reports in Reporting Services. It adds flexible and user-friendly features the Reporting Services through the Aspose.Cells.Report.Designer tool. The API can perform all tasks related to developing reports in Reporting Services such as setting up data sources, creating queries, designing reports and publishing reports to Report Server. Since Aspose.Cells.Report.Designer uses Microsoft Excel as a report template, users can take advantage of the powerful features available in Microsoft Excel.\nAspose.Cells for Reporting Services Resources\nThe following are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Reporting Services Online Documentation Aspose.Cells for Reporting Services Features Aspose.Cells for Reporting Services Release Notes Aspose.Cells for Reporting Services Product Page Download Aspose.Cells for Reporting Services Aspose.Cells for Reporting Services Free Support Forum Aspose.Cells for Reporting Services Paid Support Helpdesk  Document generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"698c6844045f61cfb91703f7da1d2b92","permalink":"https://roywangt.github.io/aspose.cells+for+reportingservices/","title":"Aspose.Cells for ReportingServices"},{"content":"**Aspose.Cells Product Family : Aspose.Cells for SharePoint **\nThis page last changed on Apr 24, 2016 by muhammad.sabir.\nAspose.Cells for SharePoint\nCollapse all\nExpand all Collapse all\nDocument generated by Confluence on May 31, 2020 08:32\n","date":-62135596800,"description":"","objectID":"c7db4cde79dd851939a892f4c0e3fef6","permalink":"https://roywangt.github.io/aspose.cells+for+sharepoint/","title":"Aspose.Cells for SharePoint"},{"content":"Aspose.Cells Product Family : Home\nThis page last changed on Feb 19, 2020 by muhammad.ahmad.\n   Welcome to Aspose.Cells for .NET\nAspose.Cells for .NET is a spreadsheet programming library that allows software developers to manipulate and convert spreadsheet files from within their own applications. A combination of APIs and GUI controls, Aspose.Cells for .NET speeds up Microsoft Excel® programming and conversion. Aspose.Cells for .NET supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP and SVG.\nAspose.Cells for .NET Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n- Aspose.Cells for .NET Online Documentation\n- Aspose.Cells for .NET Features\n- Aspose.Cells for .NET Limitations\n- Aspose.Cells for .NET Release Notes\n- Aspose.Cells for .NET Product Page\n- Install Aspose.Cells for .NET NuGet Package\n- Aspose.Cells for .NET API Reference Guide\n- Aspose.Cells for .NET Free Support Forum\n- Aspose.Cells for .NET Paid Support Helpdesk\n Welcome to Aspose.Cells for Java\nAspose.Cells for Java is a class library that enables your applications to perform a great range of spreadsheet processing tasks. Aspose.Cells for Java supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel® files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP and SVG.\nAspose.Cells for Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n- Aspose.Cells for Java Online Documentation\n- Aspose.Cells for Java Features\n- Aspose.Cells for Java Limitations\n- Aspose.Cells for Java Release Notes\n- Aspose.Cells for Java Product Page\n- Download Aspose.Cells for …","date":1397001600,"description":"","lastmod":"2014-04-09T00:00:00Z","objectID":"3976528693a0108357f4928017600865","permalink":"https://roywangt.github.io/","title":"Aspose.Cells for Family"},{"content":"aspose.com offers file format manipulation APIs that support more than 100 file formats. Platforms include .NET, Java, C++, Android via Java, Android via Xamarin, SharePoint, Reporting Services, JasperReports.\nIt supports some of the most popular file formats in business, including Microsoft Word documents, Excel spreadsheets, PowerPoint presentations, Outlook emails and archives, Visio diagrams, Project files, OneNote documents, and Adobe Acrobat PDF documents. We also offer OCR, OMR, barcode generation and recognition, and image manipulation APIs.\naspose.cloud provides SDKs developed on top of RESTful APIs offering the features to generate, convert and automate platform for developers in the cloud.\nOur SDKs make it easier for Web and Mobile Apps developers to work with Microsoft Word documents, Excel spreadsheets, PowerPoint presentations, Adobe PDFs, OpenDocument formats, Barcodes, OCR, Email formats and protocols in their apps. The SDKs can be called from any platform: .NET, Java, Ruby, Salesforce, and Amazon etc.\n","date":1397001600,"description":"","lastmod":"2014-04-09T00:00:00Z","objectID":"6083a88ee3411b0d17ce02d738f69d47","permalink":"https://roywangt.github.io/about/","publishdate":"2014-04-09T00:00:00Z","title":"About"},{"content":"** Aspose.Cells for Android via Java : Aspose.Cells for Android via Java Home **\nWelcome to the Aspose.Cells for Android via Java\nAspose.Cells for Android via Java is a flexible component that enables Android applications to create and manage Excel spreadsheets without requiring Microsoft Excel. Aspose.Cells for Android via Java\u0026amp;rsquo;s ultimate goal is to bring all stunning features of Aspose.Cells for Java to the Android platform that makes it possible to do native Android development in Java, with either Android Studio or any IDE that supports Android development. Aspose.Cells for Android via Java is a class library that enables your native Android applications to perform a great range of document processing tasks. Aspose.Cells for Android via Java supports XLS, XLSX, CSV, SpreadsheetML, ODS, Tab Delimited, HTML, PDF, XPS and other formats. With Aspose.Cells for Android via Java you can generate, modify, convert and render spreadsheets.\nAspose.Cells for Android via Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for Android via Java is very similar to Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for Android via Java Features Aspose.Cells for Android via Java Limitations and API Differences Aspose.Cells for Android via Java Release Notes Aspose.Cells for Android via Java Product Page Download Aspose.Cells for Android via Java Install Aspose.Cells for Android via Java from Maven Aspose.Cells for Android via Java API Reference Guide (Aspose.Cells for Android via Java is very similar to Aspose.Cells for Java. So, you can use the same API Reference Guide)     ||      \\     Attachments: asposeCells-logo.png (image/png)\n","date":-62135596800,"description":"","objectID":"e236ce72a8ef3afbdb1064640cf823cf","permalink":"https://roywangt.github.io/cellsandroidjava/","title":"Aspose.Cells for Android via Java"},{"content":"** Aspose.Cells for C++ : Home **\nWelcome to the Aspose.Cells for C++\nAspose.Cells for C++ is a native C++ library that enables C++ developers to create, manipulate and convert spreadsheets programmatically without requiring Office Automation or Microsoft Excel application. Aspose.Cells for C++ supports spreadsheet formats such as MS Excel 97-2003 (XLS), MS Excel 2007-2013/2016 (XLSX, XLSM, XLSB, etc.), Open Office XML and other formats. You may also render images from worksheets and convert MS Excel spreadsheet to PDF format. The API also allows you to create, manipulate and render charts and shapes. Moreover, formula calculations is another good aspect provided by component and you may utilize it.\n.\nAspose.Cells for C++ Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for C++ Online Documentation Aspose.Cells for C++ Features Aspose.Cells for C++ Release Notes Aspose.Cells for C++ Product Page Install Aspose.Cells for C++ NuGet Package Aspose.Cells for C++ API Reference Guide Download Examples at GitHub Repository Aspose.Cells for C++ Free Support Forum Aspose.Cells for C++ Paid Support Helpdesk  ","date":-62135596800,"description":"","objectID":"266306742cdf1822d9fae8a3b05fb95a","permalink":"https://roywangt.github.io/cellscpp/","title":"Aspose.Cells for CPP"},{"content":"Developer Guide\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"e070545f3aebf291d96faa5ea069242e","permalink":"https://roywangt.github.io/cellscpp/developerguide/","title":"Developer Guide"},{"content":"   Contents Summary\n1 Get Cell Name from Row and Column Indices\n2 Get Row and Column Indices from Cell Name\n |     Get Cell Name from Row and Column Indices     It is possible to find a cell\u0026amp;rsquo;s name given the row and column index. This article explains how. Aspose.Cells provides the ICellsHelper.CellIndexToName_i method which allows developers to get a cell\u0026amp;rsquo;s name if they provide the row and column index.\nUnlike Microsoft Excel, where row and column indices start from 1, Aspose.Cells starts counting row and column indices from 0.\nThe following sample code illustrates how to use ICellsHelper.CellIndexToName_i to access the a cell\u0026amp;rsquo;s name given a known row and column index. The code generates the following output.\n\\\nGet Row and Column Indices from Cell Name\nIt is possible to find a row and column index of the cell from its name. This article explains how. Aspose.Cells provides the ICellsHelper.CellNameToIndex_i method which allows developers to get a row and column index from the cell\u0026amp;rsquo;s name.\nUnlike Microsoft Excel, where row and column indices start from 1, Aspose.Cells starts counting row and column indices from 0.\nThe following sample code illustrates how to use CellsHelper.CellNameToIndex to get the row and column index from the cell\u0026amp;rsquo;s name. The code generates the following output.\n\\\n","date":-62135596800,"description":"","objectID":"f5a6a81954d8b93da1bbeecdb28942c6","permalink":"https://roywangt.github.io/cellscpp/developerguide/cellshelper/names+and+indices/","title":"Names and Indices"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"dac0e00456d38f47c6cdc46a32d4f4c6","permalink":"https://roywangt.github.io/cellscpp/developerguide/cellshelper/","title":"Cells Helper"},{"content":"   Contents Summary\n1 Creating Charts\n2 Rendering Charts 2.1 Rendering Charts to Images\n2.2 Rendering Chart to PDF\n3 Supported Chart Types for Rendering\n |     Creating Charts     Aspose.Cells APIs support to create a verity of Excel charts as detailed under the topic Creating \u0026amp;amp; Customizing Excel Charts. In order to demonstrate the usage of Aspose.Cells APIs to render the charts in image \u0026amp;amp; PDF format, we will create a chart of type Column as per following snippet.\n// Create a new workbook\nintrusive_ptr workbook = Factory::CreateIWorkbook();\n// Get first worksheet which is created by default\nintrusive_ptr worksheet = workbook-\u0026amp;gt;GetIWorksheets()-\u0026amp;gt;GetObjectByIndex(0);\n// Adding sample values to cells\nworksheet-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;A1\u0026amp;rdquo;))-\u0026amp;gt;PutValue(50);\nworksheet-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;A2\u0026amp;rdquo;))-\u0026amp;gt;PutValue(100);\nworksheet-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;A3\u0026amp;rdquo;))-\u0026amp;gt;PutValue(150);\nworksheet-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B1\u0026amp;rdquo;))-\u0026amp;gt;PutValue(4);\nworksheet-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B2\u0026amp;rdquo;))-\u0026amp;gt;PutValue(20);\nworksheet-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B3\u0026amp;rdquo;))-\u0026amp;gt;PutValue(50);\n// Adding a chart to the worksheet\nint chartIndex = worksheet-\u0026amp;gt;GetICharts()-\u0026amp;gt;Add(Aspose::Cells::Charts::ChartType::ChartType_Column, 5, 0, 20, 8);\n// Accessing the instance of the newly added chart\nintrusive_ptrAspose::Cells::Charts::IChart chart = worksheet-\u0026amp;gt;GetICharts()-\u0026amp;gt;GetObjectByIndex(chartIndex);\n// Adding SeriesCollection (chart data source) to the chart ranging from \u0026amp;ldquo;A1\u0026amp;rdquo; cell to \u0026amp;ldquo;B3\u0026amp;rdquo;\nchart-\u0026amp;gt;GetNISeries()-\u0026amp;gt;Add(new String(\u0026amp;ldquo;A1:B3\u0026amp;rdquo;), true);\n\\\nRendering Charts\nAspose.Cells APIs support to convert the Excel Charts to images and PDF formats without requiring any additional tools or applications. In order to provide the rendering support, the …","date":-62135596800,"description":"","objectID":"d6716ae162dca720878ab162ec4b4625","permalink":"https://roywangt.github.io/cellscpp/developerguide/charts/chart+rendering/","title":"Chart Rendering"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Pyramid Chart\n3 Line Chart\n4 Bubble Chart\n5 Creating Custom Charts\n |     Possible Usage Scenarios     A chart is a visual display of information. Aspose.Cells allows developers to visualize information in charts just as Microsoft Excel does. Presenting information in charts is always helpful to decision-makers for making quick and timely decisions. It\u0026amp;rsquo;s easier to quickly see comparisons, patterns, and trends in data with charts rather than raw numbers. Creating charts at runtime, based on the data in a spreadsheet, is one of Aspose.Cells\u0026amp;rsquo; useful feature. Aspose.Cells supports creating both Standard and Customized charts. Below, we will show a few examples with sample files on how to create some common MS-Excel chart types using Aspose.Cells API.\nPyramid Chart\nWhen the example code is executed, a pyramid chart is added to the worksheet. Please see the output Excel file of the following sample code.\nLine Chart\nIn the above example, simply changing the ChartType to ChartType_Line creates a line chart. The complete source is provided below. when the code is executed, a line chart is added to the worksheet. Please see the output Excel file of the following sample code.\nBubble Chart\nIn order to create a bubble chart, the ChartType has to be set to ChartType_Bubble and few extra properties such as SetBubbleSizes \u0026amp;amp; SetXValues need to be set accordingly. Upon executing the following code, a bubble chart is added to the worksheet. Please see the output Excel file of the following sample code.\nCreating Custom Charts\nSo far, when we\u0026amp;rsquo;ve discussed charts, we\u0026amp;rsquo;ve looked at standard charts that have their own standard formatting settings. We only define the data source, set a few properties and the chart is created with its default format settings. But Aspose.Cells APIs also supports creating custom charts that allow developers to create charts with their own format settings. Developers can create custom …","date":-62135596800,"description":"","objectID":"22b35aea401c53cbc58e901c9ee08c7d","permalink":"https://roywangt.github.io/cellscpp/developerguide/charts/creating+and+customizing+charts/","title":"Creating and Customizing Charts"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Manipulate Excel 2016 Charts\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells supports the reading and manipulation of Microsoft Excel 2016 charts which are not present in Microsoft Excel 2013 or earlier versions.\nRead and Manipulate Excel 2016 Charts\nThe following sample code loads the sample Excel file which contains Excel 2016 charts in the first worksheet. It reads all charts one by one and changes its title as per its chart type. The following screenshot shows the sample Excel file before the execution of the code. As you can see, the chart title is the same for all charts.\nThe following screenshot shows the output Excel file after the execution of code. As you can see, the chart title is changed as per its chart type.\nSample Code\nConsole Output\nHere is the console output of the above sample code when executed with the provided sample Excel file.\nWaterfall\nTreemap\nSunburst\nHistogram\nBoxWhisker\nAttachments: outputReadAndManipulateExcel2016Charts.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleReadAndManipulateExcel2016Charts.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) excel-2016-charts.png (image/png) output-excel-2016-charts.png (image/png)\n","date":-62135596800,"description":"","objectID":"281d583efef2c055fdee62eea05c53c2","permalink":"https://roywangt.github.io/cellscpp/developerguide/charts/read+and+manipulate+excel+2016+charts/","title":"Read and Manipulate Excel 2016 Charts"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"565c9d1473672e62d662ba3b6bd3ca50","permalink":"https://roywangt.github.io/cellscpp/developerguide/charts/","title":"Charts"},{"content":"We know that all worksheets may contain data that is basically stored in cells (with which a worksheet is made up of). A cell is a basic part of a worksheet that is used to construct the whole worksheet as a sequence of rows and columns. Before we try to access data from a worksheet, we would need to get access to its cells. So, in this topic, we will discuss some basic approaches to access worksheet cells at runtime using Aspose.Cells.\n   Contents Summary\n1 Accessing Cells 1.1 Using Cell Name\n1.2 Using Row \u0026amp;amp; Column Index of the Cell\n2 Accessing Maximum Display Range of Worksheet\n |     Accessing Cells     Aspose.Cells provides a class IWorkbook that represents an Excel file. The IWorkbook class contains a Worksheets collection that allows to access each worksheet in the Excel file. A worksheet is represented by the IWorksheet class. The IWorksheet class provides a Cells collection that represents all cells in the worksheet.\nWe can use Cells collection to access cells in a worksheet. Aspose.Cells provides three basic approaches to access cells in a worksheet:\n Using cell name. Using a cell\u0026amp;rsquo;s row and column index. Using a cell index in the Cells collection  We have mentioned that the 3rd approach is the fastest and the 1st approach is the slowest one. The performance difference between the approaches is very small so don\u0026amp;rsquo;t worry about performance degradation, whichever approach you use.\nUsing Cell Name\nDevelopers can access any specific cell by passing its cell name to the Cells collection of the IWorksheet class as an index.\nIf you create a blank worksheet at start, the count of Cells collection is zero. When you use this approach to access a cell, it will check whether this cell exists in the collection or not. If yes, it returns the cell object in the collection otherwise, it creates a new ICell object, adds the object to the Cells collection and then returns that object. This approach is the easiest way to access the cell if you are familiar with …","date":-62135596800,"description":"","objectID":"3310da00b788fff71e04526f6c361aab","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/accessing+cells+of+a+worksheet/","title":"Accessing Cells of a Worksheet"},{"content":"   Contents Summary\n1 Add Hyperlinks to the Cells\n2 Sample Code\n ||      Add Hyperlinks to the Cells      The following sample code shows how to add a hyperlink inside the cell of the worksheet. You can also add a hyperlink in a range of cells in a similar way. Please check the output excel file generated with this code and the following screenshot showing the output excel file in Microsoft Excel.\nSample Code\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) adding-hyperlink.png (image/png)\n","date":-62135596800,"description":"","objectID":"e8a559799868f09cd5e64b99f8cf16dc","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/add+hyperlinks+to+the+cells/","title":"Add Hyperlinks to the Cells"},{"content":"In Accessing Cells of a Worksheet, we discussed basic approaches for accessing cells in a worksheet. This article uses one of those approaches to add different types of data to cells.\n   Contents Summary\n1 Adding Data to Cells 1.1 Improving Efficiency\n2 Retrieving Data from Cells\n |     Adding Data to Cells     Aspose.Cells provides a class IWorkbook that represents a Microsoft Excel file. The IWorkbook class contains an IWorksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the IWorksheet class. The IWorksheet class provides an ICells collection. Each item in the ICells collection represents an object of the ICell class.\nAspose.Cells allows developers to add data to the cells in worksheets by calling the ICell class PutValue method. Aspose.Cells provides overloaded versions of the PutValue method that lets developers add different kinds of data to cells. Using these overloaded versions of the PutValue method, it is possible to add a Boolean, string, double, integer or date/time, etc. values to the cell.\nImproving Efficiency\nIf you use PutValue method to put a large amount of data into a worksheet, you should add values to the cells, first by rows and then by columns. This approach greatly improves the efficiency of your applications.\nRetrieving Data from Cells\nAspose.Cells provides a class IWorkbook that represents a Microsoft Excel file. The IWorkbook class contains an IWorksheets collection that allows access to worksheets in the file. A worksheet is represented by the IWorksheet class. The IWorksheet class provides a ICells collection. Each item in the ICells collection represents an object of the ICell class.\nThe ICell class provides several methods that allow developers to retrieve values from the cells according to their data types. These methods include:\n GetStringValue, returns the string value of the cell. GetDoubleValue, returns the double value of the cell. GetBoolValue, returns the boolean value of …","date":-62135596800,"description":"","objectID":"4a6753a49e340d7a85c894d50ef1bc8b","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/add+and+retrieve+data/","title":"Add and Retrieve Data"},{"content":"   Contents Summary\n1 Possible Usage Scenario\n2 Apply Conditional Formatting in Worksheet\n3 Sample Code\n ||      Possible Usage Scenario      Aspose.Cells allows you to add all sorts of Conditional Formatting e.g. Formula, Above Average, Color Scale, Data Bar, Icon Set, Top10, etc. It provides the IFormatCondition class which has all the necessary methods to apply conditional formatting of your choice. Here is the list of a few of Get methods.\n GetIAboveAverage() GetIColorScale() GetIDataBar() GetIIconSet() GetITop10()  Apply Conditional Formatting in Worksheet\nThe following sample code shows how to add a Cell Value conditional formatting on cells A1 and B2. Please see the output excel file generated by the code and the following screenshot which explains the effect of the code on the output excel file. If you will put some value greater than 100 in cell A2 and B2, the Red fill color from cell A1 and B2 will disappear.\nSample Code\nAttachments: output-conditional-formatting.png (image/png) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"5b3be5ef9dd69c54617705cab6b51c82","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/apply+conditional+formatting+in+worksheet/","title":"Apply Conditional Formatting in Worksheet"},{"content":"   Contents Summary\n1 Format Cell or Range of Cells\n2 Sample Code\n ||      Format Cell or Range of Cells      If you want to format cell or range of cells, then Aspose.Cells provides the IStyle class. You can accomplish all the formatting of the cell or range of cells using this class. Some of the things relating to formatting that can be accomplished with IStyle class are following\n Set fill color of the cell Set the text wrap of the cell Set the borders of the cells like the top, left, bottom and right borders, etc. Set the font color, font size, font name, strike, bold, italic, underline, etc. Set the text horizontal or vertical alignment to right, left, top, bottom, center, etc.  If you want to set the style of a single cell then please use ICell-\u0026amp;gt;SetIStyle() method and if you want to set the style of a range of cells, then please use IRange-\u0026amp;gt;ApplyIStyle() method.\nSample Code\nThe following sample code formats the cell C4 of the worksheet in various ways and the screenshot shows the output excel file generated by it for your reference.\n\\\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spre) cells-formatting-output.png (image/png)\n","date":-62135596800,"description":"","objectID":"37e4bbb4c88d52ee6041fbd5a9d71df1","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/cells+formatting/","title":"Cells Formatting"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create Named Range in a Workbook\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenarios      Aspose.Cells supports the creation of a named range. There are different ways to create a named range. One of the simplest ways is to first create IRange object and then set its name using IRange.SetName() method. You can see all the named ranges inside your excel file via Microsoft Excel *Name Manager *interface.\nCreate Named Range in a Workbook\nThe following sample code explains how to create a* Named Range* via Aspose.Cells. Once, the *Named Range* is created, it is visible inside the IWorkbook.GetIWorksheets().GetINames() collection. Please see the output excel file generated by the code for a reference.\nSample Code\nConsole Output\nThe following console output prints the values of GetFullText and GetRefersTo methods of the created Named Range in the above code.\nFull Text: MyNamedRange\nRefers To: =Sheet1!$A$5:$C$10\nAttachments: invalid (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputCreateNamedRange.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"af173a66e7b46dbe375a53ba5fa6875c","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/create+named+range+in+a+workbook/","title":"Create Named Range in a Workbook"},{"content":"   Contents Summary\n1 Creating Subtotals\n2 Sample Code\n ||      Creating Subtotals      The following sample code shows how to create subtotals using Aspose.Cells. The code loads the sample excel file and creates subtotals on the cell range B13:C19 and saves the output excel file. The following screenshot shows how the sample and output excel file looks after the execution of the code.\nSample Code\nAttachments: subtotals-sample-output-excel-files.png (image/png) outputCreatingSubtotals.xlsx (application/unknown) sampleCreatingSubtotals.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"6d8c8d715d5203e17818d3502f0b9803","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/creating+subtotals/","title":"Creating Subtotals"},{"content":"   Contents Summary\n1 Find or Search Data\n2 Sample Code\n3 Console Output\n ||      Find or Search Data      You can use Aspose.Cells to find or search data in various ways using the following method. These methods find the data as per their names.\n FindNumber FindFormula FindFormulaContains FindString FindStringContains FindStringStartsWith FindStringEndsWith  The following sample code illustrates the usage of the above methods using the sample excel file as shown in this screenshot.\nSample Code\nConsole Output\nThis is the console output of the above sample code when executed with the given sample excel file.\n\\\nName of the cell containing the number 80: A8\nName of the cell containing formula =SUM(A5:A10): C6\nName of the cell containing the formula that contains CHA: C7\nName of the cell containing specified string: C8\nName of the cell containing the string that contains Two: C9\nName of the cell containing the string that starts with AAA: C10\nName of the cell containing the string that ends with BBB: C11\nAttachments: sampleFindOrSearchData.xlsx (application/unknown) find-data-sample-excel-file.png (image/png)\n","date":-62135596800,"description":"","objectID":"93506606318b0a3367906dadec7bcdd6","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/find+or+search+data/","title":"Find or Search Data"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Manipulate Named Range in a Workbook\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenarios      Aspose.Cells supports the manipulation of existing named ranges. All the existing named ranges can be accessed from IWorkbook.GetIWorksheets().GetINames() collection. Once, you access the named range, you can change its various methods e.g. GetFullText and GetRefersTo.\nManipulate Named Range in a Workbook\nThe following sample code reads the first named-range inside the source excel file and prints its FullText and RefersTo properties on the console. After that, it modifies RefersTo property and saves the output excel file.\nSample Code\nConsole Output\nThe following console output prints the values of FullText and RefersTo members of the existing Named Range in the above code.\nFull Text: TestRange\nRefers To: =Sheet1!$D$3:$G$6\nAttachments: outputManipulateNamedRangeInWorkbook.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleManipulateNamedRangeInWorkbook.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"541853431a3bd062df7ad493c297b87f","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/manipulate+named+range+in+a+workbook/","title":"Manipulate Named Range in a Workbook"},{"content":"Complex financial worksheets, especially ones developed in collaboration, can hide the most embarrassing errors. Checking formulas for accuracy and finding the source of an error can be difficult when the formula uses precedent cells and dependent cells.\n   Contents Summary\n1 Introduction\n2 Tracing Precedent and Dependent Cells: Microsoft Excel\n3 Tracing Precedent and Dependent Cells: Aspose.Cells 3.1 Tracing Precedents\n3.2 Tracing Dependents\n |     Introduction      Precedent cells are cells that are referred to by a formula in another cell. For example, if cell D10 contains the formula =B5, cell B5 is a precedent to cell D10. Dependent cells contain formulas that refer to other cells. For example, if cell D10 contains the formula =B5, cell D10 is dependent of cell B5.  To make the spreadsheet easy to read, you might want to clearly show which cells on a spreadsheet are used in a formula. Similarly, you may want to extract the dependent cells of other cells.\nAspose.Cells allows you to trace cells and find out which are linked.\nTracing Precedent and Dependent Cells: Microsoft Excel\nFormulas may change based on modifications made by a client. For example, if cell C1 is dependent on C3 and C4 containing a formula, and C1 is changed (so the formula is overridden), C3 and C4, or other cells, need to change to balance the spreadsheet based on business rules.\nSimilarly, suppose C1 contains the formula \u0026amp;ldquo;=(B122)/(M2N32)\u0026amp;quot;. I want to find the cells that C1 depends on, that is the precedent cells B1, M2, and N32.\nYou might need to trace the dependency of a particular cell to other cells. If business rules are embedded in formulas, we would like to find out the dependency and execute some rules based on it. Similarly, if the value of a particular cell is modified, which cells in the worksheet are impacted by that change?\nMicrosoft Excel allows users to trace precedents and dependents.\n On the View Toolbar, select Formula Auditing Trace Precedents:  Select the cell …","date":-62135596800,"description":"","objectID":"f96c6486dfacd85745f9d9950e5b6718","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/precedents+and+dependents/","title":"Precedents and Dependents"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"b634c1c93cd7a4ccfa95d335abb5162d","permalink":"https://roywangt.github.io/cellscpp/developerguide/data/","title":"Data"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Extracting OLE Objects from Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to extract all types of OLE objects from the worksheet. Please use IWorksheet-\u0026amp;gt;GetIOleObjects() method to access all the OLE objects inside the worksheet. Each OLE object has ProgID and ObjectData properties that can help you identify the type of OLE object and extract it successfully.\nExtracting OLE Objects from Worksheet\nThe following sample code loads the sample Excel file which has three OLE objects. The code identifies the types of OLE objects and extracts them one by one as the following files.\n outputExtractOleObject.pptx outputExtractOleObject.pdf outputExtractOleObject.docx  Sample Code\nAttachments: sampleExtractingOLEObjectsFromWorksheet.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputExtractOleObject.docx (application/vnd.openxmlformats-officedocument.wordprocessingml.document) outputExtractOleObject.pdf (application/pdf) outputExtractOleObject.pptx (application/vnd.openxmlformats-officedocument.presentationml.presentation)\n","date":-62135596800,"description":"","objectID":"38ef8736f0a820bfe5a4c216b74e9437","permalink":"https://roywangt.github.io/cellscpp/developerguide/drawingobjects/extracting+ole+objects+from+worksheet/","title":"Extracting OLE Objects from Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Inserting OLE Objects into the Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to insert an OLE object inside the worksheet. Please use IWorksheet-\u0026amp;gt;GetIOleObjects()-\u0026amp;gt;Add() method for this purpose. You will need an image byte array that will be used to insert the OLE object inside the worksheet and Ole object data bytes that will be your actual object.to insert the Ole object inside the worksheet. Inserting OLE Objects into the Worksheet\nThe following sample code creates the workbook object and inserts the Ole object inside the first worksheet and saves it as output Excel file. Please see the Aspose Logo used as image bytes and input Excel file used as Ole object data inside the code for reference.\nSample Code\nAttachments: outputInsertingOLEObjectsIntoWorksheet.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AsposeLogo.png (image/png) inputInsertOleObject.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"387db0152a17dc48e6954122639c8182","permalink":"https://roywangt.github.io/cellscpp/developerguide/drawingobjects/inserting+ole+objects+into+the+worksheet/","title":"Inserting OLE Objects into the Worksheet"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"9b23849e65f740022f895460f2b7aec0","permalink":"https://roywangt.github.io/cellscpp/developerguide/drawingobjects/","title":"Drawing Objects"},{"content":"   Contents Summary\n1 Calculate Workbook Formulas\n2 Sample Code\n3 Console Output\n ||      Calculate Workbook Formulas      Please use IWorkbook-\u0026amp;gt;CalculateFormula() method to calculate the formulas of your workbook. The following sample code explains the usage of this method.\nSample Code\nConsole Output\nThis is the console output of the above sample code.\nCalculated Value of Cell A4: 45\n","date":-62135596800,"description":"","objectID":"bb26d529fdfa990f623ffaa29ea7afb1","permalink":"https://roywangt.github.io/cellscpp/developerguide/formulas/calculate+workbook+formulas/","title":"Calculate Workbook Formulas"},{"content":"   Contents Summary\n1 Introduction\n2 Using ICustomFunction Feature\n3 Sample Code\n4 Console Output\n |     Introduction     This article provides an understanding of how to use the ICustomFunction feature to implement custom functions with Aspose.Cells APIs.\nThe ICustomFunction interface allows you to add custom formula calculation functions to extend the Aspose.Cells core calculation engine in order to meet certain requirements. This feature is useful to define custom (user defined) functions in a template file or in a code where the custom function can be implemented and evaluated using Aspose.Cells APIs like any other default Microsoft Excel function.\nUsing ICustomFunction Feature\nThe following sample code implements the ICustomFunction interface which evaluates and returns the values of the two custom functions i.e. MySampleFunc() and YourSampleFunc(). These custom functions are inside the cells A1 and A2 respectively. Then it calls the IWorkbook.CalculateFormula(false, ICustomFunction) method to invoke the implementation of ICustomFunction.CalculateCustomFunction() method. Then, it prints the values of A1 and A2 on console which are actually the values returned by ICustomFunction.CalculateCustomFunction(). Please see the Console Output of the sample code below for more help.\nSample Code\n\\\nConsole Output\nValue of A1: MY sample function was called successfully.\nValue of A2: YOUR sample function was called successfully.\n","date":-62135596800,"description":"","objectID":"a20601fec039ef2f0c3249d1a278f909","permalink":"https://roywangt.github.io/cellscpp/developerguide/formulas/using+icustomfunction+feature/","title":"Using ICustomFunction Feature"},{"content":"   Contents Summary\n1 Introduction\n2 Adding Formulas \u0026amp;amp; Calculating Results\n3 Direct Calculation of Formula\n4 Calculating Formulas Once Only\n |     Introduction     Aspose.Cells has an embedded formula calculation engine. It can not only re-calculate formulas imported from designer templates but also supports calculating the results of formulas added at runtime.\nAdding Formulas \u0026amp;amp; Calculating Results\nAspose.Cells supports most of the formulas or functions that are the part of Microsoft Excel. they can be used through the API or using designer spreadsheets. Aspose.Cells supports a huge set of mathematical, string, boolean, date/time, statistical, lookup and reference formulas.\nUse the Cell.Formula method to add a formula to a cell. When applying a formula to a cell, always begin the string with an equal sign (=) as you do when creating a formula in Microsoft Excel. Use a comma (,) to delimit function parameters.\nTo calculate the results of formulas, call the Workbook.CalculateFormula() method which processes all the formulas embedded in an Excel file. Please see the following sample code that adds the formula and calculates its results. Please check the output excel file generated with this code.\nSample Code\nDirect Calculation of Formula\nSometimes, you need to calculate formula results directly without adding them into a worksheet. The values of the cells used in the formula already exist in a worksheet and all you need is to find the result of those values based on some Microsoft Excel formula without adding the formula in a worksheet.\nYou can use Worksheet.CalculateFormula(String formula) method to calculate the results of such formulas without adding them to worksheet.\nThe code below produces the following output.\nValue of A1: 20\nValue of A2: 30\nResult of Sum(A1:A2): 50\nSample Code\nCalculating Formulas Once Only\nWhen Workbook.CalculateFormula() is called to calculate the values of formulas in a workbook template, Aspose.Cells creates a calculating chain. It …","date":-62135596800,"description":"","objectID":"9ab11b1981183b18b9e3efbc5b9f05fe","permalink":"https://roywangt.github.io/cellscpp/developerguide/formulas/ways+to+calculate+formulas/","title":"Ways to Calculate Formulas"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"720d2c40edf3ff77273f813fc09af5e5","permalink":"https://roywangt.github.io/cellscpp/developerguide/formulas/","title":"Formulas"},{"content":"   Contents Summary\n1 Converting Excel Workbook to PDF 1.1 Direct Conversion\n1.2 Advanced Conversion 1.2.1 Saving Workbook to PDF/A Complied Files\n1.2.2 Set the PDF Creation Time\n |     Converting Excel Workbook to PDF     PDF files are widely used to exchange documents between organizations, government sectors, and individuals. It is a standard document format and software developers are often asked to find a way to convert Microsoft Excel files into PDF documents.\nAspose.Cells supports converting Excel files to PDF and maintains high visual fidelity in the conversion.\nAspose.Cells directly writes the information about API and Version Number in output documents. For example, upon rendering Document to PDF, Aspose.Cells for C++ populates the Application field with value \u0026amp;lsquo;Aspose.Cells\u0026amp;rsquo; and PDF Producer field with value, e.g \u0026amp;lsquo;Aspose.Cells v18.5.0\u0026amp;rsquo;.\nPlease note that you cannot instruct Aspose.Cells for C++ to change or remove this information from output Documents.\nDirect Conversion\nAspose.Cells supports conversion from spreadsheets to PDF independently of other software. Simply save an Excel file to PDF using the IWorkbook class\u0026amp;rsquo; Save method. The Save method provides the SaveFormat_Pdf enumeration member that converts the native Excel files to PDF format.\nFollow the below steps to directly convert the Excel spreadsheets to PDF format:\n Instantiate an object of the IWorkbook class by calling its empty constructor. You may open/load an existing template file or skip this step if you are creating the workbook from scratch. Do any work (input data, apply formatting, set formulas, insert pictures or other drawing objects, and so on) on the spreadsheet using Aspose.Cells\u0026amp;rsquo; APIs. When the spreadsheet code is complete, call the IWorkbook class\u0026amp;rsquo; Save method to save the spreadsheet.  The file format should be PDF so select relevant PDF (a pre-defined value) from the SaveFormat enumeration to generate the final PDF document\nPlease see the …","date":-62135596800,"description":"","objectID":"f8caaa8b32c70e5ccec2e0ca667d42bb","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/convert+excel+workbook+to+pdf/","title":"Convert Excel Workbook to PDF"},{"content":"Aspose.Cells allows you to export a worksheet from a workbook and convert it into different image formats. This article explains how to convert a worksheet to different image formats.\n   Contents Summary\n1 Converting Worksheet to Image 1.1 PNG Format\n1.2 TIFF Format\n2 Converting Worksheet to SVG\n |     Converting Worksheet to Image     Worksheets contain data that you want to analyze. For example, a worksheet can contain parameters, totals, percentages, exceptions, and calculations.\nAs a developer, you might need to present worksheets as images. For example, you might need to use an image of a worksheet in an application or web page. You might want to insert an image into a Microsoft Word document, a PDF file, a PowerPoint presentation or some other document type. Simply put, you want a worksheet rendered as an image so that you can use it somewhere else.\nAspose.Cells supports converting Excel worksheets to images. To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or project. It has several valuable classes for rendering and printing, for example, ISheetRender, IImageOrPrintOptions and others.\nThe Aspose.Cells.Rendering.ISheetRender class represents a worksheet to render as images. It has an overloaded method, ToImage, that can convert a worksheet to image file(s) with different attributes or options. Several image formats are supported, for example, BMP, PNG, GIF, JPG, JPEG, TIFF, EMF.\nThe following code snippet shows how to convert a worksheet in an Excel file to an image file.\nPNG Format\nPlease see the following sample code, its sample Excel file, and the output PNG Images.\nTIFF Format\nPlease see the following sample code, its sample Excel file, and the output TIFF Image.\nConverting Worksheet to SVG\nSVG stands for Scalable Vector Graphics. SVG is a specification based on XML standards for two-dimensional vector graphics. It is an open standard that has been under development by the World Wide Web Consortium (W3C) since …","date":-62135596800,"description":"","objectID":"eded9075b4933acf761d4db663399428","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/converting+worksheet+to+different+image+formats/","title":"Converting Worksheet to Different Image Formats"},{"content":"   Contents Summary\n1 Possible Usage Scenario\n2 Managing Document Properties\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenario      Aspose.Cells allows you to work with Built-In and Custom document properties. Here is the Microsoft Excel interface to open these Document Properties. Just click on the Advanced Properties as shown in this screenshot and view them.\nManaging Document Properties\nThe following sample code loads sample excel file and reads the built-in document properties e.g. Title, Subject and then changes them. Then it also reads the custom document property i.e. *MyCustom1 *and then adds a new custom document property i.e. *MyCustom5 *and writes the output excel file. The following screenshot shows the effect of the sample code on the sample excel file.\nSample Code\n\\\nConsole Output\nThis is the console output of the above sample code when executed with the provided sample excel file.\nTitle: Aspose Team\nSubject: Aspose.Cells for C++\nMyCustom1: This is my custom one.\nAttachments: outputManagingDocumentProperties.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) BuiltIn-and-Custom-Document-Properties.png (image/png) interface-to-open-document-properties.png (image/png) sampleManagingDocumentProperties.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"fc44b77c32a9393fc3f40378cffe7d14","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/managing+document+properties/","title":"Managing Document Properties"},{"content":"With Aspose.Cells it is possible to open files, for example to retrieve data, or to use a designer template to speed up the development process. Aspose.Cells can open a range of different files, such as Microsoft Excel spreadsheets (XLS, XLSX, XLSM, XLSB), CSV or TabDelimited files.\n   Contents Summary\n1 Opening a File via a Path\n2 Opening a File using a Stream\n |     Opening a File via a Path     Developers can open a Microsoft Excel file using its file path on the local computer by specifying it in the IWorkbook class constructor. Simply pass the path in the constructor as String. Aspose.Cells will automatically detect the file format type.\n\\\nOpening a File using a Stream\nIt is also possible to open an Excel file as a stream. To do so, use an overloaded version of the constructor that takes the *Stream *object that contains the file.\n\\\n","date":-62135596800,"description":"","objectID":"1fd26f13998a552a9bb1a366abeec43c","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/opening+files/","title":"Opening Files"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Write CSV File Format\n3 Sample Code\n ||      Possible Usage Scenarios      Microsoft Excel supports many formats like XLS, XLSX, XLSM, XLSB, CSV, etc. Aspose.Cells also supports many of these formats. This article explains how to read and write the excel file having CSV format using Aspose.Cells.\nRead and Write CSV File Format\nThe following sample code loads the source CSV file and reads its cell A1 and then copies its contents to cell C4 and saves it as output CSV file.\nSample Code\nAttachments: srcReadWriteCSV.csv (application/vnd.ms-excel) outReadWriteCSV.csv (application/vnd.ms-excel)\n","date":-62135596800,"description":"","objectID":"044f530f781e6ca312a62ec2d666a366","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/read+and+write+csv+file+format/","title":"Read and Write CSV File Format"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Write Tab Delimited File Format\n3 Sample Code\n ||      Possible Usage Scenarios      Microsoft Excel supports many formats like XLS, XLSX, XLSM, XLSB, CSV, tab-delimited, etc. Aspose.Cells also supports many of these formats. This article explains how to read and write the excel file having Tab Delimited format using Aspose.Cells.\nRead and Write Tab Delimited File Format\nThe following sample code loads the source tab-delimited file and reads its cell A1 and then copies its contents to cell C4 and saves it as output tab-delimited file.\nSample Code\nAttachments: outReadWriteTabDelimited.txt (text/plain) srcReadWriteTabDelimited.txt (text/plain)\n","date":-62135596800,"description":"","objectID":"f36057739ef33d7079447daf55075345","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/read+and+write+tab+delimited+file+format/","title":"Read and Write Tab Delimited File Format"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Write XLSB File Format\n3 Sample Code\n ||      Possible Usage Scenarios      Microsoft Excel supports many formats like XLS, XLSX, XLSM, XLSB, CSV, etc. Aspose.Cells also supports many of these formats. This article explains how to read and write the excel file having XLSB format using Aspose.Cells.\nRead and Write XLSB File Format\nThe following sample code loads the source XLSB file and reads its cell A1 and then copies its contents to cell C4 and saves it as output XLSB file.\nSample Code\nAttachments: outReadWriteXLSB.xlsb (application/vnd.ms-excel.sheet.binary.macroenabled.12) srcReadWriteXLSB.xlsb (application/vnd.ms-excel.sheet.binary.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"6ce9687c6f4d541f65974031ee02dc3c","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/read+and+write+xlsb+file+format/","title":"Read and Write XLSB File Format"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Write XLSM File Format\n3 Sample Code\n ||      Possible Usage Scenarios      Microsoft Excel supports many formats like XLS, XLSX, XLSM, XLSB, CSV, etc. Aspose.Cells also supports many of these formats. This article explains how to read and write the excel file having XLSM format using Aspose.Cells.\nRead and Write XLSM File Format\nThe following sample code loads the source XLSM file and reads its cell A1 and then copies its contents to cell C4 and saves it as output XLSM file.\nSample Code\nAttachments: outReadWriteXLSM.xlsm (application/vnd.ms-excel.sheet.macroenabled.12) srcReadWriteXLSM.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"9dab7d7b5fa6020aeda7003884e92cca","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/read+and+write+xlsm+file+format/","title":"Read and Write XLSM File Format"},{"content":"Aspose.Cells makes it possible to create and save files, and to manipulate existing files. This article explains the various ways in which files can be saved.\n   Contents Summary\n1 Different Ways to Save Files\n2 Saving File to Some Location\n3 Saving File to Stream\n |     Different Ways to Save Files     Aspose.Cells provides the IWorkbook which represents a Microsoft Excel file and provides methods necessary to work with Excel files. The IWorkbook class provides the Save method used to save Excel files. The Save method has many overloads that are used to save files in different ways. The file format that the file is saved to is decided by the SaveFormat enumeration.\nSaving File to Some Location\nTo save files to a storage location, specify the file name (complete with storage path) and the desired file format (from the SaveFormat enumeration) when calling the IWorkbook object\u0026amp;rsquo;s Save method.\n\\\n\\\nSaving File to Stream\nTo save files to a stream, create a MemoryStream or FileStream object and save the file to that stream object by calling the IWorkbook object\u0026amp;rsquo;s Save method. Specify the desired file format using the SaveFormat enumeration when calling the Save method.\n\\\n","date":-62135596800,"description":"","objectID":"ffb3486bdb1640fe62048e47a9b3e894","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/saving+files/","title":"Saving Files"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"1fc8ada6edb2ac78d171ed6275b6a941","permalink":"https://roywangt.github.io/cellscpp/developerguide/loadingsavingandconverting/","title":"Loading, Saving and Converting"},{"content":"This document describes the changes to the Aspose.Cells API from version 16.11.0 to 16.12.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Pivot Tables\nThe second release of Aspose.Cells for C++ supports creation as well as the manipulation of the Pivot Tables. Aspose.Cells for C++ provides the IPivotTable class which represents a Pivot Table object whereas IPivotTableCollection represents a collection of Pivot Tables. The IPivotTableCollection can be accessed via the IWorksheet object and a new Pivot Table can be added to the collection while using the IPivotTableCollection.Add method.\nThe following code snippet demonstrates how simple is to use Aspose.Cells for C++ API to create Pivot Tables from scratch.\nC++\n//Load the sample excel file\nintrusive_ptr wb = Factory::CreateIWorkbook();\n//Access first worksheet\nintrusive_ptr ws = wb-\u0026amp;gt;GetIWorksheets()-\u0026amp;gt;GetObjectByIndex(0);\n//Add source data for pivot table\nintrusive_ptr str = new String(\u0026amp;ldquo;Fruit\u0026amp;rdquo;);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;A1\u0026amp;rdquo;))-\u0026amp;gt;PutValue(str);\nstr = new String(\u0026amp;ldquo;Quantity\u0026amp;rdquo;);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B1\u0026amp;rdquo;))-\u0026amp;gt;PutValue(str);\nstr = new String(\u0026amp;ldquo;Price\u0026amp;rdquo;);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;C1\u0026amp;rdquo;))-\u0026amp;gt;PutValue(str);\nstr = new String(\u0026amp;ldquo;Apple\u0026amp;rdquo;);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;A2\u0026amp;rdquo;))-\u0026amp;gt;PutValue(str);\nstr = new String(\u0026amp;ldquo;Orange\u0026amp;rdquo;);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;A3\u0026amp;rdquo;))-\u0026amp;gt;PutValue(str);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B2\u0026amp;rdquo;))-\u0026amp;gt;PutValue(3);\nws-\u0026amp;gt;GetICells()-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B3\u0026amp;rdquo;))-\u0026amp;gt;PutValue(4); …","date":-62135596800,"description":"","objectID":"b9ffe59fb3c674e408e1665673998e8f","permalink":"https://roywangt.github.io/cellscpp/developerguide/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+16.12.0/","title":"Public API Changes in Aspose.Cells 16.12.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 16.12.0 to 17.1.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Named Ranges\nAspose.Cells for C++ now supports creation as well as the manipulation of the Named Ranges. The following code snippet demonstrates how simple is to use Aspose.Cells for C++ API to create named ranges.\nC++\n//Path of your directory where you want to read or write files from\nStringPtr dirPath = new String(\u0026amp;ldquo;D:\\Downloads\\\u0026amp;quot;);\n//Path of output excel file\nStringPtr outCreateNamedRange = (new String(dirPath))-\u0026amp;gt;Append(new String(\u0026amp;ldquo;outCreateNamedRange.xlsx\u0026amp;rdquo;));\n//Create a workbook\nintrusive_ptr wb = Factory::CreateIWorkbook();\n//Access first worksheet\nintrusive_ptr ws = wb-\u0026amp;gt;GetIWorksheets()-\u0026amp;gt;GetObjectByIndex(0);\n//Create a range\nintrusive_ptr rng = ws-\u0026amp;gt;GetICells()-\u0026amp;gt;CreateIRange((intrusive_ptr)new String(\u0026amp;ldquo;A5:C10\u0026amp;rdquo;));\n//Set its name to make it named range\nrng-\u0026amp;gt;SetName((intrusive_ptr)new String(\u0026amp;ldquo;MyNamedRange\u0026amp;rdquo;));\n//Read the named range created above from names collection\nintrusive_ptr nm = wb-\u0026amp;gt;GetIWorksheets()-\u0026amp;gt;GetINames()-\u0026amp;gt;GetObjectByIndex(0);\n//Print its FullText and RefersTo properties\nprintf(\u0026amp;ldquo;Full Text: %s\\n\u0026amp;rdquo;, nm-\u0026amp;gt;GetFullText()-\u0026amp;gt;charValue());\nprintf(\u0026amp;ldquo;Refers To: %s\\n\u0026amp;rdquo;, nm-\u0026amp;gt;GetRefersTo()-\u0026amp;gt;charValue());\n//Save the workbook in xlsx format\nwb-\u0026amp;gt;Save(outCreateNamedRange, SaveFormat_Xlsx);\nBesides creating new Named Ranges, Aspose.Cells for C++ APIs also support to manipulate existing Named Ranges. The following code snippet uses the Aspose.Cells for C++ API to manipulate an existing named range.\nC++\n//Path of your directory where you want to read or write files from\nStringPtr dirPath = new …","date":-62135596800,"description":"","objectID":"862ac6ac0652a418d648cb1d9b2a9903","permalink":"https://roywangt.github.io/cellscpp/developerguide/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+17.1.0/","title":"Public API Changes in Aspose.Cells 17.1.0"},{"content":"Migrating from Earlier Versions of Aspose.Cells\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"9c3d571b07d425c7b9c1ec3fa0fc4920","permalink":"https://roywangt.github.io/cellscpp/developerguide/migratingfromearlierversionsofasposecells/","title":"Migrating from Earlier Versions of Aspose.Cells"},{"content":"   Contents Summary\n1 Introduction\n2 Create Pivot Table\n3 Sample Code\n ||      Introduction      Please use IPivotTableCollection.Add() method to create a pivot table inside the worksheet. Once, the pivot table is created, you can work with it using the IPivotTable class.\nCreate Pivot Table\nThe following sample code shows how to create a pivot table and work with it. Please check the output excel file generated with this code and the following screenshot showing the output excel file in Microsoft Excel.\nSample Code\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sample-pivot-table-using-aspose.cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"b1ba7fde60460a1d428c21e2289bdbbc","permalink":"https://roywangt.github.io/cellscpp/developerguide/pivottables/create+pivot+table/","title":"Create Pivot Table"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Manipulate Pivot Table\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenarios      Besides creating new pivot tables, you can manipulate the new and existing pivot tables. You can change the data in the source range of pivot table and then refresh and calculate it and attain the new values of pivot table cells. Please use IPivotTable.RefreshData() and IPivotTable.CalculateData() methods after you have changed the values in the source range of the pivot table to refresh the pivot table.\nManipulate Pivot Table\nThe following sample code loads the sample excel file and accesses the existing pivot table insides its first worksheet. It changes the value of cell B3 which is inside the source range of pivot table and then refreshes the pivot table. Before it refreshes the pivot table, it accesses the value of pivot table cell H8 which is 15 and after refreshing the pivot table, its value changes to 6. Please see the output excel file generated with this code and the screenshot showing the effect of sample code on the sample excel file. Please also see the console output below which shows the value of the pivot table cell H8 before and after refreshing the pivot table.\nSample Code\nConsole Output\nBelow is the console output of the above sample code when executed with the provided sample excel file.\nBefore refreshing Pivot Table value of cell H8: 15\nAfter refreshing Pivot Table value of cell H8: 6\nAttachments: refreshing-pivot-table-using-aspose.cells.png (image/png) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) samplePivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"0595bb9b102b09cbc9e66752c8f81d23","permalink":"https://roywangt.github.io/cellscpp/developerguide/pivottables/manipulate+pivot+table/","title":"Manipulate Pivot Table"},{"content":"Pivot Tables\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"96fb1919c86348d940ef9bd11c12890a","permalink":"https://roywangt.github.io/cellscpp/developerguide/pivottables/","title":"Pivot Tables"},{"content":"When working with spreadsheets and adding data to rows or columns, you might need to change the height of rows or the width of columns. Sometimes, applying formatting on rows or columns means that the current height or width needs to change to show the data. Normally, users adjust row heights and column widths in a WYSIWYG environment using Microsoft Excel. But, with Aspose.Cells developers can perform these operations at runtime.\n   Contents Summary\n1 Working with Rows 1.1 Adjusting Row Height 1.1.1 Setting the Height of a Row\n1.1.2 Setting the Height of All Rows in a Worksheet\n2 Working with Columns 2.1 Setting the Width of a Column\n2.2 Setting the Width of All Columns in a Worksheet\n ||      Working with Rows      Adjusting Row Height\nAspose.Cells provides a class, IWorkbook that represents a Microsoft Excel file. The IWorkbook class contains a IWorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the IWorksheet class. The IWorksheet class provides a ICells collection that represents all cells in the worksheet. The ICells collection provides several methods to manage rows or columns in a worksheet. Some of these are discussed below in more detail.\nSetting the Height of a Row\nIt is possible to set the height of a single row by calling the ICells collection\u0026amp;rsquo;s SetRowHeight method. The SetRowHeight method takes the following parameters as follows:\n Row index, the index of the row that you\u0026amp;rsquo;re changing the height of. Row height, the row height to apply on the row.  \\\n\\\nSetting the Height of All Rows in a Worksheet\nIf developers need to set the same row height for all rows in the worksheet, they can do it by using the SetStandardHeight method of the ICells collection.\n\\\nWorking with Columns\nSetting the Width of a Column\nSet the width of a column by calling the ICells collection\u0026amp;rsquo;s SetColumnWidth method. The SetColumnWidth method takes the following parameters:\n Column index, the index of the column …","date":-62135596800,"description":"","objectID":"e848ef38a71cf4a4628e9d241cc6f769","permalink":"https://roywangt.github.io/cellscpp/developerguide/rowsandcolumns/adjusting+row+height+and+column+width/","title":"Adjusting Row Height and Column Width"},{"content":"   Contents Summary\n1 Introduction\n2 Copying Rows and Columns with Microsoft Excel\n3 Using Aspose.Cells 3.1 Copying Rows\n3.2 Copying Columns\n |     Introduction     Sometimes you need to copy rows and columns in a worksheet without copying the entire worksheet. With Aspose.Cells, it is possible to copy rows and columns within or between workbooks. When a row (or column) is copied, the data contained in it, including formulas - with updated references - and values, comments, formatting, hidden cells, images and other drawing objects are copied too.\nCopying Rows and Columns with Microsoft Excel\n Select the row or column that you want to copy. To copy rows or columns, click Copy on the Standard toolbar, or press CTRL+C. Select a row or column below or to the right of where you want to copy your selection. When you are copying rows or columns, click Copied Cells on the Insert menu.  If you click Paste on the Standard toolbar or press CTRL+V instead of clicking a command on the Insert menu, any contents of the destination cells is replaced.\nUsing Aspose.Cells\nCopying Rows\nAspose.Cells provides the CopyRow method of the Aspose::Cells::ICells class. This method copies all types of data including formulas, values, comments, cell formats, hidden cells, images and other drawing objects from the source row to the destination row.\nThe CopyRow method takes the following parameters:\n the source Cells object, the source row index, and the destination row index.  Use this method to copy a row within a sheet, or to another sheet. The CopyRow method works in a similar way to Microsoft Excel. So, for example, you don\u0026amp;rsquo;t need to set the height of the destination row explicitly, that value is copied too.\nThe following example shows how to copy a row in a worksheet. It uses a template Microsoft Excel file and copies the second row (complete with data, formatting, comments, images and so on) and paste it to 12th row in the same worksheet.\nYou can skip the step that gets the source …","date":-62135596800,"description":"","objectID":"600821906b3da927a362663036c93735","permalink":"https://roywangt.github.io/cellscpp/developerguide/rowsandcolumns/copying+rows+and+columns/","title":"Copying Rows and Columns"},{"content":"   Contents Summary\n1 Introduction\n2 Group Management of Rows \u0026amp;amp; Columns 2.1 Grouping Rows \u0026amp;amp; Columns 2.1.1 Group Settings\n3 Ungrouping Rows \u0026amp;amp; Columns\n |     Introduction     In a Microsoft Excel file, you can create an outline for the data to let you show and hide levels of detail with a single mouse click.\nClick the Outline Symbols, 1,2,3, + and - to quickly display only the rows or columns that provide summaries or headings for sections in a worksheet, or you can use the symbols to see details under an individual summary or heading.\nGroup Management of Rows \u0026amp;amp; Columns\nAspose.Cells provides a class, IWorkbook that represents a Microsoft Excel file. The IWorkbook class contains a IWorksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the IWorksheet class. The IWorksheet class provides an ICells collection that represents all cells in the worksheet.\nThe ICells collection provides several methods to manage rows or columns in a worksheet, few of these are discussed below in more detail.\nGrouping Rows \u0026amp;amp; Columns\nIt is possible to group rows or columns by calling the GroupRows and GroupColumns methods of the ICells collection. Both methods take the following parameters:\n The first row/column index, the first row or column in the group. The last row/column index, the last row or column in the group. Is hidden, a Boolean parameter that specifies whether to hide rows/columns after grouping or not.  \\\nGroup Settings\nMicrosoft Excel allows you to configure group settings for displaying:\n Summary rows below detail. Summary columns to the right of detail.  Ungrouping Rows \u0026amp;amp; Columns\nTo ungroup any grouped rows or columns, call the ICells collection\u0026amp;rsquo;s UngroupRows and UngroupColumns methods. Both methods take two parameters:\n The first row or column index, the first row/column to be ungrouped. The last row or column index, the last row/column to be ungrouped.  \\\n","date":-62135596800,"description":"","objectID":"32d46ad823efe51c91b610b1e0588330","permalink":"https://roywangt.github.io/cellscpp/developerguide/rowsandcolumns/grouping%2c+ungrouping+rows+and+columns/","title":"Grouping, Ungrouping Rows and Columns"},{"content":"   Contents Summary\n1 Introduction 1.1 Managing Rows and Columns 1.1.1 Insert a Row\n1.1.2 Inserting Multiple Rows\n1.1.3 Deleting Multiple Rows\n1.1.4 Insert a Column\n1.1.5 Delete a Column\n |     Introduction     Whether creating a new worksheet from scratch or working on an existing worksheet, we may need to add extra rows or columns to accommodate more data. Inversely, we may also need to delete rows or columns from specified positions in the worksheet. To fulfill these requirements, Aspose.Cells provides a very simplest set of classes and methods, discussed below.\nManaging Rows and Columns\nAspose.Cells provides a class, IWorkbook, that represents a Microsoft Excel file. The IWorkbook class contains an IWorksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the IWorksheet class. The IWorksheet class provides an ICells collection that represents all cells in the worksheet.\nThe ICells collection provides several methods managing rows and columns in a worksheet. Some of these are discussed below.\nWhen rows or columns are added, the content in the worksheet is shifted down or to the right, and if rows or columns are removed, the content is shifted up or the left.\nInsert a Row\nInsert a row into the worksheet at any location by calling the InsertRow method of the ICells collection. The InsertRow method takes the index of the row where the new row will be inserted.\n\\\n\\\nInserting Multiple Rows\nTo insert multiple rows into a worksheet, call the InsertRows method of the ICells collection. The InsertRows method takes two parameters:\n Row index, the index of the row from where the new rows will be inserted. Number of rows, the total number of rows that need to be inserted.  \\\n\\\nDeleting Multiple Rows\nTo delete multiple rows from a worksheet, call the DeleteRows method of the ICells collection. The DeleteRows method takes two parameters:\n Row index, the index of the row from where the rows will be deleted. Number of rows, the …","date":-62135596800,"description":"","objectID":"ebe365c6a84e8055cb5277deee87a874","permalink":"https://roywangt.github.io/cellscpp/developerguide/rowsandcolumns/inserting%2c+deleting+rows+and+columns/","title":"Inserting, Deleting Rows and Columns"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"95fd9e285b0acdf50fb105580c986286","permalink":"https://roywangt.github.io/cellscpp/developerguide/rowsandcolumns/","title":"Rows and Columns"},{"content":"   Contents Summary\n1 Create Table 1.1 Advantages of a List Object\n1.2 Creating a List Object using Microsoft Excel\n1.3 Using Aspose.Cells API\n2 Format a Table 2.1 Formatting a List Object\n |     Create Table     One of the advantages of spreadsheets is that they allow you to create different types of lists, for example, phone lists, task lists, lists of transactions, assets or liabilities. Several users can work together to use, create and maintain various lists.\nAspose.Cells supports creating and managing Lists.\nAdvantages of a List Object\nThere are quite a few advantages when you convert a list of data to an actual List Object\n New rows and columns are automatically included. A total row at the bottom of your list can be easily added to display SUM, AVERAGE, COUNT, etc. Columns added to the right are automatically incorporated into the List object. Charts based on rows and columns will be expanded automatically. Named ranges assigned to rows and columns will be expanded automatically. The list is protected from accidental row and column deletion.  Creating a List Object using Microsoft Excel\n   Selecting data range for creating List object        This displays the Create List dialog.       Create List dialog        Implementing the List object for the data and specifying total row (Select Data, then List, followed by Total Row).       Creating a list object        Using Aspose.Cells API    Aspose.Cells provides a class IWorkbook that represents a Microsoft Excel file. The IWorkbook class contains an IWorksheets collection that allows access to each worksheet in an Excel file.\nA worksheet is represented by the IWorksheet class. The IWorksheet class provides a wide range of methods for managing a worksheet. To create an IListObject in a worksheet, use the GetIListObjects collection method of the IWorksheet class. Each IListObject is in fact, an object of the IListObjectCollection class, which further provides the Add method for adding an IListObject object and …","date":-62135596800,"description":"","objectID":"a863af5047e2a2783c2b908a6949f123","permalink":"https://roywangt.github.io/cellscpp/developerguide/tables/create+and+format+table/","title":"Create and Format Table"},{"content":"Please set the comment of the Table or List Object inside the worksheet using the IListObject.Comment method. The comment will be visible inside the xl/tables/tableName.xml file.\nSet the Comment of Table or List Object inside the Worksheet\nThe following sample code loads the source excel file and sets the comment of the first table or list object inside the worksheet.\n\\\n","date":-62135596800,"description":"","objectID":"7553df8199188faf99c7483026c95404","permalink":"https://roywangt.github.io/cellscpp/developerguide/tables/set+the+comment+of+table+or+list+object+inside+the+worksheet/","title":"Set the Comment of Table or List Object inside the Worksheet"},{"content":"   Contents Summary\n1 Introduction\n2 Using Microsoft Excel\n3 Using Aspose.Cells\n |     Introduction     Sometimes you create a table in Microsoft Excel and do not want to keep working with the table functionality that it comes with. Instead, you want something that looks like a table. To keep data in a table without losing formatting, convert the table to a regular range of data. Aspose.Cells does support this feature of Microsoft Excel for tables and list-objects.\nUsing Microsoft Excel\nUse the Convert to Range feature to quickly convert a table to a range without losing formatting. In Microsoft Excel 2007/2010:\n Click anywhere in the table to make sure that the active cell is in a table column. On the Design tab, in the Tools group, click Convert to Range.  The table features are no longer available after the table has been converted to a range. For example, row headers no longer include the sort and filter arrows, and structured references (references that use table names) that were used in formulas turn into regular cell references.\nUsing Aspose.Cells\nThe following code snippet demonstrates the same functionality using Aspose.Cells.\n","date":-62135596800,"description":"","objectID":"39033b2f8f16330d5c8d24357be2441e","permalink":"https://roywangt.github.io/cellscpp/developerguide/tables/tables+and+ranges/","title":"Tables and Ranges"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"f68dac9d95ea1de85dbe37531e7d9699","permalink":"https://roywangt.github.io/cellscpp/developerguide/tables/","title":"Tables"},{"content":"   Contents Summary\n1 Apply Custom Theme Colors of the Workbook using Array of Colors\n2 Sample Code\n ||      Apply Custom Theme Colors of the Workbook using Array of Colors      The following sample code shows how to apply custom theme colors of the workbook using an array of colors. Please check the output excel file generated with this code and the screenshot showing the effect of the code on the output excel file.\nSample Code\nAttachments: custom-theme-colors-applied.png (image/png) outputApplyCustomThemeColorsOfWorkbookUsingArrayOfColors.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"1d8329e4228446143b896cbe5336b5e9","permalink":"https://roywangt.github.io/cellscpp/developerguide/technicalarticles/apply+custom+theme+colors+of+the+workbook+using+array+of+colors/","title":"Apply Custom Theme Colors of the Workbook using Array of Colors"},{"content":"   Contents Summary\n1 Copy Theme from one Workbook to Another\n2 Sample Code\n ||      Copy Theme from one Workbook to Another      The following sample code shows how to copy theme from one workbook into another workbook. The code is useful to apply built-in or custom themes. Just create your desired theme (it could be a built-in theme or you may customize it) in your template file using Microsoft Excel and then copy it to your source workbook using the following code.\nSample Code\nAttachments: sampleCopyThemeFromOneWorkbookToAnother.xlsx (application/vnd.openxmlformats-officedocument.spre) DamaskTheme.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"460cf12c2c0c087aaa2fbc8138a155b3","permalink":"https://roywangt.github.io/cellscpp/developerguide/technicalarticles/copy+theme+from+one+workbook+to+another/","title":"Copy Theme from one Workbook to Another"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create and Manipulate Excel Table\n3 Sample Code\n ||      Possible Usage Scenarios      Aspose.Cells allows you to create and manipulate new or existing list objects or tables. You can make use of various methods of the list object or table e.g. header row style, column stripes, style type, show subtotal, etc. and also work with individual columns of the table and set their name and totals calculation function which could be Min, Max, Count, Average, Sum etc.\nCreate and Manipulate Excel Table\nThe following sample code loads the sample excel file and then creates a list object or table in a range A1:H10, then it makes use of its various methods and sets show subtotal. Then it sets the total functions of 3rd, 4th and 5th columns to Min, Max and Count respectively and writes the output excel file. The following screenshot shows the effect of the sample code on the sample excel file after execution.\nSample Code\nAttachments: sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) list-object-or-table-created-using-aspose.cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"e13317fef5d1b10ef6561dec514af0a0","permalink":"https://roywangt.github.io/cellscpp/developerguide/technicalarticles/create+and+manipulate+excel+table/","title":"Create and Manipulate Excel Table"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Group Rows and Columns of Worksheet\n3 Sample Code\n ||      Possible Usage Scenarios      Aspose.Cells allows you to group rows and columns in a worksheet using ICells.GroupRows() and ICells.GroupColumns() methods.\nGroup Rows and Columns of Worksheet\nThe following sample code shows how to group rows and columns. It groups the rows and columns up to the 3rd level. Please check the output excel file generated with this code. It has two worksheets, the first one contains the grouping of rows and the second one contains the grouping of columns. Please also see the screenshot showing the grouping of rows in its first worksheet.\nSample Code\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) grouping-of-rows-and-columns.png (image/png)\n","date":-62135596800,"description":"","objectID":"de45676f1a75a86c5193851395c773f1","permalink":"https://roywangt.github.io/cellscpp/developerguide/technicalarticles/group+rows+and+columns+of+worksheet/","title":"Group Rows and Columns of Worksheet"},{"content":"Technical Articles\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"20ffaf958f3832f6f556e23db0852f0e","permalink":"https://roywangt.github.io/cellscpp/developerguide/technicalarticles/","title":"Technical Articles"},{"content":"Sometimes, you do need a number of worksheets with common formatting and data. For example, if you work with quarterly budgets, you might want to create a workbook with sheets that contain the same column headings, row headings, and formulas. There is a way to do this: by creating one sheet and then copying it.\nAspose.Cells supports copying and moving worksheets within or between workbooks. A worksheet, complete with data, formatting, tables, matrices, charts, images and other objects, are copied with the highest degree of precision.\n   Contents Summary\n1 Moving or Copying Sheets using Microsoft Excel 1.1 Copy Worksheets within a Workbook with Aspose.Cells\n1.2 Move Worksheets within Workbook\n ||      Moving or Copying Sheets using Microsoft Excel      The following are the steps involved in copying and moving worksheets within or between workbooks in Microsoft Excel.\n To move or copy sheets to another workbook, open the workbook that will receive the sheets. Switch to the workbook that contains the sheets you want to move or copy, and then select the sheets. On the Edit menu, click Move or Copy Sheet. In the To book dialog, click the workbook to receive the sheets. To move or copy the selected sheets to a new workbook, click New Book. In the Before sheet box, click the sheet before which you want to insert the moved or copied sheets. To copy the sheets instead of moving them, select the Create a copy checkbox.  Copy Worksheets within a Workbook with Aspose.Cells\nAspose.Cells provides an overloaded method AddCopy() that is used to add a worksheet to the collection and copy data from an existing worksheet. One version of the method takes the index of the source worksheet as a parameter. The other version takes the name of the source worksheet. The following example shows how to copy an existing worksheet within a workbook.\nMove Worksheets within Workbook\nAspose.Cells provides a method MoveTo() that is used to move a worksheet to another location in the same …","date":-62135596800,"description":"","objectID":"35e5bec09817bcc14ae444874ada131c","permalink":"https://roywangt.github.io/cellscpp/developerguide/worksheets/copying+and+moving+worksheets/","title":"Copying and Moving Worksheets"},{"content":"Developers can easily create and manage worksheets in Microsoft Excel files programmatically using Aspose.Cells flexible API. This topic describes approaches for adding and removing worksheets in Microsoft Excel files.\n   Contents Summary\n1 Adding Worksheets to a New Excel File\n2 Accessing Worksheets using Sheet Index\n3 Removing Worksheets using Sheet Index\n |     Aspose.Cells provides a class IWorkbook that represents an Excel file. The IWorkbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.     A worksheet is represented by the IWorksheet class. The IWorksheet class provides a wide range of methods for managing worksheets.\nAdding Worksheets to a New Excel File\nTo create a new Excel file programmatically:\n Create an object of the IWorksheet class. Call the Add method of the IWorksheetCollection collection. An empty worksheet is added to the Excel file automatically. It can be referenced by passing the sheet index of the new worksheet to the IWorksheetCollection collection. Obtain a worksheet reference. Perform work on the worksheets. Save the new Excel file with new worksheets by calling the IWorkbook class Save method.  \\\nAccessing Worksheets using Sheet Index\nThe following sample code shows how to access or get any worksheet by specifying its index.\nRemoving Worksheets using Sheet Index\nRemoving worksheets by name works well when the name of the worksheet is known. If you don\u0026amp;rsquo;t know the worksheet\u0026amp;rsquo;s name, use an overloaded version of the RemoveAt method that takes the sheet index of the worksheet instead of its sheet name.\n","date":-62135596800,"description":"","objectID":"14ecf35762f1cfd6232885a38ec0451b","permalink":"https://roywangt.github.io/cellscpp/developerguide/worksheets/manage+worksheets/","title":"Manage Worksheets"},{"content":"According to the definition, a page break is a place in a flow of text where one page ends and the next begins. Microsoft Excel lets users add page breaks into any selected cell of a worksheet.\nThe location of the cell where the page break is added, the page is ended and all rest of the data after the page break is printed on the next page while printing. In simple words, page breaks divide your worksheet into multiple pages according to your specifications. You can also add page breaks to your worksheets at runtime using Aspose.Cells. Aspose.Cells allows developers to add two kinds of page breaks:\n Horizontal page break Vertical page break  In the rest of the discussion, we will describe how can you add horizontal or vertical page breaks into your worksheets using Aspose.Cells.\n   Contents Summary\n1 Page Breaks 1.1 Adding Page Breaks\n ||      Page Breaks      Aspose.Cells provides a class IWorkbook that represents an Excel file. The IWorkbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.\nA worksheet is represented by the IWorksheet class. The IWorksheet class provides a wide range of methods used to manage a worksheet. To add the page breaks, use the AddPageBreaks method of the IWorksheet class.\nAdding Page Breaks\n","date":-62135596800,"description":"","objectID":"8ec29584fdd87c101affe5256b1664e8","permalink":"https://roywangt.github.io/cellscpp/developerguide/worksheets/managing+page+breaks/","title":"Managing Page Breaks"},{"content":"   Contents Summary\n1 Page Break Preview 1.1 Controlling View Modes 1.1.1 Enabling Normal View\n1.1.2 Enabling Page Break Preview\n2 Zoom Factor 2.1 Using Microsoft Excel\n2.2 Aspose.Cells \u0026amp;amp; Zoom Factor\n3 Freeze Panes 3.1 Using Microsoft Excel\n3.2 Aspose.Cells \u0026amp;amp; Freeze Panes\n4 Split Panes 4.1 Applying and Removing Split Panes 4.1.1 Splitting Panes\n4.1.2 Removing Panes\n |     Page Break Preview     All worksheets can be viewed in two modes:\n Normal view. Page break preview.  The Normal view is a worksheet\u0026amp;rsquo;s default view. Page break preview is an editing view that displays a worksheet as it will print. Page break preview shows what data will go on each page so you can adjust the print area and page breaks. Using Aspose.Cells developers can enable normal view or page break preview modes.\nControlling View Modes\nAspose.Cells provides a class IWorkbook that represents a Microsoft Excel file. The IWorkbook class contains a Worksheets collection that allows access to each worksheet in an Excel file.\nA worksheet is represented by the IWorksheet class. The IWorksheet class provides a wide range of methods for managing worksheets. To enable normal or page break preview modes, use the IsPageBreakPreview method of the IWorksheet class. IsPageBreakPreview returns a bool value, which means that it can only store a true or false value.\nEnabling Normal View\nSet a worksheet to normal view by setting the IsPageBreakPreview method of the IWorksheet class to false.\nEnabling Page Break Preview\nSet any worksheet to page break preview by setting the IsPageBreakPreview method of the IWorksheet class to true. Doing so switches the worksheet from normal view to page break preview.\nA complete example is given below that demonstrates how to use the IsPageBreakPreview method to enable page break preview mode for the first worksheet of an Excel file.\nZoom Factor\nUsing Microsoft Excel\nMicrosoft Excel provides a feature that lets users set a worksheet\u0026amp;rsquo;s zoom or scaling factor. This …","date":-62135596800,"description":"","objectID":"2ad7796d9938b9abd228787ebad2271d","permalink":"https://roywangt.github.io/cellscpp/developerguide/worksheets/worksheet+views/","title":"Worksheet Views"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"83a155f0584eba66bc7d65ddbb554cfe","permalink":"https://roywangt.github.io/cellscpp/developerguide/worksheets/","title":"Worksheets"},{"content":"   Contents Summary\n1 Software Requirements\n2 Download from GitHub\n3 Contribute\n ||      Software Requirements      Please make sure you meet the following requirements before downloading and running the examples.\n Visual Studio 2015 or higher  Download from GitHub\nAll examples of Aspose.Cells for C++ are hosted on GitHub.\n You can either clone the repository using your favorite GitHub client or download the ZIP file from here. Extract the contents of ZIP file to any folder on your computer. All the examples are located in the Examples folder. Open the solution file in Visual Studio and build the project. Data folder at the root folder of Examples contains input files. It is mandatory that you download the Data folder along with the examples project. Open main.cpp, all the examples are called from here. Uncomment the examples you want to run from within the project.  Please feel free to reach out using our Forums if you have any issues setting up or running the examples.\nContribute\nIf you like to add or improve an example, we encourage you to contribute to the project. All examples and showcase projects in this repository are open source and can be freely used in your own applications.\nTo contribute, you can fork the repository, edit the source code and create a pull request. We will review the changes and include it in the repository if found helpful.\n","date":-62135596800,"description":"","objectID":"62ae4899fa2a1036ff41b6307c0aa766","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/how+to+run+the+examples/","title":"How to Run the Examples"},{"content":"   Contents Summary\n1 Installing Aspose.Cells for C++ 1.1 Using Nuget Package Manager\n1.2 Using Include and lib Folders\n ||      Installing Aspose.Cells for C++      Using Nuget Package Manager\n In Nuget Package Manager, search for Aspose.Cells.  Here is the Link to NuGet Package Aspose.Cells.Cpp.   It will list the API as Aspose.Cells.Cpp. Press the Add button to install the package   You can also download ZIP package from the Aspose.Cells for C++ download page. The archive also contains the offline API documentation.\nUsing Include and lib Folders\n Download/Install the latest files. Unzip the folder to the production environment. To use Aspose.Cells for C++, reference Include and lib folders in your project.  ","date":-62135596800,"description":"","objectID":"5e5964c823f469adaedc303643f96617","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/installation/","title":"Installation"},{"content":"   Contents Summary\n1 Evaluation Version Limitations\n2 Apply License using File or Stream Object 2.1 Loading a License from File\n2.2 Loading a License from a Stream Object\n ||      Evaluation Version Limitations      A free evaluation version of Aspose.Cells for C++ can be downloaded from the downloads section of Aspose\u0026amp;rsquo;s web site at: https://downloads.aspose.com/cells/cpp.\nApply License using File or Stream Object\nThe license can be loaded from a file or stream object. Aspose.Cells for C++ will try to find the license in the following locations:\n Explicit path. The folder that contains Aspose.Cells.dll. The folder that contains the assembly that called Aspose.Cells.dll. The folder that contains the entry assembly (your .exe). An embedded resource in the assembly that called Aspose.Cells.dll.  The easiest way to set a license is to put the license file in the same folder as the Aspose.Cells.dll file and specify the file name, without a path, as shown in the example below.\nLoading a License from File\nThe easiest way to apply a license is to put the license file in the same folder as the Aspose.Cells.dll file and specify just the file name without a path.\nWhen you call the SetLicense method, the license name that you pass should be that of the license file. For example, if you change the license file name to \u0026amp;ldquo;Aspose.Cells.lic.xml\u0026amp;rdquo; pass that file name to the Cells-\u0026amp;gt;SetLicense(…) method.\nC++\nintrusive_ptr license = new License();\nlicense-\u0026amp;gt;SetLicense(new String(\u0026amp;ldquo;Aspose.Cells.lic\u0026amp;rdquo;));\nLoading a License from a Stream Object\nThe following example shows how to load a license from a stream.\nC++\nintrusive_ptrlicense = new License();\nintrusive_ptr myStream = new FileStream(new String(\u0026amp;ldquo;Aspose.Cells.lic\u0026amp;rdquo;), FileMode_Open);\nlicense-\u0026amp;gt;SetLicense(myStream);\n","date":-62135596800,"description":"","objectID":"083d91c8c5121daa0a5984fb23531bbf","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/licensing/","title":"Licensing"},{"content":"   Contents Summary\n1 Benefits 1.1 Rich Features\n1.2 Platform Independence\n1.3 Performance and Scalability\n2 Technical Support\n3 Resources\n ||      Welcome to the Aspose.Cells for C++ documentation section      Aspose.Cells for C++ is a native C++ library that enables C++ developers to create, manipulate and convert spreadsheets programmatically without requiring Office Automation or Microsoft Excel application.\nThe Aspose.Cells for C++ support spreadsheet formats such as Excel 97-2003 Workbook format and Open Office XML formats.\nBenefits\nUsing Aspose.Cells for C++ in your applications gives you the following benefits:\n Rich features Platform independence Performance and scalability  Rich Features\nAspose.Cells for C++ offers a wide arrange of features for creating, converting and manipulating spreadsheets:\n Built-In Properties Custom Properties Themes Styles and Formatting Data Validation Conditional Formatting Hyperlink AutoFilter PageSetup Reading, Writing and Calculating Formulas Group Rows and Columns PivotTable Table  Platform Independence\nUse Aspose.Cells for C++ to build any type of 32-bit and 64-bit C++ application.\nPerformance and Scalability\nAspose.Cells for C++ is designed to perform equally well server or client-side. Aspose.Cells for C++ is a native assembly that can be deployed by simply copying it. You do not have to worry about other services or modules.\nTechnical Support\nAspose provides unlimited free technical support for all its products. Support is available to all users, including evaluation.\nIf you need help with Aspose.Cells for C++ visit the Aspose.Forums. Post your question in the Aspose.Cells for C++ forum and it will be answered within a few hours. The questions are answered directly by the Aspose.Cells for C++ support team.\nWhen expecting a reply in the forums, please allow for time zone differences.\nIf you have an issue with Aspose.Cells for C++, follow these simple steps to make sure it is resolved in the most efficient way:\n Make sure …","date":-62135596800,"description":"","objectID":"d1ce9f79cfa19187e3edcd9e9a4fa5c7","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/product+overview/","title":"Product Overview"},{"content":"   Contents Summary\n1 Supported File Formats\n ||      Supported File Formats         Format Description Load Save     XLS Excel 95/5.0 - 2003 Workbook.     XLSX Office Open XML SpreadsheetML Workbook or template file, with or without macros.     XLSB Excel Binary Workbook.     XLSM Excel Macro-Enabled Workbook. |    XLTX Excel Template. |    XLTM Excel Macro-Enabled Template. |    XLAM An Excel Macro-Enabled Add-In file that\u0026amp;rsquo;s used to add new functions to Excel. |    CSV CSV (Comma Separated Value) file.     TSV TSV (Tab-separated values) file.     TabDelimited Tab-delimited text file, same with TSV file.     HTML HTML format.     MHTML MHTML file.     ODS ODS (OpenDocument Spreadsheet).     SpreadsheetML Excel 2003 XML file.     DIF Data Interchange Format. |    PDF Adobe Portable Document Format. |    XPS XML Paper Specification Format. |    SVG Scalable Vector Graphics Format. |    TIFF Tagged Image File Format |    JPEG JPEG is a type of image format that is saved using the method of lossy compression. |    PNG Portable Network Graphics Format |    BMP Bitmap Image Format |    GIF Graphical Interchange Format |    EMF Enhanced metafile Format |     ","date":-62135596800,"description":"","objectID":"f1c215767b769c4393ad03800f0128ff","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/supported+file+formats/","title":"Supported File Formats"},{"content":"   Contents Summary\n1 Supported Operating Systems 1.1 Windows\n2 Development Environments\n ||      Supported Operating Systems      Windows\n Microsoft Windows 2003 Server ( x64, x86) Microsoft Windows 2008 Server ( x64, x86) Microsoft Windows 2012 Server ( x64, x86) Microsoft Windows XP ( x64, x86) Microsoft Windows Vista ( x64, x86) Microsoft Windows 7 ( x64, x86) Microsoft Windows 8, 8.1 ( x64, x86) Microsoft Windows 10 ( x64, x86)  \\\nDevelopment Environments\nYou can use Aspose.Cells for C++ to develop applications in any development environment that support C++, but the following environments are explicitly supported:\n Microsoft Visual Studio 2013 Microsoft Visual Studio 2015 Microsoft Visual Studio 2017 Microsoft Visual Studio 2019  ","date":-62135596800,"description":"","objectID":"7e9c7cfb05f8cee8c27489a455b1f2f8","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/system+requirements/","title":"System Requirements"},{"content":"Getting Started\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"d35025a2079d85781f82d8bdfee80850","permalink":"https://roywangt.github.io/cellscpp/gettingstarted/","title":"Getting Started"},{"content":"Getting Started\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"dbe451ad957a73d7ef8cd7c4ab5fc6d2","permalink":"https://roywangt.github.io/cellscpp/releasenotes/","title":"Release Notes"},{"content":"We are pleased to launch our brand new product, Aspose.Cells for C++!\nMajor Features\n   **Key ** **Summary ** **Category **     CELLSPORTINGC-417 Open/Save XLS, OOXML file formats New Feature    CELLSPORTINGC-418 Set Styles and Formatting to worksheet cells New Feature    CELLSPORTINGC-419 Apply data validation to the cells  New Feature   CELLSPORTINGC-420 Filter data by using an AutoFilter New Feature   CELLSPORTINGC-421  Apply Page Setup options New Feature    CELLSPORTINGC-422 Set data and Formulas to the cells New Feature    ","date":-62135596800,"description":"","objectID":"7eef771c7b5db751956bea407cbb6a9f","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2016/aspose.cells+for+cpp+16.11.0+release+notes/","title":"Aspose.Cells for CPP 16.11.0 Release Notes"},{"content":"   Key Summary Category     CELLSPORTINGC-432 Apply Conditional formatting to the cells New Feature    CELLSPORTINGC-433 Read/Write Custom Document Properties New Feature    CELLSPORTINGC-434 Read/Write Built-in document properties New Feature    CELLSPORTINGC-435 Add Hyperlinks to the cells New Feature    CELLSPORTINGC-436 Support MS Excel Themes New Feature    CELLSPORTINGC-437 Add and manipulate PivotTables in the spreadsheet New Feature    CELLSPORTINGC-438 Group rows and columns in the worksheet New Feature    CELLSPORTINGC-439 Add Table/List Object to the worksheet New Feature    CELLSPORTINGC-426 License problem with Aspose.Cells for C++ APIs Bug    CELLSPORTINGC-425 Optimize the performance of saving XLS files Improvement    Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nRenames ICell::SetStyle method to ICell::SetIStyle\nRenames ICell::SetCharacters method to ICell::SetIFontSettings\nRenames ICellsColor::SetThemeColor method to ICellsColor::SetIThemeColor\nRenames ICells::SetStyle method to ICells::SetIStyle\nRenames ICellsHelper::GetDPI_i method to ICellsHelper::GetDPI\nRenames ICellsHelper::SetDPI_i method to ICellsHelper::SetDPI\nRenames ICellsHelper::GetVersion_i method to ICellsHelper::GetVersion\nRenames ICellsHelper::IsProtectedByRMS_i method to ICellsHelper::IsProtectedByRMS\nRenames ICellsHelper::IsProtectedByRMS_i method to ICellsHelper::IsProtectedByRMS\nRenames ICellsHelper::CellNameToIndex_i method to ICellsHelper::CellNameToIndex\nRenames ICellsHelper::CellIndexToName_i method to ICellsHelper::CellIndexToName\nRenames ICellsHelper::ColumnIndexToName_i method to ICellsHelper::ColumnIndexToName\nRenames ICellsHelper::ColumnNameToIndex_i method to …","date":-62135596800,"description":"","objectID":"0d44c688f31ce915e3c67d441a537a57","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2016/aspose.cells+for+cpp+16.12.0+release+notes/","title":"Aspose.Cells for CPP 16.12.0 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"807ec8f49063e4939774426953a93c3e","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2016/","title":"Release Notes - 2016"},{"content":"This page contains release notes for Aspose.Cells for CPP 17.02.0.\n   Key Summary Category     CELLSCPP-41 Calculate formulas in Excel spreadsheets New Feature    CELLSCPP-42 Improved performance in reading XLSX files  Improvement   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nAdds IWorkbook::CalculateFormula() method\nThe recent version 17.02.0 of Aspose.Cells for CPP API has added the IWorkbook::CalculateFormula() method. It helps developers to calculate the result of formulas and store in the appropriate cell of a worksheet. Developers can also calculate the custom formulas.\nThis code example demonstrates how to calculate the formulas in an Excel:\n/create a new workbook/\nintrusive_ptr wb = Factory::CreateIWorkbook();\n/get the first worksheet/\nintrusive_ptr wsc = wb-\u0026amp;gt;GetIWorksheets();\nintrusive_ptr ws = wsc-\u0026amp;gt;GetObjectByIndex(0);\n/get cells/\nintrusive_ptr cells = ws-\u0026amp;gt;GetICells();\n/set value to cell(0,0) and cell(1,0)/\ncells-\u0026amp;gt;GetObjectByIndex(0, 0)-\u0026amp;gt;PutValue(3);\ncells-\u0026amp;gt;GetObjectByIndex(1, 0)-\u0026amp;gt;PutValue(2);\n/set formula/\ncells-\u0026amp;gt;GetObjectByIndex(0, 1)-\u0026amp;gt;SetFormula(new String(\u0026amp;ldquo;=SUM(A1,A2)\u0026amp;quot;));\n/formula calculation/\nwb-\u0026amp;gt;CalculateFormula();\n/check result/\nEXPECT_TRUE(5 == cells-\u0026amp;gt;GetObjectByIndex(new String(\u0026amp;ldquo;B1\u0026amp;rdquo;))-\u0026amp;gt;GetIntValue());\n/save this workbook to resultFile/\nwb-\u0026amp;gt;Save(resultPath-\u0026amp;gt;StringAppend(new String(\u0026amp;ldquo;book5.xlsx\u0026amp;rdquo;)));\nAdds IWorkbook::CalculateFormula(bool ignoreError) method\nDevelopers can calculate formulas in various ways. IWorkbook::CalculateFormula(bool ignoreError) method allows developers to calculate the result of formulas as well as hides the error in calculating formulas. An error can occur due …","date":-62135596800,"description":"","objectID":"a7b35349339e2f8f0e3b8499ff39a42f","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2017/aspose.cells+for+cpp+17.02.0+release+notes/","title":"Aspose.Cells for CPP 17.02.0 Release Notes"},{"content":"   Key Summary Category     CELLSCPP-35 Read / Write XLSM file format  New Feature    CELLSCPP-36 Read / Write CSV file format  New Feature    CELLSCPP-37 Read / Write XLSB file format  New Feature    CELLSCPP-38 Create and manipulate Named Ranges New Feature    CELLSCPP-39 Read / Write Tab Delimited file format  New Feature    Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nRemoves IPageSetup::GetDraft()/SetDraft() method\nUse IPageSetup::GetPrintDraft()/SetPrintDraft() method instead.\nRemoves ICell::GetConditionalIStyle() method\nUse ICell::GetIConditionalFormattingResult() instead.\nRemoves ICells::MaxDataRowInColumn() method\nUse ICells::GetLastDataRow() instead.\nDeletes IPaneCollection::GetAcitvePaneType()/SetAcitvePaneType() method\nUnnecessary,deleted.\nDeletes IRange::ToString() method\nUnnecessary,deleted.\nDeletes IRow::Equals() method\nUnnecessary,deleted.\nDeletes IWorkbook::SetISettings() method\nUnnecessary,deleted.\nDeletes ICell::ToString() method\nUnnecessary,deleted.\nDeletes ICell::Equals(ObjectPtr) method\nUnnecessary,deleted.\nDeletes ICell::GetHashCode() method\nUnnecessary,deleted.\nDeletes IWorksheet::ToString() method\nUnnecessary,deleted.\nAdds IBuiltInDocumentPropertyCollection::GetScaleCrop()/SetScaleCrop() method\nIndicates the display mode of the document thumbnail.\nAdds IBuiltInDocumentPropertyCollection::GetLinksUpToDate()/SetLinksUpToDate() method\nIndicates whether hyperlinks in a document are up-to-date.\nAdds IExternalLink::IsVisible() method\nIndicates whether this external link is visible in MS Excel.\nAdds IListColumn::GetFormula()/SetFormula() method\nGets and sets the formula of the list column.\nAdds IWorkbook::GetAbsolutePath()/SetAbsolutePath() method\nGets and …","date":-62135596800,"description":"","objectID":"b77ce82703514e28d61d34dd9e98ae8f","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2017/aspose.cells+for+cpp+17.1.0+release+notes/","title":"Aspose.Cells for CPP 17.1.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 17.3.0.\n   Key Summary Category     CELLSCPP-51 Improved performance of writing XLSX file Improvement   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nThere are no public API changes in Aspose.Cells for C++ 17.3.0.\n","date":-62135596800,"description":"","objectID":"1c08b3c282dd1116d1684c89b754235d","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2017/aspose.cells+for+cpp+17.3.0+release+notes/","title":"Aspose.Cells for CPP 17.3.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 17.4.0.\n   Key Summary Category     CELLSCPP-62 Support 64-bit versions of Windows New Feature   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nThere are no public API changes in Aspose.Cells for C++ 17.4.0.\n","date":-62135596800,"description":"","objectID":"efb773f58b7f9eddff78c2ef862c8d83","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2017/aspose.cells+for+cpp+17.4.0+release+notes/","title":"Aspose.Cells for CPP 17.4.0 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"b4be33a75f15109ad470136c31904254","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2017/","title":"Release Notes - 2017"},{"content":"This page contains release notes for Aspose.Cells for CPP 18.4.\n   Key Summary Category     CELLSCPP-53 Support Drawing features/modules  New Feature    CELLSCPP-57 Implement System.Drawing library New Feature    CELLSCPP-68 Debug System.Drawing module  New Feature    CELLSCPP-69 Solve problems in C++ test cases  New Feature    CELLSCPP-70 Solve memory leakage in classes of System.Drawing module  New Feature    CELLSCPP-73 Write a method in publishing .h files  New Feature    CELLSCPP-75 Implement C++ function: Draw Image from Stream  New Feature    CELLSCPP-76 Implement C++ classes: ComIStreamWrapper, Metafile  New Feature    CELLSCPP-77 Debug C++ test case: Copies  New Feature    CELLSCPP-78 Solve problems in C++ test cases: DigitalSignature, EnumTypes, Finds, Formulas, Hyperlinks modules  New Feature    CELLSCPP-79 Solve the link problem of C++ release version New Feature    CELLSCPP-81 Fix FillPath issue in graphic module  New Feature    CELLSCPP-82 Fix System.Drawing module issue by test case New Feature    CELLSCPP-83 Fix gppoint FillPath issue in graphic module  New Feature    CELLSCPP-89 Translate and debug test case in Charts/EnumTypes directory New Feature    CELLSCPP-91 Translate test case in Finds  New Feature    CELLSCPP-96 Translate and debug test case in Formulas/Hyperlinks/ImpHtml/ImportExports/Inserts directory  New Feature    CELLSCPP-97 Debug and fix issues regarding XLSX/XLS to PDF rendering New Feature    CELLSCPP-98 Translate and debug test case in LightCells directory  New Feature    CELLSCPP-100 Translate and debug test case in Merges/OpenSaves/PageSetups/PDF directory New Feature    CELLSCPP-101 Translate and debug test case in PivotTables directory New Feature    CELLSCPP-102 Charts are not parsed (retained) when open/save an XLSX file format  New Feature    CELLSCPP-103 Translate and debug test case in Shapes directory New Feature    CELLSCPP-105 Translate and debug test case in XlsxTest directory New Feature    CELLSCPP-108 Open files and …","date":-62135596800,"description":"","objectID":"75c240646584412ab0501c6a6e990114","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2018/aspose.cells+for+cpp+18.4+release+notes/","title":"Aspose.Cells for CPP 18.4 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 18.5.\n   **Key ** **Summary ** **Category **     CELLSCPP-117  Save to EMF (format) issue Bug   CELLSCPP-123  Glyph Hashtable issue Bug   CELLSCPP-124  Axis gridlines color issue when converting Chart to PDF  Bug   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nNo API changes in this version\n","date":-62135596800,"description":"","objectID":"20e2316cb5144fd73864cbbf27b64dc8","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2018/aspose.cells+for+cpp+18.5+release+notes/","title":"Aspose.Cells for CPP 18.5 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 18.8.\n   **Key ** **Summary ** **Category **     CELLSCPP-177  Save chart to image  New Feature   CELLSCPP-123  Issue with glyph hashtable  Bug   CELLSCPP-128  Issue with regex split  Bug   CELLSCPP-129  Shape text missing right parenthesis Bug   CELLSCPP-130  Issue with time format for chart axis scale Bug   CELLSCPP-131  Pie 3D chart missing sides Bug   CELLSCPP-136  Issue with NumberFormatC::FormatCustom  Bug   CELLSCPP-138  Issue with button fill color  Bug   CELLSCPP-140  Pie missing leader line  Bug   CELLSCPP-141  Issue with datatime format  Bug   CELLSCPP-142  Issue with missing datalabel in chart Bug   CELLSCPP-143  Issue with convert::ToInt64  Bug   CELLSCPP-144  Issue with incorrect data point position Bug   CELLSCPP-148  Issue with gradient line color  Bug   CELLSCPP-149  Manual recoding SimpleDateFormatter Bug   CELLSCPP-150  Issue with GradientFillChart  Bug   CELLSCPP-151  Category axis scale missing Bug   CELLSCPP-152  Issue with missing pie slice  Bug   CELLSCPP-153  Issue with gradient fill color  Bug   CELLSCPP-155  One dot added in Russian date Bug   CELLSCPP-156  Data label missing in chart Bug   CELLSCPP-157  DateTime formatting issue Bug   CELLSCPP-158  Issue with array reverse  Bug   CELLSCPP-159  Issue with static variable translation  Bug   CELLSCPP-160  Text error in shape Bug   CELLSCPP-161  Texture filling with incorrect image size Bug   CELLSCPP-163  Issue with time scale  Bug   CELLSCPP-164  Remove dot from the end in Russian date format Bug   CELLSCPP-165  Russian datetime format issue Bug   CELLSCPP-166  Issue with Korean datetime  Bug   CELLSCPP-170  Issue with incorrect datatime format Bug   CELLSCPP-171  Memory leakage issue Bug   CELLSCPP-173  Null pointer crashed while saving to image Bug   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any …","date":-62135596800,"description":"","objectID":"695ec694fc1e9d9b66b578e474584da4","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2018/aspose.cells+for+cpp+18.8+release+notes/","title":"Aspose.Cells for CPP 18.8 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"e51aa179cc7a84a3afda85578c68f45d","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2018/","title":"Release Notes - 2018"},{"content":"This page contains release notes for Aspose.Cells for CPP 19.1.\n   Key Summary Category     CELLSCPP-187 Save shape to image format New Feature   CELLSCPP-178 Support TSV format which is also known as TabDelimited format Improvement   CELLSCPP-123 Issue with strong \u0026amp;amp; weak reference in Shape type Bug   CELLSCPP-124 Remove cycle reference for Shape 2007 Bug   CELLSCPP-184 Issue with static member variable translation Bug   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nNo API changes in this version\n","date":-62135596800,"description":"","objectID":"9d0b00b9122e6656ff01abaad67726e1","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/aspose.cells+for+cpp+19.1+release+notes/","title":"Aspose.Cells for CPP 19.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 19.10.\n   Key Summary Category     CELLSCPP-215 Fix clashes issue New Feature   CELLSCPP-216 Support independent package release New Feature   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nRenamed namespace \u0026amp;lsquo;System\u0026amp;rsquo; to \u0026amp;lsquo;Systems\u0026amp;rsquo; to avoid collisions with other C++ production in a single project\n","date":-62135596800,"description":"","objectID":"2ff5f58bdbf13dbfea4c04e9c3992a1b","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/aspose.cells+for+cpp+19.10+release+notes/","title":"Aspose.Cells for CPP 19.10 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for C++ 19.11.\n   Key Summary Category     CELLSCPP-218 Support for adding some sort of Callback event/mechanism that notifies the progress of conversion (e.g Excel to PDF) New Feature   CELLSCPP-220 Fix x64 debug mode crush while integrating other C++ products New Feature   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nAdd IPdfSaveOptions::SetIPageSavingCallback Add IPdfSaveOptions::GetIPageSavingCallback Add PageSavingArgs::GetPageIndex Add PageSavingArgs::GetPageCount Add PageStartSavingArgs::SetToOutput Add PageStartSavingArgs::IsToOutput Add PageEndSavingArgs::HasMorePages Add PageEndSavingArgs::SetHasMorePages\n\\\n\\\n\\\n\\\n","date":-62135596800,"description":"","objectID":"f9f2d363e5f8144baa8840b57323eda7","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/aspose.cells+for+cpp+19.11+release+notes/","title":"Aspose.Cells for CPP 19.11 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 19.3.\n   Key Summary Category     CELLSCPP-208 Add 64-bit (x64) library to NuGet package New Feature   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nNo API changes in this version\n","date":-62135596800,"description":"","objectID":"4d5db1fb8d11e7b4196d0e93ecdb77b4","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/aspose.cells+for+cpp+19.3+release+notes/","title":"Aspose.Cells for CPP 19.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 19.4.\n   Key Summary Category     CELLSCPP-209 Support 64bits(x64) lib in nuget in debug mode New Feature   CELLSCPP-210 Exception while calling CalculateFormula() Bug   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nNo API changes in this version\n","date":-62135596800,"description":"","objectID":"804def678932980bef0cca3c2e62029f","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/aspose.cells+for+cpp+19.4+release+notes/","title":"Aspose.Cells for CPP 19.4 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for CPP 19.8.\n   Key Summary Category     CELLSCPP-213 Fix out-of-bounds read issue Bug   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for C++. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nNo API changes in this version\n","date":-62135596800,"description":"","objectID":"5f2d3ea3e4d067f3d014888907469c18","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/aspose.cells+for+cpp+19.8+release+notes/","title":"Aspose.Cells for CPP 19.8 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"0a159f65fb9e91dd20a786a5e0bfc39a","permalink":"https://roywangt.github.io/cellscpp/releasenotes/releasenotes-2019/","title":"Release Notes - 2019"},{"content":"The following is a list of features that are not currently supported by Aspose.Cells for JasperReports:\n No automatic installer. Aspose.Cells for JasperReports is distributed as a ZIP archive. To install, extract and copy files into the appropriate location and possibly edit some XML configuration files. An automatic installer will be provided in the future. Excel doesn\u0026amp;rsquo;t support all JasperReports chart types. Some types of charts in JasperReports are incompatible with Microsoft Excel charts, for example: XYBarChart, XYAreaChart, ThermometerChart, CandlestickChart, HighLowChart, MultipleAxisChart and MeterChart. These charts are exported as images, the same way the original JasperReports XLS exporter manages charts. (Other charts are exported as editable charts.)  ","date":-62135596800,"description":"","objectID":"ccf9189a457d4196eb817d517622cc1c","permalink":"https://roywangt.github.io/cellsjasperreports/known+limitations/","title":"Known Limitations"},{"content":"To install Aspose.Cells for JasperReports to your system, your system needs to meet the following requirements:\n Java 2 Platform Standard Edition 1.6 or higher. JasperReports 6.3.0 or higher.  ","date":-62135596800,"description":"","objectID":"4c60ee4b229fec74abb66d8a5b5767f2","permalink":"https://roywangt.github.io/cellsjasperreports/system+requirements/","title":"System Requirements"},{"content":"** Aspose.Cells for JasperReports : Home **\nAspose.Cells for JasperReports\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"ebf39a45552cbbf14050e68a31a6aeff","permalink":"https://roywangt.github.io/cellsjasperreports/","title":"Aspose.Cells for JasperReports"},{"content":"Aspose.Cells for JasperReports offers only one edition type: Enterprise edition.\n","date":-62135596800,"description":"","objectID":"f18715ead586da2d0262640e9e2e47fd","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/edition+types/","title":"Edition Types"},{"content":"You can easily download Aspose.Cells for JasperReports for evaluation from the download page. The evaluation download is same as the purchased download. The evaluation version simply becomes licensed after applying a license.\nEvaluation version of Aspose.Cells for JasperReports (without a license specified) provides product functionality to some extent not complete though. One limitation is that it always injects an extra worksheet with evaluation watermark on open / save any spreadsheet document.\nFigure: Demo Spreadsheet created by Aspose.Cells component\nIt will inject an extra evaluation watermark worksheet to the workbook.\nFigure: Evaluation Warning – An Extra Worksheet\nIf you want to test Aspose.Cells for JasperReports without evaluation version limitations, you may request a 30-day temporary license .\nAttachments: Evaluate Aspose.Cells-001.png (image/png) Evaluate Aspose.Cells-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"1d6b6454ba0a2f3a84a9b9b079c01a90","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/evaluate+aspose.cells/","title":"Evaluate Aspose.Cells"},{"content":"Aspose.Cells for JasperReports is available as a free, time unlimited evaluation from the download page. The evaluation and licensed versions of the product is the same download.\nWhen you are happy with the evaluation version, you can purchase a license. Make sure you understand and agree to the license terms.\nThe license is available for download from the order page when the order has been paid. The license is a clear text, digitally signed XML file. The license contains information such as the client name, purchased product and license type. Do not modify the content of the license file: doing so invalidates the license.\nThere are two ways to apply a license:\n Call setLicense Set an exporter parameter in applicationContext.xml  After installing the license,\n Verify that it works.  Call setLicense\nThis method is applicable for use with JasperReports.\nDownload the license to your computer and copy it to the appropriate folder (for example your application\u0026amp;rsquo;s folder or JasperReports\\lib). Add the following code to your project:\nJava\nimport com.aspose.cells.jasperreports.*;\n\\\n// Create a stream object containing the license file\nFileInputStream fstream = new FileInputStream(\u0026amp;ldquo;C:\\Aspose.Cells.JasperReports.lic\u0026amp;rdquo;);\n\\\n// Set the license through the stream object\nLicense license = new License();\nlicense.setLicense(fstream);\n\\\nSet the licenseFile Exporter Parameter in applicationContext.xml\nThis method is applicable for use with JasperServer.\n Download the license to your computer and copy it to the \\apache-tomcat\\webapps\\jasperserver\\WEB-INF folder, where  stands for the JasperServer installation directory. Locate the \\apache-tomcat\\webapps\\jasperserver\\WEB-INF\\applicationContext.xml file and add the following lines:  XML\n\r\\\nVerify the License Works\nExport any report to XLS format and check if the report contains an evaluation message. If there is no evaluation message, then the license is working properly.\n**Aspose.Cells for JasperReports injects an …","date":-62135596800,"description":"","objectID":"9d2c3f7204701ba323be0a1944b0ff7e","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/licensing/","title":"Licensing"},{"content":"**Welcome to the Aspose.Cells for JasperReports Documentation! **\nAspose.Cells for JasperReports is a library which works as a replacement for JasperReports\u0026amp;lsquo;s original Microsoft Excel exporter, bundled with some great enhancements. It eliminates the dependency on the POI library, and uses Aspose.Cells for Java on the back-end to export reports in Microsoft Excel formats (XLS, XLSX).\nProduct Description\nAspose.Cells for JasperReports is a flexible solution that makes it easy to export reports from JasperReports and JasperServer to Microsoft Excel file formats. All the report features are converted to Microsoft Excel spreadsheets with the highest degree of precision.\nBesides the functionality provided by the original POI-based Micrsofot Excel exporter, this component provides some valuable features. The major innovations related to exporting to XLS include:\n Provide editable charts in Microsoft Excel format rather than static pictures.  **A sample report is generated using Aspose.Cells for JasperReports **\nAttachments: Product Overview-001.png (image/png) Product Overview-002.png (image/png) aspose.Cells-JR_logo.png (image/png) aspose-Cells-for-JasperReports.png (image/png)\n","date":-62135596800,"description":"","objectID":"6071c99971e5600a04990425a125c3a2","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/product+overview/","title":"Product Overview"},{"content":"   Contents Summary\n1 Supported File Formats\n ||      Supported File Formats         Format Description Load Save     XLS Saves the document in the Microsoft Excel 97-2003 Workbook. |    XLSX Saves the document in Office Open XML SpreadsheetML Workbook or template file, with or without macros. |    ODS Saves the document in ODS (OpenDocument Spreadsheet). |    XML Extensible Markup Language |    PDF Adobe Portable Document Format. |    CSV Saves the document in CSV (Comma Separated Value) file. |    TSV Saves the document in TSV (Tab-separated values) file. |    TabDelimited Saves the document in Tab-delimited text file, same with TSV file. |     ","date":-62135596800,"description":"","objectID":"ae1b65c511c01284f9de67b6c09ed7a1","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/supported+file+formats/","title":"Supported File Formats"},{"content":"**This section includes the following topics: **\n Product Overview Feature Tour Edition Types Licensing Evaluate Aspose.Cells Supported File Formats  Attachments: Product Overview-001.png (image/png) Product Overview-002.png (image/png) aspose.Cells-JR_logo.png (image/png) aspose-Cells-for-JasperReports.png (image/png) Licensing-001.png (image/png) Licensing-002.png (image/png) Evaluate Aspose.Cells-001.png (image/png) Evaluate Aspose.Cells-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"3740d63a0ad8c911ad59aff2ad924728","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/","title":"Getting Started"},{"content":"Aspose.Cells for JasperReports is an external exporter for JasperReports.\nAspose.Cells for JasperReports is provided as a single JAR file and can be easily installed on computers running JasperReports. Download it to start a trial.\nTo install the exporter, aspose.cells.jasperreports.jar should be copied to the JasperReports\\lib directory.\n","date":-62135596800,"description":"","objectID":"54f285ff7f4a1a15bd261dd423d9cbbc","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/easy+and+lightweight+deployment/","title":"Easy and Lightweight Deployment"},{"content":"Aspose.Cells for JasperReports is a product for exporting reports from JasperReports and JasperServer to Microsoft Excel format. Aspose.Cells for JasperReports inherits all features of the built-in exporter as well as makes up for some of the weaknesses of the original XLS renderer of JasperReports. This section provides detailed description of Aspose.Cells for JasperReports features. Click on the respective links in the table to learn more about the features.\n   **Feature ** **Description **     XLS or XLSX Export Export reports as Microsoft Excel XLS format from your application without utilizing Microsoft Excel.   High Fidelity to the Report Design The layout and appearance of an XLS/XLSX report matches the original, similar to PDF or other formats.   Easy and Lightweight Deployment Aspose.Cells for JasperReports is a JasperReports and JasperServer exporter to Microsoft Excel format.   Simple and Affordable Licensing We provide affordable licensing easily used in source code   World Class free Technical Support Unlimited technical support is provided directly by developers of the product.   Miscellaneous More effective features are provided for the users.    ","date":-62135596800,"description":"","objectID":"d34eb72ee581d8060d5b18fcfa951a16","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/feature+overview/","title":"Feature Overview"},{"content":"Aspose.Cells for JasperReports exports reports as Microsoft Excel spreadsheets that look identical to reports exported by the built-in exporters of JasperReports.\n**A sample XLS report exported using Aspose.Cells for JasperReports **\n**A sample XLS report exported using the built-in JasperReports exporters **\nAttachments: High Fidelity to the Report Design-001.png (image/png) High Fidelity to the Report Design-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"30ae9058db77cca5b581bae5d62c311f","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/high+fidelity+to+the+report+design/","title":"High Fidelity to the Report Design"},{"content":"Some effective features of Aspose.Cells for JasperReports are listed below:\n Aspose.Cells for JasperReports supports Microsoft Excel charts so that charts are exported as editable charts rather than static pictures. This way, users can edit the charts manually in Microsoft Excel if they need to. Aspose.Cells for JasperReports is easily integrated with JasperServer.  ","date":-62135596800,"description":"","objectID":"f2281346bc51234f2a6482f57e9ad225","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/miscellaneous/","title":"Miscellaneous"},{"content":"Every Aspose license comes with 1-year worth of free upgrades to any new version of the product that comes out and unlimited free technical support.\nAspose.Cells for JasperReports evaluation and paid versions are the same download. Simply download Aspose.Cells for JasperReports and install it. By default, the exporter works in evaluation mode. Evaluation mode injects watermarks into exported reports. To remove the watermark, purchase a license and follow the instructions on how to apply the license.\nMake sure to take advantage of the Aspose.Cells for JasperReports evaluation as it does not have a time limit and comes with free technical support.\n","date":-62135596800,"description":"","objectID":"07052f561ce8e60d19690e8c63b6d816","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/simple+and+affordable+licensing/","title":"Simple and Affordable Licensing"},{"content":"Aspose is renowned for its free and unlimited technical support provided directly by the developers of the products. If a new version of a product is available, or if resolving a question results in a fix, all new releases are free if you have an active subscription.\nGetting Support\nForums\nAspose\u0026amp;rsquo;s Support Forums is the place not only to resolve technical issues, but to participate in discussions with the vibrant and growing community of Aspose users. Currently there are over 190,000 users registered at the Aspose website.\nBlogs\nAspose.Blogs is the place to look for information about the latest releases and about what Aspose developers have to say.\nNeed more support?\nAspose offers free support to all users. For companies want that their issue will get prioritized, or who want to influence our product development road map, there are advanced support options like Priority Support and Enterprise Support.\nAttachments: World Class free Technical Support-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"ba04e4c4acd6e709086035e52ceb9bff","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/world+class+free+technical+support/","title":"World Class Free Technical Support"},{"content":"Aspose.Cells for JasperReports allows you to deliver reports in the XLS and XLSX format without loss of layout or formatting. To create spreadsheets in the Microsoft Excel formats, Aspose.Cells for JasperReports relies on a built-in version of Aspose.Cells for Java, a leading spreadsheet-processing library from Aspose.\nMicrosoft Excel is not required to generate documents with Aspose.Cells.\nA sample XLS report exported using Aspose.Cells for JasperReports\nAttachments: XLS or XLSX Export-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"93fcafc031b334895d469c9023eb8d3d","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/xls+or+xlsx+export/","title":"XLS or XLSX Export"},{"content":"**This section includes the following topics: **\n Feature Overview XLS or XLSX Export High Fidelity to the Report Design Easy and Lightweight Deployment Simple and Affordable Licensing World Class Free Technical Support Miscellaneous  Attachments: XLS or XLSX Export-001.png (image/png) High Fidelity to the Report Design-001.png (image/png) High Fidelity to the Report Design-002.png (image/png) World Class free Technical Support-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"dabcfcf2ece3d0205088e37b244aacb4","permalink":"https://roywangt.github.io/cellsjasperreports/gettingstarted/featuretour/","title":"Feature Tour"},{"content":"Aspose.Cells for JasperReports includes a number of demo projects to help you get started exporting reports to Microsoft Excel document formats from your application.\nThe demos provided with Aspose.Cells for JasperReports are standard JasperReports demos modified to demonstrate the use of the new exporters.\nTo run Aspose.Cells for JasperReports demos, perform the following steps:\n Download JasperReports (e.g https://sourceforge.net/projects/jasperreports/files/archive/). Make sure to download the entire archived project with the source code and demos, not just a single JAR. Unpack the archived project to some location on your hard disk, for example C:. Copy all demo folders from the \\demo folder of Aspose.Cells.JasperReports.zip to \\demo\\samples, where \u0026amp;ldquo;\u0026amp;rdquo; is the location you have unpacked JasperReports to. This step is required because demo build scripts rely on the JasperReports’ folder structure, otherwise you will need to modify build scripts. Copy aspose.cells.jasperreports.jar from the \\lib folder of Aspose.Cells.JasperReports.zip to \\lib. Prepare Ant Build Tool and Ivy Dependency Manager, see \\readme.txt. Modify the build.xml at \\demo\\samples, add the aspose.cells.jasperreports.jar into the classpath: \u0026amp;hellip; . Change the current directory to \\demo\\hsqldb and run the following command line: ant runServer Change the current directory to one of the Aspose.Cells for JasperReports demos, for example \\demo\\samples\\ac.charts and run the following commands in the command line: ant test - to produce report files using the Aspose XLS exporter. Open one of the resulting documents to view, for example \\demo\\samples\\ac.charts\\build\\reports\\AreaChartReport.xls in Microsoft Excel or another application.  ","date":-62135596800,"description":"","objectID":"388b98ac26e5d7a65d40091e49dcb5b6","permalink":"https://roywangt.github.io/cellsjasperreports/installation/demos+setup/","title":"Demos Setup"},{"content":"To use Aspose.Cells for JasperReports from your application, copy aspose.cells.jasperreports.jar from the \\lib folder of Aspose.Cells.JasperReports.zip to the JasperReports\\lib directory or to a library folder of your application. After that, you can access the exporters programmatically.\nThe following example shows the typical code needed to export a report to an XLS file using Aspose.Cells for JasperReports. More examples can be found in the demo reports included in the product archive.\nJava\nimport com.aspose.cells.jasperreports.*;\nACXlsExporter exporter = new ACXlsExporter ();\nACXlsReportConfiguration conf = new ACXlsReportConfiguration ();\nFile sourceFile = new File(fileName);\nJasperPrint jasperPrint = (JasperPrint)JRLoader.loadObject(sourceFile);\nexporter.setConfiguration(conf);\nexporter.setExporterInput(new SimpleExporterInput(jasperPrint));\nFile destFile = new File(sourceFile.getParent(), jasperPrint.getName() + \u0026amp;ldquo;.xls\u0026amp;rdquo;);\nexporter.setExporterOutput(new SimpleOutputStreamExporterOutput(destFile.toString());\nexporter.exportReport();\n\\\n","date":-62135596800,"description":"","objectID":"70ffb1a176eca97969225667e369ac8d","permalink":"https://roywangt.github.io/cellsjasperreports/installation/installing+aspose.cells+for+jasperreports/","title":"Installing Aspose.Cells for JasperReports"},{"content":"To integrate Aspose.Cells for JasperReports with JasperServer, perform the steps below.\nIn all of the following steps  stands for the JasperServer installation directory.\n Add the following new exporter properties to the \\apache-tomcat\\webapps\\jasperserver\\WEB-INF\\flows\\viewReportBeans.xml file.  XML\n\r\r\\\n Locate the \u0026amp;lt;util:map id=”exporterConfigMap\u0026amp;gt; element in the \\apache-tomcat\\webapps\\jasperserver\\WEB-INF\\flows\\viewReportBeans.xml file and add the following lines:  XML\n\u0026amp;lt;util:map id=\u0026amp;quot;exporterConfigMap\u0026amp;quot;\u0026amp;gt;\n\u0026amp;lt;/util:map\u0026amp;gt;\n\\\n Copy all GIF images from the \\lib folder in the aspose.cells.jasperreports.zip to the \\apache-tomcat\\webapps\\jasperserver\\images folder. Copy the aspose.cells.jasperreports.jar file from the \\lib folder in the aspose.cells.jasperreports.zip to the \\apache-tomcat\\webapps\\jasperserver\\WEB-INF\\lib. folder. Add the following lines to the \\apache-tomcat\\webapps\\jasperserver\\WEB-INF\\applicationContext.xml file. (This bean may contain various configuration settings intended to configure the export. For example, you can use the JasperReports font mapping feature or specify the location of the Aspose.Cells for JasperReports license file.)  XML\n\u0026amp;lt;!\u0026amp;ndash; Uncomment to apply a license. Check the license path.\n\u0026amp;ndash;\u0026amp;gt;\n\r\\\n Run JasperServer and open any report to view. If the previous steps were performed properly, additional format icons are available.  **New export formats available (on the right) after installing Aspose.Cells for JasperReports on JasperServer **\nAttachments: Integration with JasperServer-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"5053115afa42202757b288731ce56742","permalink":"https://roywangt.github.io/cellsjasperreports/installation/integration+with+jasperserver/","title":"Integration with JasperServer"},{"content":"Aspose.Cells for JasperReports can be deployed on your computer by simply adding the released JAR file into your classpath.\n","date":-62135596800,"description":"","objectID":"f04bc1e0e4a67d773542ac9c36ec916b","permalink":"https://roywangt.github.io/cellsjasperreports/installation/introduction/","title":"Introduction"},{"content":"**This section includes the following topics: **\n Introduction Installing Aspose.Cells for JasperReports Integration with JasperServer Demos Setup  Attachments: Integration with JasperServer-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"c4927124305fb6cbc0dcbcf62bc2c335","permalink":"https://roywangt.github.io/cellsjasperreports/installation/","title":"Installation"},{"content":"The following table lists the configuration parameters.\n   **Parameter name ** **Description **     FORMAT_TYPE Can be set to \u0026amp;ldquo;EXCEL97TO2003\u0026amp;rdquo; or \u0026amp;ldquo;EXCEL2007\u0026amp;rdquo; to generate Microsoft Excel 79 0 2003 or Excel 2007 format files.   IS_ONE_PAGE_PER_SHEET A Boolean value specifying whether each report page should be written to a different XLS worksheet.   IS_REMOVE_EMPTY_SPACE_BETWEEN_ROWS A Boolean value specifying whether the empty spaces that may appear between rows should be removed or not.   IS_REMOVE_EMPTY_SPACE_BETWEEN_COLUMNS A Boolean value specifying whether the empty spaces that may appear between columns should be removed or not.   IS_WHITE_PAGE_BACKGROUND A Boolean value specifying whether the page background should be white or the default XLS background color. What the XLS background colour is may vary depending on the XLS viewer properties or the operating system color scheme.   IS_DETECT_CELL_TYPE Flag used to indicate whether the exporter should take into consideration the type of the original text field expressions and set the cell types and values accordingly.   SHEET_NAMES An array of strings representing custom sheet names. This is useful when used with the IS_ONE_PAGE_PER_SHEET parameter.   IS_FONT_SIZE_FIX_ENABLED Flag for decreasing font size so that text fits into the specified cell height.   MAXIMUM_ROWS_PER_SHEET An integer value specifying the maximum number of rows allowed to be shown in a sheet. When set, a new sheet is created for the remaining rows to be displayed. Negative values or zero means no limit has been set.   IS_IGNORE_GRAPHICS Flag for ignoring graphical elements and exporting text elements only.   IS_COLLAPSE_ROW_SPAN Flag for collapsing row span and avoid merging cells across rows.   IS_IGNORE_CELL_BORDER Flag for ignoring the cell border.   IS_USE_EXCEL_CHART Flag for using editable chart in Microsoft Excel format rather than static pictures. The default value is true.    ","date":-62135596800,"description":"","objectID":"a0cf0c3f7892c532bf10742d51fcc219","permalink":"https://roywangt.github.io/cellsjasperreports/reference/configuration+parameters/","title":"Configuration Parameters"},{"content":"**This section includes the following topics: **\n Configuration Parameters  ","date":-62135596800,"description":"","objectID":"17bb26cc5bb1506934bce0369f4fb068","permalink":"https://roywangt.github.io/cellsjasperreports/reference/","title":"Reference"},{"content":" Release Notes - 2018 Release Notes - 2016 Release Notes - 2013 Release Notes - 2012 Release Notes - 2010 Release Notes - 2009  ","date":-62135596800,"description":"","objectID":"4a10bc28052ade739970450a44fdce44","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/","title":"Release Notes"},{"content":"This page contains release notes for Aspose.Cells for JasperReports v1.0.0.0\nWe are happy to announce Aspose.Cells for JasperReports v1.0.0.0!\nWhat\u0026amp;rsquo;s new:\nl Provide editable charts in Microsoft Excel format rather than static pictures.\nl Support to integrate Aspose.Cells for JasperReports to JasperServer.\nl Eliminate the dependency of POI library.\nl Support various kinds of charts, including bar chart, area chart, pie chart, line chart etc.\n","date":-62135596800,"description":"","objectID":"b39bb1c73ff79655b858b8fff9308944","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2009/aspose.cells+for+jasperreports+v1.0.0.0+release+notes/","title":"Aspose.Cells for JasperReports v1.0.0.0 Release Notes"},{"content":"**Release Notes - 2009 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"e00b1a106c0f5b9df16b09803df5f740","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2009/","title":"Release Notes - 2009"},{"content":"This page contains release notes for Aspose.Cells for JasperReports 1.0.1\nWe are happy to announceAspose.Cells for JasperReports 1.0.1!\nWhat\u0026amp;rsquo;s new:\n \u0026amp;lt;!-if !supportLists-\u0026amp;gt; \u0026amp;lt;!-endif-\u0026amp;gt;Font sizes are adjusted appropriately to paste characters in Microsoft Excel format similar to characters in PDF format. \u0026amp;lt;!-if !supportLists-\u0026amp;gt; \u0026amp;lt;!-endif-\u0026amp;gt;Axis labels (of Charts) in date format are rendered correctly and accordingly.  \u0026amp;lt;!-if !supportLists-\u0026amp;gt; \u0026amp;lt;!-endif-\u0026amp;gt;Gradient Fill effects for the areas are supported including chart’s background (chart area, plot area etc.), legend’s background, bars and bubbles etc.  What\u0026amp;rsquo;s fixed:\n \u0026amp;lt;!-if !supportLists-\u0026amp;gt; \u0026amp;lt;!-endif-\u0026amp;gt;Fixed some bugs of filling wall and floor of 3D charts. \u0026amp;lt;  Unable to render embedded object: File (link\u0026amp;gt;\u0026amp;lt;ri:page ri:content-title=\u0026amp;quot;if !supportLists\u0026amp;rdquo; /\u0026amp;gt;\u0026amp;lt;/ac:link\u0026amp;gt;\u0026amp;ndash;\u0026amp;gt;\u0026amp;lt;) not found.\n-endif-\u0026amp;gt;Fixed a bug of pie chart labels.\n \u0026amp;lt;!-if !supportLists-\u0026amp;gt; \u0026amp;lt;!-endif-\u0026amp;gt;Fixed a bug regarding support of jasperserver 3.1.0.  ","date":-62135596800,"description":"","objectID":"304e5997dba7aaad2b1e5169d8c6e58d","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2010/aspose.cells+for+jasperreports+1.0.1+release+notes/","title":"Aspose.Cells for JasperReports 1.0.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for JasperReports 1.1.0\nWe are happy to announce Aspose.Cells for JasperReports v1.1.0 for the users!What\u0026amp;rsquo;s new:\n Supports Microsoft Excel 97 to 2003 and Microsoft Excel 2007 formats. More details could be found at the document “Configuration Parameters” in the product documentation. Fixes several bugs of calculation in report element size. Supports JasperReports 3.7.x.  ","date":-62135596800,"description":"","objectID":"0c485596d0ce583b1377105af1c5528f","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2010/aspose.cells+for+jasperreports+1.1.0+release+notes/","title":"Aspose.Cells for JasperReports 1.1.0 Release Notes"},{"content":"**Release Notes - 2010 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"9d58d144c7ba9cb43ad8f5463fa58c86","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2010/","title":"Release Notes - 2010"},{"content":"This page contains release notes for Aspose.Cells for JasperReports 1.1.1\nWe are happy to announce Aspose.Cells for JasperReports v1.1.1!\nWhat\u0026amp;rsquo;s new:\n Fixed a bug when chart has no series or series display is not correct. Fixed several bugs of parsing Microsoft Excel 2007 files.  ","date":-62135596800,"description":"","objectID":"fd8c4b12f72fb3040b89b82e39f706e5","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2012/aspose.cells+for+jasperreports+1.1.1+release+notes/","title":"Aspose.Cells for JasperReports 1.1.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for JasperReports 1.1.2\nNew Features\nJasperReports 4.0, 4.5 and 4.7\n","date":-62135596800,"description":"","objectID":"1ec08b5ee5b0cfccb5dc6b5a7a621489","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2012/aspose.cells+for+jasperreports+1.1.2+release+notes/","title":"Aspose.Cells for JasperReports 1.1.2 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"dc6f5057acd797bfe596bf4e88a01ed0","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2012/","title":"Release Notes - 2012"},{"content":"This page contains release notes for Aspose.Cells for JasperReports 1.1.3\nNew Features\n40551 - Support\n","date":-62135596800,"description":"","objectID":"8e9828bd0497b434a496e3e4b5e3fa95","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2013/aspose.cells+for+jasperreports+1.1.3+release+notes/","title":"Aspose.Cells for JasperReports 1.1.3 Release Notes"},{"content":"**Release Notes - 2013 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"b1584de086f83f54156bfa4f8e88ab84","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2013/","title":"Release Notes - 2013"},{"content":"   **Key ** **Summary ** **Category **     CELLSJAVA-41448 JasperReports- Aspose.Cells does not export formulas nor it exports calculated values of the formulas New Feature   CELLSJAVA-41449 JasperReports - Aspose.Cells for JasperReports does not run on the newer versions of JasperServers New Feature   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for JasperReports. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\nSupports JasperServer V6.3.0\nWe removed those versions that support old versions of JasperReports and only keep the one which supports JasperServer v6.3.0 in the release archive. If users need to work with old versions of JasperReports, please download old versions of Aspose.Cells for JasperReports.\n","date":-62135596800,"description":"","objectID":"622e111c39c539efb5bf79f150ee4252","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2016/aspose.cells+for+jasperreports+2.0.0+release+notes/","title":"Aspose.Cells for JasperReports 2.0.0 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"72136b5c7296d046d098367ed8b499e5","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2016/","title":"Release Notes - 2016"},{"content":"This page contains release notes for Aspose.Cells for JasperReports 18.11.\n   Key Summary Category     CELLSJAVA-42742 Conflict between two jars (Aspose.Cells for Java and Aspose.Cells for JasperReports) Improvement   Public API and Backwards Incompatible Changes      The following is a list of any changes made to the public API such as added, renamed, removed or deprecated members as well as any non-backward compatible change made to Aspose.Cells for JasperReports. If you have concerns about any change listed, please raise it on the Aspose.Cells support forum.\n","date":-62135596800,"description":"","objectID":"1405646c7e57b39377a457901ef6fa82","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2018/aspose.cells+for+jasperreports+18.11+release+notes/","title":"Aspose.Cells for JasperReports 18.11 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"e0f13854a380a4f2a1859275049cff8d","permalink":"https://roywangt.github.io/cellsjasperreports/releasenotes/releasenotes-2018/","title":"Release Notes - 2018"},{"content":"Aspose.Cells for JasperReports provides a class named ACXlsExporter for exporting reports to XLS files. It takes a .jrprint file or a JasperPrint object as its input, and exports it to an XLS file.\nThe following code snippet demonstrates how to export the jasperPrint object to some file path, for example, destFile.\nJava\nimport com.aspose.cells.jasperreports. ACXlsExporter;\n\u0026amp;hellip;\u0026amp;hellip;\u0026amp;hellip;\u0026amp;hellip;\u0026amp;hellip;..\nACXlsExporter exporter = new ACXlsExporter ();\nexporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);\nexporter.setParameter(JRExporterParameter.OUTPUT_FILE_NAME, destFile.toString());\nexporter.setParameter(JRXlsExporterParameter.IS_ONE_PAGE_PER_SHEET, Boolean.TRUE);\nexporter.setParameter(ACXlsExporterParameter.IS_USE_EXCEL_CHART, Boolean.FALSE);\nexporter.exportReport();\n\\\n","date":-62135596800,"description":"","objectID":"2f840b1adad89482963c220666a94cab","permalink":"https://roywangt.github.io/cellsjasperreports/userguide/exporting+.jrprint+files+to+xls+formats/","title":"Exporting .jrprint Files to XLS Formats"},{"content":"Aspose.Cells for JasperReports requires a .jasper file to be filled to a .jrprint or a JasperPrint object before it can be exported to an XLS file. There\u0026amp;rsquo;s no modification needed for the .jrxml file whatsoever. The filling procedure stores internal representations of charts into the JasperPrint object which is then used to generate editable charts.\nPlease read JasperReports\u0026amp;rsquo; documentation for detailed description of how to fill a report.\nHere\u0026amp;rsquo;s an example:\nJava\nJasperPrint jasperPrint = JasperFillManager.fillReport(jasperFileName, parameters, getConnection());\n\\\n","date":-62135596800,"description":"","objectID":"8fc1093ad7522f017af6403ae9a560e8","permalink":"https://roywangt.github.io/cellsjasperreports/userguide/filling+a+.jasper+file+with+editable+chart+support/","title":"Filling a .jasper File with Editable Chart Support"},{"content":"**This section includes the following topics: **\n Filling a .jasper File with Editable Chart Support Exporting .jrprint Files to XLS Formats  ","date":-62135596800,"description":"","objectID":"14778434ec5fe8754722ccfaf3f77ec3","permalink":"https://roywangt.github.io/cellsjasperreports/userguide/","title":"User Guide"},{"content":"Aspose.Cells for .NET is a spreadsheet programming library that allows software developers to manipulate and convert spreadsheet files from within their own applications. Aspose.Cells for .NET supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats and allows exporting Excel files to PDF, XPS, HTML, MHTML, Plain Text, TIFF, JPG, PNG, BMP, and SVG.\nThe latest API Reference can be found at Aspose.Cells for .NET API Reference.\n","date":-62135596800,"description":"","objectID":"50993a8c343b68544211d9dd6373a0e1","permalink":"https://roywangt.github.io/cellsnet/api+reference/","title":"API Reference"},{"content":"** Aspose.Cells for .NET : Home **\nWelcome to Aspose.Cells for .NET\nAspose.Cells for .NET is a spreadsheet programming library that allows software developers to manipulate and convert spreadsheet files from within their own applications. A combination of APIs and GUI controls, Aspose.Cells for .NET speeds up Microsoft Excel® programming and conversion. Aspose.Cells for .NET supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP and SVG.\nAspose.Cells for .NET Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for .NET Online Documentation Aspose.Cells for .NET Features Aspose.Cells for .NET Limitations Aspose.Cells for .NET Release Notes Aspose.Cells for .NET Product Page Install Aspose.Cells for .NET NuGet Package Aspose.Cells for .NET API Reference Guide Aspose.Cells for .NET Free Support Forum Aspose.Cells for .NET Paid Support Helpdesk  Attachments: aspose-Cells-for-net.png (image/png)\n","date":-62135596800,"description":"","objectID":"9395d2704d99a73b3d18d38556d4d3fe","permalink":"https://roywangt.github.io/cellsnet/","title":"Aspose.Cells for .NET"},{"content":"Developer Guide\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"3fe715e7af101a053b884d26ef94412e","permalink":"https://roywangt.github.io/cellsnet/developerguide/","title":"Developer Guide"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Set EnableClipboardCopyPaste Property True To Enable PasteType Property\n3 Behavior Of EnableClipboardCopyPaste and PasteType Properties\n |     Possible Usage Scenarios     GridDesktop provides different types of copy paste type options with Aspose.Cells.GridDesktop.GridDesktop.PasteType property. These options are specified with Aspose.Cells.GridDesktop.Data.GridPasteType enumeration. Some of these are as follows\n GridPasteType.All  It copies and paste everything from source cells to target cells.\n GridPasteType.Formulas  It copies and paste formulas from source cells to target cells.\n GridPasteType.Comments  It copies and paste comments from source cells to target cells.\n GridPasteType.RowHeights  It copies and paste rows heights from source cells to target cells.\n GridPasteType.ColumnWidths  It copies and paste columns widths from source cells to target cells.\netc.\nSet EnableClipboardCopyPaste Property True To Enable PasteType Property\nAspose.Cells.GridDesktop.GridDesktop.PasteType property works only if you set Aspose.Cells.GridDesktop.GridDesktop.EnableClipboardCopyPaste property true as shown in this screenshot.\nBehavior Of EnableClipboardCopyPaste and PasteType Properties\nGiven that EnableClipboardCopyPaste is false and PasteType is All, the following screenshot shows that when cell B3 is copied and pasted to cell C5, cell formatting is not copied and only content of cell B3 is copied.\nGiven that EnableClipboardCopyPaste is true and PasteType is All, the following screenshot shows that when cell B3 is copied and pasted to cell C5, it also copies the formatting of the cell B3 to cell C5.\n\\\nAttachments: Cell-Formatting-was-copied-because-EnableClipboardCopyPaste-is-True.png (image/png) EnableClipboardCopyPaste-Effect-on-Cell-Copy-Paste.png (image/png) Cell-Formatting-was-not-copied-because-EnableClipboardCopyPaste-is-False.png (image/png)\n","date":-62135596800,"description":"","objectID":"de64e0a18ec21510a7a9cc1314d4c095","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/copy+paste+behavior+of+enableclipboardcopypaste+and+pastetype+griddesktop+properties/","title":"Copy Paste Behavior Of EnableClipboardCopyPaste and PasteType GridDesktop Properties"},{"content":"To make it easier for developers to upgrade, we maintain a document describing information critical to existing users, especially ones who have been using the older Aspose.Grid.Desktop and now need to upgrade to the new, or merged, Aspose.Cells.GridDesktop.\nThis topic provides a basic step by step guide for beginners to help them in upgrading Aspose.Grid.Desktop to Aspose.Cells.GridDesktop Control and creating and using Aspose.Cells.GridDesktop control in windows applications.\n   Contents Summary\n1 Upgrade from Aspose.Grid.Desktop to Aspose.Cells.GridDesktop Control\n2 Creating \u0026amp;amp; Using Aspose.Cells.GridDesktop Control 2.1 Creating a Windows Application Project\n2.2 Adding GridDesktop Control to the Form\n2.3 Run the Application\n       Upgrade from Aspose.Grid.Desktop to Aspose.Cells.GridDesktop Control      Developers who worked with Aspose.Grid.Desktop might come across issues when using the new Aspose.Cells.GridDesktop when they upgrade to it. Following is the namespace that is renamed:\n Aspose.Grid.Desktop namespace has been renamed to Aspose.Cells.GridDesktop namespace.  Creating \u0026amp;amp; Using Aspose.Cells.GridDesktop Control\nCreating a Windows Application Project\nFirst of all, create a windows application project in which to use the Aspose.Cells.GridDesktop control. Follow the following steps;\n Open the Visual Studio.NET IDE. From the File menu, select New, the Project. Select Windows Application from the New Project dialog.  After performing above steps a window application will be created with empty form.\nAdding GridDesktop Control to the Form\nDrag and drop the Aspose.Cells.GridDesktop control from the Toolbox to the form. After this a control will be appeared on the form where you can perform several actions on it like resize, change its properties, etc.\nRun the Application\nFinally, run the application by pressing Ctrl+F5 or clicking the Start button. When the application runs, we see a form containing an empty Aspose.Cells.GridDesktop control. Now you can …","date":-62135596800,"description":"","objectID":"dba8e11545098a96791aa504d506b4cd","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/how+to+use+aspose.cells.griddesktop/","title":"How to Use Aspose.Cells.GridDesktop"},{"content":"Articles in this section\nAttachments: Creating Control on a Windows Form-001.png (image/png) Creating Control on a Windows Form-002.png (image/png) Creating Control on a Windows Form-003.png (image/png) Creating Control on a Windows Form-004.png (image/png) Creating Control on a Windows Form-005.png (image/png) Creating Control on a Windows Form-006.png (image/png) Creating Control on a Windows Form-007.png (image/png) Creating Control on a Windows Form-008.png (image/png) Creating Control on a Windows Form-009.png (image/png) Opening an Excel File-001.png (image/png) Working with Aspose.Cells.GridDesktop Events-001.png (image/png) Working with Aspose.Cells.GridDesktop Events-002.png (image/png) Working with Aspose.Cells.GridDesktop Events-003.png (image/png) Working with Aspose.Cells.GridDesktop Events-004.png (image/png) Working with Aspose.Cells.GridDesktop Events-005.png (image/png) Managing GridDesktops Context Menu-001.png (image/png) Managing GridDesktops Context Menu-002.png (image/png) Managing GridDesktops Context Menu-003.png (image/png) Managing GridDesktops Context Menu-004.png (image/png) Working with Validations in Worksheets-001.png (image/png) Sorting Worksheet Data-001.png (image/png) Sorting Worksheet Data-002.png (image/png) Sorting Worksheet Data-003.png (image/png) Managing Hyperlinks in a Worksheet-001.png (image/png) Managing Pictures in a Worksheet-001.png (image/png) Managing Comments in a Worksheet-001.png (image/png) Adding Cell Controls in Worksheets-001.png (image/png) Adding Cell Controls in Worksheets-002.png (image/png) Adding Cell Controls in Worksheets-003.png (image/png) Adding Cell Controls in Worksheets-004.png (image/png) Adding Cell Controls in Worksheets-005.png (image/png) Adding Cell Controls in Worksheets-006.png (image/png) Adding Cell Controls in Worksheets-007.png (image/png) Removing a Row from Worksheet-001.png (image/png) Removing a Row from Worksheet-002.png (image/png) Applying Style on a Row or Column-001.png …","date":-62135596800,"description":"","objectID":"6fed30b0a0f675cbbd9bfd9df41d2eaf","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/","title":"Aspose.Cells.GridDesktop"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Render PivotTable in GridDesktop\n3 Sample Code\n |     Possible Usage Scenarios     If your Excel file has a Pivot Table, GridDesktop will be able to load and render the Pivot Table fine. Besides, you will be able to interact the Pivot Table in GUI and manipulate it.\nRender PivotTable in GridDesktop\nThe following sample code imports the Sample Excel File containing the Pivot Table. The screenshot shows the result of the execution of this sample code for a reference.\nSample Code\nAttachments: Render-PivotTable-In-GridDesktop.png (image/png) sampleRenderPivotTableInGridDesktop.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"2d5f2f3d697f330fadb4a0dd11dadd14","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/pivottablesingriddesktop/render+pivottable+in+griddesktop/","title":"Render PivotTable in GridDesktop"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"12ec6edb346c9e65cfc8e981b2de0bc1","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/pivottablesingriddesktop/","title":"Pivot Tables in GridDesktop"},{"content":"In our previous topic, we have discussed about accessing cells of a worksheet. In this topic, we will simply extend that topic to show developers that how can they access and modify the values of cells using the API of Aspose.Cells.GridDesktop.\nAccess and Modify Cell Value using Aspose.Cells.GridDesktop\nBefore accessing and modifying the value of a cell, we should know that how to access cells. There are three approaches to access cells of a worksheet. For more details about these three approaches, please Accessing Cells in a Worksheet.\nEach cell has a property named Value . So, once a cell is accessed, developers can access and modify the contents of the Value property in order to access and change the value of a cell.\n\\\nIMPORTANT: Using Value property of a cell to modify its value is a good approach for setting the value of a single or few cells. If you need to set the values of many cells then the performance of this approach would not be good. So, to set the values of many cells, you should use SetCellValue method of the cell for improving the performance of your applications. A modified version of the above code snippet using SetCellValue method is shown below.\n\\\n","date":-62135596800,"description":"","objectID":"3e1a4761e36420edc6410aacdbf50ea5","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/accessing++and++modifying+the+value+of+a+cell/","title":"Accessing and Modifying the Value of a Cell"},{"content":"We have discussed about working with worksheets, rows and columns so far but this is the time to go more deeper and talk about cells. So, in this topic, we would start our discussion about cells with a basic feature of accessing cells.\n   Contents Summary\n1 Accessing Cells in a Worksheet 1.1 Using Cell Name\n1.2 Using Cell\u0026amp;rsquo;s Row and Column Indices\n1.3 Getting Focused Cell\n ||      Accessing Cells in a Worksheet      We can access any cell of a worksheet using the API of Aspose.Cells.GridDesktop. There could be three possible ways to access cells as follows:\n Using Cell Name Using Cell\u0026amp;rsquo;s Row \u0026amp;amp; Column Indices Getting Focused Cell  Let\u0026amp;rsquo;s discuss all above three approaches one by one.\nUsing Cell Name\nAll cells in a worksheet have a unique name. For example, A1, A2, B1, B2 etc. Aspose.Cells.GridDesktop allows developers to access any desired cell by using its cell name. All we have to do is to just pass the cell name (as an index) to the Cells collection of the Worksheet.\n\\\nUsing Cell\u0026amp;rsquo;s Row and Column Indices\nA cell in a worksheet can also be recognized using its location in terms of its row and column indices. All we have to do is to just pass the row and column indices of the cell to the Cells collection of the Worksheet.\n\\\nGetting Focused Cell\nIf you don\u0026amp;rsquo;t know accurately that which cell is to be accessed. Then Aspose.Cells.GridDesktop also allows you to access a cell that is currently in the focus of a user. Using this feature, you can allow a user to select any cell and then you can access that cell at the backend. It can simply be achieved by using GetFocusedCell method of the Worksheet.\n\\\n","date":-62135596800,"description":"","objectID":"d35887e8decb1015ccaf7cf125385ef8","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/accessing+cells+in+a+worksheet/","title":"Accessing Cells in a Worksheet"},{"content":"Aspose.Cells for GridDesktop allows you to protect your cells in a worksheet. You first need to protect your worksheet, then you can protect your desired cells in a worksheet. In order to protect worksheet, please set Worksheet.Protected property to true, then use Worksheet.SetProtected() method to protect the range of cells.\nProtect Cell using Aspose.Cells.GridDesktop\nThe following sample code protects all the cells in range A1:B1 of the active worksheet of GridDesktop. When you will double click any cell in this range, you will not able to edit. It will make these cells readonly.\n\\\n","date":-62135596800,"description":"","objectID":"350aab395b98ca3a122ce0df05909282","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/adding+cell+protection+in+worksheet/","title":"Adding Cell Protection in Worksheet"},{"content":"A cell cannot only just contain a simple value like a numeric figure or some text but we can also insert a formula in a cell as its value. A formula is used in a cell when the value of a cell needs to be determined after some calculations. In this topic, we will discuss that how can we access and modify a formula applied on a cell.\nAdding Formula to a Cell\nAdding formula to a cell is just like setting the value of a cell as we have discussed in our previous topic: Accessing \u0026amp;amp; Modifying the Value of a Cell except that in that case, we just added simple values to cells. Now, we will add formulas. Developers can use Value property of a cell to access \u0026amp;amp; modify the formula or otherwise SetCellValue method of the cell can also be used to add or modify the formula in a cell.\nIMPORTANT: The basic difference between using Value property or SetCellValue method of a cell is that Value property invokes RunAllFormulas method of Grid automatically to recalculate the values of all formulas where as in the case of SetCellValue method developers need to call RunAllFormulas method explicitly after the formulas are added to cells. Actually, when we use SetCellValue method of a cell then this method sets the value of the cell to FormulaType only and don\u0026amp;rsquo;t calculate the formula. Moreover, calling RunAllFormulas method every time is not necessary. If you want to add many formulas in the cells of a worksheet then you can call RunAllFormulas method just once at the end.\nA formula is added to a cell as a string value. Moreover, the formula structure must be compatible with the formula structure of MS Excel. All formulas must begin with an Equal Sign (=).\nIn the example given below, we have added a formula to multiply the values of two cells of the worksheet and store the result into another cell. RunAllFormulas method is also invoked at the end.\n\\\n\\\nNow run the application. If you double click on the cell where formula was added then you would notice that the value will be …","date":-62135596800,"description":"","objectID":"8594f312a8019bcf94bf21bb64f28fea","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/adding+formulas+to+cells/","title":"Adding Formulas to Cells"},{"content":"This topic deals with applying styles on cells so, we will try to cover almost everything that can be used to apply style on a cell. Besides some basic formatting settings, we will also discuss about drawing borders and setting number format of cells in detail.\n   Contents Summary\n1 Applying a Custom Style on a Cell - An Example\n2 Drawing Borders of Cells 2.1 Types of Borders\n2.2 Types of Border Lines\n3 Summing Up All Together - Example\n4 Setting Number Formats\n ||      Applying a Custom Style on a Cell - An Example      To change the font and color of a cell using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Access a Cell on which we want to apply a Style Get Style of the Cell Set Style properties according to your custom needs Finally, set Style of the Cell with the updated one  There are many useful properties and methods offered by Style object that can be used by developers to customize the style according to their requirements. In the code below it is demonstrated that how to apply custom style on cell.\n\\\nDrawing Borders of Cells\nUsing Style object, we can draw borders of a cell very easily. The borders can be drawn in any color. Moreover, developers also have the flexibility to choose a specific type of line that will be used to draw borders around the cell. Developers can use SetBorderLine and SetBorderColor methods of Style object to draw borders of any type and colors. Similarly, to get border information of any cell, developers can also make use of GetBorderLine and GetBorderColor methods of Style object.\nTypes of Borders\nThere are six types of borders supported by Aspose.Cells.GridDesktop as follows:\n Left , represents left border Right , represents right border Top , represents Top border Bottom , represents bottom border DiagonalDown , represents diagonal down border DiagonalUp , represents diagonal up border  Types of Border Lines\nA border is composed of a line. Changing the type of line, changes the …","date":-62135596800,"description":"","objectID":"6fe620c715cb2ce42ac0c4a83081f7ba","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/applying+styles+on+cells/","title":"Applying Styles on Cells"},{"content":"In this topic, we will discuss about changing the font and font color of a cell. This feature provides more in depth control of worksheets to developers. Using this feature, developers can customize the font and color of any desired cell.\nChanging the Font \u0026amp;amp; Color of a Cell\nTo change the font and color of a cell using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Access a Cell whose font and color are to be changed Create a customized Font Set the Font of the Cell to the customized one Finally, set Font Color of the Cell to any desired Color  \\\nIf you only need to get information about the font or font color of the cell then you can also use GetFont and GetFontColor methods of the cell.\nAttachments: Changing the Font and Color of a Cell-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"d9787196f288b9c698ad6f58458ac632","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/changing+the+font+and+color+of+a+cell/","title":"Changing the Font and Color of a Cell"},{"content":"Aspose.Cells.GridDesktop provides Auto-Filter and Custom Data Filter features for the users. Using these features, you may find a way to select only those items from the worksheet that you want to display in a list. Moreover, you are allowed to filter items in a list according to a set criteria. You can filter text, numbers or dates with Auto-Filter / Custom Data Filter feature.\nYou can use EnableAutoFilter Boolean attribute of RowFilterSettings class to enable the Auto-Filter feature for the GridDesktop control. There are some other properties of the class that you can use, e.g HeaderRow , StartRow and EndRow to specify the header, start and end row indexes. The Criteria property is used to set the custom filtering criteria. The class has also a method named FilterRows to get the filtered rows based on the given criteria.\nThe \u0026amp;ldquo;contains\u0026amp;rdquo; type search (case-insensitive) attribute in RowFilter is also supported by GridDesktop. You may use IgnoreCase property of GridColumn class to specify the case sensivity attribute for your need. You can also use a property named IsStartWithCriteria of GridColumn class to indicate whether the RowFilter uses the StartWith criteria on a column; the default value of the property is set to false.\n   Contents Summary\n1 Filtering Data 1.1 Auto-Filter\n1.2 Custom Data Filter\n ||      Filtering Data      We implement both Auto-Filter and Custom Data Filter features in this example. We fill some data list in the GridDesktop, enable Auto-Filter feature and then search filtered rows based on some criteria.\nAuto-Filter\n\\\nCustom Data Filter\n\\\nAttachments: Filtering Data-001.png (image/png) Filtering Data-002.png (image/png) Filtering Data-003.png (image/png) Filtering Data-003.png (image/png) Filtering Data-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"d628ec5e8486d0ad985e3dadfd17d1ab","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/filtering+data/","title":"Filtering Data"},{"content":"This topic also belongs to the series of topics related to the application of font settings and other formatting styles on cells. Our last topics have covered well about handling such features. For example, you can refer to Changing the Font \u0026amp;amp; Color of a Cell and Applying Styles on Cells topics to learn about the same features. Then what is new in this topic if we have already covered these concepts. Well, the only difference of this topic with the previous ones is that we will apply formatting settings (related to fonts and other styles) on a range of cells instead of just a single cell. We hope that you will still find this topic useful for you.\nSetting Font \u0026amp;amp; Style of a Range of Cells\nBefore we talk about formatting settings (that we have already talked a lot in our previous topics), we should know about how to create a range of cells. Well, we can create a range of cells using CellRange class whose constructor takes some parameters to specify the range of cells. We can specify the cells range using the Names or Row \u0026amp;amp; Column Indices of start and end cells.\nOnce we have created a CellRange object then we can use the overloaded versions of SetStyle, SetFont \u0026amp;amp; SetFontColor methods of Worksheet that can take a CellRange object to apply formatting settings on the specified range of cells.\nLet\u0026amp;rsquo;s check out an example to understand this basic concept.\n\\\nAttachments: Formatting a Range of Cells-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"7b481c3353769064f48c9693baf8e1ae","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/formatting+a+range+of+cells/","title":"Formatting a Range of Cells"},{"content":"In this topic, we will discuss a utility feature of merging and unmerging cells of a worksheet. This feature is useful in those cases when we need to span some rows or columns to enhance the readability of data.\n   Contents Summary\n1 Merging Cells\n2 Unmerging Cells\n ||      Merging Cells      To merge cells into a single large cell, please follow the steps below:\n Access any desired Worksheet Create a Range of Cells to be merged Merge the range of cells into a large cell  You can use Merge method of Worksheet to merge cells. However, a range of cells can be defined using CellRange object.\n\\\nUnmerging Cells\nTo unmerge a large cell into many cells, please follow the steps below:\n Access any desired Worksheet Access the merged cell that needs to be unmerged Unmerge the large cell into many cells using the location of merged cell  You can use Unmerge method of Worksheet to unmerge a cell using its location.\n\\\nWhen you merge cells into a single cell then the formatting settings of top left cell (in the range of cells) are applied on the merged cell but when the cell is unmerged, all unmerged cells maintain their formatting settings.\nAttachments: Merging and Unmerging Cells-001.png (image/png) Merging and Unmerging Cells-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"4812612ea57de3a6920fafafb2fd8cbe","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/merging++and++unmerging+cells/","title":"Merging and Unmerging Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Text overflows from GridDesktop cell if it is too long\n3 Screenshot\n |     Possible Usage Scenarios     Microsoft Excel overflows the text when the next adjacent cells are empty and the text is too long to fit inside the cell. Aspose.Cells for GridDesktop also supports this feature. However, this feature was not supported in earlier versions of GridDesktop e.g. 17.11, 17.10 etc. The newer versions starting from 17.12 and onward supports this feature.\nText overflows from GridDesktop cell if it is too long\nThe following screenshot shows that the text overflows from GridDesktop cell when it is too long to fit inside the cell width. The screenshot shows the behavior of newer and older version of GridDesktop relating to the text overflow. As you can see in screenshot, the feature is supported from 17.12 onward.\nScreenshot\nAttachments: Text-overflows-in-GridDesktop-Cell.png (image/png) Text-overflows-in-GridDesktop-Cell.png (image/png) Text-overflows-in-GridDesktop-Cell.png (image/png)\n","date":-62135596800,"description":"","objectID":"51ffd82b6da359f0561ece47a0aef0cb","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/text+overflows+from+griddesktop+cell+if+it+is+too+long/","title":"Text overflows from GridDesktop cell if it is too long"},{"content":"Format painter is the feature of MS Excel that has been adapted in Aspose.Cells.GridDesktop. It\u0026amp;rsquo;s a very nice feature. For those people who have not yet used this feature, format painter allows users to apply the formatting settings of any focused cell to another cell. The implementation of this feature is very simple. In this topic, we will cover that too.\n   Contents Summary\n1 Using Format Painter 1.1 Using Format Painter Once\n1.2 Using Format Painter Always\n ||      Using Format Painter      The feature of Format Painter requires users to select a cell whose formatting settings you want to apply on other cells and then call StartFormatPainter method GridDesktop. There are two modes of format painter as follows:\n Using Format Painter Once Using Format Painter Always  Using Format Painter Once\nIf developers want to use the feature of format painter for just one time only to apply the formatting settings of a focused cell to a single cell then they can do it by calling StartFormatPainter method and passing a false value to it. This false value will prohibit format painter from painting forever.\n\\\nUsing Format Painter Always\nTo use format painter always is a useful feature when we need to apply the formatting settings on more than ons cells. Developers can achieve this feature by simply calling StartFormatPainter method and passing a true value to it.\n\\\nThis kind of format painter keeps painting forever unless we stop it. So, to stop format painter from painting always, we can simply call EndFormatPainter method of GridDesktop.\n","date":-62135596800,"description":"","objectID":"ff18d3d5553b6af7460ae980eb7614cf","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/using+format+painter/","title":"Using Format Painter"},{"content":"Normally, you use the labels of columns and rows on a worksheet to refer to the cells within those columns and rows. But you can create descriptive names to represent cells, ranges of cells, formulas, or constant values. The word Name may refer to a string of characters that represents a cell, range of cells, formula, or constant value. For example, Use easy-to-understand names, such as Products, to refer to hard to understand ranges, such as Sales!C20:C30 to represent a cell, range of cells, formula, or constant value. Labels can be used in formulas that refer to data on the same worksheet; if you want to represent a range on another worksheet, you may use a name. Named Ranges are among the most powerful features of Microsoft. Users may assign a name to a named range so that this range of cells can be referred with its name in the formulas. Aspose.Cells.GridDesktop does support this feature.\nAdding/Referencing Named Ranges in Formulas\nThe GridDesktop control does support to import/export named ranges in the Excel files, it provides two classes (Name and NameCollection) to work with named ranges.\nFollowing code snippet will help you how to use them.\n\\\n","date":-62135596800,"description":"","objectID":"f00d99c8a6a964f2d401b46df7078fac","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/using+named+ranges/","title":"Using Named Ranges"},{"content":"Aspose.Cells.GridDesktop is a GUI based control that lets its users to work on their data in a WYSIWYG mode. We have explored the API of Aspose.Cells.GridDesktop a lot to perform different kinds of tasks. We have also discussed about controlling the formatting settings of Grid, Worksheets, Rows \u0026amp;amp; Columns and Cells programmatically using the robust and easier API of Aspose.Cells.GridDesktop. But all of that was from the programming point of view. In this topic, we will discuss that how can a simple end user control the formatting settings of Aspose.Cells.GridDesktop using its Style Dialog.\n   Contents Summary\n1 Using Style Dialog 1.1 Number Tab\n1.2 Alignment Tab\n1.3 Border Tab\n1.4 Font Tab\n1.5 Protection Tab\n       Using Style Dialog      To use Style Dialog in Aspose.Cells.GridDesktop, please follow the steps below:\n Right Click on the Grid. A context menu will be popped up before you offering some options Select Format Cells\u0026amp;hellip; option from the context menu.  After you select Format Cells\u0026amp;hellip; option, Style Dialog would appear before you. Style Dialog consists of several tabs including:* **Number**\n Alignment Border Font Protection  Let\u0026amp;rsquo;s discuss and view each tab of the Style Dialog one by one.\nNumber Tab\nNumber tab is used to set the Number Format settings of a cell. You can select a number format category, set decimal places for the value, select a symbol set and also select that how to show negative value in the cell.\nAlignment Tab\nUsing Alignment tab, users can set the horizontal and vertical alignment of the text. Even they can also use other text controlling options like wrapping text, shrinking cell to fit text and merging cells.\nBorder Tab\nBorder tab facilitates users to draw borders of any type and color with just a few clicks. All they have to do is to just select few options to draw a border according to their desires.\nFont Tab\nUsing Font tab, users can change their font name, size, color and styles etc. Users can also preview their …","date":-62135596800,"description":"","objectID":"14922b73fc47c3b0b1b1162c1a60874c","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/using+style+dialog/","title":"Using Style Dialog"},{"content":"The GridDesktop\u0026amp;rsquo;s Undo/Redo feature is very useful. The name explains its functionality itselft, it allows you to undo/redo the recent action(s) in a worksheet. For example, if a formula is accidentally deleted or you edit data in a cell which you don\u0026amp;rsquo;t actually want, these actions can be corrected by using the Undo and Redo operations provided by the control.\n   Contents Summary\n1 Performing Undo and Redo Operation 1.1 Undo\n1.2 Redo\n ||      Performing Undo and Redo Operation      The following APIs are available for the task. The description is given with each API, please check them.\n GridDesktop.EnableUndo - attribute: It indicates whether the Undo function is enabled, the default value is \u0026amp;ldquo;false\u0026amp;rdquo;. UndoManager – class: It is used to manage the undo/redo operation. GridDesktop.UndoManager – attribute: It gets the instance of the UndoManager object. UndoManager.Undo – method: It performs an undo operation. UndoManager.Redo - method: It performs the redo operation. UndoManager.ClearStack – method: It clears the undo/redo stack. UndoManager.UndoStepsCount – attribute: It gets the count of current available undo steps. UndoManager.RedoStepsCount – attribute: It gets the count of current available redo steps. UndoManager.UndoStackSize – attribute: It gets/sets the undo stack size.  Undo\nThe following sample code shows how to implement the Undo operation using the GridDesktop API.\n\\\n** Redo**\nThe following sample code shows how to implement the Redo operation using the GridDesktop API.\n\\\nCurrently, undo/redo operation refers to the change in a cell value.\n","date":-62135596800,"description":"","objectID":"84beb5c710884748912924c78635edc6","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/using+undo+and+redo+feature/","title":"Using Undo and Redo Feature"},{"content":"Articles in this section\nAttachments: Adding Formulas to Cells-001.png (image/png) Adding Formulas to Cells-002.png (image/png) Changing the Font and Color of a Cell-001.png (image/png) Applying Styles on Cells-001.png (image/png) Applying Styles on Cells-002.png (image/png) Applying Styles on Cells-003.png (image/png) Formatting a Range of Cells-001.png (image/png) Using Style Dialog-001.png (image/png) Using Style Dialog-002.png (image/png) Using Style Dialog-003.png (image/png) Using Style Dialog-004.png (image/png) Using Style Dialog-005.png (image/png) Using Style Dialog-006.png (image/png) Merging and Unmerging Cells-001.png (image/png) Merging and Unmerging Cells-002.png (image/png) Filtering Data-001.png (image/png) Filtering Data-002.png (image/png) Filtering Data-003.png (image/png)\n","date":-62135596800,"description":"","objectID":"ead72f5fa0fdd33d6c2b4358df4c2267","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithcells/","title":"Working with Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Change Default Font and Font Color at Design Time\n3 Change Default Font and Font Color at Run Time\n |     Possible Usage Scenarios     Sometimes, you want to change the default font and font color of the GridDesktop. Please use the following two properties for this purpose. You can access these properties at Design Time or at Runtime depending upon your needs.\n GridDesktop.DefaultCellFont GridDesktop.DefaultCellFontColor  Change Default Font and Font Color at Design Time\nThe following screenshot shows how to change the default font and font color of GridDesktop at Design Time.\nChange Default Font and Font Color at Run Time\nThe following sample code explains how to change the default font and font color of GridDesktop at Run Time.\n//Assign your desired Font object to DefaultCellFont property\nSystem.Drawing.Font fnt = new System.Drawing.Font(\u0026amp;ldquo;Arial Black\u0026amp;rdquo;, 18);\nthis.gridDesktop1.DefaultCellFont = fnt;\n//Assign your desired Font color to DefaultCellFontColor property\nthis.gridDesktop1.DefaultCellFontColor = System.Drawing.Color.Blue;\nAttachments: Default-font-and-font-color-GridDesktop.png (image/png)\n","date":-62135596800,"description":"","objectID":"34894b4266028c4026dae0545e4cd748","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/default+font+and+font+color+of+the+griddesktop/","title":"Default Font and Font Color of the GridDesktop"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find GridDesktop Version at Runtime\n3 Sample Code\n |     Possible Usage Scenarios     Sometime, it is important to find the GridDesktop version at runtime. For example, you want to make sure that you are using the correct version or you are debugging your application and you want to know the version of GridDesktop currently in use. GridDesktop provides Aspose.Cells.GridDesktop.GridDesktop.GetVersion() method which returns the GridDesktop version at runtime.\nFind GridDesktop Version at Runtime\nThe following sample code finds the GridDesktop version at runtime. The screenshot shows the result of the execution of this sample code for a reference.\nSample Code\nAttachments: Find-GridDesktop-Version-At-RunTime.png (image/png)\n","date":-62135596800,"description":"","objectID":"138db0ea9d9a6f13aa3c35ef54af4cdd","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/find+griddesktop+version+at+runtime/","title":"Find GridDesktop Version at Runtime"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Handling Events after Deleting Columns and Rows in GridDesktop\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells for GridDesktop has added two new events i.e. AfterDeleteColumns and AfterDeleteRows as shown in the following screenshot. These events are fired when you delete columns and rows respectively.\nHandling Events after Deleting Columns and Rows in GridDesktop\nThe following sample code explains how to make use of AfterDeleteColumns and AfterDeleteRows events. Whenever you delete some columns or rows, the given function will be called and show a message box that displays the index of the deleted column or row.\nSample Code\nprivate void gridDesktop1_AfterDeleteColumnsAndRows(object sender, Aspose.Cells.GridDesktop.WorksheetEventArgs args)\n{\nif(args.SheetEvents == Aspose.Cells.GridDesktop.WorksheetEvents.ColumnDeleted)\n{\nMessageBox.Show(\u0026amp;ldquo;Deleted Column Index: \u0026amp;quot; + args.Index);\n}\nif (args.SheetEvents == Aspose.Cells.GridDesktop.WorksheetEvents.RowDeleted)\n{\nMessageBox.Show(\u0026amp;ldquo;Deleted Row Index: \u0026amp;quot; + args.Index);\n}\n}\nAttachments: Handling-Events-after-Deleting-Columns-and-Rows.png (image/png)\n","date":-62135596800,"description":"","objectID":"84d3aeb6f756e8126a89965a87cf8238","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/handling+events+after+deleting+columns+and+rows+in+griddesktop/","title":"Handling Events after Deleting Columns and Rows in GridDesktop"},{"content":"Aspose.Cells.GridDesktop has a context menu which has all the commonly used commands. The control allows you to hide/show menu items. Moreover, it is possible to add new menu items with event handlers to the menu.\n   Contents Summary\n1 Introduction\n2 Managing the Context Menu 2.1 Hiding Context Menu Items\n2.2 Adding New Menu Items\n ||      Introduction      The ContextMenuManager class is used to manage the context menu items. The GridDesktop.ContextMenuManager attribute gets the instance of ContextMenuManager object. For example, the ContextMenuManager.MenuItemAvailable_Copy attribute gets or sets a value indicating whether the context menu item Copy is available or not. Similarly, we have all the corresponding attributes for different context menu items.\nIMPORTANT: By default, all the context menu items are visible in the list.\nManaging the Context Menu\nHiding Context Menu Items\nTo perform this task, we first take a look the default context menu the GridDesktop has.\n**GridDeskop\u0026amp;rsquo;s default menu **\nNow, hide some menu items using the code below:\n\\\n\\\nAfter executing the above code, some menu items will not be visible for the users:\n**Some menu items are hidden **\nAdding New Menu Items\nAdd a new context menu item to the list using the following code snippet.\n\\\nWe also specify an event handler for the new command/option.\n\\\n\\\nAfter executing the above code, a new menu item can be seen in the context menu. A message will also appear when cell is clicked.\n**A new menu item is added to the list **\nAttachments: Managing GridDesktops Context Menu-001.png (image/png) Managing GridDesktops Context Menu-002.png (image/png) Managing GridDesktops Context Menu-003.png (image/png) Managing GridDesktops Context Menu-004.png (image/png) Managing GridDesktops Context Menu-003.png (image/png) Managing GridDesktops Context Menu-002.png (image/png) Managing GridDesktops Context Menu-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"798a2840810c8108385bc30d1daf7662","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/managing+griddesktops+context+menu/","title":"Managing GridDesktops Context Menu"},{"content":"A unique feature of Aspose.Cells Grid Suite is its compatibility with Excel files. In this topic, we will demonstrate that how users can open Excel files in their windows applications using Aspose.Cells.GridDesktop control.\n   Contents Summary\n1 Introduction\n2 Opening Excel File 2.1 Opening from a File\n2.2 Opening a CSV file\n2.3 Opening from a Stream\n ||      Introduction      To open an Excel file using Aspose.Cells.GridDesktop you have to create a desktop application with GridDesktop Control in it. If you don\u0026amp;rsquo;t know about how to add Aspose.Cells.GridDesktop control to your windows form then you should refer to How to use Aspose.Cells.GridDesktop\nAspose.Cells.GridDesktop provides three following different ways to open an Excel file.\n Opening from a File Opening a CSV file Opening from a Stream  Opening Excel File\nIn this example create a desktop application and do the following.\n Add one GridControl Control to the form. Add three buttons with their text properties set as following:  Open Excel File Open CSV File Open from Stream    Opening from a File\nTo load the content from an Excel file to Aspose.Cells.GridDesktop control, you will have to call a method of the control to specify the path of the Excel file. After that, Aspose.Cells.GridDesktop control will automatically find the file from the specified path and display its contents. The code snippet to load the contents of an Excel file is provided in the below example. Create the Click event of the Open Excel File button and paste the following code inside it.\n\\\nThe above code snippet can be used by developers in any way they want. For example, if you want to load an Excel file automatically when a windows form loads then you can add this code under the Load event of your Form.\nOpening a CSV file\nAspose.Cells.GridDesktop control supports loading CSV file also. Create the Click event of the Open CSV File button and paste the following code inside it.\n\\\nOpening from a Stream\nIn our above discussion, we have …","date":-62135596800,"description":"","objectID":"b42610e946d4f43a614d561af33f9b35","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/opening+an+excel+file/","title":"Opening an Excel File"},{"content":"Using Aspose.Cells.GridDesktop control, users cannot only create new Excel files but also manage existing ones. But, in both cases, it would be necessary to save the contents of the Aspose.Cells.GridDesktop. So, this is the topic of our discussion now to let our users know about how can they save their Grid contents as an Excel file.\n   Contents Summary\n1 Introduction\n2 Saving File 2.1 Saving as a File\n2.2 Saving as a Stream\n ||      Introduction      To save the content of Aspose.Cells.GridDesktop control as an Excel file, Aspose.Cells.GridDesktop provides follwoing methods.\n Saving as a File Saving as a Stream  Saving File\nCreate a desktop application and add two buttons with a GridControl control to the form. Set text properties of buttons as Save as File and Save as Stream respectively.\nSaving as a File\nCreate the Click event of the Save as File button and paste the following code inside it.\n\\\nIMPORTANT: An important point to discuss is that Aspose.Cells.GridDesktop control also contains a method named SaveToExcel , which is also used to load the contents of an Excel file to the Grid. But, this method is now obsolete. So, it is recommended for all developers to use ExportExcelFile method that is more robust and efficient than the obsoleted one.\nSaving as a Stream\nSometimes, it might be required by developers to save their Grid contents to a stream (For example, MemoryStream). To facilitate this task, Aspose.Cells.GridDesktop control also supports saving Grid data to a stream. Create the Click event of the Save as Stream button and paste the following code inside it.\n\\\nIMPORTANT: Microsoft Excel supports Excel sheets can contain 65,536 rows and 256 columns max. Aspose.Cells.GridDesktop also follows the same standards. In the Aspose.Cells.GridDesktop control, developers can create more rows and columns than the standard limit but when saving the grid data to an Excel file, an exception will be thrown. It means that only data contained in the 65,536 rows and 256 …","date":-62135596800,"description":"","objectID":"53d152ecc238271b94319a0aebf96ba3","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/saving+an+excel+file/","title":"Saving an Excel File"},{"content":"This article demonstrates how to use the Windows Presentation Foundation (WPF) Designer for Visual Studio to host a Windows Forms control such as Aspose.Cells.GridDesktop in a WPF application. We will be using Visual Studio 2015 to demonstrate the process, however, you can use any version including Visual Studio 2008 or later.\n   Contents Summary\n1 Create a WPF application using Visual Studio\n2 Add references to required namespaces\n3 Add references to XAML\n4 Add Aspose.Cells.GridDesktop control to XAML\n5 Use Aspose.Cells.GridDesktop\n6 Build \u0026amp;amp; Run\n ||      This tutorial will walk you through the process of adding Aspose.Cells.GridDesktop control to a WPF application. You need any version of the Visual Studio IDE that supports WPF development in order to try this on your side.      Create a WPF application using Visual Studio\nFirst create a WPF application using Visual Studio IDE. Click on File \u0026amp;raquo; New \u0026amp;raquo; Project menu and select WPF Application from Templates, name the project and click OK. You can target your project to any .NET Framework higher than 2.0, however, you cannot use client profile .NET Frameworks.\nAdd references to required namespaces\nAdd the references to the following assemblies by right clicking the References from Solution Explorer window and select Add Reference menu.\n WindowsFormsIntegration assembly (WindowsFormsIntegration.dll). Windows Forms assembly (System.Windows.Forms.dll). Aspose.Cells.GridDesktop assembly (Aspose.Cells.GridDesktop.dll).  This action adds the required assemblies to the application, that is; copies the assemblies to the the Bin folder of the application.\nAdd references to XAML\nNext, go to the XAML file and add the following namespaces and assembly references within the Windows tag.\nxmlns:wf=\u0026amp;quot;clr-namespace:System.Windows.Forms;assembly=System.Windows.Forms\u0026amp;rdquo;\nxmlns:gridDesktop=\u0026amp;quot;clr-namespace:Aspose.Cells.GridDesktop;assembly=Aspose.Cells.GridDesktop\u0026amp;quot;\u0026amp;gt;\nThe final Windows tag will look similar …","date":-62135596800,"description":"","objectID":"5098d46e7bca1bee163b83f70a6e7fb9","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/using+aspose.cells.griddesktop+in+wpf+application/","title":"Using Aspose.Cells.GridDesktop in WPF Application"},{"content":"Events are used to send notifications when a change occurs in a control or class. Aspose.Cells.GridDesktop has several events that are used to perform specific tasks when certain changes occur in the control. This topic provides an introduction to all events supported by the Aspose.Cells.GridDesktop control and explains how can to handle those events.\n   Contents Summary\n1 Introduction\n2 Handling Grid Events\n ||      Introduction      The Aspose.Cells.GridDesktop control supports several events that provide more control for performing operations when specific events are triggered. Below is a complete list of events supported by the Aspose.Cells.GridDesktop control.\nThis list doesn\u0026amp;rsquo;t include those events that are inherited by Aspose.Cells.GridDesktop from Control class.\n   Events Description     SelectedSheetIndexChanged Occurs when a user selects a new worksheet, that is, when the selected sheet changes from one worksheet to another. This event can also be triggered programmatically if the GridDesktop control\u0026amp;rsquo;s ActiveSheetIndex property changes.   RowHeaderClick Occurs when the row header is clicked.   RowHeaderDoubleClick Occurs when the row header is double clicked.   RowColumnHiddenChanged Occurs when the row or column hidden status is changed.   ColumnHeaderClick Occurs when the column header is clicked.   ColumnHeaderDoubleClick Occurs when the column header is double clicked.   FocusedCellChanged Occurs whenever a cell\u0026amp;rsquo;s focus is changed.   CellDataChanged Occurs when the data or value inside a Grid cell is changed. This event can also be triggered if a cell\u0026amp;rsquo;s value is changed programmatically using the Value property or the SetCellValue method of a GridCell.   CellButtonClick Occurs when the cell button is clicked.   CellCheckedChanged Occurs when the Checked property of cell checkbox is changed.   CellSelectedIndexChanged Occurs when the SelectedIndex property of cell combo-box is changed.   CellClick Occurs when a Grid cell is …","date":-62135596800,"description":"","objectID":"1ce879a7f4f7efc8d164bc041dad3159","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/working+with+aspose.cells.griddesktop+events/","title":"Working with Aspose.Cells.GridDesktop Events"},{"content":"Articles in this section\n\\\nAttachments: Creating Control on a Windows Form-001.png (image/png) Creating Control on a Windows Form-002.png (image/png) Creating Control on a Windows Form-003.png (image/png) Creating Control on a Windows Form-004.png (image/png) Creating Control on a Windows Form-005.png (image/png) Creating Control on a Windows Form-006.png (image/png) Creating Control on a Windows Form-007.png (image/png) Creating Control on a Windows Form-008.png (image/png) Creating Control on a Windows Form-009.png (image/png) Opening an Excel File-001.png (image/png) Working with Aspose.Cells.GridDesktop Events-001.png (image/png) Working with Aspose.Cells.GridDesktop Events-002.png (image/png) Working with Aspose.Cells.GridDesktop Events-003.png (image/png) Working with Aspose.Cells.GridDesktop Events-004.png (image/png) Working with Aspose.Cells.GridDesktop Events-005.png (image/png) Managing GridDesktops Context Menu-001.png (image/png) Managing GridDesktops Context Menu-002.png (image/png) Managing GridDesktops Context Menu-003.png (image/png) Managing GridDesktops Context Menu-004.png (image/png)\n","date":-62135596800,"description":"","objectID":"ea0fa63e63946a5f2d7828da0a9fff59","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithgriddesktop/","title":"Working with GridDesktop"},{"content":"In our later discussions, we have discussed about adding and managing cell controls in worksheet. But, using those approaches, we can add cell controls to single cells one by one. What if someone would like to add cell controls to all cells of one or more columns? In such cases, to reduce the efforts of developers, Aspose.Cells.GridDesktop provides the feature of adding cell controls per column basis. It means that developers can only select a desired column and specify any cell control. The specified cell control will be added to all cells of the specified column. Let\u0026amp;rsquo;s see how can we use this feature.\n   Contents Summary\n1 Introduction 1.1 Adding Button\n1.2 Adding CheckBox\n1.3 Adding ComboBox\n ||      Introduction      Currently, Aspose.Cells.GridDesktop support adding three types of cell controls, which include the following:\n Button CheckBox ComboBox  All of these controls are derived from an abstract class, CellControl.\nIMPORTANT: If you want to add cell controls to a single cell instead of the whole column then you can refer to Adding Cell Controls in Worksheets.\nAdding Button\nTo add buttons into a column using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add Button to any specified Column of the Worksheet  NOTE: While adding Button, we can specify the width, height and caption of the button.\n\\\nAbove code snippet adds buttons to all cells of the specified column. Whenever any cell of that specific column is selected, a button becomes visible. For more information about the event handling of buttons, please refer to the Event Handling of a Button Control.\nAdding CheckBox\nTo add checkboxes into a column using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add CheckBox to any specified Column of the Worksheet  NOTE: While adding CheckBox, we can also specify the state of the …","date":-62135596800,"description":"","objectID":"db875bfa6bd5f65f682d7b7ed3dd7b39","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/adding+cell+controls+in+columns/","title":"Adding Cell Controls in Columns"},{"content":"In this topic, we will describe the basic feature of adding and inserting columns to the worksheets at runtime using the API of Aspose.Cells.GridDesktop. The basic difference between addition and insertion is that in addition, column is added at the end of the columns collection of the worksheet where as in insertion, column can be added to any specified position in the worksheet.\n   Contents Summary\n1 Adding a Column to Worksheet\n2 Inserting a Column into Worksheet\n ||      Adding a Column to Worksheet      To add a new column to the worksheet, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add Column to the Worksheet  \\\nInserting a Column into Worksheet\nTo insert a new column into worksheet at a specified position, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Insert Column into Worksheet (at a specific position by specifying the index of the column where to insert it)  // Accessing first worksheet of the Grid\nAspose.Cells.GridDesktop.Worksheet sheet = gridDesktop1.Worksheets[0];\n// Inserting column to the worksheet to the first position.\nsheet.Cells.InsertColumn(0);\n","date":-62135596800,"description":"","objectID":"b362c53a96ae8dc34f863976f231f006","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/adding+or+inserting+a+column+into+worksheet/","title":"Adding or Inserting a Column into Worksheet"},{"content":"Similar to one of our previous topics, this topic describes the feature of adding and inserting rows to the worksheets at runtime using the API of Aspose.Cells.GridDesktop. The basic difference between addition and insertion is that in addition, a row is added at the end of the rows collection of the worksheet where as in insertion, a row can be added to any specified position in the worksheet.\n   Contents Summary\n1 Adding a Row to Worksheet\n2 Inserting a Row into Worksheet\n ||      Adding a Row to Worksheet      To add a new row to the worksheet, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add Row to the Worksheet  \\\nInserting a Row into Worksheet\nTo insert a new row into worksheet at a specified position, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Insert Row into Worksheet (at a specific position by specifying the index of the row where to insert it)  // Accessing first worksheet of the Grid\nAspose.Cells.GridDesktop.Worksheet sheet = gridDesktop1.Worksheets[0];\n// Inserting row to the worksheet to the first position.\nsheet.Cells.InsertRow(0);\n","date":-62135596800,"description":"","objectID":"9aa47810bf30f1eeb6cfbcd5563ae027","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/adding+or+inserting+a+row+into+worksheet/","title":"Adding or Inserting a Row into Worksheet"},{"content":"In this topic, we will discuss about changing the font and font color of rows and columns of a worksheet. This is a basic level of formatting feature offered by Aspose.Cells.GridDesktop that empowers developers to customize the view of their worksheets for making them more presentable.\n   Contents Summary\n1 Applying Style on a Column\n2 Applying Style on a Row\n ||      Applying Style on a Column      To apply a custom style on a column using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Access a Column on which we want to apply a Style Get Style of the Column Set Style properties according to your custom needs Finally, set Style of the Column with the updated one  There are many useful properties and methods offered by Style object that can be used by developers to customize the style according to their requirements.\n\\\nApplying Style on a Row\nTo apply a custom style on a row using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Access a Row on which we want to apply a Style Get Style of the Row Set Style properties according to your custom needs Finally, set Style of the Row with the updated one  There are many useful properties and methods offered by Style object that can be used by developers to customize the style according to their requirements.\n\\\n// Accessing the worksheet of the Grid that is currently active\nWorksheet sheet = gridDesktop1.GetActiveWorksheet();\n// Accessing the first row of the worksheet\nAspose.Cells.GridDesktop.Data.GridRow row = sheet.Rows[0];\n// Getting the Style object for the row\nStyle style = row.GetStyle();\n// Setting Style properties i.e. border, color, alignment, background color etc.\nstyle.SetBorderLine(BorderType.Right, BorderLineType.Thick);\nstyle.SetBorderColor(BorderType.Right, Color.Blue);\nstyle.HAlignment = HorizontalAlignmentType.Centred;\nstyle.Color = Color.Yellow;\n// Setting the style of the row with the customized Style object\nrow.SetStyle(style); …","date":-62135596800,"description":"","objectID":"83306235a7989a443c2f2b1a632f3b02","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/applying+style+on+a+row+or+column/","title":"Applying Style on a Row or Column"},{"content":"In this topic, we will discuss about changing the font and font color of rows and columns of a worksheet. This is a basic level of formatting feature offered by Aspose.Cells.GridDesktop that empowers developers to customize the view of their worksheets for making them more presentable.\n   Contents Summary\n1 Changing the Font \u0026amp;amp; Color of a Column\n2 Changing the Font \u0026amp;amp; Color of a Row\n ||      Changing the Font \u0026amp;amp; Color of a Column      To change the font and color of a column using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Access a Column whose font and color are to be changed Create a customized Font Set the Font of the Column to the customized one Finally, set Font Color of the Column to any desired Color  \\\n//Accessing the worksheet of the Grid that is currently active\nWorksheet sheet = gridDesktop1.GetActiveWorksheet();\n//Accessing the first column of the worksheet\nGridColumn column = sheet.Columns[0];\n//Creating a customized Font object\nFont font = new Font(\u0026amp;ldquo;Arial\u0026amp;rdquo;, 10, FontStyle.Bold);\n//Setting the font of the column to the customized Font object\ncolumn.SetFont(font);\n//Setting the font color of the column to Blue\ncolumn.SetFontColor(Color.Blue);\nChanging the Font \u0026amp;amp; Color of a Row\n Access any desired Worksheet Access a Row whose font and color are to be changed Create a customized Font Set the Font of the Row to the customized one Finally, set Font Color of the Row to any desired Color  \\\n//Accessing the worksheet of the Grid that is currently active\nWorksheet sheet = gridDesktop1.GetActiveWorksheet();\n//Accessing the first row of the worksheet\nGridRow row = sheet.Rows[0];\n//Creating a customized Font object\nFont font = new Font(\u0026amp;ldquo;Arial\u0026amp;rdquo;, 10, FontStyle.Underline);\n//Setting the font of the column to the customized Font object\nrow.SetFont(font);\n//Setting the font color of the column to Green\nrow.SetFontColor(Color.Green);\nAttachments: Removing a Row from Worksheet-001.png …","date":-62135596800,"description":"","objectID":"7523a0ea7883bef2c772aefe9077639f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/changing+the+font+and+color+of+a+row+or+column/","title":"Changing the Font and Color of a Row or Column"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Custom Row and Custom Column Caption of GridDesktop Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     You can customize row and column caption of GridDesktop worksheet. Normally, row starts from 1 and column starts from A. You can change this behavior and use your own captions for rows and columns of GridDesktop worksheet. In order to change the captions of rows and columns, please implement ICustomRowCaption and ICustomColumnCaption interfaces.\nCustom Row and Custom Column Caption of GridDesktop Worksheet\nThe following sample code implements ICustomRowCaption and ICustomColumnCaption interfaces and changes the captions of rows and columns. The screenshot shows the result of the execution of this sample code for a reference.\n\\\nSample Code\nAttachments: Custom-Row-And-Custom-Column-Caption-of-GridDesktop-Worksheet.png (image/png)\n","date":-62135596800,"description":"","objectID":"35900f4a57759e4cb83e78d3e31e443c","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/custom+row+and+custom+column+caption+of+griddesktop+worksheet/","title":"Custom Row and Custom Column Caption of GridDesktop Worksheet"},{"content":"This topic deals with the information about freezing and unfreezing rows and columns of a worksheet. Freezing columns or rows enables users to keep the column headings or row titles visible while they are scrolling to other parts of the worksheet. This feature is very helpful for scrolling through the worksheets that contain huge volumes of data. Because, in such cases, when users will scroll data then only data will be scrolled down and headings would stay there to increase the readability of data.\n   Contents Summary\n1 Freezing Columns\n2 Un-Freezing Columns\n3 Freezing Rows\n4 Un-Freezing Rows\n ||      Freezing Columns      To freeze columns of a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Set the number of Frozen Columns in the Worskheet  \\\nUn-Freezing Columns\nTo unfreeze columns of a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Set the number of Frozen Columns in the Worskheet to Zero (0). It will produce the effect of unfrozen columns  \\\nFreezing Rows\nTo freeze rows of a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Set the number of Frozen Rows in the Worskheet  \\\nUn-Freezing Rows\nTo unfreeze rows of a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired Worksheet Set the number of Frozen Rows in the Worskheet to Zero (0). It will produce the effect of unfrozen rows  \\\nAttachments: Freeze Unfreeze Rows and Columns-001.png (image/png) Freeze Unfreeze Rows and Columns-002.png (image/png) Freeze Unfreeze Rows and Columns-003.png (image/png) Freeze Unfreeze Rows and Columns-004.png (image/png)\n","date":-62135596800,"description":"","objectID":"bb265c726ae6339c1acfdacee5de18e2","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/freeze+unfreeze+rows++and++columns/","title":"Freeze Unfreeze Rows and Columns"},{"content":"This topic discusses some important concepts about managing cell controls in columns using Aspose.Cells.GridDesktop API. We will explain that how can developer access, modify and remove cell controls from the columns of their worksheets. Let\u0026amp;rsquo;s have a look into it.\n   Contents Summary\n1 Accessing Cell Controls\n2 Removing Cell Controls\n ||      Accessing Cell Controls      To access and modify an existing cell control in the column, developers can use the CellControl property of a Aspose.Cells.GridDesktop.Data.GridColumn. Once a cell control is accessed, developers can modify its properties at runtime. For an instance, in the example given below, we have accessed an existing CheckBox cell control from a specific Aspose.Cells.GridDesktop.Data.GridColumn and modified its Checked property.\nIMPORTANT: CellControl property provides a cell control in the form of CellControl object. So, if you need to access a specific type of cell control, say CheckBox then you will have to typecast the CellControl object to CheckBox class.\n\\\nRemoving Cell Controls\nTo remove an existing cell control, developers can simply access a desired worksheet and then Remove the cell control from the specific column by using the RemoveCellControl method of Aspose.Cells.GridDesktop.Data.GridColumn.\n\\\nEach column in the Columns collection of the Worksheet is represented by an instance of Aspose.Cells.GridDesktop.Data.GridColumn class.\n","date":-62135596800,"description":"","objectID":"d414b60d4db597edeecf3f622a2909dc","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/managing+cell+controls+in+columns/","title":"Managing Cell Controls in Columns"},{"content":"This is a basic topic for the developers that just describes the simplest approach to remove a column from the worksheet. It looks simple but a handy feature that can be used by developers in their routine tasks while working with Aspose.Cells.GridDesktop.\nRemoving a Column from Worksheet\nTo remove a column from the worksheet, please follow the steps below:\n Access any desired Worksheet Remove Column from the Worksheet by specifying the index of the column to be removed  \\\n","date":-62135596800,"description":"","objectID":"f1a791e032b081167ca9799bd4f3cab7","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/removing+a+column+from+worksheet/","title":"Removing a Column from Worksheet"},{"content":"This is another basic topic for the developers to explain a basic approach of removing a row from the worksheet. It is a simple and handy feature that can be used by developers while working with Aspose.Cells.GridDesktop.\nTo remove a row from the worksheet, please follow the steps below:\n Access any desired Worksheet Remove Row from the Worksheet by specifying the index of the row to be removed  Code sample below shows you how to removing a row from worksheet.\n\\\nAttachments: Removing a Row from Worksheet-001.png (image/png) Removing a Row from Worksheet-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"15907381ea3ce41623747d19d6b514ff","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/removing+a+row+from+worksheet/","title":"Removing a Row from Worksheet"},{"content":"This topic discusses setting the column width and row height using the Aspose.Cells.GridDesktop API. Sometimes, worksheet cells contain values that are wider than the original cell. It makes it difficult for users to read the cell content. Some users don\u0026amp;rsquo;t like to use the right arrow key to view the complete value in a cell. To solve such problems, developers can change the column width. Changing the row height solves similar issues.\n   Contents Summary\n1 Setting Column Width\n2 Setting Row Height\n ||      Setting Column Width      To set the width of a column using Aspose.Cells.GridDesktop:\n Access a worksheet. Access the column you want to change the width of. Set the column width.  \\\nSetting Row Height\nTo set the height of a row using Aspose.Cells.GridDesktop, please follow the steps below:\n Access any desired worksheet. Access the row you want to change the height of. Set the row height.  \\\nAttachments: Setting Column Width or Row Height-001.png (image/png) Setting Column Width or Row Height-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"7f0c117f9b5100dfdd6272f983ed6247","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/setting+column+width+or+row+height/","title":"Setting Column Width or Row Height"},{"content":"In one of our previous topics, we have discussed about validations but that was in the context of Validations in Worksheets (for having general information about validation and validation modes, developers can refer to this topic). In this topic, we will explain validations with respect to columns. Using this feature, it is possible for developers to apply a validation rule on any column of the worksheet. Let\u0026amp;rsquo;s discuss it in detail.\n   Contents Summary\n1 Adding Column Validation\n2 Accessing Column Validation\n3 Removing Column Validation\n ||      Adding Column Validation      To add any kind of validation to a column, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add a desired Validation to any column  IMPORTANT: For more information about the types of validation (or validation modes like Is Required Validation, Regular Expressions Validation and Custom Validation) and implementing Custom Validation, please refer to Working with Validations in Worksheets.\n\\\nAccessing Column Validation\nTo access a specific column validation, please follow the steps below:\n Access a desired Worksheet Access a specific column Validation in the Worksheet Edit Validation attributes, if desired  \\\n//Accessing first worksheet of the Grid\nWorksheet sheet = gridDesktop1.Worksheets[0];\n//Accessing the Validation object applied on a specific column\nValidation validation = sheet.Columns[2].Validation;\n//Editing the attributes of Validation\nvalidation.IsRequired = true;\nvalidation.RegEx = \u0026amp;ldquo;\u0026amp;quot;;\nvalidation.CustomValidation = null;\nRemoving Column Validation\nTo remove a specific column validation from the worksheet, please follow the steps below:\n Access a desired Worksheet Remove a specific column Validation from the Worksheet  \\\n//Accessing first worksheet of the Grid\nWorksheet sheet = gridDesktop1.Worksheets[0];\n//Removing the Validation applied on a specific column\nsheet.Columns[2].RemoveValidation();\n","date":-62135596800,"description":"","objectID":"98a1b8cdce93f47574228cecddd66419","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/working+with+validations+in+columns/","title":"Working with Validations in Columns"},{"content":"Articles in this section\nAttachments: Removing a Row from Worksheet-001.png (image/png) Removing a Row from Worksheet-002.png (image/png) Applying Style on a Row or Column-001.png (image/png) Applying Style on a Row or Column-002.png (image/png) Setting Column Width or Row Height-001.png (image/png) Setting Column Width or Row Height-002.png (image/png) Freeze Unfreeze Rows and Columns-001.png (image/png) Freeze Unfreeze Rows and Columns-002.png (image/png) Freeze Unfreeze Rows and Columns-003.png (image/png) Freeze Unfreeze Rows and Columns-004.png (image/png) Adding Cell Controls in Columns-001.png (image/png) Adding Cell Controls in Columns-002.png (image/png) Adding Cell Controls in Columns-003.png (image/png)\n","date":-62135596800,"description":"","objectID":"50909f909642e516b3b020675e16e150","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithrowsandcolumns/","title":"Working with Rows and Columns"},{"content":"A worksheet is an integral part of an Excel file. In fact, an Excel file is composed of one or more worksheets. Each worksheet can be composed of up tp 65,536 rows and 256 columns only. It is the worksheet that holds data in an Excel file.\nAspose.Cells.GridDesktop can create and manipulate existing and new Excel files so there is, of course, a way to access worksheets using Aspose.Cells.GridDesktop. This topic discusses how.\n   Contents Summary\n1 Using Worksheet Index\n2 Using Worksheet Name\n3 Accessing an Active Worksheet 3.1 Using the AcriveSheetIndex Property\n3.2 Using the GetActiveWorksheet Method\n ||      Using Worksheet Index      Developers can access an instance of any Worksheet by using the worksheet index of any desired worksheet as shown below in the example. This approach is good for iterating through a number of worksheets in an Excel file.\n\\\nUsing Worksheet Name\nIf the name of the worksheet is known, it is possible to access a worksheet using its name as shown below.\n\\\nAccessing an Active Worksheet\nIt is possbile that an Excel file will have more than one worksheet. The one htat a user is working on is called the active worksheet. It is possible to access the active sheet.\nTo access an active worksheet, Aspose.Cells.GridDesktop offers two approaches:\nUsing the AcriveSheetIndex Property\nOne way to access an active worksheet using Aspose.Cells.GridDesktop control is to use the GridDesktop control\u0026amp;rsquo;s ActiveSheetIndex property. Using this property, it is possible to get the index of the active worksheet in the Aspose.Cells.GridDesktop control. Then that index can be used to access the worksheet in a traditional manner as shown below.\n\\\nUsing the GetActiveWorksheet Method\nThe other approach is to call the GridDesktop control\u0026amp;rsquo;s GetActiveWorksheet method. This method provides a reference of the worksheet that is currently active in Aspose.Cells.GridDesktop control as shown below.\n\\\n","date":-62135596800,"description":"","objectID":"30b10558a58ce4c47ecbd3b6eadceddb","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/accessing+worksheet/","title":"Accessing Worksheet"},{"content":"In this topic, we will discuss the techniques to add or insert worksheets in an Excel file using Aspose.Cells.GridDesktop. The difference between adding and inserting worksheets is that in addition, a worksheet is simply added at the end of the worksheets collection of the Excel file however insertion means adding a worksheet to a specific position in the worksheets collection.\n   Contents Summary\n1 Adding a Worksheet\n2 Inserting a Worksheet\n ||      Adding a Worksheet      To add a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to a form. Call the Worksheet collection\u0026amp;rsquo;s Add method in the GridDesktop control.  \\\nMany overloaded versions of the Add method are available. Using the above overloaded version, for example, a worksheet is added to the Excel file with a default sheet name. Using other overloaded versions of the Add method, it is possible to define the name as shown below in the example.\n\\\nInserting a Worksheet\nTo insert a worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Add the Aspose.Cells.GridDesktop control to a form. Call the Worksheets collection\u0026amp;rsquo;s Insert method in the GridDesktop control.  \\\nIMPORTANT: Microsoft Excel (97-2003 XLS) supports Excel sheets with up to 65,536 rows and 256 columns. Aspose.Cells.GridDesktop follows the same standards. In the Aspose.Cells.GridDesktop control, developers can add or insert worksheets with more rows and columns than the standard limit but when they try to save the Grid data to an Excel file, an exception will be thrown. It means that only data contained in the 65,536 rows and 256 columns can be saved to an Excel XLS file using Aspose.Cells.GridDesktop, if you use XLSX (MS Excel 2007/2010) file format, there is no such limitation though.\n","date":-62135596800,"description":"","objectID":"d8228612853f2543627120df64157cfd","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/add+or+insert+a+worksheet/","title":"Add or Insert a Worksheet"},{"content":"Cell controls are in fact those controls that can be added to worksheets. We call them Cell Controls because these controls are displayed in cells. In this topic, we will discuss about adding and handling the events of these cell controls.\n   Contents Summary\n1 Introduction 1.1 Adding Button 1.1.1 Event Handling of Button\n1.1.2 Specifying a Background Image for the Button Control\n1.2 Adding CheckBox 1.2.1 Event Handling of CheckBox\n1.3 Adding ComboBox 1.3.1 Event Handling of ComboBox\n ||      Introduction      Currently, Aspose.Cells.GridDesktop support adding three types of cell controls, which include the following:\n Button CheckBox ComboBox  All of these controls are derived from an abstract class, CellControl. Each worksheet contains a collection of Controls. New cell controls can be added and existing ones can be accessed using this Controls collection easily.\nIMPORTANT: If you want to add cell controls to all cells of a column instead of adding one by one then you can refer to Managing Cell Controls in Columns.\nAdding Button\nTo add a button into the worksheet using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add Button to the Controls collection of the Worksheet  \\\nWhile adding Button , we can specify the cell\u0026amp;rsquo;s location (where to display it), width \u0026amp;amp; height and the caption of the button.\nEvent Handling of Button\nWe have discussed about adding Button control to the Worksheet but what is the advantage of just having a button in the worksheet if we cannot use it. So, here comes the need of event handling of the button.\nTo handle the Click event of the Button control, Aspose.Cells.GridDesktop provides CellButtonClick event that should be implemented by the developers according to their needs. For an instance, we have just displayed a message when the button is clicked as shown below:\n\\\nSpecifying a Background Image for the Button Control\nWe can set background …","date":-62135596800,"description":"","objectID":"e96f4ba70e299ab13740a9b3a824b91b","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/adding+cell+controls+in+worksheets/","title":"Adding Cell Controls in Worksheets"},{"content":"Scroll bars are useful for navigating the contents of spreadsheets that are wide and deep, that is, that have many rows and columns. Most applications support two types of scroll bar:\n Vertical scroll bar Horizontal scroll bar  Both of these are found in Microsoft Excel.\nAspose.Cell\u0026amp;rsquo;s GridDesktop API provides horizontal and vertical scroll bars for scrolling through the contents of a worksheet. With the Aspose.Cells.GridDesktop APIs, developers can control the visibility of both of these scroll bars.\n   Contents Summary\n1 Controlling Scroll Bar Visibility 1.1 Programming Samples: Hiding Scroll Bars\n1.2 Programming Samples: Making Scroll Bars Visible\n ||      Controlling Scroll Bar Visibility      To control scroll bar\u0026amp;rsquo;s visibility in the GridDesktop, use the IsVerticalScrollBarVisible and IsHorizontalScrollBarVisible properties. The examples below show how to hide and show scroll bars.\nProgramming Samples: Hiding Scroll Bars\nTo hide scrollbars, set the properties that control visibility to false.\n\\\nProgramming Samples: Making Scroll Bars Visible\nTo make scrollbars visible, set the properties that control visibility to true.\n\\\n","date":-62135596800,"description":"","objectID":"5f13437553fb455d0d18fd8cb907d687","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/display+and+hide+scroll+bars/","title":"Display and Hide Scroll Bars"},{"content":"In our previous topic, we have talked about importing the contents of a DataTable to Aspose.Cells.GridDesktop control but we purposely didn\u0026amp;rsquo;t mention that Aspose.Cells.GridDesktop supports the reverse process too. So, in this topic, we will discuss about exporting the data inside Aspose.Cells.GridDesktop control to a DataTable.\n   Contents Summary\n1 Exporting Grid Contents 1.1 Exporting To a Specific DataTable\n1.2 Exporting To a New DataTable\n ||      Exporting Grid Contents      Exporting To a Specific DataTable\nTo export the Grid contents to a specific DataTable object, please follow the steps below:Add Aspose.Cells.GridDesktop control to your Form.\n Create a specific DataTable object according to your needs. Export the data of a selected Worksheet to your specified DataTable object.  In the example given below, we have created a specific DataTable object having four columns inside. Finally, we exported worksheet data (starting from first cell with 69 rows and 4 columns) to a DataTable object already created by us.\nExample:\nExporting To a New DataTable\nSometimes, developers may not be interested in creating their own DataTable object and might have a simple need to just export the worksheet data to a new DataTable object. It would be more quickest way for the developers to just export the worksheet data.\nIn the example given below, we have tried a different way to explain the usage of ExportDataTable method. We have taken the reference of the worksheet that is currently active and then we exported the complete data of that active worksheet to a new DataTable object. Now, this DataTable object can be used in any way a developer wants. Just for an instance, a developer may bind this DataTable object to a DataGrid to view the data.\nExample:\nIn above case, we will use an overloaded version of ExportDataTable method that will simply return a new DataTable object containing data exported from worksheet.\n","date":-62135596800,"description":"","objectID":"ae53f3f05902aefe3e3608981d294006","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/exporting+data+from+grid/","title":"Exporting Data from Grid"},{"content":"Since the release of the .NET Framework, Microsoft has provided an excellent way to store data in offline mode in the form of a DataTable object. Understanding the needs of developers, Aspose.Cells.GridDesktop also supports importing data from a data table. This topic discusses how to do this.\nExample\nTo import the contents of a data table using Aspose.Cells.GridDesktop control:\n Add Aspose.Cells.GridDesktop control to a form. Create a DataTable object that contains the data to be imported. Get the reference of a desired worksheet. Import the data table contents to the worksheet. Set the column headers of the worksheet according to column names of the data table. Set the width of the columns, if desired/ Display the worksheet.  In the example given below, we have created a DataTable object and filled it with some data fetched from a database table named Products. Finally, we have imported data from that DataTable object to a desired worksheet using Aspose.Cells.GridDesktop.\n\\\n","date":-62135596800,"description":"","objectID":"a4da6e7498da04215a00a8f643386f8f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/importing+data+from+a+datatable+to+grid/","title":"Importing Data from a DataTable to Grid"},{"content":"This topic discusses some important concepts about managing cell controls using the API of Aspose.Cells.GridDesktop. We will explain that how can developer access, modify and remove cell controls from their worksheets. Let\u0026amp;rsquo;s have a look into it.\n   Contents Summary\n1 Accessing Cell Controls\n2 Removing Cell Controls\n ||      Accessing Cell Controls      To access and modify an existing cell control in the worksheet, developers can access a specific cell control from the Controls collection of the Worksheet by specifying the cell (using cell name or its location in terms of row and column numbers) in which the cell control is being displayed. Once a cell control is accessed, developers can modify its properties at runtime. For an instance, in the example given below, we have accessed an existing CheckBox cell control from the Worksheet and modified its Checked property.\nIMPORTANT: Controls collection contains all types of cell controls in the form of CellControl objects. So, if you need to access a specific type of cell control, say CheckBox then you will have to typecast the CellControl object to CheckBox class.\n\\\nRemoving Cell Controls\nTo remove an existing cell control, developers can simply access a desired worksheet and then Remove the cell control from the Controls collection of the Worksheet by specifying the cell (using its name or row \u0026amp;amp; column number) containing cell control.\n\\\n","date":-62135596800,"description":"","objectID":"cbb358f5dfdc177030869c2ec4e780bc","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/managing+cell+controls+in+worksheets/","title":"Managing Cell Controls in Worksheets"},{"content":"In MS Excel, you must be familiar with the comments feature that allows users to add comments to cells. This feature is helpful in those cases when it is required to provide some information to the users when they are about to enter values into the cells. Whenever a user places his mouse cursor on a commented cell, a small popup message is appeared to provide some information to the user. Using Aspose.Cells.GridDesktop, developers can create comments on cells. In this topic, we will explain the usage of this feature in detail.\n   Contents Summary\n1 Adding Comments\n2 Accessing Comments\n3 Removing Comments\n ||      Adding Comments      To add a comment to a cell using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add Comment to the worksheet by specifying the cell (using its name or row \u0026amp;amp; column number) in which the comment would be added.  The code below will add comments to the b2 and b4 cells of the worksheet.\n\\\nComments collection in the Worksheet object provides an overloaded Add method. Developers can use any overloaded version of Add method according to their specific needs.\nAccessing Comments\nTo access and modify an existing comment in the worksheet, developers can access the comment from the Comments collection of the Worksheet by specifying the cell (using cell name or its location in terms of row and column number) in which the comment is inserted. Once the comment is accessed, developers can modify its Text at runtime.\n\\\nRemoving Comments\nTo remove an existing comment, developers can simply access a desired worksheet and then Remove comment from the Comments collection of the Worksheet by specifying the cell (using its name or row \u0026amp;amp; column number) containing comment.\n\\\nAttachments: Managing Comments in a Worksheet-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"eab23d81f534a53b87d9fc652278274d","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/managing+comments+in+a+worksheet/","title":"Managing Comments in a Worksheet"},{"content":"Using Aspose.Cells.GridDesktop, it is also possible to add hyperlinks to simple values stored in cells of a worksheet. Let\u0026amp;rsquo;s say that in some cells, you might have some values that you would like to link with more detailed information on a webpage. In that case, it would be desirable to add a hyperlink to that cell so that if a user click on the cell then he would be directed to that webpage. In this topic, we will explain that how developers can add and manipulate hyperlinks in their worksheets.\n   Contents Summary\n1 Adding Hyperlinks\n2 Accessing Hyperlinks\n3 Removing Hyperlinks\n ||      Adding Hyperlinks      To add a hyperlink to a cell using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Access a desired Cell in the worksheet that will be hyperlinked Add some value to the cell to be hyperlinked Add Hyperlink to the worksheet by specifying the cell name on which the hyperlink would be applied  Hyperlinks collection in the Worksheet object provides an overloaded Add method. Developers can use any overloaded version of Add method according to their specific needs.\nBelow code will add a hyperlink to B2 and C3 cells of the worksheet.\n\\\nAccessing Hyperlinks\nOnce a hyperlink will be added to a cell, it may also be required to access and modify the hyperlink at runtime. To do so, developers can simply access the hyperlink from the Hyperlinks collection of the Worksheet by specifying the cell (using cell name or its location in terms of row and column number) to which the hyperlink is added. Once the hyperlink is accessed, developers can modify its URL at runtime.\n\\\nRemoving Hyperlinks\nTo remove an existing hyperlink, developers can simply access a desired worksheet and then Remove hyperlink from the Hyperlinks collection of the Worksheet by specifying the hyperlinked cell (using its name or row \u0026amp;amp; column number).\n\\\nIf you want to add a hyperlink to a cell and want to …","date":-62135596800,"description":"","objectID":"89407922bfae45c520c694e135c3820f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/managing+hyperlinks+in+a+worksheet/","title":"Managing Hyperlinks in a Worksheet"},{"content":"Most of the people believe that a picture can explain things better than words. That\u0026amp;rsquo;s why Aspose.Cells.GridDesktop supports adding pictures to worksheets to execute this belief of the people. In this topic, we will discuss about adding and manipulating pictures in worksheets.\n   Contents Summary\n1 Adding Pictures\n2 Accessing Pictures\n3 Removing Pictures\n ||      Adding Pictures      To add a hyperlink to a cell using Aspose.Cells.GridDesktop, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add Picture to the worksheet by specifying the file path of picture and cell name where the picture will be inserted  Pictures collection in the Worksheet object provides an overloaded Add method. Developers can use any overloaded version of Add method according to their specific needs. Using these overloaded versions of Add method, it is possible to add a picture from file, stream or Image object.\nBelow is the sample code for adding pictures into worksheets.\n\\\nAccessing Pictures\nTo access and modify an existing picture in the worksheet, developers can access the picture from the Pictures collection of the Worksheet by specifying the cell (using cell name or its location in terms of row and column number) in which the picture is inserted. Once the picture is accessed, developers can modify its Image at runtime.\nBelow is the sample code to access and modify the pictures in a worksheet.\n\\\nRemoving Pictures\nTo remove an existing picture, developers can simply access a desired worksheet and then Remove picture from the Pictures collection of the Worksheet by specifying the cell (using its name or row \u0026amp;amp; column number) that contains the picture.\nIn code below it is shown how to remove pictures from worksheet.\n\\\nAttachments: Managing Pictures in a Worksheet-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"2e080c7d6b0038aba6829c167c6202e7","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/managing+pictures+in+a+worksheet/","title":"Managing Pictures in a Worksheet"},{"content":"Aspose.Cells.GridDesktop supports moving worksheets within the workbook.\nMove Worksheets within a Workbook\nAspose.Cells.GridDesktop provides a method, Aspose.Cells.GridDesktop.WorksheetCollection.MoveTo(), that is used to move a worksheet to the specified index. It takes the indexes (zero-based) of the source worksheet and destination worksheet as parameters. It is basically used to move a worksheet to another location in the same spreadsheet.\nThe following example shows how to move a worksheet to another location within the workbook.\n\\\n","date":-62135596800,"description":"","objectID":"8576841833925b5bfa3f7b7253cdcac7","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/moving+worksheets/","title":"Moving Worksheets"},{"content":"Aspose.Cells.GridDesktop can read and apply Data Validations in your Excel file. Please load your Excel file in GridDesktop and all the Data Validations inside it will start working as they do in Microsoft Excel.\nReading Data Validations in Excel file using Aspose.Cells.GridDesktop\nThe following sample code imports the sample excel file which contains some Data Validations inside the GridDesktop.\n\\\nAfter importing the file into GridDesktop when we try to change the value of cell A2 greater than 100 which pops up the Validation Error message box.\nAttachments: Validation-Error-message-box-pops-up.png (image/png) ValidationTesting.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"76242d901133447e352bbcb796746549","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/reading+data+validations+in+excel+file+using+aspose.cells.griddesktop/","title":"Reading Data Validations in Excel file using Aspose.Cells.GridDesktop"},{"content":"This topic discusses removing worksheets using the Aspose.Cells.GridDesktop control. There are a few simple approaches to accomplish this basic task.\n   Contents Summary\n1 Removing a Worksheet 1.1 Using Worksheet Index\n1.2 Using Worksheet Name\n ||      Removing a Worksheet      To remove a worksheet using Aspose.Cells.GridDesktop control, please follow the steps below:\n Add the Aspose.Cells.GridDesktop control to a form. Call the Worksheets collection\u0026amp;rsquo;s Remove method in the GridDesktop control.  Using Worksheet Index\nIn this approach, simply pass the worksheet index (in the worksheets collection of the grid) of the worksheet to be removed.\n\\\nUsing Worksheet Name\nIf the name of the worksheet is known, it is possible to remove a specific worksheet by specifying its name.\n\\\nRemove is a method. Use it to remove a worksheet using its index (in the worksheets collection) or use RemoveAt method to remove the worksheet using its index/name.\n","date":-62135596800,"description":"","objectID":"2be30b593b847f5ded4f2be48b134b3e","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/remove+a+worksheet/","title":"Remove a Worksheet"},{"content":"This topic discusses how to change the name of a worksheet using Aspose.Cells.GridDesktop.\nExample\nRenaming a worksheet is a simple task that can be very useful. For example, if you want to label worksheets so that it is obvious what each one contains. For example, a model might have 12 worksheets, each named by month, to hold expense information.\nTo rename a worksheet using Aspose.Cells.GridDesktop control:\n Add a Aspose.Cells.GridDesktop control to a form. Get the reference of a desired worksheet. Set the name of the worksheet using its reference.  \\\nBefore changing the name of the worksheet, it\u0026amp;rsquo;s required to access the reference of that worksheet. There are many ways to access a worksheet reference. To learn about those ways, please refer to Accessing Worksheets.\n","date":-62135596800,"description":"","objectID":"ebd3c23c85ba34894967862ffcf71061","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/rename+a+worksheet/","title":"Rename a Worksheet"},{"content":"Sorting is an important routine task that we mostly use while processing data. In this topic, we will discuss with the help of a simple example that how can we sort data in a worksheet.\nSorting Worksheet Data\nTo sort data in a worksheet using the API of Aspose.Cells.GridDesktop, please follow the steps below:\n First of all create a global object of CellRange so that it can be accessed anywhere in the scope of your class Create an event handler for SelectedCellRangeChanged event of GridDesktop. SelectedCellRangeChanged event is triggered every time when a cell range selected by a user is changed. For example, if a user selects cells (containing data to be sorted) then every time his range of selection would change, this event would be triggered. The event handler provides CellRangeEventArgs argument that further provides the update range of cells (selected by user) in the form of a CellRange object. So, in this event handler, we will assign this CellRange object (containing updated range of cells) to the global CellRange object so that it can also be used in other part of the code. To make sure that we don\u0026amp;rsquo;t lost the range of cells, we will write event handler code inside a condition Now we can write some code to sort worskheet data. First of all, access a desired worksheet Create a SortRange object that will keep the range of cells whose data is to be sorted. In SortRange constructor, we can specify the worksheet, indices of start row and column, number of rows and columns to sort, orientation of sorting (like top to bottom or left to right) etc. Now we can call Sort method of SortRange object to perform the sorting of data. In Sort method, we can specify the index of column or row to be sorted and sorting order (that can be Ascending or Descending according to your requirements) Finally, we can call Invalidate method of GridDesktop to redraw cells.  In the example given below, we have demonstrated about how to sort data in a column.\nCreate a global object of …","date":-62135596800,"description":"","objectID":"995b832dd9c85f37154285b5ce2d84ba","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/sorting+worksheet+data/","title":"Sorting Worksheet Data"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Split Panes in GridDesktop Worksheet 2.1 GridDesktop Before Split Panes\n2.2 GridDesktop After Split Panes\n |     Possible Usage Scenarios     Microsoft Excel allows you to split panes using View \u0026amp;gt; Split menu command. Aspose.Cells also provides this feature. Please use GridDesktop.DoSplit() and GridDesktop.UnDoSplit() methods to split and unsplit panes in GridDesktop worksheet.\nSplit Panes in GridDesktop Worksheet\nThe following screenshots shows the GridDesktop before split planes and after split planes.\nGridDesktop Before Split Panes\nGridDesktop After Split Panes\nAttachments: GridDesktop-Before-Split-Panes.png (image/png) GridDesktop-After-Split-Panes.png (image/png)\n","date":-62135596800,"description":"","objectID":"282c727dd305b038ee817e2b06ac6c3c","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/split+panes+in+griddesktop+worksheet/","title":"Split Panes in GridDesktop Worksheet"},{"content":"Aspose.Cells.GridDesktop also supports adding validations (or validation rules) to the cells of a worksheet. By applying validation rules to cells, developers can restrict users to enter data into Grid in a specific format. Different modes of validations are supported by Aspose.Cells.GridDesktop. In this topic, we will not only discuss about those validation modes but also explain the manipulation of these validations.\n   Contents Summary\n1 Validation Modes 1.1 Is Required Validation Mode\n1.2 Regular Expressions Validation Mode\n1.3 Custom Validation Mode\n2 Working With Validations in Aspose.Cells.GridDesktop 2.1 Adding Validation\n2.2 Implementing ICustomValidation\n2.3 Accessing Validation\n2.4 Removing Validation\n ||      Validation Modes      There are three validation modes supported by Aspose.Cells.GridDesktop as follows:\n Is Required Validation Mode Regular Expressions Validation Mode Custom Validation Mode  Is Required Validation Mode\nIn this validation mode, users are restricted to enter values into specified cells. Once Is Required Validation is applied on a worksheet cell, it becomes must for a user to enter value into that cell.\nRegular Expressions Validation Mode\nIn this mode, restrictions are applied on worksheet cells for the users to submit data into cells in a specific format. The pattern of data format is provided in the form of a Regular Expression.\nCustom Validation Mode\nTo use Custom Validation, It is must for developers to implement Aspose.Cells.GridDesktop.ICustomValidation interface. The interface provides a Validate method. This method returns true if data is valid otherwise returns false.\nWorking With Validations in Aspose.Cells.GridDesktop\nAdding Validation\nTo add any kind of validation to a worksheet cell, please follow the steps below:\n Add Aspose.Cells.GridDesktop control to your Form Access any desired Worksheet Add a desired validation to the Validations collection of the Worksheet to specify that which validation would be applied on …","date":-62135596800,"description":"","objectID":"db274c434f369d2d5b86d1950fdee1b1","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/working+with+validations+in+worksheets/","title":"Working with Validations in Worksheets"},{"content":"Sometimes, when working with your data, you may want to enlarge the contents on the screen without actually changing the font size. For instance, you may have formatted your text so that it uses a small font. (This is often necessary to get all your information on a printout.) When working in the worksheet, however, the font is difficult to read because it is so small.\nIn Microsoft Excel, a zoom slider is available for zooming in and out of documents quickly and easily. The zoom slider is usually in the lower right corner of the software window.\nAspose.Cells also allows developers to set the worksheet\u0026amp;rsquo;s zoom factor, so the contents should be appeared as per your desired percentage value.\nZooming In or Out Using Aspose.Cells.GridDesktop\nAspose.Cells provides Aspose.Cells.GridDesktop.Worksheet class that has a wide range of properties and methods for managing worksheets. To set a worksheet\u0026amp;rsquo;s zoom factor, use the Worksheet class\u0026amp;rsquo; Zoom property. The zoom factor is set by assigned a numeric (integer) value to the Zoom property.\nWe build an MS Excel like zoom slider using TrackBar (.NET) control. In a WinForm project, we place the Aspose.Cells.GridDesktop control from Toolbox to the form and specify some properties to set its name, size or other aspects accordingly. Now, we place the TrackBar control @ lower right corner below the GridDesktop control, we also put a Label control that would show the percentage value you specify via TrackBar control\u0026amp;rsquo;s handle. We add relative lines of code in TrackBar\u0026amp;rsquo;s Scroll event, so when you scroll the Trackbar control, GridDesktop should zoom in or out to show the data/ contents in it.\nA complete example is given below that demonstrates how to use the Zoom property to set the zoom factor of the active worksheet of GridDesktop. We first import a template Excel file to GridDesktop.\nWrite below code in the Load event of form to set the template Excel file in GridDesktop and trackbar value.\n\\\nNow copy below …","date":-62135596800,"description":"","objectID":"04bcbce977206fc2e529c057e1366a2b","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/zooming+in+or+out+on+the+worksheet+in+griddesktop/","title":"Zooming In or Out On the Worksheet in GridDesktop"},{"content":"Articles in this section\nAttachments: Working with Validations in Worksheets-001.png (image/png) Sorting Worksheet Data-001.png (image/png) Sorting Worksheet Data-002.png (image/png) Sorting Worksheet Data-003.png (image/png) Managing Hyperlinks in a Worksheet-001.png (image/png) Managing Pictures in a Worksheet-001.png (image/png) Managing Comments in a Worksheet-001.png (image/png) Adding Cell Controls in Worksheets-001.png (image/png) Adding Cell Controls in Worksheets-002.png (image/png) Adding Cell Controls in Worksheets-003.png (image/png) Adding Cell Controls in Worksheets-004.png (image/png) Adding Cell Controls in Worksheets-005.png (image/png) Adding Cell Controls in Worksheets-006.png (image/png) Adding Cell Controls in Worksheets-007.png (image/png) zoomslider1.png (image/png) zoomslider2.png (image/png) zoomslider3.png (image/png)\n","date":-62135596800,"description":"","objectID":"e77140e3620b929dbe1fe30c1fe01331","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgriddesktop/workingwithworksheet/","title":"Working with Worksheet"},{"content":"Articles in this section\nAttachments: Creating Control on a Web Form-001.png (image/png) Creating Control on a Web Form-002.png (image/png) Creating Control on a Web Form-003.png (image/png) Creating Control on a Web Form-004.png (image/png) Creating Control on a Web Form-005.png (image/png) Creating Control on a Web Form-006.png (image/png) Creating Control on a Web Form-007.png (image/png) Creating Control on a Web Form-008.png (image/png) Creating Control on a Web Form-009.png (image/png) Creating Control on a Web Form-010.png (image/png) Creating Control on a Web Form-011.png (image/png) Creating Control on a Web Form-012.png (image/png) Creating Control on a Web Form-013.png (image/png) Creating Control on a Web Form-014.png (image/png) Creating Control on a Web Form-015.png (image/png) Using Aspose.Cells.GridWeb Designer-001.png (image/png) Using Aspose.Cells.GridWeb Designer-002.png (image/png) Using Aspose.Cells.GridWeb Designer-003.png (image/png) Using Aspose.Cells.GridWeb Designer-004.png (image/png) Using Aspose.Cells.GridWeb Designer-005.png (image/png) Using Aspose.Cells.GridWeb Designer-006.png (image/png) Using Aspose.Cells.GridWeb Designer-007.png (image/png) Using Aspose.Cells.GridWeb Designer-008.png (image/png) Using Aspose.Cells.GridWeb Designer-009.png (image/png) Using Aspose.Cells.GridWeb Designer-010.png (image/png) Using Aspose.Cells.GridWeb Designer-011.png (image/png) Setting Style or Appearance of Aspose.Cells.GridWeb-001.png (image/png) Setting Style or Appearance of Aspose.Cells.GridWeb-002.png (image/png) Setting Style or Appearance of Aspose.Cells.GridWeb-003.png (image/png) Resizing Aspose.Cells.GridWeb and its Header Bar-001.png (image/png) Resizing Aspose.Cells.GridWeb and its Header Bar-002.png (image/png) Resizing Aspose.Cells.GridWeb and its Header Bar-003.png (image/png) Opening an MS Excel File-001.png (image/png) Saving an MS Excel File-001.png (image/png) Saving an MS Excel File-002.png (image/png) Introduction to Different …","date":-62135596800,"description":"","objectID":"7eb321820f86aac21706583b70c1d2e9","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/","title":"Aspose.Cells.GridWeb"},{"content":"Aspose.Cells.GridWeb is a GUI based web control that can be embedded in ASP.NET web forms like other web controls provided by the Microsoft .NET Framework. The most important thing about a web control is providing cross-browser support. Aspose.Cells.GridWeb provides cross-browser support.\nComparison\nAspose.Cells.GridWeb is built using Microsoft .NET Framework so it is fully supported on Microsoft\u0026amp;rsquo;s Internet Explorer (IE). However, on other browsers it has minor limitations. This topic provides a detailed comparison of which features are supported on different browsers.\n   **Client Side Featrues ** **Microsoft Internet Explorer ** **Google Chrome ** **Mozilla Firefox ** **Opera **     Context Menu of Cell       Client Side Validation       Double Click Event       DropDownList ( ComboBox Mode )       DropDownList ( Popup Menu Mode )       Formula Input/Edit       Freeze or Unfreeze Rows/Columns       Hyperlinks ( CellCommand Mode )       Hyperlinks ( URL Mode )       Merge or Unmerge Cells       Multiple Cells Copy/Paste       Multiple Cells Input/Edit, Single Postback       Number Format       Sheet Paging       Readonly Cells       Readonly Rows/Columns       Data Validation using Regular Expressions       Resize Column Width       Resize Row Height       Insert/Delete Rows \u0026amp;amp; Columns       Scroll Content       Scroll Sheet Tabs       Set Borders of Cells       Set Font Settings of Cells        ","date":-62135596800,"description":"","objectID":"d9b9ae155e7ad7cd29723aefc01704ae","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/basicsofgridweb/browsers+capabilities/","title":"Browsers Capabilities"},{"content":"To make it easier to upgrade, we maintain a document describing information critical to existing users, especially ones who have used the older Aspose.Grid.Web and need to upgrade to the merged Aspose.Cells.GridWeb.\nThese are intended to be brief notes, and you should be able to find more information by looking at the sections of the Developer Guide and Aspose.Cells.GridWeb API Reference.\nUpgrading to Aspose.Cells.GridWeb\nAspose.Grid.Web users might come across issues using the new Aspose.Cells.GridWeb when they upgrade to it. It is to be noted that Aspose.Grid.Web has been renamed and become a part of Aspose.Cells so we will not continue or make amendments to older versions of the control.\nIt is not hard to upgrade to the latest Aspose.Cells.GridWeb component.\nThere are a few changes in the API as the classes with the members, structs, enumerations etc. remain the same. Most of the changes have been made to the control’s namespaces and other tags or attributes.\nThe following is the namespaces list and other attributes/tags that are changed now:\n The Aspose.Grid.Web namespace has renamed to Aspose.Cells.GridWeb. The Aspose.Grid.Web.Data namespace has renamed Aspose.Cells.GridWeb.Data. The Aspose.Grid.Web.Design namespace has renamed Aspose.Cells.GridWeb.Design. The Aspose.Grid.Formula namespace was renamed to Aspose.Cells.GridFormula, and with recent releases of the component, the said namespace was completely removed from the public API. The tag agw:GridWeb has changed to acw:GridWeb in the aspx form. The older Aspose.Grid.Web client path, agw_client, has changed to acw_client for Aspose.Cells.GridWeb . The client path setting in the web.config file, for example:   \r\\\nhas changed to\n\r\r\\\n","date":-62135596800,"description":"","objectID":"7db90f634dc75b0b07419a8be2fbc10f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/basicsofgridweb/upgrade+aspose.grid.web+to+aspose.cells.gridweb/","title":"Upgrade Aspose.Grid.Web to Aspose.Cells.GridWeb"},{"content":"This topic explains how to use Aspose.Cells.GridWeb in ASP.NET applications using Visual Studio.NET 2005. This topic is useful for the beginner-level developers working with Aspose.Cells.GridWeb.\n   Contents Summary\n1 Working with Aspose.Cells.GridWeb Using Visual Studio 2013 1.1 Step 1: Creating New Web Site\n1.2 Step 2: Checking Source \u0026amp;amp; Design Views of a Web Page\n1.3 Step 3: Adding Aspose.Cells.GridWeb to Web Page\n1.4 Step 4: Change the \u0026amp;lt;!DOCTYPE\u0026amp;gt; tag\n1.5 Step 5: Resizing Aspose.Cells.GridWeb Control\n1.6 Step 6: Configuring the Properties of Aspose.Cells.GridWeb\n1.7 Step 7: Running Your First Web Site Containing Aspose.Cells.GridWeb\n      Working with Aspose.Cells.GridWeb Using Visual Studio 2013     This topic shows how to use Aspose.Cells.GridWeb by making a sample website in Visual Studio 2013. The process has been divided into steps.\nStep 1: Creating New Web Site\n  Open Visual Studio 2013.\n  From the File menu, select New Menu, then Web Site.\nThe New Web Site dialog is opened.\n  Select ASP.NET Web Forms Site from Visual Studio installed templates.\n  Choose HTTP mode for the location of the web site.\n  Specify a location where the web site files will be created and stored.\n  Click Browse in the New Web Site dialog.\nThe Choose Location dialog is displayed.\n  Click the Local IIS tab. All folders and web applications stored in your IIS root folder are displayed (for example: C:\\Inetpub\\wwwroot).\n  Now create a new web application in your local IIS where the website files will be stored. The Choose Location dialog lets you create and delete web applications or virtual directories in your local IIS. To create a web application, click a button as shown below in the figure.\nA new web application with the default name WebSite is created.\n  Rename the web application. We renamed it GridWebOn2013.\n  Click Open.\nYou return to the New Web Site dialog. The path of web site location is set to http://localhost/GridWebOn2013.\n    Click OK to let Visual Studio create …","date":-62135596800,"description":"","objectID":"58b55d240a1368fd8d1eaf932740be4d","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/basicsofgridweb/working+with+visual+studio/","title":"Working with Visual Studio"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"be792f5aef7b5b79ecfbb19009dc8382","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/basicsofgridweb/","title":"Basics of GridWeb"},{"content":"This topic provides a basic step by step guide for beginners to help them create and use the Aspose.Cells.GridWeb control in web applications.\n   Contents Summary\n1 Creating \u0026amp;amp; Using Aspose.Cells.GridWeb Control 1.1 Step 1: Creating a Web Application Project\n1.2 Step 2: Embedding Control to the Web Form\n1.3 Step 3: Resizing Control\n1.4 Step 4: Setting Control Properties 1.4.1 Custom Command Buttons\n1.5 Important\n1.6 Step 5: Running Web Application\n |     Creating \u0026amp;amp; Using Aspose.Cells.GridWeb Control     Step 1: Creating a Web Application Project\nFirst, create a web application project in which to use the Aspose.Cells.GridWeb control:\n  Open Visual Studio.\n  From the File menu, select New followed by Project.\nA New Project Dialog appears.\n  Select ASP.NET Web Application for desired language.\n  Select Web Forms template.\n  Add a new web form to the project.\n  Step 2: Embedding Control to the Web Form\nDrag and drop the Aspose.Cells.GridWeb control from the Visual Studio toolbox to the web form.\nTo learn how to add Aspose.Cells Grid controls to the Visual Studio Toolbox, please read Integrate Aspose.Cells.Grid Controls with Visual Studio.NET.\nWhen the control has been added to the form, it is rendered like this:\nStep 3: Resizing Control\nThe form is rendered at a default size. Adjust the size by dragging the borders or corners.\nStep 4: Setting Control Properties\nAspose.Cells.GridWeb control can also be configured using various properties.\nIt is possible to adjust many properties of the control with the Properties dialog. Basic properties include height, width, color and visual styles. Advanced properties include the edit mode, session mode and double-click mode. Moreover, it is possible to set customized event handlers in the Properties dialog.\nThere are also some extra configuration tools for Aspose.Cells.GridWeb that can be seen at the bottom of the Properties dialog as hyperlinks, or right_click on the GridWeb control to find them. These configuration tools …","date":-62135596800,"description":"","objectID":"51bedc54a73950f75caddfd03de46833","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/add+gridweb+to+web+form/","title":"Add GridWeb to Web Form"},{"content":"You can add context menu items using ASP.NET markup or using the .NET code. You can also remove context menu items using the .NET code. Please use GridWeb.CustomCommandButtons.Add() and GridWeb.CustomCommandButtons.Remove() or RemoveAt() methods for these purpose.\n   Contents Summary\n1 Add Context Menu Item using ASP.NET Markup\n2 Add Context Menu Items in Aspose.Cells.GridWeb using Code\n3 Remove Context Menu Items in Aspose.Cells.GridWeb using Code\n |     Add Context Menu Item using ASP.NET Markup     The following ASP.NET markup adds context menu item in GridWeb.\n\\\n\\\nHere is the full ASP.NET markup that creates a GridWeb with above context menu item. Please note the OnCustomCommand=\u0026amp;quot;GridWeb1_CustomCommand\u0026amp;rdquo; attribute. It is the event handler name that will be called when your context menu item will be clicked.\n\\\n\\\nThe is how the context menu item looks like after being added using the above ASP.NET markup.\nThis is the event handler code which is executed when the context menu item is clicked. The code first checks the command name, if it matches our command, it adds a text in cell A1 of active GridWeb worksheet and sets the first column width to 40 units to make text visible.\n\\\nThis is how the GridWeb looks when you click on the context menu item.\nAdd Context Menu Items in Aspose.Cells.GridWeb using Code\nThis code shows how to add context menu item inside a GridWeb using code.\n\\\nRemove Context Menu Items in Aspose.Cells.GridWeb using Code\nThis code shows how to remove context menu item using CustomCommandButtons.Remove() and CustomCommandButtons.RemoveAt() methods.\n\\\nAttachments: Add or Remove Context Menu Items in GridWeb-001.png (image/png) Add or Remove Context Menu Items in GridWeb-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"51042af125887a981a65e93fd72e4d3f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/add+or+remove+context+menu+items+in+gridweb/","title":"Add or Remove Context Menu Items in GridWeb"},{"content":"Aspose.Cells.GridWeb has its own default look \u0026amp;amp; feel but it is possible to change its appearance. Aspose.Cells.GridWeb provides several properties to let developers fully control its appearance. This topic discusses some of those properties.\n   Contents Summary\n1 Applying Preset or Custom Styles to Aspose.Cells.GridWeb 1.1 Preset Styles\n1.2 Header Bar Style\n1.3 Tab Bar Style\n1.4 Reusable Customized Style File\n1.5 Saving Style File\n1.6 Loading Style File\n1.7 Standard Format of XML Style Template\n |     Applying Preset or Custom Styles to Aspose.Cells.GridWeb     Preset Styles\nTo save the efforts of developers, Aspose.Cells.GridWeb offers some preset styles. Simply select a style from the list to apply the style.\n   Styles Color Scheme     Standard Silver   Colorful1 Rose   Colorful2 Blue   Professional1 Cyan   Professional2 Cyan again   Traditional1 Dark   Traditional2 Gray   Custom Customized   When a particular style is selected, it changes the whole appearance of the GridWeb control. Developers can select a Preset Style to be applied on Grid during design time but this task can also be accomplished at runtime using the flexible API of Aspose.Cells.GridWeb.     Aspose.Cells.GridWeb control is represented by GridWeb class.\nTo select a preset style:\n Add Aspose.Cells.GridWeb control to a web form. Select a preset style to be applied on the control.  The GridWeb control provides the PresetStyle property to which developers can assign any desired preset style.\nThe output of the below code snippet is shown below.\n**GridWeb control with Colorful1 style applied on it **\n\\\nHeader Bar Style\nIf you take a look at the GridWeb control, you\u0026amp;rsquo;ll notice two header bars. One for columns (that is A, B, C, D etc.) and other for rows (that is 1, 2, 3, 4 etc.). Aspose.Cells.GridWeb allows developers to control the appearance of these header bars. Developers may set the style of header bars either at design time or runtime.\nThe GridWeb control provides the HeaderBarStyle …","date":-62135596800,"description":"","objectID":"e13d17ff74ff47236497efe0747f1041","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/apply+styles+to+gridweb/","title":"Apply Styles to GridWeb"},{"content":"Aspose.Cells.GridWeb contains special buttons like Submit, Save and Undo. All these buttons perform specific tasks for Aspose.Cells.GridWeb. It is also possible to add custom buttons that performs custom tasks. This topic explains how to use this feature.\n   Contents Summary\n1 Creating Custom Command Buttons 1.1 Event Handling of Custom Command Button\n |     Creating Custom Command Buttons     To create a custom command button in Aspose.Cells.GridWeb:\n Add Aspose.Cells.GridWeb control to the web form. Access a worksheet. Create an instance of the CustomCommandButton class. Set button\u0026amp;rsquo;s Command to some value. This value is used in the button\u0026amp;rsquo;s event handler. Set the button\u0026amp;rsquo;s text. Set the button\u0026amp;rsquo;s image URL. Finally, add the CustomCommandButton object to the CustomCommandButtons collection of the GridWeb control.  Custom command buttons can also be added in WYSIWYG mode using Visual Studio\u0026amp;rsquo;s Properties dialog.\nThe output of code snippet is shown below:\n**A custom command button added to GridWeb control **\n\\\nEvent Handling of Custom Command Button\nThe most important aspect of custom command buttons is the action they perform when clicked. To set the action, create an event handler for the GridWeb control\u0026amp;rsquo;s CustomCommand event.\nThe CustomCommand event is always triggered when a custom command button is clicked. So the event handler has to identify the specific custom command button that it applies to by the Command set when adding the button to the GridWib control. Finally, add custom code that is executed when the button is clicked.\nIn the code example below, a text message is added to the cell A1 when the button is clicked.\n**Text added to A1 cell when custom command button is clicked **\n\\\nAttachments: Create Custom Command Buttons-001.png (image/png) Create Custom Command Buttons-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"bf3e044f6bfd50df0b60ddd91bafbc01","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/create+custom+command+buttons/","title":"Create Custom Command Buttons"},{"content":"This article describes Aspose.Cells.GridWeb\u0026amp;rsquo;s different modes. These modes are differentiated logically due to their different features and behaviors. We have identified several types of mode:\n Edit Mode View Mode Session Mode Sessionless Mode  All of these modes have their own characteristics. Developers can work with Aspose.Cells.GridWeb in any mode according to their requirements. We\u0026amp;rsquo;ll look at each mode below.\n   Contents Summary\n1 Edit Mode\n2 View Mode\n3 Session Mode\n4 Sessionless Mode\n |     Edit Mode     By default, the Aspose.Cells.GridWeb control is in Edit mode. In Edit mode, you can fully edit or modify the grid content using all the features offered by the Aspose.Cells.GridWeb control. These features include:\n Saving the grid content to Microsoft Excel files. Submitting data to a server. Calculating formulas. Undoing or discarding previous actions. Managing rows and columns. Cutting, copying or pasting data. Formatting cells etc.  **GridWeb control in Edit Mode **\nDevelopers can also switch to Edit mode programmatically by setting the EditMode property of the GridWeb control to true.\nThe below example shows how to enable edit mode programmatically.\n\\\nWhenever a user clicks the Undo button, it brings the GridWeb to its previous state (the state before the last postback to the server). It does not cancel previous actions one by one.\nView Mode\nWhen the GridWeb control is in View mode, users cannot edit or modify grid content, which means that users can only view grid content. That\u0026amp;rsquo;s why this mode is called View mode. In View mode, a few buttons (Submit, Save and Undo) are hidden and the menu that appears when right-clicking only contians the Copy option.\n**GridWeb control in View Mode **\nIf developers would like their users to only view data then they can switch to View mode programmatically by setting the GridWeb control\u0026amp;rsquo;s EditMode property to false.\nThe below example shows how to enable view mode programmatically\n\\\nEven in View …","date":-62135596800,"description":"","objectID":"0e0b0f807a57368fda2077a254855d42","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/enable+different+gridweb+modes/","title":"Enable Different GridWeb Modes"},{"content":"The GridWeb\u0026amp;rsquo;s Edit Box is a toolbar that is rendered at the top of control that you can use to see/enter or copy data/formula into cells. It also shows the cell\u0026amp;rsquo;s name which you are editing. After clicking the frame or when you start writing data or type an equal (=) symbol, the Edit Box will be activated.\nSetting the Edit Box of Aspose.Cells.GridWeb\nThe GridWeb control provides the ShowCellEditBox property to which developers can assign it to \u0026amp;ldquo;True\u0026amp;rdquo; to make the toolbar on. The default value of the attribute is False. When you set its value to \u0026amp;ldquo;True\u0026amp;rdquo;, the Edit Box will appear on the top of the GridWeb control.\nTo enable this feature, you need to import \u0026amp;ldquo;jquery.js\u0026amp;rdquo; file to your project and refer it in your .aspx page(s) to make it work. You may download the jQuery archive from https://jqueryui.com/download/all/ and put the library file(s) into some folder in the project and add reference to the library file via  tag in your .aspx web form as following. All the latest jQuery versions are OK.\nUntitled Page\r\r\r\\\n**GridWeb control with Edit Box **\nExample\n\\\nAttachments: Enable GridWeb EditBox-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"86d4a8c418939199a3d17e221557b4ff","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/enable+gridweb+editbox/","title":"Enable GridWeb EditBox"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Execute client side function on GridWeb page change\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes you need to execute your client side function when GridWeb page changes. Aspose.Cells.GridWeb provides the OnPageChangeClientFunction property for this purpose. Please set this property with client side function which you want to execute.\nExecute client side function on GridWeb page change\nThe following aspx markup explains how to make use of the OnPageChangeClientFunction property. It sets the property with the client side function named MyOnPageChange. Please note, this property is valid only if you have enabled paging i.e. EnablePaging=\u0026amp;quot;true\u0026amp;rdquo;. Now, whenever you will change the GridWeb page, it will call the client side function MyOnPageChange which prints the current page index on the console as shown in this screenshot.\nSample Code\nThis is the code of the client side function MyOnPageChange that will be executed because of setting OnPageChangeClientFunction =\u0026amp;quot;MyOnPageChange\u0026amp;rdquo; property in GridWeb. This is the complete aspx page markup.\nAttachments: Execute-client-side-function-on-GridWeb-page-change.png (image/png)\n","date":-62135596800,"description":"","objectID":"c1c51a77c7b50c1e9383cbd6e4fe7e79","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/execute+client+side+function+on+gridweb+page+change/","title":"Execute client side function on GridWeb page change"},{"content":"It is possible to create new, or manipulate existing Microsoft Excel files, on websites in GUI mode using Aspose.Cells.GridWeb control. The files can then be saved to Excel files. Aspose.Cells.GridWeb effectively serves as an online spreadsheet editor. This topic describes how to save grid content to Excel files.\n   Contents Summary\n1 Export Excel Files 1.1 Export as a File\n1.2 Export as a Stream\n |     Export Excel Files     Export as a File\nTo save the content of Aspose.Cells.GridWeb control as an Excel file:\n Add the Aspose.Cells.GridWeb control to your web form. Save your work as an Excel file at a specified path. Run the application.  If you don\u0026amp;rsquo;t know about how to add Aspose.Cells.GridWeb control to your web form then you should refer to Add GridWeb to Web Form\nWhen Aspose.Cells.GridWeb control is added to a windows form, the control is automatically instantiated and added to the form with a default size. You don\u0026amp;rsquo;t have to create an Aspose.Cells.GridWeb control object, all you have to do is drag and drop the control and start using it.\nThe code example below illustrates how to save grid content to an Excel file.\n\\\nIf your file system is NTFS, grant read/write access to the ASPNET or Everyone user accounts or you will get an access denied exception at runtime.\nThe above code snippet can be used in several ways. A common way is to add a button that saves the grid content to an Excel file when clicked. Aspose.Cells.GridWeb offers an easier approach for task. Aspose.Cells.GridWeb has an event called SaveCommand. The above code snippet can be added to the SaveCommand event\u0026amp;rsquo;s event handler which allow users to save their work by clicking the Aspose.Cells.GridWeb\u0026amp;rsquo;s in-built Save button.\n**The GridWeb\u0026amp;rsquo;s SaveCommand event **\n**Saving grid content to Excel by clicking GridWeb\u0026amp;rsquo;s in-built Save button **\nIf you are working in Visual Studio you can easily create the SaveCommand event\u0026amp;rsquo;s event handler by double-clicking the event in …","date":-62135596800,"description":"","objectID":"e7a63ddb7550011eba67cf1eb51a8693","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/export+microsoft+excel+file/","title":"Export Microsoft Excel File"},{"content":"Please use the Aspose.Cells.GridWeb.GridWeb.GetVersion() method to get the release or running version of Aspose.Cells.GridWeb. This version will help you to find the GridWeb version on run time through code.\n   Contents Summary\n1 Get the Release or Running Version of Aspose.Cells.GridWeb\n2 Find the version number of client side script file of GridWeb\n |     Get the Release or Running Version of Aspose.Cells.GridWeb     The following sample code finds the running version of Aspose.Cells.GridWeb and prints it on ASP.NET Label Control.\n\\\nFind the version number of client side script file of GridWeb\nYou can also find the version number of acwmain.js which is the client side script file of GridWeb. It contains a variable acw_version which holds the version number of acwmain.js file. You can print the version number of acwmain.js file on console like this\n\\\n","date":-62135596800,"description":"","objectID":"c414dbeaaa8245498800ba56c171c523","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/get+gridweb+release+or+version/","title":"Get GridWeb Release or Version"},{"content":"Like Aspose.Cells.GridDesktop, Aspose.Cells.GridWeb control can open and load Microsoft Excel files - complete with data, formatting, charts, images etc. - but in web applications. This topic explains how.\n   Contents Summary\n1 Import Excel Files 1.1 Import from File\n1.2 Import from Stream\n |     Import Excel Files     Import from File\nTo open an Excel file using Aspose.Cells.GridWeb control:\n Add the Aspose.Cells.GridWeb control to a web form. Import the Excel file by specifying the file path. Run the application.  If you don\u0026amp;rsquo;t know how to add the control to a web form, refer to Add GridWeb to Web Form.\nWhen Aspose.Cells.GridWeb control is added to a web form, the control is automatically instantiated and added to the form with a default size. You don\u0026amp;rsquo;t have to create an Aspose.Cells.GridWeb control object, all you have to do is drag and drop the control and start using it.\nHowever, to load the content from an Excel file to Aspose.Cells.GridWeb control, you have to call the ImportExcelFile method to specify the path of the Excel file. After that, Aspose.Cells.GridWeb control will automatically find the file from the specified path and display its contents. A code snippet that loads the contents of an Excel file is provided below.\n\\\nThe above code snippet can be used any way you want. For example, to load an Excel file automatically when a web form loads, add this code to the form\u0026amp;rsquo;s Page_Load event. If you want to open a file when a button is clicked, add a button to the web form and write the above code under the button\u0026amp;rsquo;s Click event.\n**An Excel file is loaded when a button is clicked **\nIf your file system is NTFS, you should grant read access permission to the ASPNET or Everyone user accounts or you will get an access denied exception at runtime.\nImport from Stream\nAs well as opening Excel files from file, the Aspose.Cells.GridWeb control can load Excel files from a stream. Using file as a stream is a better approach to prohibit any kind …","date":-62135596800,"description":"","objectID":"f6428b30e2f7dd70b4984641ecf4da02","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/import+microsoft+excel+file/","title":"Import Microsoft Excel File"},{"content":"There are times when developers need to print the GridWeb contents from a web page without saving the result as Microsoft Excel spreadsheet file. The Aspose.Cells.GridWeb control supports this feature via client side function.\nPrinting GridWeb\nIn order to print the contents, the Aspose.Cells.GridWeb for .NET has exposed the GridWeb.Print client-side function which can be used in a JavaScript call as demonstrated below.\n\\\n\\\nOnce the JavaScript function is in place, it can be triggered on any event of choice. Please check the following ASP.NET snippet which uses the above defined JavaScript function on a button click event.\n\\\n","date":-62135596800,"description":"","objectID":"28e3df9668150e16c36b2887079c5f42","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/print+gridweb/","title":"Print GridWeb"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Render Interactive Scrollbar in GridWeb\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells for GridWeb can render interactive scroll bar control inside the GridWeb worksheet. User can interact with the scroll bar like they do in Microsoft Excel. In order to create interactive scroll bar, you must add the links for jQuery and jQuery UI libraries as shown below.\n\r\r\rRender Interactive Scrollbar in GridWeb\nThe following sample code loads the sample Excel file containing the scroll bar as shown in the following screenshot. The other screenshots show how the GridWeb renders interactive scroll bar and displays the value of scroll bar in cell B3. Whenever you scroll the scroll bar, the value of cell B3 shows the resulting value.\nSample Code\n\u0026amp;lt;%@ Page Language=\u0026amp;quot;C#\u0026amp;rdquo; AutoEventWireup=\u0026amp;quot;true\u0026amp;rdquo; CodeFile=\u0026amp;quot;TestGridWeb.aspx.cs\u0026amp;rdquo; Inherits=\u0026amp;quot;TestGridWeb\u0026amp;rdquo; %\u0026amp;gt;\n\u0026amp;lt;%@ Register TagPrefix=\u0026amp;quot;acw\u0026amp;rdquo; Namespace=\u0026amp;quot;Aspose.Cells.GridWeb\u0026amp;rdquo; Assembly=\u0026amp;quot;Aspose.Cells.GridWeb\u0026amp;rdquo; %\u0026amp;gt;\n\\\n\r\r\\\nTest GridWeb\r\r\r\r\rGridWeb Version:\u0026amp;amp;nbsp \n\u0026amp;lt;asp:Label ID=\u0026amp;quot;lblVersion\u0026amp;rdquo; runat=\u0026amp;quot;server\u0026amp;rdquo; Text=\u0026amp;quot;Label\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;/asp:Label\u0026amp;gt;\n\n\r\u0026amp;lt;acw:GridWeb ID=\u0026amp;quot;GridWeb1\u0026amp;rdquo; runat=\u0026amp;quot;server\u0026amp;rdquo; XhtmlMode=\u0026amp;quot;True\u0026amp;rdquo; Height=\u0026amp;quot;504px\u0026amp;rdquo; Width=\u0026amp;quot;1119px\u0026amp;quot;\u0026amp;gt;\n\u0026amp;lt;/acw:GridWeb\u0026amp;gt;\n\r\r\r\r-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\nusing System;\nusing System.Collections;\nusing System.Configuration;\nusing System.Data;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Security;\nusing System.Web.UI;\nusing System.Web.UI.HtmlControls;\nusing System.Web.UI.WebControls;\nusing …","date":-62135596800,"description":"","objectID":"1b640bace056ffb96db7187bfcd715b7","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/render+interactive+scrollbar+in+gridweb/","title":"Render Interactive Scrollbar in GridWeb"},{"content":"Add GridWeb to Web Form, discussed resizing the Aspose.Cells.GridWeb control using WYSIWYG. This article explains how to do the same thing but at runtime using the Aspose.Cells.GridWeb API. It also explains how to resize the header bars of the Aspose.Cells.GridWeb control to make their data easier to read.\n   Contents Summary\n1 Changing Width \u0026amp;amp; Height of Aspose.Cells.GridWeb 1.1 Changing Width \u0026amp;amp; Height of Header Bar\n |     Changing Width \u0026amp;amp; Height of Aspose.Cells.GridWeb     Changing the width and height of Aspose.Cells.GridWeb control is a simple but important feature. The Aspose.Cells.GridWeb control is represented by the GridWeb class in the API. To resize the width and height of the GridWeb control, simply use its width and height properties.\nThe width and height of the control can be defined in pixels or points.\nThe output of the code snippet that follows is shown below.\n**Changed width and height of the GridWeb control **\n\\\nChanging Width \u0026amp;amp; Height of Header Bar\nAspose.Cells.GridWeb control contains two header bars as follows:\n Top header bar, this header bar represents columns as A , B , C , D etc. Left header bar, this header bar represents rows as 1 , 2 , 3 , 4 etc.  Both of these header bars are shown below.\n**Header bars **\nChange the height of the top header bar and the width of the left header bar using the GridWeb control\u0026amp;rsquo;s HeaderBarHeight and HeaderBarWidth properties respectively. The figure below shows the output of the code example that follows.\n**Changed header bar width and height **\n\\\nAttachments: Resizing Aspose.Cells.GridWeb and its Header Bar-001.png (image/png) Resizing Aspose.Cells.GridWeb and its Header Bar-002.png (image/png) Resizing Aspose.Cells.GridWeb and its Header Bar-003.png (image/png)\n","date":-62135596800,"description":"","objectID":"8a9cc409c874d4be5ce9823dec6b4c02","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/resize+gridweb+and+its+header+bar/","title":"Resize GridWeb and its Header Bar"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Setting Column Header Tip\n3 Sample Code\n ||      Possible Usage Scenarios      You might need to set tooltip for your custom column while creating the table in the worksheet. Aspose.Cells.GridWeb allows you to rename a column\u0026amp;rsquo;s caption and you may set tooltip to the column, so the users could easily understand what is the column for.\nSetting Column Header Tip\nA complete example is given below to demonstrate how to change columns\u0026amp;rsquo; captions and apply tooltip text. After executing the above example code, tooltip text would be popped out when you place the mouse cursor over the specified column\u0026amp;rsquo;s header as shown below.\nSample Code\nHere is the sample script of the ASPX Page.\nHere is the sample code of the ASPX Code Behind CS File.\nAttachments: set_column_header_tip1.png (image/png)\n","date":-62135596800,"description":"","objectID":"9ca52dcec65f02f19ce018e9f26e0317","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/set+column+header+tip/","title":"Set Column Header Tip"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Working of GridWeb when ASP.NET Session state mode is SQL Server\n3 Sample Web.Config Session State Settings\n4 Reference Article\n |     Possible Usage Scenarios     This article explains working of GridWeb when ASP.NET Session state mode is SQL Server.\nWorking of GridWeb when ASP.NET Session state mode is SQL Server\nIf you want to use SQL Server or StateServer to hold sessions, use GridWeb Session Mode. The GridWeb control now supports serializing its data to SQL Server or StateServer.\nYou will set the GridWeb.SessionMode to SessionMode.Session and use the following sample Web.Config settings. Please change the sessionState attributes as per your needs.\nSample Web.Config Session State Settings\n\nReference Article\n Enable Different GridWeb Modes  ","date":-62135596800,"description":"","objectID":"41247a4abc0d9e00c1b68e59574b867b","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/working+of+gridweb+when+asp.net+session+state+mode+is+sql+server/","title":"Working of GridWeb when ASP.NET Session state mode is SQL Server"},{"content":"Aspose.Cells.GridWeb contains three types of double-click events:\n CellDoubleClick, fired when a cell is double-clicked. ColumnDoubleClick, fired when a column header is double-clicked. RowDoubleClick, fired when a row header is double-clicked.  This topic discusses how to enable double-click events in Aspose.Cells.GridWeb. It also discusses creating event handlers for these events.\n   Contents Summary\n1 Enabling Double Click Events\n2 Handling Double Click Events 2.1 Double Click Cell\n2.2 Double Click Column Header\n2.3 Double Click Row Header\n |     Enabling Double Click Events     All types of double click events can be enabled client-side by setting the GridWeb control\u0026amp;rsquo;s EnableDoubleClickEvent property to true.\nBy default, the EnableDoubleClickEvent property is set to false. This means that double click events are not enabled by default. To implement such events, first enable the feature.\n\\\nOnce double-click events are enabled, it is possible to create event handlers for any double-click events. These event handlers perform specific tasks when a given double-click event is fired.\nHandling Double Click Events\nTo create an event handler in Visual Studio:\n Double-click an event in the Events list in the Properties pane.  For this example, we implemented event handlers for various double-click events.\nDouble Click Cell\nThe event handler for the CellDoubleClick event provides an argument of the CellEventArgs type, which provides the complete information of the cell that is double-clicked.\n\\\nDouble Click Column Header\nThe event handler for the ColumnDoubleClick event provides an argument of the RowColumnEventArgs type that provides the index number of the column for the header that was double-clicked and other information.\n\\\nDouble Click Row Header\nThe event handler for the RowDoubleClick event provides an argument of the RowColumnEventArgs type that provides the index number of the row for the header that was double-clicked and other related information.\n\\\n","date":-62135596800,"description":"","objectID":"26ab9ca16ad5e1543021fae5566e5074","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/working+with+gridweb+double+click+events/","title":"Working with GridWeb Double Click Events"},{"content":"All programmers must be familiar with events and their purpose. Events are used to send notifications of changes that may occur in a control or class. Aspose.Cells.GridWeb has several events that can be used to perform specific tasks when certain changes occur in the control.\nThis topic provides an introduction to all events supported by the Aspose.Cells.GridWeb control along with some details on how to handle these events.\n   Contents Summary\n1 Working with Grid Events 1.1 Introduction to Grid Events\n2 Handling Grid Events 2.1 Step 1: Selecting an Event of Aspose.Cells.GridWeb Control\n2.2 Step 2: Creating an Event Handler\n2.3 Step 3: Running Your Application\n      Working with Grid Events     Introduction to Grid Events\nAspose.Cells.GridWeb control supports several events that provide more control for performing operations when specific events are triggered in the control. A complete list of events supported by Aspose.Cells.GridWeb control can be found below.\nThis list doesn\u0026amp;rsquo;t include events inherited by Aspose.Cells.GridWeb from the Control class.\n   **Events ** **Description **     CellCommand Occurs when the command hyperlink of a cell is clicked. When this event is fired, its parameter e.Argument provides the command\u0026amp;rsquo;s name.   CellDoubleClick Occurs when the cell is double clicked.   CellError Occurs when a cell\u0026amp;rsquo;s input value has some error.   ColumnDeleted Occurs when a user deletes a column from a worksheet using client side menu.   ColumnDeleting Occurs when a user is trying to delete a column from a worksheet using client side menu.   ColumnDoubleClick Occurs when the column header is double clicked.   ColumnInserted Occurs when a user inserts a column into worksheet using client side menu.   CustomCommand Occurs when a user clicks a custom command button.   LoadCustomData Occurs when the control\u0026amp;rsquo;s EnableSession property is set to false and needs to load worksheet data. You may handle this event in sessionless mode to load worksheet …","date":-62135596800,"description":"","objectID":"33cca5425e31dc751f6fa00fe63f4384","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/working+with+gridweb+events/","title":"Working with GridWeb Events"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"f6eb5b82dea4a56ef1c50d2f811ea3d6","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridweb/","title":"Working with GridWeb"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Open Hyperlink in New or Existing Window\n3 Access Hyperlink object of the GridWeb Cell 3.1 Sample Code\n ||      Possible Usage Scenarios      You can check if cell contains hyperlink or not using the following two methods. These methods will return null if the cell does not contain a hyperlink and if it contains a hyperlink, it will return GridHyperlink object.\n GridHyperlinkCollection.GetHyperlink(GridCell cell) GridHyperlinkCollection.GetHyperlink(int row,int column)  Open Hyperlink in New or Existing Window\nIf your excel file contains hyperlink which links to some URL like http://wwww.aspose.com/ and you load it in GridWeb then the hyperlinks will be rendered with target attribute set to _blank. It means, when you will click the hyperlink in a GridWeb cell, it will open up in a new window instead of existing window. Please check the GridHyperlink.Target property in the following debug window. Besides, if you want to open the hyperlink in the existing window, then please set the GridHyperlink.Target to _self.\nAccess Hyperlink object of the GridWeb Cell\nThe following sample code accesses the hyperlink of cell A1. If cell A1 contains hyperlink then it will return GridHyperlink object, otherwise, it will return null.\nSample Code\nAttachments: gridweb-cell-link-in-debug-window.png (image/png)\n","date":-62135596800,"description":"","objectID":"8ab477b30382a752207554fe643882dc","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/access+hyperlink+object+of+the+gridweb+cell/","title":"Access Hyperlink object of the GridWeb Cell"},{"content":"This topic discusses cells, looking at Aspose.Cells.GridWeb\u0026amp;rsquo;s most basic feature: accessing cells.\n   Contents Summary\n1 Accessing Cells in a Worksheet 1.1 Using Cell Name\n1.2 Using Row \u0026amp;amp; Column Indices\n |     Accessing Cells in a Worksheet     Each worksheet contains a property by the name of Cells that is actually a collection of GridCell objects where a GridCell object represents a cell in Aspose.Cells.GridWeb. It is possible to access any cell using Aspose.Cells.GridWeb. There are two preferred methods, each of which is discussed below.\n\\\nUsing Cell Name\nAll cells have a unique name. For example, A1, A2, B1, B2 etc. Aspose.Cells.GridWeb allows developers to access any desired cell by using the cell name. Simply pass the cell name (as an index) to the Cells collection of the GridWorksheet.\n\\\n\\\nUsing Row \u0026amp;amp; Column Indices\nA cell can also be recognized by its location in terms of row and column indices. Just pass a cell\u0026amp;rsquo;s row and column indices to the Cells collection of the GridWorksheet. This approach is more faster than the above one.\n\\\n","date":-62135596800,"description":"","objectID":"63f612deaec98a8d1c4d1d06931fe902","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/access+worksheet+cells/","title":"Access Worksheet Cells"},{"content":"Access Worksheet Cells discussed accessing cells. This topic extends that discussion to show how to access and modify cell values using the Aspose.Cells.GridWeb API.\n   Contents Summary\n1 Accessing \u0026amp;amp; Modifying a Cell\u0026amp;rsquo;s Value 1.1 String Values\n1.2 All Types of Values\n |     Accessing \u0026amp;amp; Modifying a Cell\u0026amp;rsquo;s Value     String Values\nBefore accessing and modifying the value of a cell, you need to know how to access cells. For details about the different approaches for accessing cells, refer to Access Worksheet Cells.\nEach cell has a property named StringValue. Once a cell is accessed, developers can use the StringValue property to access the cells string value. To modify cell values, a special method PutValue is provided, which can be used to update the cell\u0026amp;rsquo;s string value.\n\\\nAll Types of Values\nPutValue method of a cell\u0026amp;rsquo;s object has 8 overloads available which can be used to modify any type of value (Boolean, int, double, DateTime and string) in a cell.\n\\\n\\\nThere is also an overloaded version of the PutValue method that can take any kind of value in string format and convert it to a proper data type automatically. To make it happen, pass the Boolean value true to another parameter of the PutValue method as shown below in the example.\n\\\n","date":-62135596800,"description":"","objectID":"282656fdc1b915636f4a7f4579529eb6","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/access+and+modify+cell+values/","title":"Access and Modify Cell Values"},{"content":"Aspose.Cells.GridWeb allows you to add Data Validation using the GridWorksheet.Validations.Add() method. Using this method, you have to specify the Cell Range. But if you want to create a Data Validation in a single GridCell then you can do it directly using GridCell.CreateValidation() method. Similarly, you can remove Data Validation from a GridCell using the GridCell.RemoveValidation() method.\nCreate Data Validation in a GridCell of GridWeb\nThe following sample code creates a Data Validation in a cell B3. If you enter any value which is not between 20 and 40, the cell B3 will show Validation Error in the form of Red XXXX as shown in this screenshot.\n\\\nAttachments: Add Cell Data Validations-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"880ae3c62ffd79225151716c176c0779","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/add+cell+data+validations/","title":"Add Cell Data Validations"},{"content":"The most valuable feature offered by Aspose.Cells.GridWeb is support for formulas or functions. Aspose.Cells.GridWeb has its own Formula Engine that calculates the formulas in worksheets. Aspose.Cells.GridWeb supports both in-built and user-defined functions or formulas. This topic discusses adding formulas to cells using Aspose.Cells.GridWeb API in detail.\n   Contents Summary\n1 Adding Formulas to Cells 1.1 How to Add \u0026amp;amp; Calculate a Formula?\n1.2 Referencing Cells from Other Worksheets\n |     Adding Formulas to Cells     How to Add \u0026amp;amp; Calculate a Formula?\nIt is possible to add, access and modify formulas in cells by using a cell\u0026amp;rsquo;s Formula property. Aspose.Cells.GridWeb supports user-defined formulas ranging from simple to complex. However, a large number of built-in functions or formulas (similar to Microsoft Excel) are also supplied with Aspose.Cells.GridWeb. To see the full list of built-in functions, please refer to this list of supported functions.\nThe formula syntax should be compatible with Microsoft Excel syntax. For example, all formulas must begin with an equal sign (=).\nTo add a formula dynamically, Aspose.Cells.GridWeb will recognize it as a formula even if you don\u0026amp;rsquo;t use an = sign, but if end users working in the GUI, he must use the \u0026amp;ldquo;=\u0026amp;rdquo; sign.\n\\\n**Formula added to B3 cell but not calculated by GridWeb **\nIn the above screenshot, you can see that a formula has been added to B3 but has not been calculated yet. To calculate all formulas, call the GridWeb control\u0026amp;rsquo;s GridWorksheetCollection\u0026amp;rsquo;s CalculateFormula method after adding formulas to worksheets as shown below.\n\\\nUsers can also calculate formulas by clicking Submit.\n**Clicking Submit button of GridWeb **\nIMPORTANT: If a user clicks the Save or Undo buttons, or the sheet tabs, all formulas are calculated by GridWeb automatically.\n**Formula result after calculation **\nReferencing Cells from Other Worksheets\nUsing Aspose.Cells.GridWeb, it is possible to reference …","date":-62135596800,"description":"","objectID":"3f40b45894345355f78e5d4850f14541","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/add+cell+formulas/","title":"Add Cell Formulas"},{"content":"One of Aspose.Cells.GridWeb\u0026amp;rsquo;s advenced features is its apability to add input validation rules for cells. Developers can create different types of validation rules for cells to control and validate input values. This topic discusses the validation types supported and how to create them.\n   Contents Summary\n1 Types of Validations 1.1 List Validation\n1.2 Drop-down List Validation\n1.3 Custom Expression Validation\n1.4 Forcing Validation\n |     Types of Validations     Three types of validations can be applied using Aspose.Cells.GridWeb:\n List validation. Drop-down list validation. Custom expression validation.  Each is discussed in detail below.\nList Validation\nList validation allows users to provide cell input either by typing or selecting a value from a menu. To create a list validation for a cell:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access a worksheet. Access the cell to add validation to. Create the validation for the cell and specify the validation type as List. Add values for the list validation.  The example code adds a list validation to C1. When a user clicks the cell, a list appears.\n**Output: selecting a value from the list **\n\\\nDrop-down List Validation\nDrop-down list validation allows users to provide input for cells by selecting a value from a pre-defined list. To create a drop-down list validation:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access a worksheet. Access the cell to create the validation for. Create a validation for the cell and specify the type as DropDownList. Add values for the validation.  The example code adds a drop-down list validation to C1. When a user clicks the cell, a drop-down appears and users can select a value from it.\n**Selecting a value from a drop-down **\n\\\nCustom Expression Validation\nCustom expression Validation allows developers to write their own custom regular expressions to validate input values. To create a custom expression validation:\n Add the Aspose.Cells.GridWeb control to a Web …","date":-62135596800,"description":"","objectID":"75c3d295582540a81b4a7ebb375d6844","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/add+cell+validations/","title":"Add Cell Validations"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add Custom Server-side Function Validation\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes, you might require to implement data validation on server-side. Aspose.Cells.GridWeb allows you to add custom server-side data validation. You have to specify the cell range or area. You can also set client-side validation functions for callbacks with custom server side validation.\nAdd Custom Server-side Function Validation\nYou need to set the server validation class which implements the GridCustomServerValidation interface via GridValidation.ServerValidation attribute. You also need to set the client-side validation function (it should be written in JavaScript on client-side), this function is compulsory to validate the data on client end on callback. You can set the error message string via GridValidation.ErrorMessage and title via GridValidation.ErrorTitle properties for your needs. Please see a series of screenshots that show how it works (step by step) in a given scenario after executing the sample code below. In the example, you cannot update data in B2:C3 cells. When you try to edit those cells in the sheet, you will be prompted some error messages and previous value would be restored. You may open Console window (in your browser) to print cell\u0026amp;rsquo;s info/details for certain events. Sample Code\nAttachments: add_custom_server_side_function_validation1.png (image/png) add_custom_server_side_function_validation2.png (image/png) add_custom_server_side_function_validation3.png (image/png) add_custom_server_side_function_validation4.png (image/png) add_custom_server_side_function_validation5.png (image/png)\n","date":-62135596800,"description":"","objectID":"c2629b1e6c46d9a063db4657d08f98cc","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/add+custom+server-side+function+validation/","title":"Add Custom Server-side Function Validation"},{"content":"Aspose.Cells.GridWeb provides auto-filter and custom data filter features. These features give you a way to select only those items in a worksheet that you want to display in a list. Moreover, you can filter items in a list according to set criteria. Filter text, numbers or dates with the filtering features.\n   Contents Summary\n1 Working with Filters 1.1 Auto-filter\n1.2 Custom Data Filter\n |     Working with Filters     Use the worksheet AddAutoFilter method to enable auto-filter for a worksheet. This method accepts the row, start and end column indexes.\nTo enable custom filter, use the worksheet AddCustomFilter method which accepts the row index to which filter has to be applied and the custom filtering criteria.\nThe example below implements both auto- and custom data filters. In the example, the auto-filter feature is enabled and filtered rows are searched based on some criteria.\n**Input: the data list in the first worksheet **\n**Output: enable auto-filter feature **\nAuto-filter\nCustom Data Filter\n**Custom filtered data based on the criteria **\n\\\nAttachments: Filter Data-001.jpg (image/jpeg) Filter Data-002.jpg (image/jpeg) Filter Data-003.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"1130177394b00cba1c7fe85cc45bdf6a","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/filter+data/","title":"Filter Data"},{"content":"This topic provides a detailed discussion about how to format cells.\nIt covers formatting cells in GUI mode using the Aspose.Cells.GridWeb control\u0026amp;rsquo;s Style dialog. It also shows how to format cells programmatically. Different format settings like font, border and number format are discussed, illustrated with examples.\n   Contents Summary\n1 Formatting Cells Using the Style Dialog 1.1 Customizing Font Settings\n1.2 Customizing Border Settings\n1.3 Applying Settings\n2 Formatting Cells Using API 2.1 Setting Font\n2.2 Setting Borders 2.2.1 Single Cell\n2.2.2 Range of Cells\n2.3 Setting Number Formats\n |     Formatting Cells Using the Style Dialog     Cells can be formatted programmatically but the easiest way to format cells in the Aspose.Cells.GridWeb control in a WYSIWYG way, is using the Style dialog.\nTo use the Style dialog: Select a range of cells then right-click and select Format Cell.\n**Selecting Format Cell **\nThe Style dialog is displayed.\n**The Style dialog is used to format cells **\nThe Style dialog lets users format cells by customizing font and border settings.\nCustomizing Font Settings\nYou can customize the following font settings using the Style dialog:\n Font name, select a desired font from the list. Font style, apply a font style like bold, italic etc. Font size, select a font size in points. Underline, underline text. Strikethrough, apply a strikethrough effect to text. Horzontal alignment, select horizontal alignment. Vertical alignment, select vertical alignment. Font color, select a font color. Background, select a color for the background.  You can check the selected font settings in a small preview area.\n**Customized font settings **\nCustomizing Border Settings\nThe control also allows users to draw a border around cells by customizing border settings in the Style dialog.\nTo view border related options: Click Borders in the Style dialog. Border related options are displayed.\n**Border options in style dialog **\nThe following border options can be …","date":-62135596800,"description":"","objectID":"01061fec9e6379cbe1f586a537f214ca","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/format+cells/","title":"Format Cells"},{"content":"Aspose.Cells.GridWeb has a handy utility feature that lets you merge cells into one large cell. This topic describes how to merge cells programmatically.\n   Contents Summary\n1 Merging Cells\n2 Unmerging Cells\n |     Merging Cells     Merge multiple cells in a worksheet into a single cell by calling the Cells collection\u0026amp;rsquo;s Merge method. Specify the range of cells that to be merged when calling the Merge method.\nIf you merge multiple cells and each cell contains data, only the content of the top left cell in the range is retained after the merge. Data in the other cells is not lost. If you unmerge the cells, each cell recovers its data.\n**Four cells merged into one **\n\\\nUnmerging Cells\nTo unmerge cells, use the Cells collection\u0026amp;rsquo;s UnMerge method that takes same parameters as of the Merge method and performs the unmerging of cells.\n\\\nAttachments: Merge and Unmerge Cells-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"1c606a7f8d966a989513b95cc44e8eb2","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/merge+and+unmerge+cells/","title":"Merge and Unmerge Cells"},{"content":"This topic describes a few techniques for protecting cells. Using these techniques allows developers to restrict users from editing all or a selected range of cells in a worksheet.\n   Contents Summary\n1 Protecting Cells 1.1 Making All Cells Read Only\n1.2 Making All Cells Editable\n1.3 Making Selected Cells Read Only\n1.4 Making Selected Cells Editable\n |     Protecting Cells     Aspose.Cells.GridWeb provides a few different techniques for controlling the protection level on cells when the control is in Edit mode (the default mode). This protects cells from being modified by end users.\nMaking All Cells Read Only\nTo set all cells in a worksheet to read only, call the worksheet\u0026amp;rsquo;s SetAllCellsReadonly method.\n\\\nMaking All Cells Editable\nTo remove protection from all cells, call the worksheet\u0026amp;rsquo;s SetAllCellsEditable method. This method has the opposite effect to the SetAllCellsReadonly method.\n\\\nMaking Selected Cells Read Only\nTo protect only a range of cells:\n First make all cells editable by calling the SetAllCellsEditable method. Specify the range of cells that to protect by calling the worksheet\u0026amp;rsquo;s SetReadonlyRange method. This method takes the number of rows and columns to specify the range of cells.  \\\nMaking Selected Cells Editable\nTo un-protect a range of cells:\n Make all cells read only by calling the SetAllCellsReadonly method. Specify the range of cells that to be editable by calling the worksheet\u0026amp;rsquo;s SetEditableRange method. This method takes the number of rows and columns to specify the range of cells.  \\\n","date":-62135596800,"description":"","objectID":"aa6f9a811cdc74a1f4052f8ad4191b65","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/protect+cells/","title":"Protect Cells"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"65d9139a8dc0fabcfdd3d6bacdd9135e","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebcells/","title":"Working with GridWeb Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read the values of the GridWeb cells on Client Side\n3 Screenshot\n4 Sample Code\n5 Console Output\n ||      Possible Usage Scenarios      You can read the values of GridWeb cells on client side script using the gridwebinstance.getCellsArray() method. Once, you will call it, it will return the array of all the cells in active worksheet. You can then use the following methods to retrieve the value and other information of the cells.\n gridwebinstance.getCellName() gridwebinstance.getCellValueByCell() gridwebinstance.getCellRow() gridwebinstance.getCellColumn()  Read the values of the GridWeb cells on Client Side\nThe following sample code retrieves all the cells and then prints their name, value, row and column. You can see its console output at the bottom of this article. The following screenshot shows the console output of the sample code on Google Chrome.\nScreenshot\nSample Code\nPlease call the JavaScript function ReadGridWebCells() as shown in the above sample code like this.\nConsole Output\nThis is the console output of the above sample code.\n0:A1,value is:0 ,row:0,col:0\n1:B1,value is:4 ,row:0,col:1\n2:C1,value is:1 ,row:0,col:2\n3:D1,value is:1 ,row:0,col:3\n4:E1,value is:2 ,row:0,col:4\n5:F1,value is:6 ,row:0,col:5\n6:G1,value is:9 ,row:0,col:6\n7:H1,value is: ,row:0,col:7\n8:A2,value is:5 ,row:1,col:0\n9:B2,value is:9 ,row:1,col:1\n10:C2,value is:1 ,row:1,col:2\n11:D2,value is:5 ,row:1,col:3\n12:E2,value is:10 ,row:1,col:4\n13:F2,value is:9 ,row:1,col:5\n14:G2,value is:5 ,row:1,col:6\n15:H2,value is: ,row:1,col:7\n16:A3,value is:4 ,row:2,col:0\n17:B3,value is:9 ,row:2,col:1\n18:C3,value is:2 ,row:2,col:2\n19:D3,value is:9 ,row:2,col:3\n20:E3,value is:4 ,row:2,col:4\n21:F3,value is:5 ,row:2,col:5\n22:G3,value is:6 ,row:2,col:6\n23:H3,value is: ,row:2,col:7\n24:A4,value is:3 ,row:3,col:0\n25:B4,value is:9 ,row:3,col:1\n26:C4,value is:6 ,row:3,col:2\n27:D4,value is:4 ,row:3,col:3\n28:E4,value is:9 ,row:3,col:4\n29:F4,value is:5 ,row:3,col:5 …","date":-62135596800,"description":"","objectID":"6e6a1a1792d82b6a828054ffcf5eb877","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebclientsidescript/read+the+values+of+the+gridweb+cells+on+client+side/","title":"Read the values of the GridWeb cells on Client Side"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Using GridWeb’s resize method 2.1 Sample Code\n3 Making GridWeb resizable using resizable jquery ui feature 3.1 Sample Code\n |     Possible Usage Scenarios     Sometimes you want Aspose.Cells.GridWeb should resize itself in accordance with browser window. You might need GridWeb should always adjust its size (height, width) and compatible with browser window’s size. Aspose.Cells.GridWeb provides client-side resize() function for the purpose. Moreover, you can even make GridWeb control resizable in the browser window. For example, you may use the bottom right handle (via mouse) to customize its width/height in the window. You also need to include/specify jquery Javascript files to make it work in the page source in your project.\nUsing GridWeb’s resize method\nThe following code will check if there is resizing action taken place every 100 milliseconds. When there is no more resizing action, then it thinks the resize operation is finished now. We use a sample template file which is imported into GridWeb. We use client side code for resize the GridWeb. The screenshot shows that GridWeb resizes itself accordingly when resizing the browser window.\nSample Code\n\\\nMaking GridWeb resizable using resizable jquery ui feature\nThe following code will make GridWeb control resizable in the browser window. For example, you may use the bottom right handle to customize its size of GridWeb in the window. We use the same template file which is imported into GridWeb first. We use jquery scripts to make the GridWeb resizable. The screenshot shows that GridWeb has been resized using its bottom right handle in the browser window.\nSample Code\nAttachments: resize_gridweb1.png (image/png) resize_gridweb2.png (image/png)\n","date":-62135596800,"description":"","objectID":"da6318946ebda8b399aa1791bda41640","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebclientsidescript/resize+gridweb+in+the+browser+window/","title":"Resize GridWeb in the browser window"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Using OnAjaxCallFinishedClientFunction of GridWeb\n3 Google Chrome Console Output\n4 FireFox Console Output\n5 Sample Code\n |     Possible Usage Scenarios     OnAjaxCallFinishedClientFunction is a client side function which is called when user copies some data to GridWeb worksheet. This function is helpful when bulk of cells are updated and you want to keep the track of those updated cells at client side (i.e. in web browsers like FireFox, Google Chrome etc.).\nUsing OnAjaxCallFinishedClientFunction of GridWeb\nThe following sample code explains how to make use of OnAjaxCallFinishedClientFunction client function. The screenshots show the console output in Google Chrome and FireFox when the code is executed. Once, you execute the code, please copy/paste some data spanning multiple cells inside the GridWeb worksheet and then check the Web Browser Console as shown in screenshots.\nGoogle Chrome Console Output\nFireFox Console Output\nSample Code\n//\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\n//\u0026amp;mdash;\u0026amp;mdash;TestGridWeb.aspx\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\n//\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\n//\n\u0026amp;lt;%@ Page Language=\u0026amp;quot;C#\u0026amp;rdquo; AutoEventWireup=\u0026amp;quot;true\u0026amp;rdquo; CodeFile=\u0026amp;quot;TestGridWeb.aspx.cs\u0026amp;rdquo; Inherits=\u0026amp;quot;TestGridWeb\u0026amp;rdquo; %\u0026amp;gt;\n\u0026amp;lt;%@ Register TagPrefix=\u0026amp;quot;acw\u0026amp;rdquo; Namespace=\u0026amp;quot;Aspose.Cells.GridWeb\u0026amp;rdquo; Assembly=\u0026amp;quot;Aspose.Cells.GridWeb\u0026amp;rdquo; %\u0026amp;gt;\nTest GridWeb\r\\\rvar updateCells = new Array();\r\\\rfunction TestAjaxCallFinish()\r{\rfor (var i = 0; i \r\r\r\rGridWeb Version:\u0026amp;amp;nbsp \n\u0026amp;lt;asp:Label ID=\u0026amp;quot;lblVersion\u0026amp;rdquo; runat=\u0026amp;quot;server\u0026amp;rdquo; Text=\u0026amp;quot;Label\u0026amp;quot;\u0026amp;gt;\u0026amp;lt;/asp:Label\u0026amp;gt;\n\n\r\u0026amp;lt;acw:GridWeb ID=\u0026amp;quot;GridWeb1\u0026amp;rdquo; runat=\u0026amp;quot;server\u0026amp;rdquo; XhtmlMode=\u0026amp;quot;True\u0026amp;rdquo; …","date":-62135596800,"description":"","objectID":"b901633a8daabab25d0d29cce2c7f98f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebclientsidescript/using+onajaxcallfinishedclientfunction+of+gridweb/","title":"Using OnAjaxCallFinishedClientFunction of GridWeb"},{"content":"Developers can write client-side scripts for the Aspose.Cells.GridWeb control. This means that it is possible to invoke a JavaScript function client-side to perform a specific task related to the GridWeb control. For example, developers can write JavaScript functions to submit GridWeb data to a server or show an alert message when a validation error occurs etc.\nThis topic explains this feature with the help of examples.\n   Contents Summary\n1 Writing Client Side Scripts for Aspose.Cells.GridWeb 1.1 Basic Information\n1.2 Functions for Client-Side Scripting\n |     Writing Client Side Scripts for Aspose.Cells.GridWeb     Basic Information\nAspose.Cells.GridWeb provides two properties created specifically to support client-side scripts:\n OnSubmitClientFunction OnValidationErrorClientFunction  Create JavaScript functions in an ASPX page and assign the names of these functions to the OnSubmitClientFunction and OnValidationErrorClientFunction properties.\nThe JavaScript function that will be assigned to the OnSubmitClientFunction property must be defined properly as shown below:\nJavaScript\nfunction function_name(arg, cancelEdit)\n{\n//Add javascript code here\n}\n\\\nwhere the [arg] parameter represents the command generated by the control. The command can be \u0026amp;ldquo;Save\u0026amp;rdquo;, \u0026amp;ldquo;Submit\u0026amp;rdquo;, \u0026amp;ldquo;Undo\u0026amp;rdquo; etc. and the [cancelEdit] parameter is a Boolean value, which indicates that whether the user input is cancelled or not.\nAny JavaScript function assigned to the OnSubmitClientFunction property is called everytime by the GridWeb control before submitting GridWeb data to a server. Similarly, if a function is assigned to the OnValidationErrorClientFunction property then that function will be invoked every time a validation error occurs.\nFunctions for Client-Side Scripting\nAspose.Cells.GridWeb also exposes functions especially for client-side scripting. These functions can be used within JavaScript functions to gain more control of Aspose.Cells.GridWeb. These client-side …","date":-62135596800,"description":"","objectID":"d1a0e4fd378b038af597c28768464fab","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebclientsidescript/write+gridweb+client+side+script/","title":"Write GridWeb Client Side Script"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"e8b81a0b963867fbdd8059612a07ce59","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebclientsidescript/","title":"Working with GridWeb Client Side Script"},{"content":"Aspose.Cells.GridWeb component offers the means to copy row \u0026amp;amp; column while using the GridCells class. This article demonstrates the usage of APIs exposed by the Aspose.Cells.GridWeb to copy rows \u0026amp;amp; columns on GridWeb interface.\nThe GridCells.CopyRow, GridCells.CopyColumn, GridCells.CopyRows \u0026amp;amp; GridCells.CopyColumns methods will copy the contents, styling \u0026amp;amp; formulas from the source row \u0026amp;amp; column to destination.\n   Contents Summary\n1 Copying Rows \u0026amp;amp; Columns 1.1 Copying Single Row\n1.2 Copying Single Column\n1.3 Copying Multiple Rows\n1.4 Copying Multiple Columns\n |     Copying Rows \u0026amp;amp; Columns     If you are not already acquainted with Aspose.Cells.GridWeb component, we strongly suggest you to check the Introduction to Aspose.Cells.GridWeb and detailed article on How to add Aspose.Cells.GridWeb component in a WebForms application.\nCopying Single Row\nIn order to keep the example simple, the article uses an existing spreadsheet with one row and a simple formula that sums all the values in the row. Here is how the spreadsheet is displayed in the Aspose.Cells.GridWeb interface before copying the row.\nThe code snippet is simple as demonstrated below. It accesses GridCells object of active worksheet order to make a copy of the first row to the subsequent row.\n\\\nHere is how the Aspose.Cells.GridWeb looks after copy row operation.\nCopying Single Column\nThe following example uses an existing spreadsheet with one column and a simple formula that sums all the values in the column. Here is how the spreadsheet is displayed in the Aspose.Cells.GridWeb interface before copying the column.\nSimilar to the above example, the following code snippet accesses the GridCells object of active worksheet order to make a copy of the first column to the subsequent column.\n\\\n\\\nHere is how the Aspose.Cells.GridWeb looks after copy column operation.\nYou may use the GridCells.CopyRow \u0026amp;amp; GridCells.CopyColumn methods in loop to copy the source row \u0026amp;amp; column to multiple rows …","date":-62135596800,"description":"","objectID":"4e9e0673951cc87928cbb1a224783429","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/copy+gridweb+rows+and+columns/","title":"Copy GridWeb Rows and Columns"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create Comment object inside Cell\n3 Remove Comment object from Cell\n4 Get Comment object from Cell\n |     Possible Usage Scenarios     The following article explains how to create, remove and get GridCell comments inside the GridWeb worksheet. It is worth noting that GridWeb displays comment as Tooltip like MS-Excel when you hover mouse over the cell as shown in this screenshot.\nCreate Comment object inside Cell\nPlease use the GridCell.CreateComment method to create a comment object inside cell. The following sample code creates a sample comment in cell B4 of the first worksheet of GridWeb.\n//Access first worksheet of GridWeb\nGridWorksheet sheet = GridWeb1.WorkSheets[0];\n//Access cell B4\nGridCell cell = sheet.Cells[\u0026amp;ldquo;B4\u0026amp;rdquo;];\n//Create comment with these parameters\n//i.e. note, author, isvisible\ncell.CreateComment(\u0026amp;ldquo;This is a B4 note.\u0026amp;quot;, \u0026amp;ldquo;Peter\u0026amp;rdquo;, true);\nRemove Comment object from Cell\nPlease use the GridCell.RemoveComment method to remove a comment object from cell. The following sample code removes cell B4 comment inside the first worksheet of GridWeb.\n\\\n//Access first worksheet of GridWeb\nGridWorksheet sheet = GridWeb1.WorkSheets[0];\n//Access cell B4\nGridCell cell = sheet.Cells[\u0026amp;ldquo;B4\u0026amp;rdquo;];\n//Remove the comment object from this cell.\ncell.RemoveComment();\nGet Comment object from Cell\nPlease use the GridCell.GetComment() method to get comment object from cell. The following sample code gets the comment object from cell B4 and then accesses its various properties like Author, Note, Visibility etc.\n//Access first worksheet of GridWeb\nGridWorksheet sheet = GridWeb1.WorkSheets[0];\n//Access cell B4\nGridCell cell = sheet.Cells[\u0026amp;ldquo;B4\u0026amp;rdquo;];\n//Get comment of this cell\nGridComment gridComm = cell.GetComment();\n//Access its various properties\nstring strAuth = gridComm.Author;\nstring strNote = gridComm.Note;\nbool isVis = gridComm.IsVisible;\nAttachments: GridWeb displays comment as Excel …","date":-62135596800,"description":"","objectID":"d8972b7569392c39032f540910ba6f36","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/create+remove+and+get+gridcell+comments/","title":"Create Remove and Get GridCell Comments"},{"content":"Like Microsoft Excel, Aspose.Cells.GridWeb also uses standard headers or captions for rows (numbers like 1, 2, 3 and so on) and columns (alphabetic like A, B, C and so on). Aspose.Cells.GridWeb also makes it possible to customize captions. This topic discuss customizing row and column headers at runtime using Aspose.Cells.GridWeb API.\n   Contents Summary\n1 Customizing Row Header\n2 Customizing Column Header\n |     Customizing Row Header     To customize the header or caption of a row:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access the worksheet in the GridWorksheetCollection. Set the caption of any specified row.  **The headers of row 1 and 2 has been customized **\n\\\nCustomizing Column Header\nTo customize the header or caption of a column:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access the worksheet in the GridWorksheetCollection. Set the caption of any specified column.  **The headers of column 1, 2 and 3 has been customized **\n\\\nAttachments: Customize Row and Column Headers-001.png (image/png) Customize Row and Column Headers-002.png (image/png) Customize Row and Column Headers-001.png (image/png) Customize Row and Column Headers-002.png (image/png) Customize Row and Column Headers-001.png (image/png) Customize Row and Column Headers-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"49d33ef0e0937c03deaacc80abba97b4","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/customize+row+and+column+headers/","title":"Customize Row and Column Headers"},{"content":"This topic demonstrates how to delete rows and columns from a worksheet using the Aspose.Cells.GridWeb API. With the help of this feature, developers can delete rows or columns at runtime.\n   Contents Summary\n1 Deleting Rows\n2 Deleting Columns\n |     Deleting Rows     To delete a row from your worksheet:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access the worksheet you are deleting rows from. Delete a row from the worksheet by specifying its row index.  \\\nDeleting Columns\nTo delete a column from your worksheet:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access the worksheet you want to delete columns from. Delete a column from the worksheet by specifying its column index.  \\\nYou can also use DeleteRows/DeleteColumns methods to delete multiple rows/columns into the worksheets.\n","date":-62135596800,"description":"","objectID":"59a85d2bc826c6bd6e0a4152015416a7","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/delete+rows+and+columns/","title":"Delete Rows and Columns"},{"content":"This topic explains how to freeze and unfreeze rows and columns. Freezing columns or rows allows users to keep the column headings or row titles visible while they scroll to other parts of the worksheet. This feature is very helpful when working with worksheets that contain large volumes of data. When users scroll only data is scrolled down and the headings stay in place, making the date easier to read. The freeze panes feature is only supported in Internet Explorer 6.0 or above.\n   Contents Summary\n1 Freezing Rows \u0026amp;amp; Columns\n2 Unfreezing Rows \u0026amp;amp; Columns\n |     Freezing Rows \u0026amp;amp; Columns     To freeze a specific number of rows and columns:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access a worksheet. Freeze a number of rows \u0026amp;amp; columns.  \\\nIt is also possible to freeze a specific number of rows \u0026amp;amp; columns using the interface. Right-click a cell where you want to freeze rows \u0026amp;amp; columns and select Freeze from the list.\nUnfreezing Rows \u0026amp;amp; Columns\nTo unfreeze rows and columns:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access a worksheet. Unfreeze rows \u0026amp;amp; columns.  \\\nAttachments: Freeze and Unfreeze Panes-001.png (image/png) Freeze and Unfreeze Panes-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"3082bb047efed5cbcef31e9ccf9a8409","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/freeze+and+unfreeze+panes/","title":"Freeze and Unfreeze Panes"},{"content":"Aspose.Cells.GridWeb can create an outline for your data. This lets you show and hide levels of detail by clicking the outline symbols \u0026amp;ldquo;+\u0026amp;rdquo; and \u0026amp;ldquo;-\u0026amp;rdquo; to display only the rows that provide summaries or headings for sections in a worksheet. You can use the symbols to see details under an individual summary or heading.\nWhen grouping rows, it is important to select only the detail rows that make up the group. Do not include the related summary row. For example, if row 6 contains totals for the data in row 3 through 5, select only row 3 through 5 to define the group. The Aspose.Cells.GridWeb control displays the show detail (+) and hide detail (-) symbols next to the row headers specifying the groups in the worksheet.\nAspose.Cells.GridWeb also allows you to create subtotals based on any field of data. A subtotal is not necessarily a sum: It can be an average, count, minimum, maximum or other statistical calculation.\nThis topic discusses grouping rows and creating subtotals using the Aspose.Cells.GridWeb API. Developers can group rows with any nesting level and create subtotals easily.\n   Contents Summary\n1 Grouping Rows 1.1 Nesting Grouped Rows\n1.2 Internal Process: How does the Control Work?\n2 Ungroup Rows\n3 Creating Subtotal 3.1 Parameters List\n3.2 Summary Functions List\n4 Removing Subtotal\n5 About the SUBTOTAL function\n |     Grouping Rows     To group a specific number of rows:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access a worksheet. Select the desired number of cells in rows. Group the rows.  When the rows are grouped, an expand/collapse button is displayed at the top of the rows\u0026amp;rsquo; Summary Line. You may change the direction setting. The WebWorksheet.IsSummaryRowBelow property is a Boolean property. Set it to false (default) and the summary row will be above the detail rows. Set it to true and the summary row will be below the detail rows. Click the expand/collapse button to expand or collapse grouped rows.\nThe following …","date":-62135596800,"description":"","objectID":"5190e00c971d4d4841e2eedcf662b68c","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/group+rows+and+create+subtotal/","title":"Group Rows and Create Subtotal"},{"content":"Data filtering is probably the most widely used Excel feature that allows you to filter the data based on a specific criteria. Filtered data displays only the rows that meet the condition by hiding the rows that do not fulfill the criteria. Aspose.Cells.GridWeb component provides the ability to perform the data filtering using its interface. In order to extend its capabilities, Aspose.Cells.GridWeb component also provides two events that can serve as callback to the filtering mechanism done through the GridWeb UI.\nHandling Server Side Event on Applying Column Filter\nThere are two main events as detailed below.\n OnBeforeColumnFilter: Fires before the filter is going to be applied on a column. OnAfterColumnFilter: Fires after the filter has been applied on a column.  Here is the ASPX script of the Aspose.Cells.GridWeb component to add and assign the aforementioned events.\n\\\n\\\nThese events can be used to get useful information about the filtering process such as column index and value on which filter has to be applied. Following is the snippet demonstrating the usage of OnBeforeColumnFilter event to retrieve the column index and value which user has selected on GridWeb UI for filtering.\n\\\nOn the other hand, if the requirement is to get number of filtered rows after the filter has been applied then you can use the OnAfterColumnFilter event as demonstrated below.\n\\\nCheck introduction to all Working with GridWeb Events along with some details on how to handle these event.\n","date":-62135596800,"description":"","objectID":"f3ae080c752ec0a69eac7ca76a1940a4","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/handle+column+filter+server+side+events/","title":"Handle Column Filter Server Side Events"},{"content":"This topic explains how to insert new rows and columns into a worksheet using the Aspose.Cells.GridWeb API. Rows or columns can be inserted at any position in the worksheet.\n   Contents Summary\n1 Inserting Rows\n2 Inserting Columns\n |     Inserting Rows     To insert a row at any position in a worksheet:\n Add the Aspose.Cells.GridWeb control to the Web Form. Access the worksheet you\u0026amp;rsquo;re adding rows to. Insert a row by specifying a row index where the row would be inserted.  \\\nInserting Columns\nTo insert a column at any position in a worksheet:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access the worksheet you\u0026amp;rsquo;re adding columns to. Insert a column by specifying the column index where the column would be inserted.  \\\nYou can also use InsertRows/InsertColumns methods to insert multiple rows/columns into the worksheets accordingly.\n","date":-62135596800,"description":"","objectID":"81af3b6ff7a54692d71e5a39653078ff","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/insert+rows+and+columns/","title":"Insert Rows and Columns"},{"content":"This topic discusses a few techniques for protecting cells in rows and columns from any kind of action performed by end users. Developers can implement this protection using two techniques: by making cells in rows and columns read only, or by restricting the Aspose.Cells.GridWeb\u0026amp;rsquo;s context menu options. Both of these techniques are discussed below with the help of examples.\n   Contents Summary\n1 Protecting Cells in Rows \u0026amp;amp; Columns 1.1 Making Rows \u0026amp;amp; Columns Read Only\n1.2 Restricting Context Menu Options\n |     Protecting Cells in Rows \u0026amp;amp; Columns     Making Rows \u0026amp;amp; Columns Read Only\nOne way of protecting rows and columns in a worksheet is to make the cells read only. Then they cannot be deleted by end users.\nTo make rows and columns read only:\n Add the Aspose.Cells.GridWeb control to a Web Form. Access the GridWorksheet in the collection. Set your desired cells in rows or columns to read only.  \\\nRestricting Context Menu Options\nAspose.Cells.GridWeb provides a context menu that end users can use to perform operations on the control. The menu provides many options for manipulating cells, rows and columns.\n**Complete contextual options **\nIt is possible to restrict any kind of client side operations on rows and columns by restricting the options available in the context menu. It can be done by setting the EnableClientColumnOperations and EnableClientRowOperations properties of the GridWeb control to false. It is also possible to restrict users from freezing rows and columns by setting the GridWeb control\u0026amp;rsquo;s EnableClientFreeze property to false.\n**Context menu after restricting row \u0026amp;amp; column options **\n\\\nAttachments: Protect Rows and Columns-001.png (image/png) Protect Rows and Columns-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"12594bc17e692db1f2b7e00e82a0a16a","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/protect+rows+and+columns/","title":"Protect Rows and Columns"},{"content":"Sometimes cell values are wider that the cell they are in, or are on several lines. Such values are not fully visible to users unless they change the height and width of rows and columns. Aspose.Cells.GridWeb fully supports setting row heights and column width. This topic discusses these features in detail with the help of examples.\n   Contents Summary\n1 Working with Row Heights and Column Width 1.1 Setting Row Height\n1.2 Setting Column Width\n |     Working with Row Heights and Column Width     Setting Row Height\nTo set the height of a row:\n Add the Aspose.Cells.GridWeb control to your Web Form. Access the worksheet\u0026amp;rsquo;s Cells collection. Set the height of all cells in any specified row.  SetRowHeight and SetColumnWidth method of the Cells collection also has variants available to set row height and column width measurements in inches and pixels.\nSetting Column Width\nTo set the width of a column:\n Add the Aspose.Cells.GridWeb control to your Web Form. Access the worksheet\u0026amp;rsquo;s Cells collection. Set the width of all cells in any specified column.  \\\nAttachments: Resize Rows and Columns-001.png (image/png) Resize Rows and Columns-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"aacea70511ca06048a33b525fdcea87a","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/resize+rows+and+columns/","title":"Resize Rows and Columns"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"a522684f9b48f21b83ef5ee465ff711e","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebrowsandcolumns/","title":"Working with GridWeb Rows and Columns"},{"content":"This topic discusses accessing worksheets in the Aspose.Cells.GridWeb control. We\u0026amp;rsquo;ll refer to them as \u0026amp;lsquo;web worksheets\u0026amp;rsquo; because of they belong to Aspose.Cells.GridWeb and are used in web applications.\n   Contents Summary\n1 Accessing a Worksheet 1.1 Using Sheet Index\n1.2 Using Sheet Name\n |     Accessing a Worksheet     All worksheets contained in Aspose.Cells.GridWeb, are stored in the GridWeb control\u0026amp;rsquo;s GridWorksheetCollection. There are two ways to access a worksheet: by its sheet index or by its sheet name.\nUsing Sheet Index\nThe code snippet below shows how to access a specific web worksheet from the GridWeb control\u0026amp;rsquo;s GridWorksheetCollection using the sheet index.\n\\\nUsing Sheet Name\nThe code snippet below shows how to access a web worksheet from the GridWeb control\u0026amp;rsquo;s GridWorksheetCollection collection using the sheet name.\n\\\n","date":-62135596800,"description":"","objectID":"45a9f1c7accb068d465a3f1ef76e13c8","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/access+worksheets/","title":"Access Worksheets"},{"content":"Worksheets are an integral part of Aspose.Cells.GridWeb. All data is managed and stored in the form of worksheets. Aspose.Cells.GridWeb allows developers to add one or more worksheets to the Aspose.Cells.GridWeb control. This topic shows simple approaches to adding worksheets to Aspose.Cells.GridWeb.\n   Contents Summary\n1 Adding a Worksheet 1.1 Without Specifying Sheet Name\n1.2 With Specified Sheet Name\n |     Adding a Worksheet     Without Specifying Sheet Name\nThe simplest way to add a worksheet to Aspose.Cells.GridWeb is to call the GridWorksheetCollection collection\u0026amp;rsquo;s Add method in the GridWeb control. This creates worksheets that use default names (that is Sheet1, Sheet2, Sheet3 and so on) and adds them to the GridWeb control.\n**Output: a worksheet with default name has been added to GridWeb **\n\\\nThe Add method returns the new worksheet\u0026amp;rsquo;s index which can be used to access the instance of this worksheet. For more details on how to access worksheets, read Access Worksheets.\nWith Specified Sheet Name\nTo add a worksheet with a specific name to the GridWeb control instead of using the default naming scheme, call an overloaded version of the Add method that takes the specified SheetName. For an instance, the example below adds a worksheet named Invoice.\n**Output: a worksheet with a specified name has been added to GridWeb **\n\\\nThe Add method accepting the worksheet name as string returns an instance of GridWorksheet.\nAttachments: Add Worksheets-001.png (image/png) Add Worksheets-002.png (image/png) Add Worksheets-001.png (image/png) Add Worksheets-002.png (image/png) Add Worksheets-001.png (image/png) Add Worksheets-002.png (image/png) Add Worksheets-001.png (image/png) Add Worksheets-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"18ddf603b3c7b2f2a7601333b573934d","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/add+worksheets/","title":"Add Worksheets"},{"content":"Normally, column and row labels are used to uniquely refer to cells. But you can create descriptive names to represent cells, ranges of cells, formulas, or constant values. The word Name may refer to a string of characters that represents a cell, range of cells, formula, or constant value. For example, use easy-to-understand names, such as Products, to refer to hard to understand ranges, such as Sales!C20:C30. Labels can be used in formulas that refer to data on the same worksheet; if you want to represent a range on another worksheet, you may use a name. Named ranges is one of the most powerful features of Microsoft Excel. Users can assign a name to a range and use that name in formulas. Aspose.Cells.GridWeb supports this feature.\nAdding/Referencing Named Ranges in Formulas\nThe GridWeb control provides two classes (GridName and GridNameCollection) for working with named ranges. The following code snippet will help you understand how to create the Named Range and access it in the formulas.\n\\\n","date":-62135596800,"description":"","objectID":"cbfb75d3c78566c215727478b9200b1c","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/add+and+reference+named+ranges/","title":"Add and Reference Named Ranges"},{"content":"The Microsoft .NET Framework offers many collection classes but sometimes they don\u0026amp;rsquo;t fulfill the development requirements so developers create custom collections, and may require to bind such custom collections with Aspose.Cells.GridWeb.\nBinding a Worksheet with a Custom Collection\nTo illustrate this feature, this article goes through how to create a sample application, step by step. First, create a custom collection and then use that collection to binding with a worksheet.\nStep 1: Creating a Custom Record\nBefore creating a custom collection, create a class to hold the custom records that will be stored in the collection. The purpose of this article is to give an idea of how to create your own custom collections and bind them with Aspose.Cells.GridWeb, so how you create the custom record is up to you.\nThe example below uses the MyCustomRecord class which contains five private fields and five public properties that control access to the private fields. Here is the structure of properties:\n The StringField1 property to read and write stringfield1 (string). The ReadonlyField2 property to only read stringfield2 (string). The DateField1 property to read and write datefield1 (DateTime). The IntField1 property to read and write intfield1 (integer). The DoubleField1 property to read and write doublefield1 (double).  C#\n//Creating a class that will act as record for the custom collection\npublic class MyCustomRecord\n{\n//Private data members\nprivate string stringfield1;\nprivate string stringfield2 = \u0026amp;ldquo;ABC\u0026amp;rdquo;;\nprivate DateTime datefield1;\nprivate int intfield1;\nprivate double doublefield1;\n//Creating a string property\npublic string StringField1\n{\nget { return stringfield1; }\nset { stringfield1 = value; }\n}\n//Creating a readonly string property\npublic string ReadonlyField2\n{\nget { return stringfield2; }\n}\n//Creating a DateTime property\npublic DateTime DateField1\n{\nget { return datefield1; }\nset { datefield1 = value; }\n}\n//Creating an int property\npublic int …","date":-62135596800,"description":"","objectID":"5f87ed1760bc7a74f2dc1205804fb39e","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/binding+worksheet+to+a+customized+collection+object+using+gridweb/","title":"Binding Worksheet to a Customized Collection Object using GridWeb"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Change the decimal separator from Numeric keypad\n3 Sample Code\n |     Possible Usage Scenarios     By default, Aspose.Cells.GridWeb displays numeric data accordingly based on the locale/regional settings on the machine. You can change the decimal separator from Numeric keypad programmatically using Aspose.Cells.GridWeb API. So, when a file is imported into GridWeb matrix or you input some numeric data (from the numeric keypad) into a new worksheet cell, it should have your desired decimal separator set visually. Change the decimal separator from Numeric keypad\nUsing the GridWorksheetCollection.NumberDecimalSeparator property, you may change the decimal separator from Numeric keypad programmatically. Please see the screenshots that show how it works\nSample Code\nPlease note, decimal separator change is only for users\u0026amp;rsquo; visual experience in GridWeb. When you edit and save your workbook, it will still store the numeric values (in the spreadsheet) as per your locale/regional decimal separator.\nAttachments: change_decimal_separator1.png (image/png) change_decimal_separator2.png (image/png)\n","date":-62135596800,"description":"","objectID":"5b1358ea4388745b29f6a73c24a456dc","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/change+the+decimal+separator+from+numeric+keypad/","title":"Change the decimal separator from Numeric keypad"},{"content":"Add Worksheets describes how to add new worksheets to Aspose.Cells.GridWeb. It\u0026amp;rsquo;s also possible to add a copy (or replica) of another worksheet to the Aspose.Cells.GridWeb control. This feature can be useful when identical or similar data in one worksheet is also required in another worksheet. When that\u0026amp;rsquo;s the case, it\u0026amp;rsquo;s easier to copy an existing worksheet and add it to Aspose.Cells.GridWeb as a new worksheet instead of creating it from scratch.\n   Contents Summary\n1 Copying a Worksheet 1.1 Using Sheet index\n1.2 Using Sheet Name\n |     Copying a Worksheet     Using Sheet index\nThe example code below shows how to add a copy of a worksheet to the GridWeb control by specifying the worksheet\u0026amp;rsquo;s index in the GridWorksheetCollection\u0026amp;rsquo;s AddCopy method.\n\\\nUsing Sheet Name\nThe example code below shows how to add a copy of a worksheet to the GridWeb control by specifying the worksheet\u0026amp;rsquo;s name in the GridWorksheetCollection\u0026amp;rsquo;s AddCopy method.\n\\\nThe AddCopy method returns the newly added worksheet\u0026amp;rsquo;s index which can be used to access the worksheet instance. For more details on how to access worksheets, read Access Worksheets.\n","date":-62135596800,"description":"","objectID":"9d6f4a0fc28247cac6fa4baa2668805f","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/copy+a+worksheet/","title":"Copy a Worksheet"},{"content":"Import DataView to GridWeb talked about importing the contents of a DataView to the Aspose.Cells.GridWeb control. This topic discusses exporting the data in from the Aspose.Cells.GridWeb control to a DataTable.\n   Contents Summary\n1 Exporting Worksheet Data 1.1 To a Specific DataTable\n1.2 To a New DataTable\n |     Exporting Worksheet Data     To a Specific DataTable\nTo export worksheet data to a specific DataTable object:\n Add the Aspose.Cells.GridWeb control to your Web Form. Create a specific DataTable object. Export the data of the selected cells to the specified DataTable object.  The example below creates a specific DataTable object with four columns. The worksheet data is exported starting from the first cell with all the rows and columns visible in the worksheet, to a DataTable object already created.\n\\\nTo a New DataTable\nSometimes, you don\u0026amp;rsquo;t want to create a DataTable object but simply need to export the worksheet data to a new DataTable object.\nThe example below tries a different way to show the use of the Export method. It takes the reference of the active worksheet and exports the complete data of that worksheet to a new DataTable object. The DataTable object can now be used in any way you want. For example, it is possible to bind the DataTable object to a GridView to view the data.\n\\\n","date":-62135596800,"description":"","objectID":"de55c84a9d30bd79a01ef16dcc1c3137","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/export+datatable+from+gridweb/","title":"Export DataTable from GridWeb"},{"content":"With the release of the Microsoft .NET Framework, a new way of storing data was introduced. Now DataSet, DataTable and DataView objects that store data in offline mode. These objects are very handy as data repositories. Using Aspose.Cells.GridWeb, it\u0026amp;rsquo;s possible to import data from either DataTable or DataView objects into worksheets. Aspose.Cells.GridWeb only supports importing data from a DataView. object but a DataTable object can also be used indirectly. Let\u0026amp;rsquo;s discuss this feature in detail.\nImporting Data from DataView\nImport data from a DataView object using the GridWorsheetCollection\u0026amp;rsquo;s ImportDataView method in the GridWeb control. Pass the DataView object that you want to import data from to the ImportDataView method. It\u0026amp;rsquo;s possible to specify column header and data styles during import.\nWhen data is imported from a DataView object, a new worksheet is created to hold the imported data. The worksheet is named the same as the DataTable.\n**Output: Data imported from a DataView into a new worksheet **\nThe widths of the columns are adjusted to show all the data they contain. When the data is imported from DataView, column widths are not adjusted automatically. Users need to adjust them by themselves. To adjust the column widths programmatically, refer to Resize Rows and Columns.\n\\\nAn overloaded version of the ImportDataView method allows developers to specify the name of the sheet that holds the imported data and a specific number of rows and columns to import from the DataView object.\nAttachments: Import DataView to GridWeb-001.png (image/png) Import DataView to GridWeb-001.png (image/png) Import DataView to GridWeb.png (image/png)\n","date":-62135596800,"description":"","objectID":"a1954851338422e9ba9251c7f8c385de","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/import+dataview+to+gridweb/","title":"Import DataView to GridWeb"},{"content":"This topic discusses adding, accessing and removing comments from worksheets. Comments are useful for adding notes or useful information for users who will work with the sheet. Developers have the flexibility to add comments to any cell of the worksheet.\n   Contents Summary\n1 Working with Comments 1.1 Adding Comments\n1.2 Accessing Comments\n1.3 Removing Comments\n |     Working with Comments     Adding Comments\nTo add a comment to worksheet, please follow the steps below:\n Add the Aspose.Cells.GridWeb control to the Web Form. Access the worksheet you\u0026amp;rsquo;re adding comments to. Add a comment to a cell. Set a note for the new comment.  **A comment has been added to the worksheet **\n\\\nAccessing Comments\nTo access a comment:\n Access the cell that contains the comment. Get the cell\u0026amp;rsquo;s reference. Pass the reference to the Comment collection\u0026amp;rsquo;s to access the comment. It\u0026amp;rsquo;s now possible to modify the comment\u0026amp;rsquo;s properties.  \\\nRemoving Comments\nTo remove a comment:\n Access the cell as explained above. Use the Comment collection\u0026amp;rsquo;s RemoveAt method to remove the comment.  \\\nAttachments: Manage Comments in Worksheet-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"e7ccf6a343b18dcfc97810d5a7e797ac","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/manage+comments+in+worksheet/","title":"Manage Comments in Worksheet"},{"content":"This topic discusses what types of hyperlinks are supported in Aspose.Cells.GridWeb and how to manage them programmatically. Hyperlinks can be used for either creating links to web URLs or to perform postback to a server.\n   Contents Summary\n1 Working with Hyperlinks 1.1 Types of Hyperlinks\n1.2 Adding Hyperlinks 1.2.1 URL Hyperlinks 1.2.1.1 Text Hyperlinks\n1.2.1.2 Image Hyperlinks\n1.2.2 Cell Command Hyperlinks 1.2.2.1 Event Handling of Cell Command Hyperlinks\n1.3 Accessing Hyperlinks\n1.4 Removing Hyperlinks\n |     Working with Hyperlinks     Types of Hyperlinks\nGenerally,the following hyperlinks are supported by Aspose.Cells.GridWeb:\n URL hyperlinks, hyperlinks that can be linked to web URLs. Text hyperlinks, URL hyperlinks applied to text. Image hyperlinks, URL hyperlinks applied to images. Cell command hyperlinks, hyperlinks that post data to a server. Such hyperlinks act more like a button that triggers a server-side event when clicked.  The below sections describe the use of all types of hyperlinks in detail. It also discusses how to access or remove links.\nAdding Hyperlinks\n\\\nURL Hyperlinks\nURL hyperlinks look more like simple hyperlinks that you normally see on websites. A URL hyperlink works like an anchor in a cell. Whenever it is clicked, it navigates to a web page or opens a new browser window.\nThere are different types of URL hyperlinks:\n Text hyperlinks. Image hyperlinks.  Developers can specify an image for the hyperlink. If an image isn\u0026amp;rsquo;t specified, a text hyperlink is created; else an image hyperlink is created.\n\\\nText Hyperlinks\nTo add a text hyperlink to a worksheet:\n Add the Aspose.Cells.GridWeb control to your Web Form. Access a worksheet. Add a hyperlink to a cell in the worksheet. Set the text that will be shown in the cell. Set the hyperlink\u0026amp;rsquo;s URL. Set the hyperlink\u0026amp;rsquo;s target,if desired. Set a tool tip, if desired.  NOTE: The hyperlink target can be set to _self, _top or _parent for opening web URLs in a new, the current or the …","date":-62135596800,"description":"","objectID":"ca03b5e215039908899da7f4bd985f5b","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/manage+hyperlinks+in+worksheet/","title":"Manage Hyperlinks in Worksheet"},{"content":"This topic provides information about how to remove worksheets from Microsoft Excel files using the Aspose.Cells.GridWeb API.It is possible to either remove a worksheet by specifying its sheet index or name.\n   Contents Summary\n1 Removing a Worksheet 1.1 Using Sheet Index\n1.2 Using Sheet Name\n |     Removing a Worksheet     Using Sheet Index\nThe code below shows how to remove a worksheet by specifying its sheet index in the GridWorksheetCollection\u0026amp;rsquo;s RemoveAt method.\n\\\nUsing Sheet Name\nThe code below shows how to remove a worksheet by specifying its sheet name in the GridWorksheetCollection\u0026amp;rsquo;s RemoveAt method.\n\\\nIt is also possible to remove a worksheet using its reference or instance. To do so, use the GridWorksheetCollection\u0026amp;rsquo;s Remove method. This approach is commonly used.\n","date":-62135596800,"description":"","objectID":"5345a751f0f76b3b289ec210851bd16c","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/remove+worksheets/","title":"Remove Worksheets"},{"content":"Renaming a worksheet can be very useful when working with many worksheets in Aspose.Cells.GridWeb and decide to change their names to make them more meaningful. For example, a worksheet containing an invoice can be renamed Invoice instead of Sheet1. This topic describes this simple but useful feature.\nRenaming a Worksheet\nAll worksheets contain a Name property that allows developers to access or modify worksheets\u0026amp;rsquo; names. To rename a worksheet:\n Access a worksheet from the GridWorksheetCollection. Rename the selected worksheet.  \\\nFor more details on how to access worksheets in Aspose.Cells.GridWeb, please refer to Access Worksheets.\nBefore executing the code, the worksheet has a default name, such as Sheet1.\n**Input file: a worksheet with a default name Sheet1 **\nAfter running the code, the worksheet is renamed Students.\n**Output: the worksheet is renamed Students **\n\\\nAttachments: Rename Worksheets-001.png (image/png) Rename Worksheets-002.png (image/png) Add Worksheets-001.png (image/png) Rename Worksheets-001.png (image/png) Rename Worksheets-002.png (image/png) Rename Worksheets-001.png (image/png) Rename Worksheets-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"5d4769d6b15dd7642369ca3e84ca8af5","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/rename+worksheets/","title":"Rename Worksheets"},{"content":"One of the fastest ways to make repetitive changes in a large spreadsheet is to use the find and replace feature. Find helps you locate a text string or data and replace substitutes it with a new value. Aspose.Cells.GridWeb provides this feature. It enables you to search for and replace with a specific text string or value in the worksheet client-side through a simple dialog. It even allows you to look for partial data.\n   Contents Summary\n1 Working with Find/Replace 1.1 The Find/Replace Dialog\n1.2 Using Find\n1.3 Searching Options\n1.4 Using Replace\n      Working with Find/Replace     The Find/Replace Dialog\nThere are two ways to open the Find/Replace dialog:\n  When the control is active, press CTRL+F to open the dialog, or press CTRL+R key to open the dialog with the Replace button enabled.\n  Move the cursor to the cell area in the worksheet, then right-click. Select Find or Replace from the menu.\n**Selecting Find **\n  A style dialog is displayed.\n**The Find/Replace dialog **\nUsing Find\nTo search:\n Open the Find/Replace dialog. Type the string you want to search for in the Find what field. Click Find Next to search.  The next cell that matches your find condition is highlighted.\nIf your search criterion is not found, a dialog is displayed to tell you.\nSearching Options\nThere are some search options that you can customize in the dialog. The table below lists them.\n   **No. ** **Option Name ** **Description **     1 Match case Indicates whether to use case sensitive in searching.   2 Match whole word Indicates whether to match whole word in searching.   3 Search up Indicates whether the search will be done from bottom to top.   4 Regular expression When checked, the control will treat the string in the Find what text box as a regular expression in searching process.   5 Find in Formulas/Values When the Formulas is selected, the control will match the formula or unformatted value of the cells if the formula or the unformatted value is present. When the Values is …","date":-62135596800,"description":"","objectID":"e6202f176d006656210dc0dc763530e5","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/search+and+replace+in+gridweb/","title":"Search and Replace in GridWeb"},{"content":"Sorting is a very valuable feature when it comes to data processing. Unsorted data is a pain for users when searching for specific information. Aspose.Cells.GridWeb supports powerful sorting features. This topic discusses sorting data using the Aspose.Cells.GridWeb API.\n   Contents Summary\n1 Sorting Data 1.1 From Top to Bottom\n1.2 From Left to Right\n |     Sorting Data     Aspose.Cells.GridWeb allows developers to sort data horizontally and vertically so that developers can sort data from top to bottom or left to right.\nFrom Top to Bottom\nTo sort data from top to bottom orientation:\n Add the Aspose.Cells.GridWeb control to your Web Form. Access the worksheet that you want to sort. Sort the range of data in any order (ascending or descending). Be sure to select top to bottom orientation.  The example below sorts data in four columns of a worksheet in descending order. Only twenty rows of the four columns are sorted in top to bottom orientation.\nBefore applying the code, the worksheet contains unordered data.\nAfter executing the code, the data is sorted in ascending order.\n\\\nFrom Left to Right\nTo sort data from left to right:\n Add the Aspose.Cells.GridWeb control to your Web Form. Access the worksheet that you want to sort. Sort the range of data in any order (ascending or descending). Be sure to select left to right.  The example below sorts data in four rows in ascending order. Only four rows of seven columns are sorted left to right.\nBefore applying the code, the worksheet contains unordered data.\nAfter executing the code, data is sorted in ascending order.\n\\\nIMPORTANT: The above examples demonstrate sorting data on the basis of one column (top to bottom) or row (left to right). Aspose.Cells.GridWeb can also sort data according to more than one column or row. To do so, pass an array of column or row indices to the Sort method. Hybrid data type sorting is also supported.\nAttachments: Sort Worksheet Data-001.png (image/png) Sort Worksheet Data-002.png (image/png) …","date":-62135596800,"description":"","objectID":"4e4476733e74aba41875726554e92649","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/sort+worksheet+data/","title":"Sort Worksheet Data"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Validate entire worksheet instead of only the updated cells\n |     Possible Usage Scenarios     By default, GridWeb validates only the updated cells and does not validate the entire worksheet. However, if you want to validate entire worksheet on client side before GridWeb posts request to server, then you should set the needValidateall variable inside the acwmain.js to true.\nValidate entire worksheet instead of only the updated cells\nThe following screenshot displays the needValidateall variable in acwmain.js. Please set it to true and now GridWeb will validate your entire worksheet not just the updated cells.\nAttachments: Validate-entire-worksheet-instead-of-updated-cells.png (image/png) Validate-entire-worksheet-instead-of-updated-cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"0d7ddef2e0a8a80ddeeb40bbd5a8a6ac","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/validate+entire+worksheet+instead+of+only+the+updated+cells/","title":"Validate entire worksheet instead of only the updated cells"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"0a6c6b1694cedafc550e94cf5ae6769e","permalink":"https://roywangt.github.io/cellsnet/developerguide/asposecellsgridweb/workingwithgridwebworksheets/","title":"Working with GridWeb Worksheets"},{"content":"   Contents Summary\n1 Get Text Width of Cell Value\n |     Get Text Width of Cell Value     Sometimes, the developers might need to calculate the width of the cell\u0026amp;rsquo;s value for arranging data in some layout. Aspose.Cells provides the CellsHelper.GetTextWidth method which allows developers to get the text width of the cell\u0026amp;rsquo;s value. The following sample code illustrates how to use CellsHelper.GetTextWidth to access the text width of the cell\u0026amp;rsquo;s value. The Source file used in the following code snippet is attached for your reference.\nSource File\n\\\nAttachments: GetTextWidthSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"bbf58966d88b9d0a61f5ecb4fbff9703","permalink":"https://roywangt.github.io/cellsnet/developerguide/cellshelper/get+text+width+of+cell+value/","title":"Get Text Width of Cell Value"},{"content":"   Contents Summary\n1 Introduction\n2 Merge Files Using Aspose.Cells\n |     Introduction     Aspose.Cells provides different ways for merging files. For simple files with data, formatting, and formulas, the Workbook.Combine() method can be used to combine several workbooks, and the Worksheet.Copy() method can be used to copy worksheets into a new workbook. These methods are easy to use and effective, but if you have a lot of files to merge, you might find that they take a lot of system resources. To avoid this, use the CellsHelper.MergeFiles static method, a more efficient way to merge several files.\nMerge Files Using Aspose.Cells\nThe following sample code illustrates how to merge large files using the CellsHelper.MergeFiles method. It takes two simple but large files, Book1.xls and Book2.xls. The files contain formatted data and formulas only.\nThe CellsHelper.MergeFiles method only supports merging data, styles, formatting, and formulas. Objects like charts, pictures, comments or other objects might not be merged using this method. Moreover, a cached file is used to store temporary data for the process.\n","date":-62135596800,"description":"","objectID":"fab4c815bf7410f8b01d814bca0ce336","permalink":"https://roywangt.github.io/cellsnet/developerguide/cellshelper/merge+files/","title":"Merge Files"},{"content":"   Contents Summary\n1 Get Cell Name from Row and Column Indices\n2 Get Row and Column Indices from Cell Name\n3 Create safe sheet names\n |     Get Cell Name from Row and Column Indices     It is possible to find a cell\u0026amp;rsquo;s name given the row and column index. This article explains how. Aspose.Cells provides the CellsHelper.CellIndexToName method which allows developers to get a cell\u0026amp;rsquo;s name if they provide the row and column index.\nUnlike Microsoft Excel, where row and column indices start from 1, Aspose.Cells starts counting row and column indices from 0.\nThe following sample code illustrates how to use CellsHelper.CellIndexToName to access the a cell\u0026amp;rsquo;s name given a known row and column index. The code generates the following output.\n\\\nGet Row and Column Indices from Cell Name\nIt is possible to find a row and column index of the cell from its name. This article explains how. Aspose.Cells provides the CellsHelper.CellNameToIndex method which allows developers to get a row and column index from the cell\u0026amp;rsquo;s name.\nUnlike Microsoft Excel, where row and column indices start from 1, Aspose.Cells starts counting row and column indices from 0.\nThe following sample code illustrates how to use CellsHelper.CellNameToIndex to get the row and column index from the cell\u0026amp;rsquo;s name. The code generates the following output.\n\\\nCreate safe sheet names\nSometimes there is a need of assigning the sheet name at runtime. In this scenario, there may be sheet names which may contain some additional characters like \u0026amp;lt;\u0026amp;gt;+(?”. There is a need to replace any such character, which is not allowed as a sheet name with some preset character provided by user. Similarly the length may increase to more than 31 characters which needs to be truncated. Apache POI provides certain features of creating safe names, hence similar feature is provided by Aspose.Cells to handle all these issues. Following sample code demonstrates this feature:\n\\\nOutput:\nthis is first name which is cre …","date":-62135596800,"description":"","objectID":"7dfc3e3b63b0353e69937bb20d376541","permalink":"https://roywangt.github.io/cellsnet/developerguide/cellshelper/names+and+indices/","title":"Names and Indices"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specifying Significant Digits to be stored in Excel file\n3 Sample Code\n ||      Possible Usage Scenarios      By default, Aspose.Cells stores 17 significant digits of double values inside the excel file, unlike MS-Excel which stores only 15 significant digits. You can change the default behavior of Aspose.Cells from 17 significant digits to 15 significant digits using the CellsHelper.SignificantDigits property.\nSpecifying Significant Digits to be stored in Excel file\nThe following sample code enforces Aspose.Cells to use 15 significant digits while storing double values inside the excel file. Please check the output excel file. Change its extension to .zip and unzip it and you will see, only 15 significant digits are stored inside the excel file. The following screenshot explains the effect of CellsHelper.SignificantDigits property on the output excel file.\nSample Code\nAttachments: out_SignificantDigits.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Illustration-of-CellsHelper.SignificantDigits.png (image/png)\n","date":-62135596800,"description":"","objectID":"3a165923ed5cbe7b96a012ad5d5a2695","permalink":"https://roywangt.github.io/cellsnet/developerguide/cellshelper/specifying+significant+digits+to+be+stored+in+excel+file/","title":"Specifying Significant Digits to be Stored in Excel File"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Using CustomImplementationFactory to create custom implementation of Memory Stream\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells has provided an API named CellsHelper.CustomImplementationFactory which enables the user to provide custom implementation such as using Recyclable memory implementation instead of the default MemoryStream.\nUsing CustomImplementationFactory to create custom implementation of Memory Stream\nThe following sample code illustrates how to make use of CellsHelper.CustomImplementationFactory in your program. Sometimes, there is enough memory in your system but the memory is not contiguous. Memory Stream objects use contiguous memory but you can provide the implementation of Memory Stream in such a way that it uses the non-contiguous memory instead,\nSample Code\n","date":-62135596800,"description":"","objectID":"1c3ab9d6e83d77ef57fc2a2c8ee350c9","permalink":"https://roywangt.github.io/cellsnet/developerguide/cellshelper/using+customimplementationfactory+to+create+custom+implementation+of+memory+stream/","title":"Using CustomImplementationFactory to create custom implementation of Memory Stream"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"40b8801e2e98007e94067c4781a5ea96","permalink":"https://roywangt.github.io/cellsnet/developerguide/cellshelper/","title":"Cells Helper"},{"content":"   Contents Summary\n1 Change Tick Label Direction 1.1 Source file image\n1.2 Output file image\n2 Sample Code\n |     Change Tick Label Direction     Aspose.Cells provides you with the ability to change the chart tick label direction by using the TickLabels.DirectionType property. The TickLabels.DirectionType property accepts the ChartTextDirectionType enumeration value. The ChartTextDirectionType enumeration provides the following members\n Horizontal Vertical Rotate90 Rotate270 Stacked  The following image compares the source and output files\nSource file image\nOutput file image\nThe following code snippet changes the tick label direction from Rotate90 to Horizontal.\nSample Code\nThe source and output files can be downloaded from the following links.\nSource File\nOutput File\nAttachments: SampleChart.ods (application/vnd.oasis.opendocument.spreadsheet) SampleChangeTickLabelDirection.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputChangeChartDataLableDirectionToVertical.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputChangeChartDataLableDirection.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SourceChangeTickLabelDirection.jpg (image/jpeg) OutputChangeTickLabelDirection.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"a8f0d51affb3c30ac3b9996ad8e4f881","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/change+tick+label+direction/","title":"Change Tick Label Direction"},{"content":"   Contents Summary\n1 Creating Charts\n2 Rendering Charts 2.1 Rendering Charts to Images\n2.2 Rendering Chart to PDF\n3 Supported Chart Types for Rendering\n |     Creating Charts     Aspose.Cells APIs support to create a verity of Excel charts as detailed under the topic Creating \u0026amp;amp; Customizing Excel Charts. In order to demonstrate the usage of Aspose.Cells APIs to render the charts in image \u0026amp;amp; PDF format, we will create a chart of type Column as per the following snippet.\n\\\nRendering Charts\nAspose.Cells APIs support to convert the Excel Charts to images and PDF formats without requiring any additional tools or applications. In order to provide rendering support, the Chart class has exposed ToImage \u0026amp;amp; ToPdf methods with a verity of overloads to best suit the application requirements.\nRendering Charts to Images\nThe Chart.ToImage method has a verity of overloads to support simple as well as advanced rendering. If the application requirement is to render the chart in its default dimensions, we suggest you use the Chart.ToImage method as follow.\n\\\n\\\nIt is also possible to render the charts to images with advanced settings. Aspose.Cells APIs have exposed an overload version of Chart.ToImage method that could accept an instance of ImageOrPrintOptions, while allowing to specify parameters such as resolution, smoothing mode, image format and so on.\n\\\nRendering Chart to PDF\nIn order to render the chart to PDF format, the Aspose.Cells APIs have exposed the Chart.ToPdf method with the ability to store the resultant PDF on disc path or Stream.\n\\\nSupported Chart Types for Rendering\nThere are a few chart types that are currently not supported for rendering. Such chart types contain N in the Supported column of the below table.\n   Chart type Chart sub-type Supported     Column Column Y   |ColumnStacked Y    |Column100PercentStacked Y    |Column3DClustered Y    |Column3DStacked Y    |Column3D100PercentStacked Y    |Column3D Y    Bar Bar Y   |BarStacked Y …","date":-62135596800,"description":"","objectID":"1da5104cfca1744d76e3763bb8628926","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/chart+rendering/","title":"Chart Rendering"},{"content":"   Contents Summary\n1 Introduction\n2 Chart Types 2.1 Standard Types 2.1.1 Column Charts\n2.1.2 Bar Charts\n2.1.3 Line Charts\n2.1.4 Pie Charts\n2.1.5 Scatter Charts\n2.1.6 Area Charts\n2.1.7 Doughnut Charts\n2.1.8 Surface 3D Charts\n2.1.9 Bubble Charts\n2.1.10 Stock Charts\n2.1.11 Cylinder Charts\n2.1.12 Cone Charts\n2.1.13 Pyramid Charts\n2.2 Custom Chart Types\n |     Introduction     A chart is a visual display of information. Aspose.Cells allows developers to visualize information in charts just as Microsoft Excel does. Presenting information in charts is always helpful to decision-makers for making quick and timely decisions. It\u0026amp;rsquo;s easier to quickly see comparisons, patterns, and trends in data with charts than raw numbers. Creating charts at runtime, based on the data in a spreadsheet, is one of Aspose.Cells\u0026amp;rsquo; most powerful feature.\nChart Types\nAspose.Cells supports almost all chart types supported in Microsoft Excel. Charts are categorized into two major categories:\n Standard types Custom types  Standard Types\nStandard charts are those normally used with standard formatting:\n Column Bar Line Pie Scatter Area Doughnut Radar Surface 3D Bubble Stock Cylinder Cone Pyramid  Column Charts\nColumn charts use vertical bars (called columns) to display different values of one or more data items. Column charts are mostly used to compare values across different categories. They are ideal for showing variations in an item\u0026amp;rsquo;s value over time, for example, when doing a budget analysis.\nThe following column charts are supported in Aspose.Cells:\n Clustered column chart Stacked column chart 100% stacked column chart 3D clustered column chart 3D stacked column chart 3D 100% stacked column chart 3D column chart  Bar Charts\nBar charts are almost the same type as column charts. The difference is that they use horizontal bars instead of vertical ones.\nThe following bar charts are supported in Aspose.Cells:\n Clustered bar chart Stacked bar chart 100% stacked bar chart 3D clustered …","date":-62135596800,"description":"","objectID":"6dabe901bf8cf534ec85e0473215d797","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/chart+types/","title":"Chart Types"},{"content":"Sometimes you need to insert drawing objects like labels, text boxes, pictures and so on into a chart. Aspose.Cells can add the controls to a chart at runtime.\n   Contents Summary\n1 Adding Label Control to the Chart\n2 Adding TextBox Control to the Chart\n3 Adding Picture to the Chart\n4 Adding Checkbox in the Chart\n |     Adding Label Control to the Chart     Labels provide a means for giving information to users about a spreadsheet\u0026amp;rsquo;s content. Aspose.Cells allows you to add and manipulate labels even into charts.\nThe Aspose.Cells.Drawing.ShapeCollection class provides a method named AddLabelInChart, used to add a label control to a chart. Below is a list of the parameters used for the method:\n top – the vertical offset of the label from the upper left corner in units of 1/4000 of the chart area. left – the vertical offset of the label from the upper left corner in units of 1/4000 of the chart area. height – the height of the label, in units of 1/4000 of the chart area. width – the width of label, in units of 1/4000 of the chart area.  The method returns Aspose.Cells.Drawing.Label object. The Label class represents a label in the chart. It has some important members:\n Text (property) – specifies a label\u0026amp;rsquo;s caption string. Fill (property) – specifies the fill color attributes.  The following example shows how to add a label to the chart. The example uses a designer file (exp_piechart.xls) which has a chart in it. We use this file to insert a label into the chart. Below is the original code for adding a label to the chart. The following output is generated when executing the code.\n\\\nAdding TextBox Control to the Chart\nOne way to highlight important information in a report is to use a text box. For example, enter text to highlight the company name or to indicate the geographic region with the highest sales. The Aspose.Cells.Drawing.ShapeCollection class provides a method named AddTextBoxInChart, which is used to add a text box control to a chart. Following is …","date":-62135596800,"description":"","objectID":"c6701ed40ba38ddb6baee2939652fe26","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/controls+in+charts/","title":"Controls in Charts"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create Chart PDF with Desired Page Size\n3 Sample Code\n |     Possible Usage Scenarios     You can create chart Pdf with your desired page size using Aspose.Cells and specify how you want to align the chart inside the page as top, bottom, center, left, right etc. Besides, the output chart can be created in stream or on disk.\nCreate Chart PDF with Desired Page Size\nPlease see the following sample code that loads the sample Excel file, accesses the first chart inside the worksheet and then converts it into output Pdf with desired page size. The following screenshot shows that the page size in the output Pdf is 7x7 as specified inside the code and chart is center aligned both horizontally as well as vertically. Sample Code\nAttachments: outputCreateChartPDFWithDesiredPageSize.pdf (application/pdf) sampleCreateChartPDFWithDesiredPageSize.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Create-Chart-PDF-With-Desired-Page-Size.png (image/png)\n","date":-62135596800,"description":"","objectID":"7d4f3e58988f430af0d95d704da43dd1","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/create+chart+pdf+with+desired+page+size/","title":"Create Chart PDF with Desired Page Size"},{"content":"It is possible to add a variety of charts to spreadsheets with Aspose.Cells. Aspose.Cells provides many flexible charting objects. This topic discusses Aspose.Cells\u0026amp;rsquo; charting objects.\n   Contents Summary\n1 Creating Charts 1.1 Things to Know Before Creating a Chart 1.1.1 Charting Objects\n1.1.2 Using Charting Objects\n1.2 Create Chart Using Aspose.Cells 1.2.1 Pyramid Chart\n1.2.2 Line Chart\n1.2.3 Bubble Chart\n1.2.4 Line with Data Marker Chart\n2 Creating Custom Charts\n |     Creating Charts     Things to Know Before Creating a Chart\nBefore creating charts it\u0026amp;rsquo;s important to understand some basic concepts that are helpful when creating charts using Aspose.Cells.\nCharting Objects\nAspose.Cells provides a special set of classes in the Aspose.Cells.Charts namespace used to create the charts supported by Aspose.Cells. These classes are used to create charting objects, which act as the chart building blocks. The charting objects are listed below:\n Series, a single data series in a chart. Axis, a chart\u0026amp;rsquo;s axis. Chart, a single Excel chart. ChartArea, the chart area in the worksheet. ChartDataTable, a chart data table. ChartFrame, the frame object in a chart. ChartPoint, a single point in a series in a chart. ChartPointCollection, a collection that contains all the points in one series. Charts, a collection of Chart objects. DataLabels, a collection of all the DataLabel objects for the specified series. FillFormat, fill format for a shape. Floor, the floor of a 3D chart. Legend, the chart legend. Line, the chart line. SeriesCollection, a collection of Series objects. TickLabels, the tick mark labels associated with tick marks on a chart axis. Title, the title of a chart or axis. Trendline, a trendline in a chart. TrendlineCollection, a collection of all Trendline objects for the specified data series. Walls, the walls of a 3D chart.  Using Charting Objects\nAs mentioned above, all charting objects are instances of their respective classes and provide specific …","date":-62135596800,"description":"","objectID":"199c11e077875df778afadd7096b4815","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/creating+and+customizing+charts/","title":"Creating and Customizing Charts"},{"content":"   Contents Summary\n1 Setting Chart Data 1.1 Chart Data\n1.2 Category Data\n |     In our previous topics, we have already provided many examples to demonstrate that how can you set a data source for your chart but in this topic, we are going to provide more details about the types of data that can be set for a chart.     Setting Chart Data\nThere are two types of data to deal with while working on charts using Aspose.Cells as follows:\n Chart data. Category data.  Chart Data\nChart data is the data that we use as a data source to build our charts. We can add a range of the cells (containing chart data) by calling the SeriesCollection object\u0026amp;rsquo;s Add method.\n\\\nCategory Data\nCategory data is used for the labeling of chart data and can be added to SeriesCollection by using its CategoryData property. A complete example is given below to demonstrate the use of chart and category data. After executing the above example code, a column chart will be added to the worksheet as shown below.\n\\\n","date":-62135596800,"description":"","objectID":"19517bb2811354c99cc82ab59c399bd8","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/data+formatting+in+charts/","title":"Data Formatting in Charts"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find Type of X and Y Values of Points in Chart Series\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Sometime, you want to know the type of X and Y values of chart points in a series. Aspose.Cells provides ChartPoint.XValueType and ChartPoint.YValueType properties that can be used for this purpose. Please note, you will have to call Chart.Calculate() method before you could use these properties effectively.\nFind Type of X and Y Values of Points in Chart Series\nThe following sample code loads the sample Excel file and accesses the first chart inside the first worksheet. It then calls the Chart.Calculate() method and finds the type of X and Y values of first chart point and prints them on console. Please see the console output shown below for a reference.\nSample Code\nConsole Output\nX Value Type: IsString\nY Value Type: IsNumeric\nAttachments: sampleFindTypeOfXAndYValuesOfPoints.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"c369f7e6046c0f895f1d0bd223385a86","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/find+type+of+x+and+y+values+of+points+in+chart+series/","title":"Find Type of X and Y Values of Points in Chart Series"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Handle Automatic Units of Chart Axis like Microsoft Excel\n3 Sample Code\n |     Possible Usage Scenarios     Early versions of Aspose.Cells were not able to handle automatic units of the chart axis properly when the chart is rendered to image or PDF. Now, Aspose.Cells supports the handling of automatic units of the chart axis. There is no code change. Just convert your chart into image or PDF and it will render the chart axis just like Microsoft Excel renders it.\nHandle Automatic Units of Chart Axis like Microsoft Excel\nThe following sample code loads the sample Excel file and generates the output PDF chart. The screenshot shows the automatic units of chart axis in red rectangles and also compares the sample Excel file chart with the output PDF chart. Both are exactly similar.\nSample Code\nAttachments: outputHandleAutomaticAxisUnitsOfChart.pdf (application/pdf) Handle-Automatic-Axis-Units-Of-Chart.png (image/png) sampleHandleAutomaticAxisUnitsOfChart.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"9fe80c6bf335919f2a75b9549d0c075f","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/handle+automatic+units+of+chart+axis+like+microsoft+excel/","title":"Handle Automatic Units of Chart Axis like Microsoft Excel"},{"content":"   Contents Summary\n1 Chart Position and Size 1.1 Controlling Chart Position and Size\n2 Manipulating Designer Charts 2.1 Manipulating Designer Charts in Template Files 2.1.1 Creating a Chart\n2.1.2 Manipulating the Chart\n2.1.3 Manipulating a Line Chart in the Designer Template\n |     Chart Position and Size     Sometimes, you want to change the position or size of the new or existing chart inside the worksheet. Aspose.Cells provides the Chart.ChartObject property to achieve this. You can use its sub-properties to re-size the chart with new height and width or re-position it with new X and Y coordinates.\nControlling Chart Position and Size\nTo change the chart\u0026amp;rsquo;s position (X, Y coordinates) or size (height, width), use these properties:\n Chart.ChartObject.X Chart.ChartObject.Y Chart.ChartObject.Height Chart.ChartObject.Width  The following example explains the usage of the above APIs, it loads the existing workbook which contains a chart in its first worksheet. Then it re-sizes and re-positions the chart using Aspose.Cells.\n\\\nManipulating Designer Charts\nThere are times when you need to manipulate or modify charts in designer template files. Aspose.Cells fully supports manipulating designer chart contents and elements. The data, chart contents, background image, and formattings can be preserved with accuracy.\nManipulating Designer Charts in Template Files\nTo manipulate designer charts in template files, use the chart related API. For example, you may use the Worksheet.Charts property to get the existing charts collection in the template file.\nCreating a Chart\nThe following example shows how to create a pie chart. We will manipulate this chart later on.\n\\\nManipulating the Chart\nThe following example shows how to manipulate the existing chart. In this example, we modify the chart created above. In the generated output, note that the color of the chart title has changed from blue to black, and \u0026amp;lsquo;England 30000\u0026amp;rsquo; has been changed to \u0026amp;lsquo;United Kingdom, …","date":-62135596800,"description":"","objectID":"039e618faa728a7492884e16143ac774","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/manipulate+position+size+and+designer+chart/","title":"Manipulate Position Size and Designer Chart"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read Axis Labels after Calculating the Chart\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     You can read axis labels of your chart after calculating its values using the Chart.Calculate() method. Please use the Axis.AxisLabels property for this purpose that will return the list of axis labels.\nRead Axis Labels after Calculating the Chart\nPlease see the following sample code that loads the sample Excel file and reads the category axis labels of the chart in the first worksheet. It then prints the values of the axis labels on the console. Please see the console output of the sample code given below for a reference.\nSample Code\nConsole Output\nCategory Axis Labels:\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;ndash;\nIran\nChina\nUSA\nBrazil\nEngland\nAttachments: sampleReadAxisLabelsAfterCalculatingTheChart.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"a0457ddab50f25d9acabac779db1b725","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/read+axis+labels+after+calculating+the+chart/","title":"Read Axis Labels after Calculating the Chart"},{"content":"   Contents Summary\n1 Read Chart Subtitle from ODS File 1.1 Sample Code\n1.2 Console Output\n |     Read Chart Subtitle from ODS File     Aspose.Cells provides you with the ability to read chart subtitles in ODS files by using the Chart.SubTitle property. The following sample code loads the sample ODS file and reads the chart subtitle using Chart.SubTitle property and prints it in the Console Window. Please see the console output of the code given below for reference.\nSample Code\nConsole Output\nChart Subtitle: Sample Chart Subtitle\nAttachments: SampleChart.ods (application/vnd.oasis.opendocument.spreadsheet)\n","date":-62135596800,"description":"","objectID":"1e753a499eade37d5560ef9f6feadcfa","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/read+chart+subtitle+from+ods+file/","title":"Read Chart Subtitle from ODS File"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Manipulate Excel 2016 Charts\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenarios      Aspose.Cells now supports the reading and manipulation of Microsoft Excel 2016 charts which are not present in Microsoft Excel 2013 or earlier versions.\nRead and Manipulate Excel 2016 Charts\nThe following sample code loads the source excel file which contains Excel 2016 charts in the first worksheet. It reads all charts one by one and changes its title as per its chart type. The following screenshot shows the source excel file before the execution of code. As you can see, chart title is same for all charts.\nThe following screenshot shows the output excel file after the execution of code. As you can see, the chart title is changed as per its chart type.\nSample Code\nConsole Output\nHere is the console output of the above sample code when executed with the provided source excel file.\nWaterfall\nTreemap\nSunburst\nHistogram\nBoxWhisker\nAttachments: excel2016Charts.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) excel-2016-charts.png (image/png) output-excel-2016-charts.png (image/png) out_excel2016Charts.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"9c519ceea067a9aa17d06b4f70a68a48","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/read+and+manipulate+excel+2016+charts/","title":"Read and Manipulate Excel 2016 Charts"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Set the Shape Type of Data Labels of Chart\n3 Sample Code\n |     Possible Usage Scenarios     You can change the shape type of data labels of the chart using the DataLabels.ShapeType property. It takes the value of DataLabelShapeType enumeration and changes the shape type of data labels accordingly. Some of its values are\nDataLabelShapeType.BentLineCallout\nDataLabelShapeType.DownArrowCallout\nDataLabelShapeType.Ellipse\nDataLabelShapeType.LineCallout\nDataLabelShapeType.Rect\netc.\nSet the Shape Type of Data Labels of Chart\nThe following sample code changes the shape type of data labels of the chart to DataLabelShapeType.WedgeEllipseCallout. Please see the sample Excel file used in this code and the output Excel file generated by it. The screenshot shows the effect of the code on sample Excel file. Sample Code\nAttachments: sampleSetShapeTypeOfDataLabelsOfChart.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSetShapeTypeOfDataLabelsOfChart.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Set-the-Shape-Type-of-Data-Labels-of-Chart.png (image/png)\n","date":-62135596800,"description":"","objectID":"20d11a46bacfc38477488f06abfe9351","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/set+the+shape+type+of+data+labels+of+chart/","title":"Set the Shape Type of Data Labels of Chart"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Set the Values Format Code of Chart Series\n3 Sample Code\n |     Possible Usage Scenarios     You can set the values format code of chart series using the Series.ValuesFormatCode property. This property is not only useful for the series which is based on the range inside the worksheet but also works well for the series created with an array of values.\nSet the Values Format Code of Chart Series\nThe following sample code adds a series in the empty chart which has no series before. It adds the series using the array of values. Once, it adds the series, it formats it with the code $#,##0 using the Series.ValuesFormatCode property and the number 10000 becomes $10,000. The screenshot shows the effect of code on the sample Excel file and output Excel file after execution.\nSample Code\nAttachments: sampleSeries_ValuesFormatCode.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Set-the-Values-Format-Code-of-Chart-Series.png (image/png) outputSeries_ValuesFormatCode.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"e0f7236b5c483afc837d94959598dbff","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/set+the+values+format+code+of+chart+series/","title":"Set the Values Format Code of Chart Series"},{"content":"   Contents Summary\n1 Setting Chart Appearance 1.1 Setting Chart Area\n1.2 Setting Chart Lines\n1.3 Applying Microsoft Excel 2007/2010 Themes to Charts\n1.4 Setting the Titles of Charts or Axes\n1.5 Working with Major Gridlines 1.5.1 Hiding Major Gridlines\n1.5.2 Changing Major Gridlines Settings\n |     Setting Chart Appearance     In How to Create a Chart we gave a brief introduction to the types of charts and charting objects offered by Aspose.Cells, and described how to create one. This article discusses how to customize the appearance of charts by setting their properties:\n Setting the chart area. Setting chart lines. Applying themes. Setting titles to charts and axes. Working with gridlines.  Setting Chart Area\nThere are different kinds of areas in a chart and Aspose.Cells provides the flexibility to modify the appearance of each area. Developers can apply different formatting settings on an area by changing its foreground color, background color, and fill format etc.\nIn the example given below, we have applied different formatting settings on different kinds of areas of a chart. These areas include:\n Plot area Chart area SeriesCollection area Area of a single point in a SeriesCollection  The following code snippet demonstrates how to set the chart area.\n\\\nSetting Chart Lines\nDevelopers can also apply different kinds of styles on the lines or data markers of the SeriesCollection. The following code snippet demonstrates how to set chart lines using Aspose.Cells API.\n\\\nApplying Microsoft Excel 2007/2010 Themes to Charts\nDevelopers can apply different Microsoft Excel themes/colors to SeriesCollection or other chart objects as shown below in the example.\n\\\nSetting the Titles of Charts or Axes\nYou can use Microsoft Excel to set the titles of a chart and its axes in a WYSIWYG environment. Aspose.Cells also allows developers to set the titles of a chart and its axes at runtime. All charts and their axes contain a Title property that can be used to set their titles as shown …","date":-62135596800,"description":"","objectID":"f97a5ec76e9e41311894e7c64b32a4fc","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/setting+chart+appearance/","title":"Setting Chart Appearance"},{"content":"   Contents Summary\n1 Using Sparklines 1.1 Sparklines in Microsoft Excel\n1.2 Sparklines using Aspose.Cells\n2 Setting 3D Format\n |     Using Sparklines     Microsoft Excel 2010 can analyze information in more ways than ever before. It allows users to track and highlight important data trends with new data analysis and visualization tools. Sparklines are mini-charts that you can place inside cells so that you can view data and chart on the same table. When sparklines are used properly, data analysis is quicker and more to the point. They also provide a simple view of information, avoiding over-crowded worksheets with a lot of busy charts.\nAspose.Cells provides an API for manipulating sparklines in spreadsheets.\nSparklines in Microsoft Excel\nTo insert sparklines in Microsoft Excel 2010:\n Select the cells where you want the sparklines to appear. To make them easy to view, select cells at the side of the data. Click Insert on the ribbon and then choose column in the Sparklines group. Select or enter the range of cells in the worksheet that contain the source data. The charts will appear.  Sparklines help you to see trends, for example, the win or loss record for a softball league. Sparklines can even sum up the entire season of each team in the league.\nSparklines using Aspose.Cells\nDevelopers can create, delete or read sparklines (in the template file) using the API provided by Aspose.Cells. The classes that manage sparklines are contained in the Aspose.Cells.Charts namespace so you need to import this namespace before using these features.\nBy adding custom graphics for a given data range, developers have the freedom to add different types of tiny charts to selected cell areas.\nThe example below demonstrates the Sparklines feature. The example shows how to:\n Open a simple template file. Read sparklines information for a worksheet. Add new sparklines for a given data range to a cell area. Save the Excel file to disk.  \\\nSetting 3D Format\nYou might need 3D charting styles …","date":-62135596800,"description":"","objectID":"3f739cf9b74bca6167a461c67a84233f","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/using+sparklines+and+settings+3d+format/","title":"Using Sparklines and Settings 3D Format"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"118a9af3d273a4f95bf83935c63a97c2","permalink":"https://roywangt.github.io/cellsnet/developerguide/charts/","title":"Charts"},{"content":"We know that all worksheets may contain data that is basically stored in cells (with which a worksheet is made up of). A cell is a basic part of a worksheet that is used to construct the whole worksheet as a sequence of rows and columns. Before we try to access data from a worksheet, we would need to get access to its cells. So, in this topic, we will discuss some basic approaches to access worksheet cells at runtime using Aspose.Cells.\n   Contents Summary\n1 Accessing Cells 1.1 Using Cell Name\n1.2 Using Row \u0026amp;amp; Column Index of the Cell\n1.3 Using Cell Index in Cells Collection\n2 Accessing Maximum Display Range of Worksheet\n |     Accessing Cells     Aspose.Cells provides a class, Workbook that represents an Excel file. The Workbook class contains a WorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet.\nWe can use Cells collection to access cells in a worksheet. Aspose.Cells provides three basic approaches to access cells in a worksheet:\n Using the cell name. Using a cell\u0026amp;rsquo;s row and column index. Using a cell index in the Cells collection  IMPORTANT: We have mentioned that the 3rd approach is the fastest and the 1st approach is the slowest one. The performance difference between the approaches is very small so don\u0026amp;rsquo;t worry about performance degradation, whichever approach you use.\nUsing Cell Name\nDevelopers can access any specific cell by passing its cell name to the Cells collection of the Worksheet class as an index.\nIf you create a blank worksheet at the start, the count of Cells collection is zero. When you use this approach to access a cell, it will check whether this cell exists in the collection or not. If yes, it returns the cell object in the collection otherwise, it creates a new Cell object, adds the object to the Cells collection and then returns the object. This approach is the …","date":-62135596800,"description":"","objectID":"e48116dc155e006bfbf464615c9b8574","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/accessing+cells+of+a+worksheet/","title":"Accessing Cells of a Worksheet"},{"content":"In Accessing Cells of a Worksheet, we discussed basic approaches for accessing cells in a worksheet. This article uses one of those approaches to add different types of data to cells.\n   Contents Summary\n1 Adding Data to Cells 1.1 Improving Efficiency\n2 Retrieving Data from Cells\n |     Adding Data to Cells     Aspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Each item in the Cells collection represents an object of the Cell class.\nAspose.Cells allows developers to add data to the cells in worksheets by calling the Cell class\u0026amp;rsquo; PutValue method. Aspose.Cells provides overloaded versions of the PutValue method that lets developers add different kinds of data to cells. Using these overloaded versions of the PutValue method, it is possible to add a Boolean, string, double, integer or date/time, etc. values to the cell.\n\\\nImproving Efficiency\nIf you use PutValue method to put a large amount of data to a worksheet, you should add values to the cells, first by rows and then by columns. This approach greatly improves the efficiency of your applications.\nRetrieving Data from Cells\nAspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to worksheets in the file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Each item in the Cells collection represents an object of the Cell class.\nThe Cell class provides several properties that allow developers to retrieve values from the cells according to their data types. These properties include:\n StringValue: returns the string value of the cell. DoubleValue: returns the double value of the cell. BoolValue: returns the boolean value of the cell. …","date":-62135596800,"description":"","objectID":"ac71bb9a520b12ee06e2de7d5a9238b7","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/add+and+retrieve+data/","title":"Add and Retrieve Data"},{"content":"Microsoft Excel 2007 and later versions (2010/2013/2016) provides some advanced features for conditional formatting. For example, it lets you apply cell shading, borders, colored icons, arrows, flags and font formatting, etc. which has become quite sophisticated.\n   Contents Summary\n1 Apply Advanced Conditional Formatting to Microsoft Excel Files 1.1 Compute the Color Chosen by Microsoft Excel for ColorScale Conditional Formatting\n ||      Apply Advanced Conditional Formatting to Microsoft Excel Files      Conditional formatting can:\n Add shaded data bars to graphically enhance the underlying numbers by embedding a simple bar chart in the cells. Automatically shade cells with color scales based on their relation to values in other cells in the range. The default settings shades the lowest value in red moving up to the highest value in green. Use icon sets in a similar way to color scales, but rather than shading the cells it adds small icons, such as arrows and traffic lights to the cells.  Aspose.Cells fully supports the conditional formatting provided by Microsoft Excel 2007 and later versions in XLSX format on cells at runtime. This example demonstrates an exercise for advanced conditional formatting types including IconSets, DataBars, Color Scales, TimePeriods, Top/Bottom and other rules with different sets of attributes.\n\\\nCompute the Color Chosen by Microsoft Excel for ColorScale Conditional Formatting\nAspose.Cells lets you calculate the color selected by Microsoft Excel when ColorScale conditional formatting is used in a template file. See the sample code below to learn how to compute the color selected by Microsoft Excel.\n\\\n","date":-62135596800,"description":"","objectID":"76aadccfe58d5c61b2b78c5c0eef5a9e","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/apply+advanced+conditional+formatting/","title":"Apply Advanced Conditional Formatting"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Apply Advanced Filter of Microsoft Excel to Display Records Meeting Complex Criteria\n3 Sample Code\n |     Possible Usage Scenarios     Microsoft Excel allows you to apply Advanced Filter on worksheet data to display records that meet complex criteria. You can apply Advanced Filter with Microsoft Excel via its Data \u0026amp;gt; Advanced command as shown in this screenshot.\nAspose.Cells also allows you to apply the Advanced Filter using the Worksheet.AdvancedFilter() method. Just like Microsoft Excel, it accepts the following parameters.\nisFilter\nIndicates whether filtering the list in place.\nlistRange\nThe list range.\ncriteriaRange\nThe criteria range.\ncopyTo\nThe range where copying data to.\nuniqueRecordOnly\nOnly displaying or copying unique rows.\nApply Advanced Filter of Microsoft Excel to Display Records Meeting Complex Criteria\nThe following sample code applies the advanced filter on the Sample Excel File and generates the Output Excel File. The screenshot shows both files for comparison. As you can see inside the screenshot, data has been filtered inside the output Excel file according to complex criteria.\nSample Code\nAttachments: Before-and-After-Advanced-Filtering.png (image/png) Microsoft-Excel-Advanced-Filtering-Interface.png (image/png) outputAdvancedFilter.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleAdvancedFilter.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"d956e9b091856170bc34ee4547431640","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/apply+advanced+filter+of+microsoft+excel+to+display+records+meeting+complex+criteria/","title":"Apply Advanced Filter of Microsoft Excel to Display Records Meeting Complex Criteria"},{"content":"   Contents Summary\n1 Adding Borders to Cells 1.1 Adding Borders to Cells 1.1.1 Adding Borders to a Cell\n1.1.2 Adding Borders to a Range of Cells\n2 Colors and Palette 2.1 Adding Custom Colors to Palette\n3 Colors and Background Patterns 3.1 Setting Colors and Background Patterns\n3.2 Important to Know\n |     Adding Borders to Cells     Microsoft Excel allows users to format cells by adding borders. The type of border depends on where it is added. For example, a top border is one added to the top position of a cell. Users can also modify the borders\u0026amp;rsquo; line style and color.\nWith Aspose.Cells, developers can add borders and customize what they look like in the same flexible way as in Microsoft Excel.\nAdding Borders to Cells\nAspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides the Cells collection. Each item in the Cells collection represents an object of the Cell class.\nAspose.Cells provides the GetStyle method in the Cell class. The SetStyle method is used to set a cell\u0026amp;rsquo;s formatting style. The Style class provides properties for adding borders to cells.\nAdding Borders to a Cell\nDevelopers can add borders to a cell by using the Style object\u0026amp;rsquo;s Borders collection. The border type is passed as an index to the Borders collection. All border types are pre-defined in the BorderType enumeration.\nBorder enumeration\n   Border Types Description     BottomBorder A bottom border line   DiagonalDown A diagonal line from top left to right bottom   DiagonalUp A diagonal line from bottom left to right top   LeftBorder A left border line   RightBorder A right border line   TopBorder A top border line   The Borders collection stores all borders. Each border in the Borders collection is represented by a Border object which provides two properties, Color and …","date":-62135596800,"description":"","objectID":"e7d749eb1b26c13b6e57dc7109c2fbb3","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/cells+formatting/","title":"Cells Formatting"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Change Cells Alignment and Keep Existing Formatting\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes, you want to change the alignment of multiple cells but also want to keep existing formatting. Aspose.Cells allows you to do it using the StyleFlag.Alignments property. If you will set it true, changes in alignment will take place otherwise not. Please note, StyleFlag object is passed as a parameter to Range.ApplyStyle() method which actually applies the formatting to a range of cells.\nChange Cells Alignment and Keep Existing Formatting\nThe following sample code loads the sample Excel file, creates the range and center aligns it horizontally and vertically and keeps the existing formatting intact. The following screenshot compares the sample Excel file and output Excel file and shows that all existing formatting of the cells is the same except that cells are now center aligned horizontally and vertically.\nSample Code\nAttachments: sampleChangeCellsAlignmentAndKeepExistingFormatting.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputChangeCellsAlignmentAndKeepExistingFormatting.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Change-Cells-Alignment-and-Keep-Existing-Formatting.png (image/png)\n","date":-62135596800,"description":"","objectID":"59057dc70418a1b60c39df5abed146e8","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/change+cells+alignment+and+keep+existing+formatting/","title":"Change Cells Alignment and Keep Existing Formatting"},{"content":"   Contents Summary\n1 Introduction\n2 Applying Conditional Formatting 2.1 Using Designer Spreadsheet\n2.2 Using the Copy Method\n3 Applying Conditional Formatting at Runtime 3.1 Set Font\n3.2 Set Border\n3.3 Set Pattern\n |     Introduction     Conditional formatting is an advanced Microsoft Excel feature that allows you to apply formats to a cell or range of cells and have that formatting change depending on the value of the cell or the value of a formula. For example, you can have a cell appear bold only when the value of the cell is greater than 500. When the value of the cell meets the condition, the specified format is applied to the cell. If the value of the cell does not meet the format condition, the cell\u0026amp;rsquo;s default formatting is used. In Microsoft Excel, select Format, then Conditional Formatting to open the Conditional Formatting dialog.\nAspose.Cells supports applying conditional formatting to cells at runtime. This article explains how. It also explains how to calculate the color used by Excel for color scale conditional formatting.\nApplying Conditional Formatting\nAspose.Cells supports conditional formatting in several ways:\n Using designer spreadsheet Using the copy method. Creating conditional formatting at runtime.  Using Designer Spreadsheet\nDevelopers can create a designer spreadsheet that contains conditional formatting in Microsoft Excel and then open that spreadsheet with Aspose.Cells. Aspose.Cells loads and saves the designer spreadsheet, keeping any conditional formatting setting.\nUsing the Copy Method\nAspose.Cells allows developers to copy conditional format settings from one cell to another in the worksheet by calling the Range.Copy() method.\n\\\nApplying Conditional Formatting at Runtime\nAspose.Cells lets you both add and remove conditional formatting at runtime. The code samples below show how to set conditional formatting:\n Instantiate a workbook. Add an empty conditional format. Set the range that the formatting should apply to. Define the …","date":-62135596800,"description":"","objectID":"9be7bbad1931d9f9f01785d9e9edcfed","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/conditional+formatting/","title":"Conditional Formatting"},{"content":"   Contents Summary\n1 Configuring Alignment Settings 1.1 Alignment settings in Microsoft Excel\n1.2 Alignment settings in Aspose.Cells 1.2.1 Horizontal Alignment\n1.2.2 Vertical Alignment\n1.2.3 Indentation\n1.2.4 Orientation\n1.2.5 Text Control 1.2.5.1 Wrapping Text\n1.2.5.2 Shrinking to Fit\n1.2.5.3 Merging Cells\n1.2.5.4 Text Direction\n |     Configuring Alignment Settings     Alignment settings in Microsoft Excel\nAnyone who has used Microsoft Excel to format cells will be familiar with the alignment settings in Microsoft Excel.\nAs you can see from the above figure, there are different kinds of alignment options:\n Text alignment(horizontal \u0026amp;amp; vertical) Indentation. Orientation. Text control. Text direction.  All of these alignment settings are fully supported by Aspose.Cells and are discussed in more detail below.\nAlignment settings in Aspose.Cells\nAspose.Cells provides a class, Workbook, that represents an Excel file. The Workbookclass contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Each item in the Cells collection represents an object of the Cell class.\nAspose.Cells provides GetStyle and SetStyle methods for the Cell class that are used to get and set a cell\u0026amp;rsquo;s formatting. The Style class provides useful properties for configuring alignment settings.\nSelect any text alignment type using the TextAlignmentType enumeration. The pre-defined text alignment types in the TextAlignmentType enumeration are:\n   Text Alignment Types Description     Bottom Represents bottom text alignment   Center Represents center text alignment   CenterAcross Represents center across text alignment   Distributed Represents distributed text alignment   Fill Represents fill text alignment   General Represents general text alignment   Justify Represents justify text alignment   Left Represents left text alignment   Right Represents right text …","date":-62135596800,"description":"","objectID":"3f5dc2c2746d0db5df78c746e0c82102","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/configuring+alignment+settings/","title":"Configuring Alignment Settings"},{"content":"   Contents Summary\n1 Introduction\n2 Working with Named Range Using Microsoft Excel 2.1 Create Named Ranges\n3 Working with Named Range Using Aspose.Cells 3.1 Create Named Range\n3.2 Input Data into the Cells in the Named Range\n3.3 Identify Cells in the Named Range\n3.4 Access Named Ranges 3.4.1 Access a Specific Named Range\n3.4.2 Access All the Named Ranges in a Spreadsheet\n3.5 Copy Named Ranges\n |     Introduction     Normally, column and row labels are used refer to individual cells. It is possible to create descriptive names to represent cells, ranges of cells, formulas, or constant values. The word name may refer to a string of characters that represents a cell, range of cells, formula, or constant value. Assigning a name to a range means that that range of cells can be referred to by its name. Use easy-to-understand names, such as Products, to refer to hard to understand ranges, such as Sales!C20:C30. Labels can be used in formulas that refer to data on the same worksheet; if you want to represent a range on another worksheet, you may use a name. *Named ranges are among the most powerful features of Microsoft Excel, especially when used as the source range for list controls, pivot tables, charts and so on.\nWorking with Named Range Using Microsoft Excel\nCreate Named Ranges\nThe following steps describe how to name a cell or range of cells using MS Excel. This method applies to Microsoft Office Excel 2003, Microsoft Excel 97, 2000 and 2002.\n Select the cell, range of cells that you want to name. Click the Name Box at the left end of the formula bar. Type the name for the cells. Press ENTER.  You cannot name a cell while you are changing the contents of the cell.\nWorking with Named Range Using Aspose.Cells\nHere, we use the Aspose.Cells API to do the task. Aspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented …","date":-62135596800,"description":"","objectID":"6cafe9778a88ad07ed5227dadc25b0a5","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/create+access+and+copy+named+ranges/","title":"Create Access and Copy Named Ranges"},{"content":"   Contents Summary\n1 Create Union Range\n |     Create Union Range     Aspose.Cells provides the ability to create Union Range by using the WorksheetCollection.CreateUnionRange method. The WorksheetCollection.CreateUnionRange method accepts two parameters, the address to create the union range and the index of the worksheet. The WorksheetCollection.CreateUnionRange method returns a UnionRange object.\nThe following code snippet demonstrates creating a Union Range by using the WorksheetCollection.CreateUnionRange method. The output file generated by the code is attached for reference.\n Output File  \\\nAttachments: CreateUnionRange_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f54bec43388793e54253850174524429","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/create+union+range/","title":"Create Union Range"},{"content":"You can automatically create subtotals for any repeating values in a spreadsheet. Aspose.Cells provides API features that help you add subtotals to spreadsheets programmatically.\n   Contents Summary\n1 Using Microsoft Excel\n2 Using the Aspose.Cells API\n |     Using Microsoft Excel     To add subtotals in Microsoft Excel:\n Create a simple data list in the first worksheet of the workbook (as shown in the figure below) and save the file as Book1.xls. Select any cell within your list. From the Data menu, select Subtotals. The Subtotals dialog will be displayed. Define what function to use and where to place the subtotals.  Using the Aspose.Cells API\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.\nA worksheet is represented by the Worksheet class. The class provides a wide range of properties and methods for managing worksheets and other objects. Each worksheet consists of a Cells collection. To add subtotals to a worksheet, use the Cells class\u0026amp;rsquo; Subtotal method. Provide parameter values to the method to specify how the subtotal should be calculated and placed.\nIn the examples below, we have added subtotals to the first worksheet of the template file (Book1.xls) using the Aspose.Cells API. When the code is executed, a worksheet with subtotals is created.\nThe code snippets that follow show how to add subtotals to a worksheet with Aspose.Cells for .NET.\n\\\n","date":-62135596800,"description":"","objectID":"f7acb4f7778df34a0745de2f0e42c9f8","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/creating+subtotals/","title":"Creating Subtotals"},{"content":"Microsoft Excel provides some good features to autofilter worksheet data. Aspose.Cells fully supports Microsoft Excel\u0026amp;rsquo;s autofilter features. This article explains how to use the features in Microsoft Excel, and how to code them using Aspose.Cells.\n   Contents Summary\n1 Autofilter Data 1.1 Autofilter in Microsoft Excel\n1.2 Autofilter with Aspose.Cells 1.2.1 Different types of Filter 1.2.1.1 Fill Color\n1.2.1.2 Date\n1.2.1.3 Dynamic Date\n1.2.1.4 Number\n1.2.1.5 Text\n1.2.1.6 Blanks\n1.2.1.7 Non Blanks\n1.2.1.8 Custom filter with Contains\n1.2.1.9 Custom filter with NotContains\n1.2.1.10 Custom filter with BeginsWith\n1.2.1.11 Custom filter with EndsWith\n |     Autofilter Data     Autofiltering is the quickest way to select only those items from the worksheet that you want to display in a list. The autofilter feature allows users to filter items in a list according to a set criteria. Filter based on text, numbers or dates.\nAutofilter in Microsoft Excel\nTo activate the autofilter feature in Microsoft Excel:\n Click the heading row in a worksheet. From the Data menu, select Filter and then AutoFilter.  When you apply an autofilter to a worksheet, filter switches (black arrows) appear to the right of the column headings.\n Click a filter arrow to see a list of filter options.  Some of the autofilter options are:\n   Options Description     All Show all items in the list once.   Custom Customize filter criteria like contains/not contains   Filter by Color Filters based on filled color   Date Filters Filters rows based on different criteria on date   Number Filters Different type of filter on numbers like comparison, averages and Top 10 etc.   Text Filters Different filters like begins with, ends with, contains etc,   Blanks/Non Blanks These filters can be implemented through Text Filter Blank   Users manually filter their worksheet data in Microsoft Excel using these options.     Autofilter with Aspose.Cells\nAspose.Cells provides a class, Workbook that represents an Excel file. …","date":-62135596800,"description":"","objectID":"b03c1bb55588a28f672eb7b2fa683eef","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/data+filtering/","title":"Data Filtering"},{"content":"   Contents Summary\n1 Introduction\n2 Format Data in Cells\n3 Setting Display Formats of Numbers and Dates 3.1 Setting Display Formats in Microsoft Excel\n3.2 Using Built-in Number Formats\n3.3 Using Custom Number Formats\n4 Formatting Selected Characters in a Cell 4.1 Formatting Selected Characters\n5 Activating Sheets and Making an Active Cell in the Worksheet 5.1 Activating Sheets and Making a Cell Active\n6 Formatting Rows and Columns 6.1 Formatting Rows \u0026amp;amp; Columns\n6.2 Formatting a Row\n6.3 Formatting a Column\n |     Introduction     Properly formatting worksheet cells makes it easier for users to read the data. There are multiple ways to format cells and their contents. The simplest way is to use Microsoft Excel in a WYSIWYG environment and create a designer spreadsheet. Another way to format cells and their contents is to use the Aspose.Cells API. This topic describes two approaches to format cells and their contents with the use of Aspose.Cells API.\nFormat Data in Cells\nDevelopers can format cells and their contents using the flexible API of Aspose.Cells. Aspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Each item in the Cells collection represents an object of the Cell class.\nSetting Display Formats of Numbers and Dates\nA very strong feature of Microsoft Excel is that it allows users to set the display formats of numeric values and dates. We know that numeric data can be used to represent different values including decimal, currency, percentage, fraction or accounting values, etc. All these numerical values are displayed in different formats depending on the type of information it represents. Similarly, there are many formats in which a date or time can be displayed. Aspose.Cells supports this functionality and allows developers …","date":-62135596800,"description":"","objectID":"fb84cc6a83214c34f27b83e10e2f4d6b","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/data+formatting/","title":"Data Formatting"},{"content":"Data sorting is one of Microsoft Excel\u0026amp;rsquo;s many useful features. It allows users to order data to make it easier to scan. Aspose.Cells lets developers sort worksheet data alphabetically or numerically which works in the same way as Microsoft Excel does to sort data.\n   Contents Summary\n1 Sorting Data in Microsoft Excel\n2 Sorting Data with Aspose.Cells 2.1 Sorting data with background colour \n |     Sorting Data in Microsoft Excel     To sort data in Microsoft Excel:\n Select Data from the Sort menu. The Sort dialog will be displayed. Select a sorting option.  Generally, sorting is performed on a list - defined as a contiguous group of data where the data is displayed in columns.\nSorting Data with Aspose.Cells\nAspose.Cells provides the DataSorter class used to sort data in ascending or descending order. The class has some important members, for example, properties like Key1 \u0026amp;hellip; Key3 and Order1 \u0026amp;hellip; Order3. These members are used to define sorted keys and specify the key sort order.\nYou have to define keys and set the sort order before implementing data sorting. The class provides the Sort method used to perform data sorting based on the cell data in a worksheet.\nThe Sort method accepts the following parameters:\n Aspose.Cells.Cells, the cells for the underlying worksheet. Aspose.Cells.CellArea, the range of cells. Define the cell area before applying data sorting.  This example uses the template file \u0026amp;ldquo;Book1.xls\u0026amp;rdquo; created in Microsoft Excel. After executing the code below, data is sorted appropriately.\n\\\nIf you want to sort LeftToRight, use the DataSorter.SortLeftToRight attribute.\n**Sorting data with background colour **\nExcel provides features to sort data based on the background colour. The same feature is provided using Aspose.Cells using DataSorter where SortOnType.CellColor can be used in AddKey() to sort data based on the background color. All the cells which contain specified color in the AddKey(), function are placed on top or bottom …","date":-62135596800,"description":"","objectID":"e5257185dfbbdaa6570616d9d9804e18","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/data+sorting/","title":"Data Sorting"},{"content":"Microsoft Excel provides some good features to auto filter or validate worksheet data.Aspose.Cells fully supports Microsoft Excel\u0026amp;rsquo;s data validation and AutoFilter features. This article explains how to use the features in Microsoft Excel, and how to code them using Aspose.Cells.\n   Contents Summary\n1 Data Validation Types and Execution 1.1 Data Validation with Microsoft Excel\n1.2 Data Validation with Aspose.Cells 1.2.1 Types of Data Validation 1.2.1.1 Whole Number Data Validation\n1.2.1.2 List Data Validation\n1.2.1.3 Date Data Validation\n1.2.1.4 Time Data Validation\n1.2.1.5 Text Length Data Validation\n1.3 Data Validation Rules\n2 Check if validation in cell is dropdown\n3 Add CellArea to existing Validation\n |     Data Validation Types and Execution     Data validation is the ability to set rules pertaining to data entered on a worksheet. For example, use validation to ensure that a column labeled DATE contains only dates, or that another column contains only numbers. You could even ensure that a column labeled DATE contains only dates within a certain range. With data validation, you can control what is entered into cells in the worksheet.\nMicrosoft Excel supports a number of different types of data validation. Each type is used to control what type of data is entered into a cell, or cell range. Below, code snippets illustrate how to validate that:\n Numbers are whole, that is, that they don\u0026amp;rsquo;t have a decimal part. Decimal numbers follow the right structure. The code example defines that a range of cells should have two decimal spaces. Values are restricted to a list of values. List validation defines a separate list of values that can be applied to a cell, or cell range. Dates fall within a specific range. A time is within a specific range. A text is within a given character length.  Data Validation with Microsoft Excel\nTo create validations using Microsoft Excel:\n In a worksheet, select the cells to which you want to apply validation. From the Data menu, …","date":-62135596800,"description":"","objectID":"349414306b6db6a1a8a48b33a72b314f","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/data+validation/","title":"Data Validation"},{"content":"The look and feel of a text can be controlled by changing font settings. The font settings may include the name, style, size, color and other effects of the fonts. Just like Microsoft Excel, Aspose.Cells also supports configuring the font settings of the cells.\n   Contents Summary\n1 Configuring Font Settings 1.1 Setting Font Name\n1.2 Setting Font Style to Bold\n1.3 Setting Font Size\n1.4 Setting Font Color\n1.5 Setting Font Underline Type\n1.6 Setting Strikeout Effect\n1.7 Setting Subscript Effect\n1.8 Setting Superscript Effect on Font\n ||      Configuring Font Settings      Aspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Each item in the Cells collection represents an object of the Cell class.\nAspose.Cells provides the Cell class\u0026amp;rsquo; GetStyle and SetStyle methods which are used to get and set a cell\u0026amp;rsquo;s formatting style. The Style class provides properties for configuring font settings.\nSetting Font Name\nDevelopers can apply any font to text inside a cell by using the Style.Font object\u0026amp;rsquo;s Name property.\nSetting Font Style to Bold\nDevelopers can make text bold by setting the Style.Font object\u0026amp;rsquo;s IsBold property to true.\n\\\nSetting Font Size\nSet the font size with the Style.Font object\u0026amp;rsquo;s Size property.\n\\\nSetting Font Color\nUse the Style.Font object\u0026amp;rsquo;s Color property to set the font color. Select any color from the Color enumeration (part of the .NET framework) and assign it to the Color property.\n\\\nSetting Font Underline Type\nUse the Style.Font object\u0026amp;rsquo;s Underline property to underline text. Aspose.Cells offers various pre-defined font underline types in the FontUnderlineType enumeration.\n   Font Underline Types Description     Accounting A single accounting underline   Double Double underline …","date":-62135596800,"description":"","objectID":"f93aa582089e0255b226ccaf5ef51da4","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/dealing+with+font+settings/","title":"Dealing with Font Settings"},{"content":"   Contents Summary\n1 Excel 2007 Themes and Colors 1.1 Get and Set Theme Colors 1.1.1 Customize Themes\n1.1.2 Use Theme Colors\n ||      Excel 2007 Themes and Colors      Themes provide a unified look with named styles, graphical effects and other objects used in a workbook. For example, the Accent1 style, for example, looks different in the Office and the Apex themes. Often, you apply a document theme and then amend it to how you want it.\nAspose.Cells provides features for customizing themes and colors.\nGet and Set Theme Colors\nBelow are a few methods and properties that implement theme colors.\n Style.ForegroundThemeColor: Used to set the foreground color. Style.BackgroundThemeColor: Used to set the background color. Font.ThemeColor: Used to set the font color. Workbook.GetThemeColor: Used to get a theme color. Workbook.SetThemeColor: Used to set a theme color.  The following example shows how to get and set theme colors.\nThe following example uses a template XLSX file, gets the colors for different theme color types, changes the colors and saves the Microsoft Excel file.\n\\\nCustomize Themes\nThe following example shows how to apply custom themes with your desired colors. We use a sample template file manually created in Microsoft Excel 2007.\nThe following example loads a template XLSX file, defines colors for different theme color types, applies the custom colors and saves the excel file.\n\\\nUse Theme Colors\nThe following example applies a cell’s foreground and font colors based on the default theme (of the workbook) color types. It also saves the excel file to disk.\n\\\n","date":-62135596800,"description":"","objectID":"db6e81b49a3c35fca0e0261f5384d77b","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/excel+2007+themes+and+colors/","title":"Excel 2007 Themes and Colors"},{"content":"This article discusses some data export techniques that developers have access to through Aspose.Cells.\n   Contents Summary\n1 Export Data from Worksheet 1.1 Exporting Data to DataTable Using Aspose.Cells 1.1.1 Columns Containing Strongly Typed Data\n1.1.2 Columns Containing Non-Strongly Typed Data\n1.1.3 Export Range with flag to skip column name\n |     Export Data from Worksheet     Aspose.Cells not only facilitates its users to import data to worksheets from external data sources but also allow them to export their worksheet data to a DataTable. As we know that DataTable is the part of ADO.NET and is used to hold data. Once the data is stored in a DataTable, it can be used in any way according to the requirements of users. Developers can also store this data (stored in DataTable) directly to a database if they wish. So, we can see that it becomes easier for the developers to manipulate worksheet data if it is exported to a DataTable.\nExporting Data to DataTable Using Aspose.Cells\nDevelopers can easily export their worksheet data to a DataTable object by calling either ExportDataTable or ExportDataTableAsString method of the Cells class. Both methods are used in different scenarios, which are discussed below in more detail.\nColumns Containing Strongly Typed Data\nWe know that a spreadsheet stores data as a sequence of rows and columns. If all values in the columns of a worksheet are strongly typed (that means all values in a column must have the same data type) then we can export the worksheet content by calling the ExportDataTable method of the Cells class. ExportDataTable method takes the following parameters to export worksheet data as DataTable object:\n Row number, the row number of the first cell data will be exported from. Column number, the column number of the first cell the data will be exported from. Number of rows, the number of rows to export. Number of columns, the number of columns to export. Export column names, a Boolean property that indicates whether …","date":-62135596800,"description":"","objectID":"681e74511dc8c7322db39b83192e8373","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/export+data+from+worksheet/","title":"Export Data from Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Export HTML String Value of the Cells to the DataTable\n3 Screenshot\n4 Sample Code\n5 Console Output\n |     Possible Usage Scenarios     Using Aspose.Cells APIs, developers can fill a DataTable with corresponding HTML strings (based on cells values) while exporting worksheet data. This document explains how to export HTML strings for the formatted cells data to fill a DataTable using Aspose.Cells APIs.\nExport HTML String Value of the Cells to the DataTable\nThe following sample code illustrates how to export HTML string value of the cells to the DataTable while exporting data from worksheet into DataTable. Please see the sample Excel file, its screenshot and the console output for a reference.\nScreenshot\nSample Code\nConsole Output\nCrow\nAttachments: sampleExportTableAsHtmlString.xlsx (application/unknown) Cells-Data-Exported-as-HTML-String.png (image/png)\n","date":-62135596800,"description":"","objectID":"eca00d293f61ff29b363f2a0cdb40762","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/export+html+string+value+of+the+cells+to+the+datatable/","title":"Export HTML String Value of the Cells to the DataTable"},{"content":"Microsoft Excel allows users to find cells in a worksheet that contains specified data.\n   Contents Summary\n1 Finding Cells Containing Specified Data 1.1 Using Microsoft Excel\n1.2 Using Aspose.Cells\n2 Finding Cells Containing a Formula\n3 Finding Data or Formulas using FindOptions\n4 Finding Cells Containing Specified String Value or Number\n |     Finding Cells Containing Specified Data     Using Microsoft Excel\nMicrosoft Excel allows users to find cells in a worksheet that contains specified data. If you select Edit from the Find menu in Microsoft Excel, you will see a dialog where you can specify the search value.\nHere, we are looking for the value \u0026amp;ldquo;Oranges\u0026amp;rdquo;. Aspose.Cells also allows developers to find cells in the worksheet containing specified values.\nUsing Aspose.Cells\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet. The Cells collection provides several methods for finding cells in a worksheet containing user-specified data. A few of these methods are discussed below in more detail.\nAll Find methods return the references of the cells containing the specified data to search.\nFinding Cells Containing a Formula\nDevelopers can find a specified formula in the worksheet by calling the Cells collection\u0026amp;rsquo;s Find method. Typically, the Find method accepts three parameters:\n **Object: **The object to search for. The type should be int,double,DateTime,string,bool. Previous cell: Previous cell with the same object. This parameter can be set to null if searching from the start. FindOptions: Options for finding the required object.  The examples below use worksheet data for practicing find methods:\n\\\nFinding Data or Formulas using FindOptions\nIt is possible to find specified values …","date":-62135596800,"description":"","objectID":"fa978d4bea8e524e5924dada32c42c5a","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/find+or+search+data/","title":"Find or Search Data"},{"content":"Aspose.Cells provides the GetStyle and SetStyle methods of the Cell class, used to get/set the formatting style of a cell. Aspose.Cells also provides a Style class.\n   Contents Summary\n1 Format Cells using GetStyle and SetStyle Methods 1.1 Using the GetStyle and SetStyle Methods\n1.2 Using Style Object to Format Different Cells\n1.3 Using Microsoft Excel 2007 Predefined Styles\n1.4 Applying Gradient Fill Effects\n ||      Format Cells using GetStyle and SetStyle Methods      Apply different kinds of formatting styles on cells to set background or foreground colors, borders, fonts, horizontal and vertical alignments, indentation level, text direction, rotation angle and much more.\nUsing the GetStyle and SetStyle Methods\nIf developers need to apply different formatting styles to different cells then it\u0026amp;rsquo;s better to get the Style of the cell using Cell.GetStyle method, specify the style attributes and then apply the formatting using Cell.SetStyle method. An example is given below to demonstrate this approach to apply various formatting on a cell.\n\\\nUsing Style Object to Format Different Cells\nIf developers need to apply the Same formatting style to different cells then they can use Style object. Please follow the steps below to use the Style object:\n Add a Style object by calling the CreatStyle method of the Workbook class Access the newly added Style object Set the desired properties/attributes of the Style object to apply desired formatting settings Assign the configured Style object to your desired cells  This approach can greatly improve the efficiency of your applications and save memory too.\n\\\nUsing Microsoft Excel 2007 Predefined Styles\nIf you need to apply different formatting styles for Microsoft Excel 2007, apply styles using the Aspose.Cells API. An example is given below to demonstrate this approach to apply a predefined style on a cell.\n\\\nApplying Gradient Fill Effects\nTo apply your desired Gradient Fill Effects to the cell, use the Style object\u0026amp;rsquo;s …","date":-62135596800,"description":"","objectID":"9f1497b8434cc91542fed675be32c985","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/format+cells+using+getstyle+and+setstyle+methods/","title":"Format Cells using GetStyle and SetStyle Methods"},{"content":"   Contents Summary\n1 Format Ranges 1.1 Setting Background Color and Font Attributes to a Named Range\n1.2 Adding Borders to a Named Range\n2 Rename a Named Range\n3 Union of Ranges\n4 Intersection of Ranges\n5 Merge Cells in the Named Range\n6 Remove a Named Range\n |     Format Ranges     Setting Background Color and Font Attributes to a Named Range\nTo apply formatting, define a Style object to specify the style settings and apply it to the Range object.\nThe following example shows how to set the solid fill color (shading color) with font settings to a range.\n\\\nAdding Borders to a Named Range\nIt is possible to add borders to a range of cells instead of just a single cell. The Range object provides a SetOutlineBorder method that takes the following parameters to add a border to the range of cells:\n Border type, the type of border, selected from the BorderType enumeration. Line style, the line style, selected from the CellBorderType enumeration. Color, the line color, selected from the Color enumeration.  The following example shows how to set an outline border to a range.\n\\\n\\\nThe following example shows how to set borders around each cell in the range.\n\\\nRename a Named Range\nAspose.Cells allows you to rename a named range for your need. You may get the named range and rename it by using Name.Text attribute. The following example shows how to rename a named range.\n\\\nUnion of Ranges\nAspose.Cells provides Range.Union method to take the union for ranges, the method returns an ArrayList object. The following example shows how to take union for ranges.\n\\\nIntersection of Ranges\nAspose.Cells provides the Range.Intersect method to intersect two ranges. The method returns a Range object. To check whether a range intersects another range, use the Range.IsIntersect method that returns a Boolean value. The following example shows how to intersect the ranges.\n\\\nMerge Cells in the Named Range\nAspose.Cells provides Range.Merge() method to merge the cells in the range. The following …","date":-62135596800,"description":"","objectID":"b8f5415b8180526537b992c4971c0846","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/format+and+modify+named+ranges/","title":"Format and Modify Named Ranges"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get Address, Cell Count, Offset, Entire Column and Entire Row of the Range\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells provides the Range object which has various utility methods that facilitate the user to work with Excel Ranges easily. This article illustrates the usage of the following methods or properties of Range object.\n Address  Gets address of the range.\n Cell Count  Gets all cell count in the range.\n Offset  Gets range by offset.\n Entire Column  Gets a Range object that represents the entire column (or columns) that contains the specified range.\n Entire Row  Gets a Range object that represents the entire row (or rows) that contains the specified range.\nGet Address, Cell Count, Offset, Entire Column and Entire Row of the Range\nThe following sample code explains the usage of the methods and properties as discussed above. Please see the console output of the code given below for a reference.\n** Sample Code**\nConsole Output\nCreating Range A1:B3\nRange Address: A1:B3\nCell Count: 6\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\nCreating Range A1\nOffset: C3\nEntire Column: A:A\nEntire Row: 1:1\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\n","date":-62135596800,"description":"","objectID":"f4d089a39e2831d8842b85e29002864f","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/get+address+cell+count+offset+entire+column+and+entire+row+of+the+range/","title":"Get Address Cell Count Offset Entire Column and Entire Row of the Range"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get All Hidden Rows Indices after Refreshing AutoFilter\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     When you apply the auto filter on worksheet cells, then some of the rows get hidden automatically. But it might be the case that some of the rows are already hidden manually by Excel end user and they are not hidden by an auto filter. It therefore makes difficult to know which of the rows are hidden by the auto filter and which of them are hidden manually by Excel end user. Aspose.Cells deals with this problem using the int[] AutoFilter.Refresh(bool hideRows) method. This method returns the row indices of all the rows that are hidden by the auto filter and not manually by the Excel end user.\nGet All Hidden Rows Indices after Refreshing AutoFilter\nPlease see the following sample code that loads the sample Excel file which contains some of the rows hidden manually by Excel end user. The code applies the auto filter and refreshes it using the int[] AutoFilter.Refresh(bool hideRows) method that returns the row indices of all the hidden rows by the auto filter. It then prints the indices of the hidden rows on the console along with cells names and values.\nSample Code\nConsole Output\nPrinting Rows Indices, Cell Names and Values Hidden By AutoFilter.\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\n1 A2 Apple\n2 A3 Apple\n3 A4 Apple\n6 A7 Apple\n7 A8 Apple\n11 A12 Pear\n12 A13 Pear\nAttachments: sampleGetAllHiddenRowsIndicesAfterRefreshingAutoFilter.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"3e00028d560202c311ddf19b9a37070f","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/get+all+hidden+rows+indices+after+refreshing+autofilter/","title":"Get All Hidden Rows Indices after Refreshing AutoFilter"},{"content":"This article discusses some data import techniques that developers have access to through Aspose.Cells.\n   Contents Summary\n1 Import Data into Worksheet 1.1 Importing from Array\n1.2 Importing from ArrayList\n1.3 Importing from Custom Objects\n1.4 Importing from Custom Objects to merged area\n1.5 Importing from DataTable\n1.6 Importing from dynamic object as data source\n1.7 Importing from DataColumn (.NET)\n1.8 Importing from DataView (.NET)\n1.9 Importing from DataGrid (.NET)\n1.10 Importing from GridView\n1.11 Importing HTML formatted data\n1.12 Importing Data from JSON\n |     Import Data into Worksheet     When you open an Excel file with Aspose.Cells, all data in the file is automatically imported. Aspose.Cells can also import data from other data sources.\nAspose.Cells provides a Workbook class that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Cells collection provides useful methods to import data from different data sources. This article explains how these methods can be used.\nImporting from Array\nTo import data to a spreadsheet from an array, call the ImportArray method of the Cells collection. There are many overloaded versions of the ImportArray method but a typical overload takes the following parameters:\n Array, the array object that you\u0026amp;rsquo;re importing content from. Row number, the row number of the first cell that the data will be imported to. Column number, the column number of the first cell that the data will be imported to. Is vertical, a Boolean value that specifies whether to import data vertically or horizontally.  \\\nImporting from ArrayList\nTo import data from an *ArrayList *to worksheets, call the Cells collection\u0026amp;rsquo;s ImportArrayList method. The ImportArray method takes the following parameters:\n Array list, represents the *ArrayList *object you\u0026amp;rsquo;re …","date":-62135596800,"description":"","objectID":"24addb098ab1229f81d47c558e35a3e7","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/import+data+into+worksheet/","title":"Import Data into Worksheet"},{"content":"Aspose.Cells supports this feature and can also merge cells in a worksheet. You may unmerge, or split, the merged cells too. A merged cell\u0026amp;rsquo;s cell reference is the reference for the top left cell in the original selected range.\n   Contents Summary\n1 Introduction\n2 Merging Cells in a Worksheet 2.1 Merging Cells in Microsoft Excel\n2.2 Merging Cells with Aspose.Cells\n3 Unmerging (Splitting) Merged Cells 3.1 Using Microsoft Excel\n3.2 Using Aspose.Cells\n |     Introduction     You don\u0026amp;rsquo;t always want the same number of cells in every row or column. For example, you might want to put a title in a cell that spans several columns. Or, if creating an invoice, you might want fewer columns for the total. To make one cell from two or more cells, merge them. Microsoft Excel lets users select files and merge them to structure the spreadsheet the way they want.\nNote that when cells are merged, only the data in the top left cells is retained. If there is data in the other cells in the range, this data is deleted. Formatting, likewise, is based on the reference cell so that when you merge cells, the formatting settings of the top left cell in the range are applied on the merged cell. When the cell is split, the new cells keep their original format settings.\nMerging Cells in a Worksheet\nMerging Cells in Microsoft Excel\nThe following steps describe how to merge cells in the worksheet using MS Excel.\n Copy the data you want into the upper-leftmost cell within the range. Select the cells you want to merge. To merge cells in a row or column and center the cell contents, click Merge and Center icon on the Formatting toolbar.  Merging Cells with Aspose.Cells\nThe Aspose.Cells.Cells Class has some useful methods for the task. For example, the method Merge() merges the cells into a single cell within a specified range.\nThe following example shows how to merge cells (C6:E7) in a worksheet.\n\\\nUnmerging (Splitting) Merged Cells\nUsing Microsoft Excel\nThe following steps describe how to …","date":-62135596800,"description":"","objectID":"5a45a5d1983e935dd72096ae452da697","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/merging+and+unmerging+cells/","title":"Merging and Unmerging Cells"},{"content":"Complex financial worksheets, especially ones developed in collaboration, can hide the most embarrassing errors. Checking formulas for accuracy and finding the source of an error can be difficult when the formula uses precedent cells and dependent cells.\n   Contents Summary\n1 Introduction\n2 Tracing Precedent and Dependent Cells: Microsoft Excel\n3 Tracing Precedent and Dependent Cells: Aspose.Cells 3.1 Tracing Precedents\n3.2 Tracing Dependents\n |     Introduction      Precedent cells are cells that are referred to by a formula in another Cell. For example, if cell D10 contains the formula =B5, cell B5 is a precedent to cell D10. Dependent cells contain formulas that refer to other cells. For example, if cell D10 contains the formula =B5, cell D10 is dependent of cell B5.  To make the spreadsheet easy to read, you might want to clearly show which cells on a spreadsheet are used in a formula. Similarly, you may want to extract the dependent cells of other cells.\nAspose.Cells allows you to trace cells and find out which are linked.\nTracing Precedent and Dependent Cells: Microsoft Excel\nFormulas may change based on modifications made by a client. For example, if cell C1 is dependent on C3 and C4 containing a formula, and C1 is changed (so the formula is overridden), C3 and C4, or other cells, need to change to balance the spreadsheet based on business rules.\nSimilarly, suppose C1 contains the formula \u0026amp;ldquo;=(B122)/(M2N32)\u0026amp;quot;. I want to find the cells that C1 depends on, that is the precedent cells B1, M2, and N32.\nYou might need to trace the dependency of a particular cell to other cells. If business rules are embedded in formulas, we would like to find out the dependency and execute some rules based on it. Similarly, if the value of a particular cell is modified, which cells in the worksheet are impacted by that change?\nMicrosoft Excel allows users to trace precedents and dependents.\n On the View Toolbar, select Formula Auditing. The Formula Auditing dialog will be …","date":-62135596800,"description":"","objectID":"77eefaf576968d721d479c50f1ce8a6e","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/precedents+and+dependents/","title":"Precedents and Dependents"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Preserve Single Quote Prefix of Cell Value or Range\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     When you put some value inside the cell that has leading apostrophe or single quote mark, then Microsoft Excel hides it, but when you select the cell, it displays the leading apostrophe or single quote in a formula bar as shown in the following screenshot.\nAspose.Cells also hides the leading apostrophe or single quote like Microsoft Excel but it sets the Style.QuotePrefix as true for that cell. If you set an empty style of the cell, then Style.QuotePrefix becomes false again. In order to deal with this issue, Aspose.Cells provides StyleFlag.QuotePrefix property, when it is set false, then Style.QuotePrefix is not updated at all and its old value is preserved. It means if the old value of Style.QuotePrefix property was true, it will remain true and if the old value was false, it will remain false.\nPreserve Single Quote Prefix of Cell Value or Range\nThe following sample code explains the usage of StyleFlag.QuotePrefix property as described previously. Please read the comments inside the code and see the console output of the code given below for more help.\nSample Code\nConsole Output\nQuote Prefix of Cell A1: False\nQuote Prefix of Cell A1: True\nWhen StyleFlag.QuotePrefix is False, it means, do not update the value of Cell.Style.QuotePrefix.\nSimilarly, when StyleFlag.QuotePrefix is True, it means, update the value of Cell.Style.QuotePrefix.\nQuote Prefix of Cell A1: True\nQuote Prefix of Cell A1: False\nAttachments: Leading-Single-Quote-In-Formula-Bar.png (image/png)\n","date":-62135596800,"description":"","objectID":"7de4e53c466828b4e2778bda94869ae4","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/preserve+single+quote+prefix+of+cell+value+or+range/","title":"Preserve Single Quote Prefix of Cell Value or Range"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Rename duplicate columns automatically while exporting worksheet data\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Sometimes user faces a problem of duplicate columns while exporting data from worksheet into the data table. DataTable cannot have duplicate columns so duplicate columns must be renamed before you could export worksheet data to the data table. Aspose.Cells can rename the duplicate columns automatically according to strategy specified by you with ExportTableOptions.RenameStrategy property. If you specify RenameStrategy.Digit, columns will be renamed like column1, column2, column3, etc and if you specify RenameStrategy.Letter, then columns will be renamed like columnA, columnB, columnC, etc.\nRename duplicate columns automatically while exporting worksheet data\nThe following sample code adds some data in the first three columns of the worksheet but all columns have the same name i.e. People. Then it exports the data from worksheet into data table by specifying RenameStrategy.Letter strategy. It then prints the column names of the data table generated by Aspose.Cells. The following screenshot shows the data table with exported data in the visualizer. As you can see, duplicate columns have been renamed to PeopleA, PeopleB etc.\n\\\nSample Code\nConsole Output\nHere is the console output of the above sample code for a reference.\nPeople\nPeopleA\nPeopleB\nAttachments: Rename-duplicate-columns-automatically.png (image/png)\n","date":-62135596800,"description":"","objectID":"d74417dd2070bf39fb2824eda6eb22fd","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/rename+duplicate+columns+automatically+while+exporting+worksheet+data/","title":"Rename duplicate columns automatically while exporting worksheet data"},{"content":"   Contents Summary\n1 Setting Formula for Named Range 1.1 Setting a Simple Formula for Named Range\n1.2 Setting a Complex Formula for Named Range\n |     Setting Formula for Named Range     Like Excel application, Aspose.Cells APIs provide the ability to specify a formula for a named range while using its RefersTo property. There could be numerous usability scenarios for this feature, a few of which are detailed as follow.\nSetting a Simple Formula for Named Range\nA simple formula could be a reference to another cell in the same (or different) worksheet. The following example creates a named range in a new spreadsheet and sets its reference to another cell.\n\\\nSetting a Complex Formula for Named Range\nA complex formula could be anything such as a dynamic range or a formula spanning over multiple cells in different worksheets. The following example creates a dynamic range using the INDEX function to get the value from a list based on its location.\n\\\n\\\nHere is another example that uses a named range to sum values from 2 cells in different worksheets.\n\\\n","date":-62135596800,"description":"","objectID":"ef6e93ce31b1274e629d8c6131d60e15","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/setting+formula+for+named+range/","title":"Setting Formula for Named Range"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Shift First Row down when inserting Cells Data Table Rows\n3 Screenshot\n4 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to shift the first row down when inserting a table into the worksheet. This document explains how you may accomplish the task using Aspose.Cells APIs.\nShift First Row down when inserting Cells Data Table Rows\nThe following sample code illustrates how to shift the first row down when inserting a table into the worksheet. We use a simple template Excel file in code to demonstrate the feature. You can exercise the feature by setting the boolean ImportTableOptions.ShiftFirstRowDown** **attribute to **True**/**False** to better understand it. Please see the sample Excel file, output Excel False file, and output Excel True file for your reference.\nScreenshot\nSample Code\nAttachments: sampleImportTableOptionsShiftFirstRowDown.xlsx (application/unknown) outputImportTableOptionsShiftFirstRowDown-False.xlsx (application/unknown) outputImportTableOptionsShiftFirstRowDown-True.xlsx (application/unknown) Effect-of-setting-ImportTableOptions.ShiftFirstRowDown-True-or-False.png (image/png) Effect-of-setting-ImportTableOptions.ShiftFirstRowDown-True-or-False.png (image/png) Effect-of-setting-ImportTableOptions.ShiftFirstRowDown-True-or-False.png (image/png)\n","date":-62135596800,"description":"","objectID":"6d67353810267889e86f0f9ef5787375","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/shift+first+row+down+when+inserting+cells+data+table+rows/","title":"Shift First Row down when inserting Cells Data Table Rows"},{"content":"   Contents Summary\n1 Possible Usage Scenarios \n2 Sort Data in Column with Custom Sort List\n3 Sample Code\n |     **Possible Usage Scenarios **     You can sort data in the column using a custom list. This can be done using DataSorter.AddKey(int key, SortOrder order, String customList) method. However, this method works only if the items in the custom list do not have commas inside them. If they have commas like \u0026amp;ldquo;USA,US\u0026amp;rdquo;, \u0026amp;ldquo;China,CN\u0026amp;rdquo; etc., then you must use DataSorter.AddKey(int key, SortOrder order, String[] customList) method. Here, the last parameter is not String but an Array of Strings.\nSort Data in Column with Custom Sort List\nThe following sample code explains how to use DataSorter.AddKey(int key, SortOrder order, String[] customList) method to sort data with custom sort list. Please see the sample Excel file used in this code and output Excel file generated by it. The following screenshot shows the effect of the code on the sample Excel file on execution.\nSample Code\nAttachments: Sort Data in Column with Custom Sort List.png (image/png) sampleSortData_CustomSortList.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSortData_CustomSortList.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"a46fd7182de513b8727fdd44e6fce993","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/sort+data+in+column+with+custom+sort+list/","title":"Sort Data in Column with Custom Sort List"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify Formula Fields while Importing Data to Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     You can specify formula fields when you import data into your worksheet using the ImportTableOptions.IsFormulas. This property takes the Boolean array where the value true means the field is a formula field. For example, if the third field is a formula field, then the third value in the array will be true.\nSpecify Formula Fields while Importing Data to Worksheet\nPlease see the following sample code that explains how to specify the formula field while importing data to a worksheet. Please see the output Excel file generated by the code and the screenshot showing the effect of the code on the output Excel file.\nSample Code\nAttachments: outputSpecifyFormulaFieldsWhileImportingDataToWorksheet.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Specify-Formula-Fields-While-Importing-Data-To-Worksheet.png (image/png)\n","date":-62135596800,"description":"","objectID":"b11fad2f332dd9186ff2b032f5af93fe","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/specify+formula+fields+while+importing+data+to+worksheet/","title":"Specify Formula Fields while Importing Data to Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n ||      Possible Usage Scenarios      Aspose.Cells supports the *DBNum *custom pattern formatting. For example, if your cell value is 123 and you specify its custom formatting as [DBNum2][$-804]General then it will be displayed like 壹佰贰拾叁. You can specify your custom formatting of the cell using Cell.GetStyle() method and Style.Custom property.\nSample Code\nThe following sample code illustrates how to specify *DBNum *custom pattern formatting. Please check its output PDF for more help.\nAttachments: outputDBNumCustomFormatting.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"a13d8bd80557c27b403fdfc1c6d63cab","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/specifying+dbnum+custom+pattern+formatting/","title":"Specifying DBNum Custom Pattern Formatting"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n ||      Possible Usage Scenarios      Please consider this textual data i.e. {11, 111, 22}. This textual data is sorted because, in terms of text, 111 comes before 22. But, if you want to sort this data not as text but as numbers, then it will become {11, 22, 111} because numerically 111 comes after 22. Aspose.Cells provides DataSorter.SortAsNumber property to deal with this issue. Please set this property true and your textual data will be sorted as numerical data. The following screenshot shows the sort warning shown by Microsoft Excel when textual data which looks like numerical data is sorted.\nSample Code\nThe following sample code illustrates the usage of DataSorter.SortAsNumber property as explained earlier. Please check its sample Excel file and output Excel file for more help.\nAttachments: sampleSortAsNumber.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSortAsNumber.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sort-textual-data-as-numbers.png (image/png)\n","date":-62135596800,"description":"","objectID":"9f6bc8f78822622815f08b95df386045","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/specifying+sort+warning+while+sorting+data/","title":"Specifying Sort Warning While Sorting Data"},{"content":"A hyperlink is used to create a link between two entities. Everybody is familiar with the use of hyperlinks, especially on websites. Using Aspose.Cells, developers can create different kinds of hyperlinks in Microsoft Excel files. This topic discusses what types of hyperlinks are supported by Aspose.Cells and how they can be used in our Excel files.\n   Contents Summary\n1 Adding Hyperlinks 1.1 Adding Link to a URL\n1.2 Adding a Link to a Cell in the Same File\n1.3 Adding a Link to an External File\n |     Adding Hyperlinks     Aspose.Cells allows developers to add hyperlinks to Excel files either using the API or designer spreadsheets(spreadsheets where hyperlinks are created manually and Aspose.Cells is used to import them into other spreadsheets).\nAspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a WorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides different methods for adding different hyperlinks to Excel files.\nAdding Link to a URL\nThe Worksheet class contains a Hyperlinks collection. Each item in the Hyperlinks collection represents a Hyperlink. Add hyperlinks to URLs by calling the Hyperlinks collection\u0026amp;rsquo;s Add method. The Add method takes the following parameters:\n Cell name, the name of the cell the hyperlink will be added to. Number of rows, the number of rows in this hyperlink range. Number of columns, the number of columns in this hyperlink range URL, the URL address.  \\\nIn the above example, a hyperlink is added to a URL in an empty cell, A1. In such cases, if a cell is empty then the URL address is also added to that empty cell as its value. If the cell is not empty and a hyperlink is added, the value of the cell looks like plain text. To make it look like a hyperlink, apply the appropriate formatting settings on that cell.\nAdding a Link to a Cell in the Same File\nIt is possible to add …","date":-62135596800,"description":"","objectID":"96a312f6c40a24a0bd60434425b08286","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/working+with+hyperlinks+to+link+data/","title":"Working with Hyperlinks to Link Data"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"50e8b5333cf2ea134f34c0c4568a1014","permalink":"https://roywangt.github.io/cellsnet/developerguide/data/","title":"Data"},{"content":"   Contents Summary\n1 Introduction\n2 Managing Document Properties Using Microsoft Excel\n3 Working with Document Properties Using Aspose.Cells 3.1 Accessing Document Properties\n3.2 Adding or Removing Custom Document Properties\n3.3 Adding Custom Properties\n3.4 Configuring “Link to content” Custom Property\n3.5 Removing Custom Properties\n     Introduction    Microsoft Excel provides the ability to add properties to spreadsheet files. These document properties provide useful information and are divided into 2 categories as detailed below.\n System-defined (built-in) properties: Built-in properties contain general information about the document like document title, author name, document statistics and so on. User-defined (custom) properties: Custom properties defined by the end user in the form of name-value pair.  \\\nThe most important point to know about built-in and custom properties is that built-in properties can be accessed and modified, but not created or removed. However, custom properties can be created and managed.\nManaging Document Properties Using Microsoft Excel\nMicrosoft Excel allows you to manage the document properties of the Excel files in a WYSIWYG manner. Please follow the below steps to open the Properties dialog in Excel 2016.\n From the File menu, select Info.     Selecting Info Menu          Click on Properties heading and select \u0026amp;ldquo;Advanced Properties\u0026amp;rdquo;.     Clicking Advanced Properties Selection          Manage the file\u0026amp;rsquo;s document properties.     Properties Dialog        In the Properties dialog, there are different tabs, like General, Summary, Statistics, Contents, and Customs. Each tab helps configure different kinds of information related to the file. The Custom tab is used to manage custom properties.    Working with Document Properties Using Aspose.Cells\nDevelopers can dynamically manage the document properties using the Aspose.Cells APIs. This feature helps the developers to store useful information along with the file, such as …","date":-62135596800,"description":"","objectID":"6a836bce728a82219f2be3ac69d9fc23","permalink":"https://roywangt.github.io/cellsnet/developerguide/documentproperties/managing+document+properties/","title":"Managing Document Properties"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify Document Version of the Excel File using BuiltIn Document Properties\n3 Sample Code\n |     Possible Usage Scenarios     You can change the Version number of Excel file by right-clicking the file and then selecting Properties \u0026amp;gt; Details and then editing the Version number field. Please use BuiltInDocumentPropertyCollection.DocumentVersion property to change it programmatically using Aspose.Cells APIs. Specify Document Version of the Excel File using BuiltIn Document Properties\nThe following sample code creates a workbook and changes its built-in document properties that include Title, Authors and Version number. Please see the output Excel file generated by the code and screenshot that shows the modified Version number by BuiltInDocumentPropertyCollection.DocumentVersion property.\nSample Code\nAttachments: outputSpecifyDocumentVersionOfExcelFile.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Specify-DocumentVersion-of-Excel-File.png (image/png)\n","date":-62135596800,"description":"","objectID":"25a0fabadb1891232272e9379ce22173","permalink":"https://roywangt.github.io/cellsnet/developerguide/documentproperties/specify+document+version+of+the+excel+file+using+builtin+document+properties/","title":"Specify Document Version of the Excel File using BuiltIn Document Properties"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify the Language of the Excel File using BuiltIn Document Properties\n3 Sample Code\n |     Possible Usage Scenarios     You can change the Language of Excel file by right-clicking the file and then selecting Properties \u0026amp;gt; Details and then editing the Language field. Please use BuiltInDocumentPropertyCollection.Language property to change it programmatically using Aspose.Cells APIs.\nSpecify the Language of the Excel File using BuiltIn Document Properties\nThe following sample code creates a workbook and changes its built-in document property named Language. Please see the output Excel file generated by the code and screenshot that shows the modified Language field by BuiltInDocumentPropertyCollection.Language property.\nSample Code\nAttachments: Specify-Language-Of-Excel-File.png (image/png) Specify-Language-Of-Excel-File.png (image/png) outputSpecifyLanguageOfExcelFile.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"551bc5279e615841e831c3db743897b3","permalink":"https://roywangt.github.io/cellsnet/developerguide/documentproperties/specify+the+language+of+the+excel+file+using+builtin+document+properties/","title":"Specify the Language of the Excel File using BuiltIn Document Properties"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"f864e52f6452019376ca67ad13464192","permalink":"https://roywangt.github.io/cellsnet/developerguide/documentproperties/","title":"Document Properties"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Access and Modify the Display Label of the Linked Ole Object\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Microsoft Excel allows you to change the display label of the Ole Object as shown in the following screenshot. You can also access or modify the display label of the Ole object using Aspose.Cells APIs with the OleObject.Label property. Access and Modify the Display Label of the Linked Ole Object\nPlease see the following sample code, it loads the sample Excel file that contains the Ole Object. The code accesses the Ole Object and changes its Label from Sample APIs to Aspose APIs. Please see the console output given below that shows the effect of the sample code on the sample Excel file for a reference.\nSample Code\nConsole Output\nOle Object Label - Before: Sample APIs\nOle Object Label - After: Aspose APIs\nAttachments: sampleAccessAndModifyLabelOfOleObject.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Access-and-Modify-the-Display-Label-of-the-Linked-Ole-Object.png (image/png)\n","date":-62135596800,"description":"","objectID":"520261954b592e83088310e49291718b","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/access+and+modify+the+display+label+of+the+linked+ole+object/","title":"Access and Modify the Display Label of the Linked Ole Object"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Convert the Smart Art to Group Shape\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     You can convert Smart Art Shape into Group Shape using the Shape.GetResultOfSmartArt() method. It will enable you to handle smart art shape like a group shape. Consequently, you will have access to the individual parts or shapes of the group shape.\nConvert the Smart Art to Group Shape\nThe following sample code loads the sample Excel file containing a smart art shape as shown in this screenshot. It then converts the smart art shape into group shape and prints the Shape.IsGroup property. Please see the console output of the sample code given below.\nSample Code\n\\\nConsole Output\nIs Smart Art Shape: True\nIs Group Shape: False\nIs Group Shape: True\nAttachments: sampleSmartArtShape_GetResultOfSmartArt.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Sample-Smart-Art-Shape.png (image/png)\n","date":-62135596800,"description":"","objectID":"47c749062dd3a73098d9b465d06237ac","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/convert+the+smart+art+to+group+shape/","title":"Convert the Smart Art to Group Shape"},{"content":"   Contents Summary\n1 Accessing Data of Non-Primitive Shape\n2 A Non-Primitive Shape\n |     Accessing Data of Non-Primitive Shape     Sometimes, you need to access data from a shape that is not built-in. Built-in shapes are called primitive shapes; ones that aren\u0026amp;rsquo;t are called non-primitive. For example, you can define your own shapes using different curve connected lines.\nA Non-Primitive Shape\nIn Aspose.Cells, non-primitive shapes are assigned the type AutoShapeType.NotPrimitive. You can check their type using the Shape.AutoShapeType property.\nAccess the shape data using the Shape.Paths property. It returns all the connected paths that comprise the non-primitive shape. These paths are of the type ShapePath that holds a list of all the segments which in turn contain the points in each segment.\n   Shows an example of a non-primitive shape         Attachments: Fm3eNIO.png (image/png) NonPrimitiveShape.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"f440bc8c5b3038dceeda67625652c998","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/data+in+non-primitive+shape/","title":"Data in Non-Primitive Shape"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Determine if Shape is Smart Art Shape\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Smart Art Shapes are special shapes in Microsoft Excel that allow you to create complex diagrams automatically. You can find if the shape is a smart art shape or normal shape using Shape.IsSmartArt property.\nDetermine if Shape is Smart Art Shape\nThe following sample code loads the sample Excel file containing a smart art shape as shown in this screenshot. It then prints the value of Shape.IsSmartArt property of the first shape. Please see the console output of the sample code given below.\nSample Code\nConsole Output\nIs Smart Art Shape: True\nAttachments: sampleSmartArtShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Sample-Smart-Art-Shape.png (image/png)\n","date":-62135596800,"description":"","objectID":"dfb28da7161d4af58042f2296b0c7e26","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/determine+if+shape+is+smart+art+shape/","title":"Determine if Shape is Smart Art Shape"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Extract Text from the Gear Type SmartArt Shape\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells can extract text from the Gear Type Smart Art Shape. In order to do so, you should first convert Smart Art Shape to Group Shape using the Shape.GetResultOfSmartArt() method. Then you should get the array of all the Individual Shapes forming the Group Shape using the GroupShape.GetGroupedShapes() method. Finally, you can iterate all of the Individual Shapes one by one in a loop and extract their text using the Shape.Text property.\nExtract Text from the Gear Type SmartArt Shape\nThe following sample code loads the sample Excel file that contains Gear Type Smart Art Shape. It then extracts the text from its individual shapes as discussed above. Please see the console output of the code given below for a reference.\nSample Code\nConsole Output\nGear Type Shape Text: Nice\nGear Type Shape Text: Good\nGear Type Shape Text: Excellent\nAttachments: sampleExtractTextFromGearTypeSmartArtShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"cd417c98375a669fadfde9006e5d8931","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/extract+text+from+the+gear+type+smartart+shape/","title":"Extract Text from the Gear Type SmartArt Shape"},{"content":"   Contents Summary\n1 Introduction\n2 Adding a Comment\n3 Comment Formatting\n4 Add an Image to Comment\n |     Introduction     Comments are used to add additional information to cells. Aspose.Cells provides two methods for adding comments to cells. The first is to create comments in a designer file manually. These comments are then imported using Aspose.Cells. The second is to add comments using the Aspose.Cells API at runtime. This topic discusses adding comments to cells using the Aspose.Cells API. Formatting comments will also be explained.\nAdding a Comment\nAdd a comment to a cell by calling the Comments collection\u0026amp;rsquo;s Add method (encapsulated in the Worksheet object). The new Comment object can be accessed from the Comments collection by passing the comment index. After accessing the Comment object, customize the comment note by using the Comment object\u0026amp;rsquo;s Note property.\n\\\nComment Formatting\nIt is also possible to format comments\u0026amp;rsquo; appearance by configuring their height, width and font settings.\n\\\nAdd an Image to Comment\nWith Microsoft Excel 2007, it is also possible to have an image as the background to a cell comment. In Excel 2007 this is accomplished by doing the following steps. (They suppose that you have already added a cell comment.)\n Right-click the cell that contains the comment. Select Show/Hide Comments, and clear any text from the comment. Click on the border of the comment to select it. Select Format, then Comment. On the Colors and Lines tab, expand the Color list. Click Fill Effects. On the Picture tab, click Select Picture. Locate and select the picture. Click OK until all dialogs have closed.  Aspose.Cells also provides this feature. Below is a code sample that creates an XLSX file from scratch, adding a comment to cell \u0026amp;ldquo;A1\u0026amp;rdquo; with a picture set as its background.\n\\\n","date":-62135596800,"description":"","objectID":"10f4b5a7aef68cf9c416d7d4161b2f31","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/managing+comments/","title":"Managing Comments"},{"content":"   Contents Summary\n1 Introduction\n2 Adding Text Box Control to a Worksheet\n3 Manipulating Text Box Controls in Designer Spreadsheets\n4 Adding Check Box Control to a Worksheet 4.1 Using Microsoft Excel\n4.2 Using Aspose.Cells\n5 Adding Radio Button Control to the Worksheet 5.1 Using Microsoft Excel\n5.2 Using Aspose.Cells\n6 Adding Combo Box Control to a Worksheet 6.1 Using Microsoft Excel\n6.2 Using Aspose.Cells\n7 Adding Label Control to a Worksheet\n8 Adding List Box Control to a Worksheet 8.1 Using Microsoft Excel\n8.2 Using Aspose.Cells\n9 Adding Button Control to a Worksheet 9.1 Using Microsoft Excel\n9.2 Using Aspose.Cells\n10 Adding Line Control to the Worksheet 10.1 Using Microsoft Excel\n10.2 Using Aspose.Cells\n10.3 Adding an Arrow Head to a Line\n11 Adding Rectangle Control to a Worksheet 11.1 Using Microsoft Excel\n11.2 Using Aspose.Cells\n12 Adding Arc Control to the Worksheet 12.1 Using Microsoft Excel\n12.2 Using Aspose.Cells\n13 Adding Oval Control to a Worksheet 13.1 Using Microsoft Excel\n13.2 Using Aspose.Cells\n14 Adding Spinner Control to the Worksheet 14.1 Using Microsoft Excel\n14.2 Using Aspose.Cells\n15 Adding Scroll Bar Control to a Worksheet 15.1 Using Microsoft Excel\n15.2 Using Aspose.Cells\n16 Adding GroupBox Control to Group Controls in a Worksheet 16.1 Using Microsoft Excel\n16.2 Using Aspose.Cells\n |     Introduction     Developers can add different drawing objects such as text boxes, check boxes, radio buttons, combo boxes, labels, buttons, lines, rectangles, arcs, ovals, spinners, scroll bars, group boxes etc. Aspose.Cells provides the Aspose.Cells.Drawing namespace which contains all the drawing objects. However, there are a few drawing objects or shapes that are not supported yet. Create these drawing objects in a designer spreadsheet using Microsoft Excel and then import the designer spreadsheet to Aspose.Cells. Aspose.Cells allows you to load these drawing objects from a designer spreadsheet and write them to a generated file.\nAdding Text Box Control …","date":-62135596800,"description":"","objectID":"49467c7ff9247c2300fef7c24193f533","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/managing+controls/","title":"Managing Controls"},{"content":"   Contents Summary\n1 Introduction 1.1 Inserting OLE Objects into the Worksheet\n1.2 Extracting OLE Objects in the Workbook\n1.3 Extracting Embedded MOL File\n |     Introduction     OLE (Object Linking and Embedding) is Microsoft\u0026amp;rsquo;s framework for a compound document technology. Briefly, a compound document is something like a display desktop that can contain visual and information objects of all kinds: text, calendars, animations, sound, motion video, 3D, continually updated news, controls, and so forth. Each desktop object is an independent program entity that can interact with a user and also communicate with other objects on the desktop.\nOLE (Object Linking and Embedding) is supported by many different programs and is used to make content created in one program available in another. For example, you can insert a Microsoft Word document into Microsoft Excel. To see what types of content you can insert, click Object on the Insert menu. Only programs that are installed on the computer and that support OLE objects appear in the Object type box.\nInserting OLE Objects into the Worksheet\nAspose.Cells supports adding, extracting and manipulating OLE objects in worksheets. For this reason, Aspose.Cells has the OleObjectCollection class, used to add a new OLE Object to the collection list. Another class, OleObject, represents an OLE Object. It has some important members:\n The ImageData property specifies the image (icon) data of byte array type. The image will be displayed to show the OLE Object in the worksheet. The ObjectData property specifies the object data in the form of a byte array. This data will be shown in its related program when you double-click on the OLE Object icon.  The following example shows how to add an OLE Object(s) into a worksheet.\n\\\nExtracting OLE Objects in the Workbook\nThe following example shows how to extract OLE Objects in a Workbook. The example gets different OLE objects from an existing XLS file and saves different files (DOC, XLS, PPT, …","date":-62135596800,"description":"","objectID":"81531475f570ce8793749725b4d59f38","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/managing+ole+objects/","title":"Managing OLE Objects"},{"content":"   Contents Summary\n1 Adding Pictures 1.1 Positioning Pictures 1.1.1 Proportional Positioning\n1.1.2 Absolute Positioning\n1.2 Inserting a Picture Based on Cell Reference\n |     Aspose.Cells allows developers to add pictures to spreadsheets at runtime. Moreover, the positioning of these pictures can be controlled at runtime, which is discussed in more detail in the coming sections.     This article explains how to add pictures, and how to insert an image that shows the content of certain cells.\nAdding Pictures\nAdding pictures to a spreadsheet is very easy. It only takes a few lines of code: Simply call the Add method of the Pictures collection (encapsulated in the Worksheet object). The Add method takes the following parameters:\n Upper left row index, the index of the upper left row. Upper left column index, the index of the upper left column. Image file name, the name of the image file, complete with path.  \\\nPositioning Pictures\nThere are two possible ways to control the positioning of pictures using Aspose.Cells:\n Proportional positioning: define a position proportional to the row height and width. Absolute positioning: define the exact position on the page where the image will be inserted, for example, 40 pixels to the left and 20picels below the edge of the cell.  Proportional Positioning\nDevelopers can position the pictures proportional to row height and column width using the UpperDeltaX and UpperDeltaY properties of the Aspose.Cells.Drawing.Picture object. A Picture object can be obtained from the Pictures collection by passing its picture index. This example places an image in the F6 cell.\n\\\nAbsolute Positioning\nDevelopers can also position the pictures absolutely by using the Left and Top properties of the Picture object. This example places an image in cell F6, 60 pixels from the left and 10 pixels from the top of the cell.\n\\\nInserting a Picture Based on Cell Reference\nAspose.Cells lets you display the contents of a worksheet cell in an image shape. You can …","date":-62135596800,"description":"","objectID":"91db96efa01d41086fab7f0cfa46ee47","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/managing+pictures/","title":"Managing Pictures"},{"content":"   Contents Summary\n1 Remove ActiveX Control\n2 Sample Code \n |     Remove ActiveX Control     Aspose.Cells provides the ability to remove ActiveX Control from workbooks. For this, the API provides the Shape.RemoveActiveXControl method. The following code snippet demonstrates the use of the Shape.RemoveActiveXControl method to remove ActiveX Control.\n**Sample Code **\nAttachments: SmartArt.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUpdateActiveXComboBoxControl.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"91c7eefceb90fac00b715316f892d9a0","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/remove+activex+control/","title":"Remove ActiveX Control"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n |     Possible Usage Scenarios     Text boxes can have tags which can be replaced with some text at run time to configure them according to the requirement. Tags can be some labels enclosed in angle brackets \u0026amp;lsquo;\u0026amp;lt;\u0026amp;rsquo; and \u0026amp;lsquo;\u0026amp;gt;\u0026amp;rsquo;. There can be multiple tags within a single textbox.\nSample Code\nFollowing sample code replaces tags TAG_1 and TAG_2 with some text say \u0026amp;lsquo;ys\u0026amp;rsquo; and \u0026amp;lsquo;1\u0026amp;rsquo;. Sample file for testing below code can be downloaded from the following link:\nsampleReplaceTagWithText.xlsx\nAttachments: sampleReplaceTagWithText.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"e333d594d7bc5c1220818c9d70c8803e","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/replace+tag+with+text+in+a+textbox+inside+the+worksheet/","title":"Replace tag with text in a textbox inside the Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code \n |     Possible Usage Scenarios     Smart art is one of the major objects in a workbook. Many times there is a need to update the text in smart art. Aspose.Cells provide this feature by setting Shape.Text property.\nThe sample source file can be downloaded from the following link:\nSmartArt.xlsx\n**Sample Code **\nAttachments: SmartArt.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"d265f8d37b767fced9d4c35f62311ffc","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/replace+text+in+smart+art/","title":"Replace text in smart art"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Rotate Text with Shape inside the Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     You can add text inside any shape using Microsoft Excel. If you add shape using the very old Microsoft Excel 2003, then the text will not rotate with shape. But if you add shape using newer versions of Microsoft Excel e.g. 2007, 2010, 2013 or 2016, etc. then the text will rotate with shape. You can control if the text should rotate with the shape or not using the ShapeTextAlignment.RotateTextWithShape property. The default value of it is true which means text will rotate with shape but if you set it as false, then the text will not rotate with shape.\nRotate Text with Shape inside the Worksheet\nThe following sample code loads the sample Excel file that has a triangle shape and its text rotates with shape. If you open the sample Excel file in Microsoft Excel and rotate the triangle shape, the text will also rotate with it. The code then sets the ShapeTextAlignment.RotateTextWithShape property as **false **and saves it as output Excel file. If you now open the output Excel file in Microsoft Excel and rotate the triangle shape, the text will not rotate with it. Please see the following screenshot showing the effect of the code on sample Excel file for a reference.\nSample Code\nAttachments: Rotate-Text-With-Shape.png (image/png) sampleRotateTextWithShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputRotateTextWithShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"d4ff776ca32b39ac531e31e119669720","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/rotate+text+with+shape+inside+the+worksheet/","title":"Rotate Text with Shape inside the Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Send Shape Front or Back inside the Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     When there are multiple shapes present in the same location then how will they be visible is decided by their z-order positions. Aspose.Cells provides Shape.ToFrontOrBack() method which changes the z-order position of the shape. If you want to send shape to back you will use a negative number like -1, -2, -3, etc. and if you want to send shape to the front, you will use a positive number like 1, 2, 3, etc.\nSend Shape Front or Back inside the Worksheet\nThe following sample code explains the usage of Shape.ToFrontOrBack() method. Please see the sample Excel file used inside the code and the output Excel file generated by it. The screenshot shows the effect of the code on the sample Excel file on execution.\nSample Code\nAttachments: sampleToFrontOrBack.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputToFrontOrBack.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Send Shape Front or Back inside the Worksheet.png (image/png)\n","date":-62135596800,"description":"","objectID":"c73235718426be86cc4012f0ad700ef1","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/send+shape+front+or+back+inside+the+worksheet/","title":"Send Shape Front or Back inside the Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Set Margins of Comment or Shape inside the Worksheet\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to set the margins of any shape or comment using the Shape.TextBody.TextAlignment property. This property returns the object of Aspose.Cells.Drawing.Texts.ShapeTextAlignment class which has different properties e.g. TopMarginPt, LeftMarginPt, BottomMarginPt, RightMarginPt, etc. that can be used to set the top, left, bottom and right margins.\nSet Margins of Comment or Shape inside the Worksheet\nPlease see the following sample code. It loads the sample Excel file that contains two shapes. The code accesses the shapes one by one and sets their top, left, bottom and right margins. Please see the output Excel file generated by the code and screenshot showing the effect of the code on the output Excel file.\nSample Code\nAttachments: sampleSetMarginsOfCommentOrShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Set-Margins-Of-Comment-Or-Shape.png (image/png) outputSetMarginsOfCommentOrShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"87dbbe468a183f7a4be8337ed886582d","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/set+margins+of+comment+or+shape+inside+the+worksheet/","title":"Set Margins of Comment or Shape inside the Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify the Far East and Latin Name of the Font in Text Options of Shape\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes you want to display text in Far East language font e.g. Japanese, Chinese, Thai, etc. Aspose.Cells provides TextOptions.FarEastName property that can be used to specify the font name of Far East language. Besides, you can also specify the Latin font name using TextOptions.LatinName property. Specify the Far East and Latin Name of the Font in Text Options of Shape\nThe following sample code creates a text box and adds some Japanese text inside it. It then specifies the Latin and Far East font names of the text and saves the workbook as output Excel file. The following screenshot shows the Latin and Far East font names of the output text box in Microsoft Excel.\nSample Code\nAttachments: outputSpecifyFarEastAndLatinNameOfFontInTextOptionsOfShape.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Specify-FarEast-And-LatinName-Of-Font.png (image/png)\n","date":-62135596800,"description":"","objectID":"8224181691ffcd024e5662e366ba0d7c","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/specify+the+far+east+and+latin+name+of+the+font+in+text+options+of+shape/","title":"Specify the Far East and Latin Name of the Font in Text Options of Shape"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Tile Picture as a Texture inside the Shape\n3 Screenshot\n4 Sample Code\n |     Possible Usage Scenarios     When the picture is small and does not cover the entire surface of the shape without losing its quality, then you have the option to tile it. Tiling fills the shape surface with a small image by repeating them as if they are tiles.\nTile Picture as a Texture inside the Shape\nYou can fill the shape surface with some image and tile it using the Shape.Fill.TextureFill.IsTiling property and setting it true. Please see the following sample code, its sample Excel file, its output Excel file as well as the screenshot for a reference.\nScreenshot\nSample Code\nAttachments: Tile-Picture-as-a-Texture-inside-the-Shape.png (image/png) sampleTextureFill_IsTiling.xlsx (application/unknown) outputTextureFill_IsTiling.xlsx (application/unknown) sampleTextureFill_IsTiling.xlsx (application/unknown) outputTextureFill_IsTiling.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"a29063693a0678c6fa4b5515461a52bb","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/tile+picture+as+a+texture+inside+the+shape/","title":"Tile Picture as a Texture inside the Shape"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"b1f62550e6b1ed79f9c00856e69e388a","permalink":"https://roywangt.github.io/cellsnet/developerguide/drawingobjects/","title":"Drawing Objects"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Selection of Fonts\n3 Set Custom Font Folders\n4 Font Substitution Mechanism\n5 Information Gathering\n ||      Possible Usage Scenarios      Aspose.Cells APIs provide the facility to render the spreadsheets in image formats as well as convert them to PDF \u0026amp;amp; XPS formats. In order to maximize the conversion fidelity, it is necessary that the fonts used in the spreadsheet should be available in the operating system\u0026amp;rsquo;s default font directory. In case the required fonts are not present then the Aspose.Cells APIs will try to substitute the required fonts with the ones available.\nSelection of Fonts\nBelow is the process that Aspose.Cells APIs follow behind the scene.\n The API tries to find the fonts on the file system matching the exact font name used in the spreadsheet. If API cannot find the fonts with the exact same name, it attempts to use the default font specified under the Workbook\u0026amp;rsquo;s DefaultStyle.Font property. If API cannot locate the font defined under the workbook\u0026amp;rsquo;s DefaultStyle.Font property, it attempts to select the most suitable fonts from all of the available fonts. Finally, if API cannot find any fonts on the file system, it renders the spreadsheet using Arial.  Set Custom Font Folders\nAspose.Cells APIs search the operating system\u0026amp;rsquo;s default font directory for the required fonts. In case the required fonts are not available in the system\u0026amp;rsquo;s font directory then the APIs search through the custom (user defined) directories. The FontConfigs class has exposed a number of ways to set custom font directories as detailed below.\n FontConfigs.SetFontFolder: This method is useful if there is only one folder to be set. FontConfigs.SetFontFolders: This method is useful when the fonts reside in multiple folders and the user wishes to set all folders separately rather than combining all fonts in a single folder. FontConfigs.SetFontSources: This mechanism is useful when the user wishes to load …","date":-62135596800,"description":"","objectID":"6d4e18e981c4beaa75d297974f64322d","permalink":"https://roywangt.github.io/cellsnet/developerguide/fonts/configuring+fonts+for+rendering+spreadsheets/","title":"Configuring Fonts for Rendering Spreadsheets"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get a List of Fonts used in a Spreadsheet or Workbook\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     It is often necessary to know the fonts being used in your workbook for rendering purpose. When you convert your workbook into PDF or image, then Aspose.Cells requires that all the needed fonts are installed on your system or present in your fonts directory. If Aspose.Cells is unable to find the needed font, it tries to replace it with some other suitable font which is present on your system or in your font directory and can substitute your actual font. This not only results in the undesired rendering of PDF or images but also takes processing time for finding suitable fonts.\nIn order to deal with such cases, you should know what fonts are beings used by your workbook, then either install those fonts on your system in case of Windows environment or place it in your fonts directory in case of windows or Linux environment.\nAspose.Cells provides the Workbook.GetFonts method which returns the list of all the fonts used in your workbook or spreadsheet.\nGet a List of Fonts used in a Spreadsheet or Workbook\nThe following sample code loads the source excel file and retrieves the list of fonts used inside it. It has one dummy worksheet which has some dummy fonts added for illustration purpose. When the code prints all the fonts inside the workbook, it also prints those dummy fonts. The following screenshot shows the sample excel file and how the dummy fonts are listed.\nSample Code\nConsole Output\nHere is the console output of the above sample code when executed with the given sample excel file.\nAspose.Cells.Font [ Calibri; 11; Regular; Color [Black] ]\nAspose.Cells.Font [ Arial; 10; Regular; Color [A=255, R=0, G=0, B=0] ]\nAspose.Cells.Font [ Calibri; 10; Bold; Color [Black] ]\nAspose.Cells.Font [ Calibri; 10; Regular; Color [A=255, R=128, G=128, B=128] ]\nAspose.Cells.Font [ Calibri; 10; Regular; Color [A=255, …","date":-62135596800,"description":"","objectID":"331836d5e57a38ca041d45f7d57cdc77","permalink":"https://roywangt.github.io/cellsnet/developerguide/fonts/get+a+list+of+fonts+used+in+a+spreadsheet+or+workbook/","title":"Get a List of Fonts used in a Spreadsheet or Workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Set DefaultFont property of PdfSaveOptions/ImageOrPrintOptions\n3 Sample Code\n |     Possible Usage Scenarios     While setting the DefaultFont property of PdfSaveOptions and ImageOrPrintOptions, you might expect that saving to PDF or image would set that DefaultFont to all the text in a workbook that has a missing (not installed) font.\nGenerally, when saving to PDF or image, Aspose.Cells will first try to set Workbook\u0026amp;rsquo;s default font (i.e., Workbook.DefaultStyle.Font). If workbook\u0026amp;rsquo;s default font still cannot show/render text properly, then Aspose.Cells will try to render with font mentioned against DefaultFont attribute in PdfSaveOptions/ImageOrPrintOptions.\nTo cope with your expectation, we have a Boolean property named \u0026amp;ldquo;CheckWorkbookDefaultFont\u0026amp;rdquo; in PdfSaveOptions/ImageOrPrintOptions. You can set it to false to disable trying workbook\u0026amp;rsquo;s default font or let the DefaultFont setting in PdfSaveOptions/ImageOrPrintOptions to have priority.\nSet DefaultFont property of PdfSaveOptions/ImageOrPrintOptions\nThe following sample code opens an Excel file. The A1 cell (in the first worksheet) has a text set to \u0026amp;ldquo;Christmas Time Font text\u0026amp;rdquo;. The font name is \u0026amp;ldquo;Christmas Time Personal Use\u0026amp;rdquo; that is not installed on the machine. We set DefaultFont attribute of PdfSaveOptions/ImageOrPrintOptions to \u0026amp;ldquo;Times New Roman\u0026amp;rdquo;. We also set CheckWorkbookDefaultFont Boolean property to \u0026amp;ldquo;false\u0026amp;rdquo; which ensures that the text of A1 cell is rendered with \u0026amp;ldquo;Times New Roman\u0026amp;rdquo; font and should not use the default font of the workbook (\u0026amp;ldquo;Calibri\u0026amp;rdquo; in this case). The code renders the first worksheet to PNG and TIFF image formats. It finally renders to a PDF file format. The default value of CheckWorkbookDefaultFont attribute is true.\nThis is the screenshot of the template file used in the example code.\nThis is the output PNG image after setting the …","date":-62135596800,"description":"","objectID":"22c7fb6cf11de7ecef1bd0582a0d0283","permalink":"https://roywangt.github.io/cellsnet/developerguide/fonts/set+defaultfont+property+of+pdfsaveoptions+and+imageorprintoptions+to+have+priority/","title":"Set DefaultFont property of PdfSaveOptions and ImageOrPrintOptions to have priority"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify Individual or Private Set of Fonts for Workbook Rendering\n3 Sample Code\n |     Possible Usage Scenarios     Generally, you specify the fonts directory or list of fonts for all workbooks but sometimes, you have to specify individual or private set of fonts for your workbooks. Aspose.Cells provides IndividualFontConfigs class that can be used to specify the individual or private set of fonts for your workbook.\nSpecify Individual or Private Set of Fonts for Workbook Rendering\nThe following sample code loads the sample Excel file with its individual or private set of fonts which are specified using the IndividualFontConfigs class. Please see the sample font used inside the code as well as the output PDF generated by it. The following screenshot shows how the output PDF looks if the font is found successfully.\nSample Code\nAttachments: sampleSpecifyIndividualOrPrivateSetOfFontsForWorkbookRendering.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSpecifyIndividualOrPrivateSetOfFontsForWorkbookRendering.pdf (application/pdf) Specify-Individual-or-Private-Set-of-Fonts-for-Workbook-Rendering.png (image/png) CustomFonts.zip (application/zip)\n","date":-62135596800,"description":"","objectID":"5bf3eb1e099c3e67879fb8937c61bdf4","permalink":"https://roywangt.github.io/cellsnet/developerguide/fonts/specify+individual+or+private+set+of+fonts+for+workbook+rendering/","title":"Specify Individual or Private Set of Fonts for Workbook Rendering"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"e6374815f4bcccd7b23ab86828ea03c1","permalink":"https://roywangt.github.io/cellsnet/developerguide/fonts/","title":"Fonts"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add Cells to Microsoft Excel Formula Watch Window\n3 Sample Code\n |     Possible Usage Scenarios     Microsoft Excel Watch Window is a useful tool to watch the cell values and its formulas conveniently in a window. You can open the Watch Window using Microsoft Excel by clicking the Formulas \u0026amp;gt; Watch Window. It has the Add Watch button that can be used to add the cells for inspection. Similarly, you can use Worksheet.CellWatches.Add() method to add cells into Watch Window using Aspose.Cells API.\nAdd Cells to Microsoft Excel Formula Watch Window\nThe following sample code sets the formula of cells C1 and E1 and adds both of them to Watch Window. It then saves the workbook as output Excel file. If you open the output Excel file and view the Watch Window, you will see both cells as shown in this screenshot.\nSample Code\nAttachments: outputAddCellsToMicrosoftExcelFormulaWatchWindow.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Add-Cells-to-Watch-Window-using-Aspose.Cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"07c6ff2dc897eb6b78328db69977ceef","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/add+cells+to+microsoft+excel+formula+watch+window/","title":"Add Cells to Microsoft Excel Formula Watch Window"},{"content":"   Contents Summary\n1 Introduction\n2 Concept behind detecting the circular reference\n |     Introduction     Workbooks can have circular references and sometimes there is a need to detect if circular references are there or not.\nConcept behind detecting the circular reference\nCircular references can only be detected when the formula is calculated because the references of one formula commonly depend on the calculated result of other parts or other formulas. So we provide new APIs for this requirement(to gather cells with circular references) in the process of formula calculation:\nCalculationCell: Represents the calculation of relevant data about one cell being calculated\nAbstractCalculationMonitor.OnCircular(IEnumerator circularCellsData): will be invoked by formula calculation engine when encounter circular references, the element in the enumerator is CalculationCell objects which represent all cells in one circle. The returned value denotes whether the formula engine needs to calculate those cells in circular after this call.\nUser may gather those circular references in the implementation of AbstractCalculationMonitor.OnCircular() method.\nThe source sample file can be downloaded from the following link:\nCircular Formulas.xls\n\\\nDefinition of CircularMonitor class which is derived from AbstractCalculationMonitor class is as follows:\n\\\nAttachments: Circular Formulas.xls (application/vnd.ms-excel)\n","date":-62135596800,"description":"","objectID":"c4fc95bc9c60f5e9e12d7a46e226dd8c","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/detecting+circular+reference/","title":"Detecting Circular Reference"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Interrupt or Cancel the Formula Calculation of Workbook\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells provides a mechanism to interrupt or cancel the formula calculation of workbook using the AbstractCalculationMonitor.Interrupt() method. This is useful when the formula calculation of workbook is taking too much time and you want to cancel its processing.\nInterrupt or Cancel the Formula Calculation of Workbook\nThe following sample code implements the BeforeCalculate() method of AbstractCalculationMonitor class. Inside this method, it finds the cell name using row and column index parameters. If the cell name is B8, it interrupts the calculation process by calling the AbstractCalculationMonitor.Interrupt() method. Once, the concrete class of AbstractCalculationMonitor class is implemented, its instance is assigned to CalculationOptions.CalculationMonitor property. Finally, Workbook.CalculateFormula() is called by passing CalculationOptions as a parameter. Please see the sample Excel file used inside the code as well as the console output of the code given below for a reference.\nSample Code\nConsole Output\n0\u0026amp;mdash;-1\u0026amp;mdash;-3\u0026amp;mdash;-D2\n0\u0026amp;mdash;-4\u0026amp;mdash;-6\u0026amp;mdash;-G5\n0\u0026amp;mdash;-7\u0026amp;mdash;-1\u0026amp;mdash;-B8\nAttachments: sampleCalculationMonitor.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"efb3ec2eba139f1a473ef6f4cbcec61f","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/interrupt+or+cancel+the+formula+calculation+of+workbook/","title":"Interrupt or Cancel the Formula Calculation of Workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify Maximum Rows of Shared Formula\n3 Sample Code\n |     Possible Usage Scenarios     The default maximum rows of the shared formula are 64. It could be any number e.g. it could be 1000. The performance of shared formula changes with a different number of rows. Therefore, Aspose.Cells provides the Workbook.Settings.MaxRowsOfSharedFormula property that can be used to specify the maximum rows of the shared formula. The shared formula will be split to several shared formulae if the total rows of the shared formula are greater than it as shown in the following screenshot.\nSpecify Maximum Rows of Shared Formula\nThe following sample code explains the usage of the Workbook.Settings.MaxRowsOfSharedFormula property. It sets the maximum rows of the shared formula to 5 and adds the shared formula in cell D1 for 100 rows and saves to output Excel file. If you extract the contents of output Excel file and check the sheet1.xml, you will see the shared formula splits after every 5 rows as highlighted in the above screenshot.\nSample Code\nAttachments: Specify Maximum Row Number of Shared Formula.png (image/png) outputSpecifyMaximumRowsOfSharedFormula.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"d5c84bd066167e61b66c9ef5fc5c6272","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/specify+maximum+rows+of+shared+formula/","title":"Specify Maximum Rows of Shared Formula"},{"content":"Aspose.Cells APIs support most of the standard functions and Excel\u0026amp;rsquo;s built-in formula. Below, you can find all the supported functions in alphabetical order.\nSet, Read and Calculate at Runtime\nAspose.Cells\u0026amp;rsquo; Formula Calculation Engine allows you to set, read and calculate the results of the following formulas and functions. Formula and functions are shown in alphabetical order.\nA\n ABS ACCRINT ACCRINTM ACOS ACOSH ADDRESS AGGREGATE AMORDEGRC AMORLINC AND AREAS ASC ASIN ASINH ATAN ATAN2 ATANH AVEDEV AVERAGE AVERAGEA AVERAGEIF AVERAGEIFS  B\n BESSELI BESSELJ BESSELK BESSELY BETA.DIST BETA.INV BETADIST BETAINV BIN2DEC BIN2HEX BIN2OCT BINOM.DIST BINOMDIST BITAND BITLSHIFT BITOR BITRSHIFT BITXOR  C\n CEILING CEILING.MATH CEILING.PRECISE CELL CHAR CHIDIST CHIINV CHISQ.DIST CHISQ.DIST.RT CHISQ.INV.RT CHISQ.TEST CHITEST CHOOSE CLEAN CODE COLUMN COLUMNS COMBIN COMPLEX CONCAT CONCATENATE CONFIDENCE CONFIDENCE.NORM CONVERT CORREL COS COSH COUNT COUNTA COUNTBLANK COUNTIF COUNTIFS COUPDAYBS COUPDAYS COUPDAYSNC COUPNCD COUPNUM COUPPCD COVAR COVARIANCE.P COVARIANCE.S CRITBINOM CUMIPMT CUMPRINC  D\n DATE DATEDIF DATEVALUE DAVERAGE DAY DAYS DAYS360 DB DCOUNT DCOUNTA DDB DEC2BIN DEC2HEX DEC2OCT DEGREES DELTA DEVSQ DGET DISC DMAX DMIN DOLLAR DOLLARDE DOLLARFR DPRODUCT DSTDEV DSTDEVP DSUM DURATION DVAR DVARP  E\n EDATE EFFECT EOMONTH ERF ERFC ERROR.TYPE EVEN EXACT EXP EXPONDIST  F\n F.DIST F.DIST.RT F.INV.RT FACT FACTDOUBLE FDIST FILTER FIND FINDB FINV FISHER FISHERINV FIXED FLOOR FLOOR.MATH FORECAST FORECAST.LINEAR FORMULATEXT FREQUENCY FV FVSCHEDULE FALSE  G\n GAMMA.DIST GAMMA.INV GAMMADIST GAMMAINV GAMMALN GCD GEOMEAN GETPIVOTDATA GESTEP GROWTH  H\n HARMEAN HEX2BIN HEX2DEC HEX2OCT HLOOKUP HOUR HYPERLINK HYPGEOM.DIST HYPGEOMDIST  I\n IF IFERROR IFNA IFS IMABS IMAGINARY IMARGUMENT IMCONJUGATE IMCOS IMDIV IMEXP IMLN IMLOG10 IMLOG2 IMPOWER IMPRODUCT IMREAL IMSIN IMSQRT IMSUB IMSUM INDEX INDIRECT INT INTERCEPT INTRATE IPMT IRR ISBLANK ISERR ISERROR ISEVEN ISLOGICAL ISNA ISNONTEXT …","date":-62135596800,"description":"","objectID":"1828bc51dfb8622f52625adb6cf4eaf0","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/supported+formula+functions/","title":"Supported Formula Functions"},{"content":"   Contents Summary\n1 Introduction\n2 Using Formulae and Functions\n3 Using Built-in Functions\n4 Using Add-in Functions\n5 Using Array Formula 5.1 Using R1C1 Formula\n |     Introduction     One of the of Microsoft Excel\u0026amp;rsquo;s compelling features is its ability to process data with formulas and functions. Microsoft Excel provides a set of built-in functions and formulas that helps users to perform complex calculations quickly. Aspose.Cells also provides a huge set of built-in functions and formulas that help developers compute values easily. Aspose.Cells also supports add-in functions. Moroever, Aspose.Cells support array and R1C1 formulas in Aspose.Cells.\nUsing Formulae and Functions\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection. Each item in the Cells collection represents an object of the Cell class.\nIt is possible to apply formulas to cells using properties and methods offered by the Cell class, discussed in more detail below.\n Using built-in functions. Using add-in functions. Working with array formulas. Creating a R1C1 formula.  \\\nUsing Built-in Functions\nBuilt-in functions or formulas are provided as ready-made functions to reduce developers\u0026amp;rsquo; efforts and time. See a list of built-in functions supported by Aspose.Cells. The functions are listed in alphabetical order. More functions will be supported in future.\nAspose.Cells supports most of the formulas or functions offered by Microsoft Excel. Developers can use these formulas through the API or designer spreadsheet. Aspose.Cells supports a huge set of mathematical, string, Boolean, date/time, statistical, database, lookup and reference formulas.\nUse the Cell class\u0026amp;rsquo; Formula property to add a formula to a cell. Complex formulas, for example\n= H7*(1+IF(P7 = …","date":-62135596800,"description":"","objectID":"fd3684940c56d72ee6452802858960cf","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/using+formulas+or+functions+to+process+data/","title":"Using Formulas or Functions to Process Data"},{"content":"   Contents Summary\n1 Introduction\n2 Adding Formulas \u0026amp;amp; Calculating Results\n3 Direct Calculation of Formula\n4 Calculating Formulas Once Only\n |     Introduction     Aspose.Cells has an embedded formula calculation engine. It can not only re-calculate formulas imported from designer templates but also supports calculating the results of formulas added at runtime.\nAdding Formulas \u0026amp;amp; Calculating Results\nAspose.Cells supports most of the formulas or functions that are the part of Microsoft Excel. they can be used through the API or using designer spreadsheets. Aspose.Cells supports a huge set of mathematical, string, Boolean, date/time, statistical, database, lookup and reference formulas.\nUse the Cell class\u0026amp;rsquo; Formula property to add a formula to a cell. When applying a formula to a cell, always begin the string with an equal sign (=) as you do when creating a formula in Microsoft Excel. Use a comma (,) to delimit function parameters.\nTo calculate the results of formulas, call the Excel class\u0026amp;rsquo; CalculateFormula method which processes all the formulas embedded in an Excel file. Read [a list of the functions supported by the CalculateFormula method.\nCurrently, Aspose.Cells supports the following operators: +, －, *, /, \u0026amp;lt;, \u0026amp;lt;=, =, \u0026amp;gt;=, \u0026amp;gt;, \u0026amp;lt;\u0026amp;gt;, \u0026amp;amp;, %, ^.\nThe the Cell class\u0026amp;rsquo; Formula property works differently from the Excel class\u0026amp;rsquo; CalculateFormula method. The Formula property simply adds the formula to a cell but doesn\u0026amp;rsquo;t calculate the formula results at runtime, as the CalculateFormula method does.\nDirect Calculation of Formula\nAspose.Cells has an embedded formula calculation engine. As well as calculating formulas imported from a designer file, Aspose.Cells can calculate formula results directly.\nSometimes, you need to calculate formula results directly without adding them into a worksheet. The values of the cells used in the formula already exist in a worksheet and all you need is to find the result of those values based …","date":-62135596800,"description":"","objectID":"0c0df4b724210a87ae061a759bac662c","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/ways+to+calculate+formulas/","title":"Ways to Calculate Formulas"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"81722eb4f887230086c5574944c6921b","permalink":"https://roywangt.github.io/cellsnet/developerguide/formulas/","title":"Formulas"},{"content":"   Contents Summary\n1 Convert Excel to HTML with headings\n2 Sample Code\n |     Convert Excel to HTML with headings     Aspose.Cells provides the option to export headings while converting Excel to HTML. For this, you may set the HtmlSaveOptions.ExportHeadings property to true. The default value of HtmlSaveOptions.ExportHeadings property is false. The following image shows the output file generated by the following code.\nSample Code\nAttachments: Output-HTML-ExcludeUnusedStyles.zip (application/zip) HtmlSaveOptions-Exclude-Unused-Styles.png (image/png) PrintHeadings.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"3db59ad80c48a831d0904598341d7044","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/convert+excel+to+html+with+headings/","title":"Convert Excel to HTML with headings"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Disable Downlevel Revealed Comments while saving to HTML\n3 Sample Code\n |     Possible Usage Scenarios     When you save your Excel file to HTML, then Aspose.Cells reveals Downlevel Conditional Comments. These conditional comments are mostly relevant to older versions of Internet Explorer and are irrelevant to modern Web Browsers. You can read about them in detail at the following link.\n Conditional comment - Downlevel-revealed conditional comment  Aspose.Cells allows you to eliminate these Downlevel Revealed Comments by setting the HtmlSaveOptions.DisableDownlevelRevealedComments property to true.\nDisable Downlevel Revealed Comments while saving to HTML\nThe following sample code shows the usage of HtmlSaveOptions.DisableDownlevelRevealedComments property. The screenshot shows the effect of this property when it is not set to true. Please download the sample Excel file used in this code and the output HTML generated by it for a reference.\nSample Code\nAttachments: sampleDisableDownlevelRevealedComments.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output HTML.zip (application/zip) Disable-Downlevel-Revealed-Comments.png (image/png)\n","date":-62135596800,"description":"","objectID":"9e2ad83afa6225a190d5a89fcfb24564","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/disable+downlevel+revealed+comments+while+saving+to+html/","title":"Disable Downlevel Revealed Comments while saving to HTML"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Exclude Unused Styles during Excel to HTML conversion\n3 Sample Code\n |     Possible Usage Scenarios     Microsoft Excel file may contain many unused styles. When you export the Excel file to HTML format, these unused styles are also exported. This can increase the size of HTML. You can exclude the unused styles during the conversion of Excel file to HTML using the HtmlSaveOptions.ExcludeUnusedStyles property. When you set it true, all unused styles are excluded from output HTML. The following screenshot displays a sample unused style inside the output HTML. Exclude Unused Styles during Excel to HTML conversion\nThe following sample code creates a workbook and also creates an unused named style. Since the HtmlSaveOptions.ExcludeUnusedStyles is set to true, this unused named style will not be exported to output HTML. But if you set it to false, then this unused style will be present inside the output HTML which you can then see in HTML markup as shown in the above screenshot.\nSample Code\nAttachments: HtmlSaveOptions-Exclude-Unused-Styles.png (image/png) Output-HTML-ExcludeUnusedStyles.zip (application/zip)\n","date":-62135596800,"description":"","objectID":"00e4a629ef7a8455612d693386f2044f","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/exclude+unused+styles+during+excel+to+html+conversion/","title":"Exclude Unused Styles during Excel to HTML conversion"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Export Comments while Saving Excel file to Html\n3 Sample Code\n |     Possible Usage Scenarios     When you save your Excel file into HTML, comments are not exported. However, Aspose.Cells provides this feature using the HtmlSaveOptions.IsExportComments property. If you set it true, then HTML will also display comments present in your Excel file.\nExport Comments while Saving Excel file to Html\nThe following sample code explains the usage of HtmlSaveOptions.IsExportComments property. The screenshot shows the effect of the code on the HTML when it is set to true. Please download the sample Excel file and the generated HTML for a reference.\nSample Code\nAttachments: sampleExportCommentsHTML.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputExportCommentsHTML.html (text/html) Export-Comments-while-Saving-Excel-file-to-Html.png (image/png)\n","date":-62135596800,"description":"","objectID":"bbf1268887d588a0f2255701b2ca508f","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/export+comments+while+saving+excel+file+to+html/","title":"Export Comments while Saving Excel file to Html"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Export Document, Workbook and Worksheet Properties in Excel to HTML conversion\n3 Sample Code\n |     Possible Usage Scenarios     When Microsoft Excel file is exported to HTML using Microsoft Excel or Aspose.Cells, it also exports various types of Document, Workbook and Worksheet properties as shown in the following screenshot. You can avoid exporting these properties by setting the HtmlSaveOptions.ExportDocumentProperties, HtmlSaveOptions.ExportWorkbookProperties and HtmlSaveOptions.ExportWorksheetProperties as false. The default value of these properties is true. The following screenshot shows how these properties look like in exported HTML.\nExport Document, Workbook and Worksheet Properties in Excel to HTML conversion\nThe following sample code loads the sample Excel file and converts it to HTML and does not export the Document, Workbook and Worksheet properties in output HTML.\nSample Code\nAttachments: Export-Document-Workbook-Worksheet-Properties.png (image/png) sampleExportDocumentWorkbookWorksheetProperties.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Output HTML.zip (application/zip)\n","date":-62135596800,"description":"","objectID":"6deff7fbb1ac95e346f94520fa64f6dd","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/export+document+workbook+and+worksheet+properties+in+excel+to+html+conversion/","title":"Export Document Workbook and Worksheet Properties in Excel to HTML conversion"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Export Worksheet CSS Separately in Output HTML\n3 Sample Code\n4 Export single sheet workbook to HTML\n5 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells provides the feature to export worksheet CSS separately when you convert your Excel file to HTML. Please use HtmlSaveOptions.ExportWorksheetCSSSeparately property for this purpose and set it to true while saving Excel file to HTML format.\nExport Worksheet CSS Separately in Output HTML\nThe following sample code creates an Excel file, adds some text in cell B5 in Red color and then saves it in HTML format using HtmlSaveOptions.ExportWorksheetCSSSeparately property. Please see the output HTML generated by the code for reference. You will find stylesheet.css inside it as an outcome of the sample code.\nSample Code\nExport single sheet workbook to HTML\nWhen a workbook with multiple sheets is converted to HTML using Aspose.Cells, it creates an HTML file along with a folder containing CSS and multiple HTML files. When this HTML file is opened in the browser, the tabs are visible. The same behavior is required for a workbook with single worksheet when it is converted to HTML. Earlier no separate folder was created for single sheet workbooks and only HTML file was created. Such HTML file does not show tab when opened in browser. MS Excel creates proper folder and HTML for a single sheet also and hence same behavior is implemented using Aspose.Cells APIs. The sample file can be downloaded from the following link for using in the sample code below:\nsampleSingleSheet.xlsx\nSample Code\nAttachments: outputExportWorksheetCSSSeparately-HTML.zip (application/zip) sampleSingleSheet.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"e578a6fdbe4f584ea8e347af225053d6","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/export+worksheet+css+separately+in+output+html/","title":"Export Worksheet CSS Separately in Output HTML"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n |     Possible Usage Scenarios     This is a common scenario where we need to export only print area i.e. selected range of cells instead of the entire sheet to HTML. This feature is already available for PDF rendering, however, now you can perform this task for HTML as well. First set the print area in the page setup object of the worksheet. Later on, use HtmlSaveOptions.ExportPrintAreaOnly flag to export selected range only.\nSample Code\nFollowing sample code loads a workbook and then exports print area to the HTML. Sample file for testing this feature can be downloaded from the following link:\nsampleInlineCharts.xlsx\n\\\nAttachments: sampleInlineCharts.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"4d3a315a89f1c2e9d78bcfd3a2b7d24b","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/export+print+area+range+to+html/","title":"Export print area range to HTML"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Export similar Border Style when Border Style is not supported by Web Browsers\n3 Sample Code\n |     Possible Usage Scenarios     Microsoft Excel supports some type of dashed borders which are not supported by Web Browsers. When you convert such an Excel file into HTML using Aspose.Cells, such borders are removed. However, Aspose.Cells can also support to display such borders with HtmlSaveOptions.ExportSimilarBorderStyle property. Please set its value as true and the unsupported borders will also be exported to HTML file.\nExport similar Border Style when Border Style is not supported by Web Browsers\nThe following sample code loads the sample Excel file that contains some unsupported borders as shown in the following screenshot. The screenshot further illustrates the effect of HtmlSaveOptions.ExportSimilarBorderStyle property inside the output HTML.\nSample Code\nAttachments: outputExportSimilarBorderStyle.zip (application/zip) Export-Similar-Border-Style.png (image/png) sampleExportSimilarBorderStyle.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"1a9d7604aba6bc8aa97882c90d1ee9a6","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/export+similar+border+style+when+border+style+is+not+supported+by+web+browsers/","title":"Export similar Border Style when Border Style is not supported by Web Browsers"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get HTML5 string from Cell\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells returns the HTML string of the cell using the GetHtmlString method which accepts a boolean parameter. If you pass false as a parameter, it will return Normal HTML but if you pass true as a parameter, it will return HTML5 string.\nGet HTML5 string from Cell\nThe following sample code creates a workbook object and adds some text in cell A1 of the first worksheet. It then gets the Normal HTML and HTML5 string from cell A1 using the GetHtmlString method and prints them on the console.\nSample Code\nConsole Output\nNormal:\nThis is some text.\nHtml5:\nThis is some text.\r","date":-62135596800,"description":"","objectID":"ed2a3cdcda0a7e12e5f5c58a11136717","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/get+html5+string+from+cell/","title":"Get HTML5 string from Cell"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Hiding Overlaid Content with CrossHideRight while saving to Html\n3 Sample Code\n |     Possible Usage Scenarios     When you save your Excel file to HTML, you can specify different cross types for cell strings. By default, Aspose.Cells generates HTML as per Microsoft Excel but when you change the cross type to CrossHideRight, then it hides all the strings at the right side of the cell which are overlaid or overlapping with cell string.\nHiding Overlaid Content with CrossHideRight while saving to Html\nThe following sample code loads the sample Excel file and saves it to output HTML after setting the HtmlSaveOptions.HtmlCrossStringType as CrossHideRight. The screenshot explains how CrossHideRight affects the output HTML from default output.\nSample Code\nAttachments: Hiding-Overlaid-Content-With-CrossHideRight.png (image/png) HTML-outputHidingOverlaidContentWithCrossHideRight.zip (application/zip) sampleHidingOverlaidContentWithCrossHideRight.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"dc5393bf3415b52d1dc8b88078bc21b3","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/hiding+overlaid+content+with+crosshideright+while+saving+to+html/","title":"Hiding Overlaid Content with CrossHideRight while saving to Html"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Prefix Table Elements Styles with HtmlSaveOptions.TableCssId property\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to prefix table elements styles with HtmlSaveOptions.TableCssId property. Suppose, you set this property with some value like MyTest_TableCssId, then you will find table elements styles like shown below\ntable#MyTest_TableCssId\n#MyTest_TableCssId tr\n#MyTest_TableCssId col\n#MyTest_TableCssId br\netc.\nThe following screenshot shows the effect of using HtmlSaveOptions.TableCssId property on output HTML. Prefix Table Elements Styles with HtmlSaveOptions.TableCssId property\nThe following sample code demonstrates how to make use of HtmlSaveOptions.TableCssId property. Please check the output HTML generated by the code for a reference.\nSample Code\nAttachments: Prefix-Table-Elements-Styles.png (image/png) HTML-outputTableCssId.zip (application/zip)\n","date":-62135596800,"description":"","objectID":"891cbdf2d1b497422042aa2b26fdc8e8","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/prefix+table+elements+styles+with+htmlsaveoptions.tablecssid+property/","title":"Prefix Table Elements Styles with HtmlSaveOptions.TableCssId property"},{"content":"HTML can have variety of tags formatting for empty tags like  or . Aspose.Cells supports both these formats now whereas earlier it was supporting only  like tags. This feature can be tested by converting the attached sample HTML file to Excel file. The sample HTML file and output Excel file can be downloaded from the following links for testing.\nsampleSelfClosingTags.html\noutsampleSelfClosingTags.xlsx\nSample Code\nAttachments: sampleSelfClosingTags.html (text/html) outsampleSelfClosingTags.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"e8b1739016ee1c9960ce4d7994094c68","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/recognise+self+closing+tags/","title":"Recognise self closing tags"},{"content":"Generating an HTML file from a spreadsheet is very common. The size of the columns is defined in \u0026amp;ldquo;pt\u0026amp;rdquo; which works in many cases. However, there can be a case where this fixed size may not be required. For example, if a container panel width is 600px where this HTML page is being displayed. In this case, you may get a horizontal scrollbar if the generated table width is bigger. It was required that this fixed size shall be changed into a scalable unit like em or percent to get a better presentation. Following sample code can be used where HtmlSaveOptions.WidthScalable is set to true for creating scalable width.\nSample source file and output files can be downloaded from the following links:\nsampleForScalableColumns.xlsx\noutsampleForScalableColumns.zip\nAttachments: sampleForScalableColumns.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outsampleForScalableColumns.zip (application/zip)\n","date":-62135596800,"description":"","objectID":"3837392046126c551e07c0dccf9308a4","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/set+column+width+to+scalable+unit+like+em+or+percent/","title":"Set column width to scalable unit like em or percent"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify how to cross string in output HTML using HtmlCrossType\n3 Sample Code\n |     Possible Usage Scenarios     When cell contains text or string but it is larger than the width of the cell, then the string overflows if the next cell in next column is null or empty. When you save your Excel file into HTML, you can control this overflow by specifying the cross type using the HtmlCrossType enumeration. It has the following values\n HtmlCrossType.Default  Display like MS Excel, depends on the next cell. If the next cell is null, the string will cross or it will be truncated.\n HtmlCrossType.MSExport  Display the string like MS Excel exporting Html.\n HtmlCrossType.Cross  Display HTML cross string, the performance for creating large html files will be more than ten times faster than setting the value to Deault or FitToCell.\n HtmlCrossType.FitToCell  Only displaying the string within the width of cell.\nSpecify how to cross string in output HTML using HtmlCrossType\nThe following sample code loads the sample Excel file and saves it to HTML format by specifying different HtmlCrossType. Please download the output HTMLs generated with this code. The sample Excel file contains the image bordered with red color as shown in this screenshot that shows the effect of the HtmlCrossType values on output HTML.\nSample Code\nAttachments: sampleHtmlCrossStringType.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Sample-Excel-File-HtmlCrossType.png (image/png) Output HTML Files.zip (application/zip)\n","date":-62135596800,"description":"","objectID":"c951dd0e0537a755fc77e7c6d396e552","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/specify+how+to+cross+string+in+output+html+using+htmlcrosstype/","title":"Specify how to cross string in output HTML using HtmlCrossType"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"058cb4e18c647998308f5bdc8e73a34d","permalink":"https://roywangt.github.io/cellsnet/developerguide/html/","title":"HTML"},{"content":"Aspose.Cells Object Model provides information about the structural relationships between the objects of Aspose.Cells class library.\n   Contents Summary\n1 WorksheetCollection/Worksheet\n2 Cells/Cell\n3 ChartCollection/Chart\n4 CommentCollection/Comment\n5 HorizontalPageBreakCollection/HorizontalPageBreak\n6 HyperlinkCollection/Hyperlink\n7 PictureCollection/Picture\n8 VerticalPageBreakCollection/VerticalPageBreak\n       The top level structure of the Aspose.Cells object model is shown below in a hierarchical manner.         Top level structure of Aspose.Cells Object Model        As you can see from the above figure that the root of the object model is the Workbook object. A brief description of few of the objects is provided below for the introductory purposes.    WorksheetCollection/Worksheet\nWorkbook object contains the WorksheetCollection, which represents the collection of all the Worksheet objects in a spreadsheet as shown below:\n   Worksheets \u0026amp;amp; Worksheet objects        Cells/Cell    Each Worksheet object contains a Cells object that represents the collection of all Cell objects in a worksheet as shown below:\n   Cells \u0026amp;amp; Cell objects        You can use the Cell object to get and set the value, style, formula and other properties of a single cell.    ChartCollection/Chart\nCharts object represents a collection of all the Chart objects in a Worksheet. Each Chart object is comprised of several other objects that work together to create and manage charts. The Chart structure in Aspose.Cells is shown in the diagram below:\n   Object model of the Chart        CommentCollection/Comment    Each Worksheet object also contains a Comments object that represents the collection of all Comment objects in a worksheet as shown below:\n   Comments \u0026amp;amp; Comment objects        A Comment object is used to add a comment to any specified cell in the worksheet.    HorizontalPageBreakCollection/HorizontalPageBreak\nEach Worksheet object contains a HorizontalPageBreakCollection that …","date":-62135596800,"description":"","objectID":"b28a618c32eede9afe73a5e8edc4c2c3","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/aspose.cells+object+model/","title":"Aspose.Cells Object Model"},{"content":"Wonder which version of Aspose.Cells you are using? We publish new versions of Aspose.Cells, both to introduce new features and to fix issues, on a regular basis. The version number consists of major and minor version numbers, build and revision number. The major and minor version numbers are required; the build and revision versions are optional. Each number must be an integer from 0 up. The format is as follows (optional components are shown in square brackets (\u0026#39;[\u0026amp;rsquo; and \u0026amp;lsquo;]\u0026#39;):\nmajor.minor[.build[.revision]]\nWhen we release a new build of Aspose.Cells, we update the version number.\nThis article explains how to check which version of Aspose.Cells is installed on the system manually and using the Aspose.Cells API.\n   Contents Summary\n1 Check Version Number Manually\n2 Check Version Number Using the Aspose.Cells API\n ||      Check Version Number Manually      To find out which version of Aspose.Cells you are using manually:\n Right-click the Aspose.Cells.dll file and select Properties. Click the Version (or Details) tab to check the version number.  Check Version Number Using the Aspose.Cells API\nTo find out which version of Aspose.Cells you are using through the API, use the CellsHelper class GetVersion static method to get Aspose.Cell\u0026amp;rsquo;s version number.\n\\\nAttachments: Check Version Number of the Component-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"7ceb81233fd2d364b8ce8941b99eef21","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/check+version+number/","title":"Check Version Number"},{"content":"You can easily download an Aspose.Cells evaluation from the download page @ NuGet repos. The evaluation download is the same as the download for the full version: the evaluation becomes licensed when you apply a license.\nThe evaluation version of Aspose.Cells (that is, Aspose.Cells without a license applied) provides most of the product functionality. One limitation is that it always injects an extra worksheet with an evaluation watermark when a spreadsheet is opened or saved. The injected extra evaluation watermark worksheet to the workbook is shown below:\n   Evaluation warning – an extra worksheet        If you want to test Aspose.Cells without evaluation version limitations, request a 30-day temporary license.    Attachments: Evaluate Aspose.Cells-001.png (image/png) Evaluate Aspose.Cells-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"393ad4d21ed881e063dfea403f8819a5","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/evaluate+aspose.cells/","title":"Evaluate Aspose.Cells"},{"content":"Sometimes you might face some problems installing Aspose.Cells using its installer package (Aspose.Cells.msi\u0026amp;hellip;Windows Installer Package) on Windows Vista. This document explains how we can cope with it and implement the successful installation of the component. Actually Aspose.Cells installer needs to create a virtual folder on IIS for the deployment of its Web Demos (Asp.NET Demos) on your machine, so you need to have an Administration Privileges before installing Aspose.Cells using its installer. The installer demands administrator-level access to the system must be explicitly allowed to do so.\n   Contents Summary\n1 Possible Factors\n2 UAC (User Account Control)\n3 Steps Involved for Successful Installation of the Component 3.1 Using Command Line\n3.2 Using Control Panel\n       Possible Factors      Normally, in Windows Vista, the products/components that you install/use are always implemented under \u0026amp;ldquo;normal user\u0026amp;rdquo; permissions, even if you are an Administrator. The programs are only allowed limited access to the file system, even if you are logged in as an Administrator. This has some unfortunate side effects that you normally wouldn\u0026amp;rsquo;t encounter in Windows XP when logged in as an Administrator.\nUAC (User Account Control)\nUAC is the part of Windows Vista that asks you for permission. The UAC mode (also known as Admin Approval Mode) is a mode of operation that (primarily) affects the way administrator accounts work. When UAC is turned on (which it is by default), you must explicitly give permission to any program that wants to use \u0026amp;ldquo;administrator\u0026amp;rdquo; powers. Any program that tries to use admin powers without your permission will be denied access. UAC is also required for other security features of Windows Vista, including Protected Mode in Internet Explorer. Internet Explorer Protected Mode protects your computer from rogue web pages and other web-related vulnerabilities, including unknown ones.\nWhen UAC mode is enabled, every program that …","date":-62135596800,"description":"","objectID":"1b4463792d6df4c30825fd4c7f111376","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/installing+aspose.cells+on+windows+vista/","title":"Installing Aspose.Cells on Windows Vista"},{"content":"In order to assist the users for upgrading, we maintain a document describing information critical to existing users especially the ones who have been using the older Aspose.Excel and now, they want to upgrade to newer Aspose.Cells. These are intended to be brief notes, and you should be able to find more information checking all the sections of the Programmer’s Guide and Aspose.Cells API Reference.\nUpgrading to Aspose.Cells\nSometimes the previous users (e.g., Aspose.Excel users) might contract an issue / problem or they found some features are missing in the version, alternatively, they need to to upgrade to the newer Aspose.Cells for their requirements. It is to be noted that Aspose.Excel has been renamed to become Aspose.Cells now, so, we cannot continue or make amendments with the older versions of Aspose.Excel component anymore. The new Aspose.Cells component is more reliable, stable and prosperous with enhanced and advanced functionality. We specially focus to optimize its performance for the most diverse scenarios. Just to emphasize, there is not much labor involved upgrading to Aspose.Cells component. However, when you upgrade to it.\nSome APIs (classes, struct, enumerations etc.) are added based on some advanced features that we now offer, the previous classes (with their members) are retained and optimised but a few classes are renamed, some additional members (properties, methods etc.) are also included for the classes with a very few excluded.\nFollowing is the classes list which are renamed:\n\\1. Excel class is replaced by Workbook class.\n\\2. ExcelDesigner class is replaced by WorkbookDesigner class.\n\\3. ExcelHelper class is replaced by CellsHelper class.\nFor further reference, please check our featured demos: https://github.com/aspose-cells/Aspose.Cells-for-.NET\n","date":-62135596800,"description":"","objectID":"3800ed285b910e7b0cb1d773419fd137","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/upgrade+to+modern+aspose.cells+component/","title":"Upgrade to Modern Aspose.Cells Component"},{"content":"Do You Want to Speed Up Development? You can use Aspose.Cells to create Excel files from scratch with the help of its flexible API. One of the most common uses for Aspose.Cells is to create and populate Excel files with data, which may come from an existing database, a user or other sources, dynamically. As well as adding data to Excel files, you\u0026amp;rsquo;ll also need to write to apply formatting (look and feel).\nFormatting takes time. What could speed up development?\n   Contents Summary\n1 The Solution - Designer Spreadsheets 1.1 What is a Designer Spreadsheet?\n1.2 How to Use It?\n1.3 Smart Markers\n       The Solution - Designer Spreadsheets      To speed up your development, Aspose.Cells offers the exciting feature designer spreadsheet.\nWhat is a Designer Spreadsheet?\nA designer spreadsheet is an Excel file created using Microsoft Excel in which all formatting are already applied and the contents can be decided at design time. It\u0026amp;rsquo;s more like a template file that doesn\u0026amp;rsquo;t contain any data but just the formatting, as shown below:\n   Designer spreadsheet        In the Aspose.Cells demos, every spreadsheet is created using this methodology, with the exception of the Invoice demo.    How to Use It?\nAfter creating a designer spreadsheet, use Aspose.Cells to read the designer spreadsheet and add data to its specified positions (according to the pre-defined format settings) at runtime. For example, in the screenshot above, you can see that we already decided at design time to add Product Name, Category Name, Quantity Per Unit and Units In Stock columns. They don\u0026amp;rsquo;t have any data yet: this is be added at runtime. The above figure shows a very simple spreadsheet but designer spreadsheets save you time even on complex spreadsheet.\nSmart Markers\nAdditionally, Aspose.Cells lets you add smart markers to the designer spreadsheet. Smart markers are processed at runtime using the WorkbookDesigner class\u0026amp;rsquo;s Process method. This can help you write less code and still …","date":-62135596800,"description":"","objectID":"1fdede8400f6a7a0b3ebb389b99f1660","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/what+is+a+designer+spreadsheet/","title":"What is a Designer Spreadsheet"},{"content":"Aspose.Cells is created to help developers to create and manage Microsoft Excel spreadsheets programmatically. Aspose.Cells doesn\u0026amp;rsquo;t only understand spreadsheets in Microsoft Excel Sheet Format (XLS/XLSX) but also many other file formats like Comma Separated Values (CSV), Tab Delimited/TSV (Text), SpreadsheetML etc.\nAspose.Cells provides most of the features available in Microsoft Excel but the exciting thing is that Aspose.Cells can process Excel files dynamically, which enables developers to process thousands or millions of spreadsheets very quickly.\nThis article discusses common scenarios of using Aspose.Cells.\n   Contents Summary\n1 Possible Usage Scenarios 1.1 Automated Spreadsheet Management\n1.2 Web Application\n ||      Possible Usage Scenarios      It\u0026amp;rsquo;s up to developers how they use Aspose.Cells but there are few common scenarios in which Aspose.Cells can help. The most common use of Aspose.Cells is deploying it on the Web Server or in Web Services for server side processing. Some of the possible usage scenarios of Aspose.Cells are described below.\nAutomated Spreadsheet Management\n Users upload manually created spreadsheets to a server. Aspose.Cells is used to open files and retrieve data. After the data is retrieved:  The data is saved to a database. Certain data are presented in web pages. Some aspects of the spreadsheets are modified and saved back to Microsoft Excel files.    Web Application\n Users input data in web pages. Data is collected by the web server. Aspose.Cells is used to populate data in brand new files or pre-defined template files. After the Excel file is created, it can be sent to user as a report etc.  We have discussed few of the most common scenarios of using Aspose.Cells in web based environment. But Aspose.Cells is equally useful in desktop based applications also.\n","date":-62135596800,"description":"","objectID":"7952909fb25396616bd6518036905aba","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/where+to+use+aspose.cells/","title":"Where to Use Aspose.Cells"},{"content":"This tutorial shows how to create a very first application (Hello World) using Aspose.Cells\u0026amp;rsquo; simple API. This simple application creates a Microsoft Excel file with the text \u0026amp;lsquo;Hello World\u0026amp;rsquo; in a specified worksheet cell.\n   Contents Summary\n1 Creating the Hello World Application 1.1 Code Sample: Creating a New Workbook\n1.2 Code Sample: Opening an Existing File\n ||      Creating the Hello World Application      The steps below creates the Hello World application using the Aspose.Cells API:\n Create an instance of the Workbook class. If you have a license, then apply it. If you are using the evaluation version, skip the license related code lines. Create a new Excel file, or open an existing Excel file. Access any desired cell of a worksheet in the Excel file. Insert the words Hello World! into a cell accessed. Generate the modified Microsoft Excel file.  The implementation of above steps is demonstrated in the examples below.\nCode Sample: Creating a New Workbook\nThe following example creates a new workbook from the scratch, writes Hello World! into cell A1 on the first worksheet and saves the Excel file.\n\\\nCode Sample: Opening an Existing File\nThe following example opens an existing Microsoft Excel template file named \u0026amp;ldquo;Sample.xlsx\u0026amp;rdquo;, inputs \u0026amp;ldquo;Hello World!\u0026amp;rdquo; text into the A1 cell in the first worksheet and saves the workbook.\n\\\nAttachments: Your First Application using Aspose.Cells Hello World-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"7849508c8626edf2eff6e5240d0499b8","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/your+first+aspose.cells+application+-+hello+world/","title":"Your First Aspose.Cells Application - Hello World"},{"content":"Articles in this section\nAttachments: Aspose.Cells Object Model-001.png (image/png) Aspose.Cells Object Model-002.png (image/png) Aspose.Cells Object Model-003.png (image/png) Aspose.Cells Object Model-004.png (image/png) Aspose.Cells Object Model-005.png (image/png) Aspose.Cells Object Model-006.png (image/png) Aspose.Cells Object Model-007.png (image/png) Aspose.Cells Object Model-008.png (image/png) Aspose.Cells Object Model-009.png (image/png) Your First Application using Aspose.Cells Hello World-001.png (image/png) Evaluate Aspose.Cells-001.png (image/png) Evaluate Aspose.Cells-002.png (image/png) What is a Designer Spreadsheet-001.png (image/png) SpreadSheet1.png (image/png) Check Version Number of the Component-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"837089313b6d2f8a18dfcaeed0c0e384","permalink":"https://roywangt.github.io/cellsnet/developerguide/introductionofasposecellsfornet/","title":"Introduction of Aspose.Cells for .NET"},{"content":"   Contents Summary\n1 How to Fix the System.StackOverFlowException on Workbook.CalculateFormula?\n2 Thickness of lines issue while rendering Excel to PDF\n3 How to Fix the System.OutOfMemoryException while Loading Large Spreadsheets?\n4 This file format is not supported or you do not specify a correct format. 4.1 More Information\n5 Determine which stack size is needed for a certain Workbook\n ||      How to Fix the System.StackOverFlowException on Workbook.CalculateFormula?      Sometimes, users face System.StackOverFlowException on Workbook.CalculateFormula method. This exception usually occurs because the default stack size of the IIS is too small (265k only). You can fix this error by creating another thread with increased stack size and then moving your Workbook.CalculateFormula related code inside it.\n\\\nThickness of lines issue while rendering Excel to PDF\nSometimes, when Excel file is converted to PDF, then thickness of lines is different in the output PDF. This issue is not caused by Aspose.Cells. It is caused by Adobe Reader when its settings \u0026amp;ldquo;Smooth line art\u0026amp;rdquo; and \u0026amp;ldquo;Enhance thin lines\u0026amp;rdquo; are checked. Unchecking these options will display PDF fine.\nIf check \u0026amp;ldquo;Smooth line art\u0026amp;rdquo; and \u0026amp;ldquo;Enhance thin lines\u0026amp;rdquo;, the thickness of lines is different. See the following steps how its done:\n Goto Edit Select Preferences In the Page Display Category Check the \u0026amp;ldquo;Smooth line art\u0026amp;rdquo; and \u0026amp;ldquo;Enhance thin lines\u0026amp;rdquo;  If uncheck \u0026amp;ldquo;Smooth line art\u0026amp;rdquo; and \u0026amp;ldquo;Enhance thin lines\u0026amp;rdquo;, the thickness of lines is same. To achieve this just follow the below steps:\n Goto Edit Select Preferences In the Page Display Category Unheck the \u0026amp;ldquo;Smooth line art\u0026amp;rdquo; and \u0026amp;ldquo;Enhance thin lines\u0026amp;rdquo;  How to Fix the System.OutOfMemoryException while Loading Large Spreadsheets?\nThere are fair chances that the Workbook constructor may throw System.OutOfMemoryException while loading large spreadsheets. This exception suggests …","date":-62135596800,"description":"","objectID":"12f93f709020e7b39b6d1a8de26df922","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/aspose.cells+faqs/","title":"Aspose.Cells FAQs"},{"content":"   Contents Summary\n1 Is there any limitation in the evaluation version of Aspose.Cells Grid Controls?\n2 There are so many Grid controls available in the market. Why should i buy Aspose.Cells Grid Controls?\n3 I\u0026amp;rsquo;ve recently purchased my license for Aspose.Cells Grid Controls. How can i use that license in my application with Aspose.Cells Grid Control?\n4 Are Aspose.Cells Grid Controls supported on Visual Studio.NET 2005?\n5 I am using Aspose.Cells.GridWeb control in my web site using Visual Studio.NET 2005. But, it\u0026amp;rsquo;s not functioning at all. What\u0026amp;rsquo;s the problem?\n6 How can I deploy my Aspose.Cells.GridWeb based web project/ solution on the Server?\n7 Running Aspose.Cell.GridWeb in Internet Explorer 10 or 11\n ||      Is there any limitation in the evaluation version of Aspose.Cells Grid Controls?      No, there is no limitation of features in the evaluation version of Aspose.Cells Grid Controls. The evaluation version provides full features of the licensed version except that it adds an extra worksheet (containing Evaluation Copyright Warning ) to the output files.\nThere are so many Grid controls available in the market. Why should i buy Aspose.Cells Grid Controls?\nWell, Aspose.Cells Grid Controls are very well priced to be affordable for all kinds of users. In a very reasonable price, it provides you a suite of two controls to work on Windows \u0026amp;amp; Web Applications. Moreover, it is not just a simple Grid, it is your Spreadsheet Viewer, Editor \u0026amp;amp; Creator at the same time. You cannot only bind it with any kind of Data Source (like normal Grid controls) but also create \u0026amp;amp; manage Excel files. It also provides a strong \u0026amp;amp; rich Formula Calculation Engine to calculate not only built-in functions (supported by Aspose.Cells Grid Controls) but also custom formulas defined by you. There are much more features of Aspose.Cells Grid suite that can\u0026amp;rsquo;t be covered here, please refer to Edition Types page for more detailed features list.\nI\u0026amp;rsquo;ve recently …","date":-62135596800,"description":"","objectID":"1ba804f1809fe86f6fa7ae8f40bd5847","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/aspose.cells+grid+controls+faqs/","title":"Aspose.Cells Grid Controls FAQs"},{"content":"Performance is often a critical factor when choosing a component.\nThis article presents performance measurements for different products including Aspose.Cells. Simple tests were conducted across similar operating systems, hardware components, and configurations.\nThe performance estimates presented here are intended to help you understand what to expect from different components in some common scenarios. Naturally, how your application performs will depend on the data, data access patterns, cache size, configuration parameters, operating system and hardware. The benchmark aims to illustrate how the components perform under minimum hardware conditions. The faster the hardware, the faster the tasks will be processed.\n   Contents Summary\n1 Benchmarking 1.1 Participating Components\n1.2 System Hardware\n1.3 Testing Methodology\n1.4 Task Categories\n2 Creating Microsoft Excel Files 2.1 Scenario 1: Creating 50 XLS Files 2.1.1 Results from Scenario 1\n2.2 Scenario 2 - Create an XLS File 2.2.1 Scenario 2 Results\n2.3 Scenario 3 - Creating an XLS File 2.3.1 Scenario 3 Results\n2.3.2 Results Chart\n3 Reading/Updating existing Excel Files 3.1 Scenario 1 - Load a 10 MB XLS Template File 3.1.1 Scenario 1 Results\n3.2 Scenario 2 - Load a 10 MB XLS Template File 3.2.1 Scenario 2 Results\n3.3 Scenario 3 - Load a 10 MB XLS Template File 3.3.1 Scenario 3 Results\n3.3.2 Result Chart\n4 Declaration\n ||      Benchmarking      Participating Components\nWe respect our competitors so have decided not to disclose the which products we included in the study. This document is for information only so below, we\u0026amp;rsquo;re referring to the participating products as Product1, Product2 and Product3. Four components were tested, including Aspose.Cells.\nTo make the tests as equal as possible we chose to use the evaluation versions of all products.\nSystem Hardware\nThe benchmark aims to illustrate how the components perform under the minimum hardware conditions. All tests were performed on a single processor Intel …","date":-62135596800,"description":"","objectID":"098ac534480ecd5de4bd4dd16d549857","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/aspose.cells+and+competitors+performance+metrics+and+benchmarks/","title":"Aspose.Cells and Competitors Performance Metrics and Benchmarks"},{"content":"This article compares using VSTO (Visual Studio Tools for Office) with other approaches for developing Microsoft Office-based solisions. In particular, it looks at Aspose.Cells and provides a comparison of how the two solutions work. The articles gives information developers can use to analyze, compare and evaluate different options before adopting a solution.\n   Contents Summary\n1 Overview 1.1 .NET Framework Requirement\n1.2 Features\n1.3 Security\n1.4 Performance\n1.5 System Requirements\n1.6 Installation and Deployment\n2 Example Task 2.1 VSTO Code\n2.2 Aspose.Cells Code\n2.3 Results\n3 Conclusion\n ||      Overview      Microsoft Excel is used widely by businesses and individuals in all kinds of industries. The spreadsheet application is close to ubiquitous and allows users not just to store and organize data, but build complex models with formulae and present data clearly with advanced formatting and chart.\nVSTO allows Microsoft Office documents to execute code wrapped in a .NET assembly. It is used to develop applications that work with Microsoft Office files and features. Developers have used ASP, Office Web components and COM interop in applications for years. Microsoft has enhanced VSTO to make developing and deploying applications and improve memory management. But, the question remains: is VSTO designed to be easier to use and more reliable than other approaches available today? Developers want to work with solutions that won\u0026amp;rsquo;t let them down in terms of improved performance, security, scalability, stability, reliability or features.\nAspose provides a great line of .NET, Java, Cloud and Android APIs. Aspose APIs include products such as Aspose.Cells, Aspose.Words, Aspose.Pdf, and Aspose.Slides, APIs that help[ developers open, modify, generate, save, merge, and convert documents in various formats including XLS, XLSX, DOC, DOCX, HTML, PDF, PPT.\nIn this article, we compare VSTO with Aspose.Cells for .NET.\nAspose.Cells is an independent Microsoft Excel …","date":-62135596800,"description":"","objectID":"6632ece5b6d172f8a1b236ae4ba1ecdc","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/comparing+vsto+with+aspose.cells+for+.net/","title":"Comparing VSTO with Aspose.Cells for .NET"},{"content":"   Contents Summary\n1 Aspose.Cells\n2 Aspose.Cells Grid Suite 2.1 Number Formats Supported in Aspose.Cells.GridDesktop\n2.2 Number Formats Supported in Aspose.Cells.GridWeb\n       Aspose.Cells      Aspose.Cells component offers some built-in number formats to configure the display formats of the numbers and dates. These built-in number formats can be applied by using the Number property of the Style object. All built-in number formats are given unique numeric values. Developers can assign any desired numeric value to the Number property of Style object and hence the display format is applied. This approach is more faster. The built-in number formats supported by Aspose.Cells component are given below:\n   Value Type Format String     0 General General   1 Decimal 0   2 Decimal 0.00   3 Decimal #,##0   4 Decimal #,##0.00   5 Currency $#,##0;$-#,##0   6 Currency $#,##0;$-#,##0   7 Currency $#,##0.00;$-#,##0.00   8 Currency $#,##0.00;$-#,##0.00   9 Percentage 0%   10 Percentage 0.00%   11 Scientific 0.00E+00   12 Fraction # ?/?   13 Fraction # /   14 Date m/d/yy   15 Date d-mmm-yy   16 Date d-mmm   17 Date mmm-yy   18 Time h:mm AM/PM   19 Time h:mm:ss AM/PM   20 Time h:mm   21 Time h:mm:ss   22 Time m/d/yy h:mm   37 Currency #,##0;-#,##0   38 Currency #,##0;-#,##0   39 Currency #,##0.00;-#,##0.00   40 Currency #,##0.00;-#,##0.00   41 Accounting _ * #,##0_ ;_ * \u0026amp;ldquo;_ ;_ @_   42 Accounting _ $* #,##0_ ;_ $* \u0026amp;ldquo;_ ;_ @_   43 Accounting _ * #,##0.00_ ;_ * \u0026amp;ldquo;??_ ;_ @_   44 Accounting _ $* #,##0.00_ ;_ $* \u0026amp;ldquo;??_ ;_ @_   45 Time mm:ss   46 Time h :mm:ss   47 Time mm:ss.0   48 Scientific ##0.0E+00   49 Text @   Aspose.Cells Grid Suite      As we know that there are two Aspose.Cells Grid controls: Aspose.Cells.GridDesktop \u0026amp;amp; Aspose.Cells.GridWeb. Both controls support a large number of number formats, which are divided into two sections with respect to each control as follows:\n Number Formats Supported in Aspose.Cells.GridDesktop Number Formats Supported in …","date":-62135596800,"description":"","objectID":"26d5c8bbce1f7f7e50a12d5f25c4e18a","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/list+of+supported+number+formats/","title":"List of Supported Number Formats"},{"content":"Articles in this section\nAttachments: Aspose.Cells and Competitors Performance Matrics and Benchmarks-001.png (image/png) Aspose.Cells and Competitors Performance Matrics and Benchmarks-002.png (image/png) No overload for method Save takes 4 arguments-001.png (image/png) Add Borders to Cells in a Worksheet-001.png (image/png) Add Borders to Cells in a Worksheet-002.png (image/png) Add Hyperlinks to Cells-001.png (image/png) Add Hyperlinks to Cells-002.png (image/png) Set Background Picture of a Worksheet-001.png (image/png) Rotating Cell Text-001.png (image/png) Rotating Cell Text-002.png (image/png) Create a Pie Chart-001.png (image/png) Create a Pie Chart-002.png (image/png) Auto Filter Data-001.png (image/png) Auto Filter Data-002.png (image/png) Wrapping Cell Text-001.png (image/png) Wrapping Cell Text-002.png (image/png) Wrapping Cell Text-003.png (image/png) Wrapping Cell Text-004.png (image/png) Use Formulas Functions to Process Data-001.png (image/png) Use Formulas Functions to Process Data-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"a374c7dee3977d3cf95059f88c2e1ad6","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/","title":"Knowledge Base"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"787f3d3127e5e0111a2a3ebd5ef99530","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/formulacalculationengine/","title":"Formula Calculation Engine"},{"content":"Aspose.Cells supports most of the formulas/functions that are part of Microsoft Excel. Developers can use these formulas with either the API or designer spreadsheets. Aspose.Cells supports a huge set of mathematical, string, Boolean, date/time, statistical, database, lookup and reference formulas. The formulas should be specified using English (US) style.\nNotice for Non English Users\nThere are two tips that non-English users must follow when creating formulas with Aspose.Cells:\n Formulas must be entered in English. For example, use the English \u0026amp;ldquo;=SUM()\u0026amp;rdquo; not the German \u0026amp;ldquo;=SUMME()\u0026amp;quot;. Always use a comma (,) to delimit function parameters. For some language options or settings, the delimiter for function parameters is a semicolon but Aspose.Cells uses the English style comma. For example, use \u0026amp;ldquo;=IF (C5=0,0,C3/C4)\u0026amp;rdquo; not \u0026amp;ldquo;=IF(C5=0;0;C3/C4)\u0026amp;rdquo;  ","date":-62135596800,"description":"","objectID":"c6f3ec02621d9aa082c6af781358ecac","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/formulacalculationengine/asposecells-formulacalculationengine/setting+formulas+-+notice+for+non+english+users/","title":"Setting Formulas - Notice for Non English Users"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"c3baf63949bd03fb1d6f18e8081c6d66","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/formulacalculationengine/asposecells-formulacalculationengine/","title":"Aspose.Cells - Formula Calculation Engine"},{"content":"   Contents Summary\n1 Introduction 1.1 Math Functions\n1.2 Text and Data Functions\n1.3 Date and Time Functions\n1.4 Logical Functions\n1.5 New Functions\n       Introduction      There are a lot of built-in functions supported by Aspose.Cells Grid Controls. These functions belong to following categories:\n Math Functions , provides a huge set of functions that can be used in numerous mathematical calculations Text and Data Functions , provides various functions to perform different kinds of operations on text and data Date and Time Functions , provides some useful functions related to data and time Logical Functions , provides a small set of logical functions to handle some logical operation on data  Math Functions\n CEILING,COMBIN,COS,COSH,COUNTIF DEGREES EVEN,EXP FACT,FLOOR INT LN,LOG,LOG10 MOD ODD PI,POWER,PRODUCT RADIANS,RAND,ROUND,ROUNDDOWN,ROUNDUP SIGN,SIN,SINH SQRT,SUM,SUMIF,SUMPRODUCT,SUMSQ,SUMX2MY2,SUMX2PY2,SUMXMY2 TAN,TANH,TRUNC  Text and Data Functions\n CHAR,CODE,CONCATENATE DOLLAR EXACT FIND,FIXED LEFT,LEN,LOWER MID MATCH REPLACE,REPT,RIGHT SEARCH,SUBSTITUTE T,TEXT,TRIM UPPER VALUE LOOKUP VLOOKUP WIDECHAR  Date and Time Functions\n HOUR MINUTE,MONTH NOW SECOND TIME,TODAY WEEKDAY YEAR  Logical Functions\n FALSE IF NOT OR TRUE  New Functions\n MIN ROW (Supported in Aspose.Cells.GridWeb only ) ROW S (Supported in Aspose.Cells.GridWeb only ) COLUMN (Supported in Aspose.Cells.GridWeb only ) COLUMN S (Supported in Aspose.Cells.GridWeb only ) ADDRESS (Supported in Aspose.Cells.GridWeb only ) OFFSET INDIRECT ISERR ISNUMBER CLEAN RMB FACTDOUBLE GCD LCM MROUND MULTINOMIAL QUOTIENT RANDBETWEEN SERIESSUM SQRTPI SUBTOTAL COUNT COUNTA INDEX CELL MEDIAN ERROR.TYPE ISBLANK ISERROR ISLOGICAL ISNA ISNONTEXT ISTEXT ISREF N NA TYPE COUNTBLANK LARGE MAXA MINA AVERAGEA MODE PERCENTILE PERCENTRANK RANK CHOOSE HLOOKUP SMALL ( Supported in Aspose.Cells.GridWeb only )  ","date":-62135596800,"description":"","objectID":"f9e49c6c55122944eb448ea587b9cf71","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/formulacalculationengine/asposecellsgridcontrols-formulacalculationengine/list+of+supported+functions/","title":"List of Supported Functions"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"86723be6b3c25a705f73426cbd76c8e3","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/formulacalculationengine/asposecellsgridcontrols-formulacalculationengine/","title":"Aspose.Cells Grid Controls - Formula Calculation Engine"},{"content":"This document describes the changes to the Aspose.Cells API from version 9.0.0 to 16.10.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Reflection Effects\nAspose.Cells 16.10.0 has exposed the ReflectionEffect class along with Shape.Reflection property in order to control the reflection effects of a Shape object. The ReflectionEffect class has the following properties.\n ReflectionEffect.Blur: Gets/sets the blur radius in unit of points. ReflectionEffect.Direction: Gets/sets the direction of the alpha gradient ramp relative to the shape itself. ReflectionEffect.Distance: Gets/sets distance of the reflection in unit of points. ReflectionEffect.FadeDirection: Gets/sets the direction to offset the reflection. ReflectionEffect.RotWithShape: Gets/sets if the reflection should rotate with the shape. ReflectionEffect.Size: Gets/sets the end position (along the alpha gradient ramp) of the end alpha value in unit of percentage . ReflectionEffect.Transparency: Gets/sets the degree of the starting reflection transparency as a value from 0.0 (opaque) through 1.0 (clear). ReflectionEffect.Type: Gets/sets the preset reflection effect.  Here is simple usage scenario of Shape.Reflection property.\nCheck the detailed article on Working with Reflection Effects\nC#\n// Load a sample spreadsheet containing a shape\n// Alternatively create a new spreadsheet and add a shape\nvar book = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\n// Access first worksheet from the collection\nvar sheet = book.Worksheets[0];\n// Access first shape from the collection\nvar shape = sheet.Shapes[0];\n// Get the instance of ReflectionEffect from the Shape object\nvar reflection = shape.Reflection;\n// Set its Blur, Size, Transparency and Distance properties\nreflection.Blur = 30;\nreflection.Size = 90; …","date":-62135596800,"description":"","objectID":"ef975bf44b7a147329dd786d8f127eb3","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+16.10.0/","title":"Public API Changes in Aspose.Cells 16.10.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 16.10.0 to 16.11.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Globalization Settings\nAspose.Cells 16.11.0 has exposed the GlobalizationSettings class along with WorkbookSettings.GlobalizationSettings property in order to enforce the Aspose.Cells APIs to use custom labels for Subtotals. The GlobalizationSettings class has the following methods which can be overridden in the custom implementation to give desired names to the labels Total \u0026amp;amp; Grand Total.\n GlobalizationSettings.GetTotalName: Gets the total name of the function. GlobalizationSettings.GetGrandTotalName: Gets the grand total name of the function.  Here is a simple custom class that extends GlobalizationSettings class and overrides its aforementioned methods to return custom labels for the consolidation function Average.\nC#\nclass CustomSettings : GlobalizationSettings\n{\npublic override string GetTotalName(ConsolidationFunction functionType)\n{\nswitch (functionType)\n{\ncase ConsolidationFunction.Average:\nreturn \u0026amp;ldquo;AVG\u0026amp;rdquo;;\ndefault:\nreturn base.GetTotalName(functionType);\n}\n}\npublic override string GetGrandTotalName(ConsolidationFunction functionType)\n{\nswitch (functionType)\n{\ncase ConsolidationFunction.Average:\nreturn \u0026amp;ldquo;GRD AVG\u0026amp;rdquo;;\ndefault:\nreturn base.GetGrandTotalName(functionType);\n}\n}\n}\n\\\nFollowing snippet loads an existing spreadsheet and adds the Subtotal of type Average on data already available in the worksheet. The CustomSettings class and its GetTotalName \u0026amp;amp; GetGrandTotalName methods will be called at the time of adding Subtotal to the worksheet.\nC#\n// Loads an existing spreadsheet containing some data\nWorkbook book = new Workbook(dir + \u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\n// Assigns the …","date":-62135596800,"description":"","objectID":"17ac59b5a0fc8a5c5ea56d3145f84d46","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+16.11.0/","title":"Public API Changes in Aspose.Cells 16.11.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 16.11.0 to 16.12.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nFilter Objects at Load Time\nAspose.Cells 16.12.0 has exposed the LoadFilter class along with LoadOptions.LoadFilter property which together can control the type of data to be loaded while initializing an instance of Workbook from a template file.\nHere is a simple usage scenario to load only the document properties from a template file.\nC#\n// Create an instance of LoadOptions class\nvar options = new Aspose.Cells.LoadOptions();\n// Set the LoadFilter property to a new instance of LoadFilter class\n// Select to load document properties by passing LoadDataFilterOptions.DocumentProperties to constructor\noptions.LoadFilter = new Aspose.Cells.LoadFilter(Aspose.Cells.LoadDataFilterOptions.DocumentProperties);\n// Load a template file by passing file path as well as instance of LoadOptions class\nvar book = new Aspose.Cells.Workbook(dir + \u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;, options);\n\\\nFollowing snippet loads everything from an existing spreadsheet except for the charts.\nC#\n// Create an instance of LoadOptions class\nvar options = new Aspose.Cells.LoadOptions();\n// Set the LoadFilter property to a new instance of LoadFilter class with appropriate parameters to the constructor\noptions.LoadFilter = new Aspose.Cells.LoadFilter(Aspose.Cells.LoadDataFilterOptions.All \u0026amp;amp; ~Aspose.Cells.LoadDataFilterOptions.Chart);\n// Load a template file by passing file path as well as instance of LoadOptions class\nvar book = new Aspose.Cells.Workbook(dir + \u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;, options);\n\\\nFollowing code loads only the cell data (along with formulas) and formatting from an existing spreadsheet.\nC#\n// Create an instance of LoadOptions class\nvar options = new …","date":-62135596800,"description":"","objectID":"a465691aff25bca9b1f8f3e664e66058","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+16.12.0/","title":"Public API Changes in Aspose.Cells 16.12.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 16.12.0 to 17.1.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Excel 2016 Charts\nAspose.Cells APIs have added the support for a few Excel 2016 charts by enhancing the ChartType enumeration. Following new fields have been added with the release of Aspose.Cells 17.1.0.\n ChartType.BoxWhisker: The series is laid out as box and whisker. ChartType.Funnel: The series is laid out as a funnel. ChartType.ParetoLine: The series is laid out as pareto lines. ChartType.Sunburst: The series is laid out as a sunburst. ChartType.Treemap: The series is laid out as a treemap. ChartType.Waterfall: The series is laid out as a waterfall. ChartType.Histogram: The series is laid out as a histogram.  Check the detailed article on Reading Excel 2016 Chart Types.\nAdded Setter for LoadFilter.LoadDataFilterOptions Property\nAspose.Cells 17.1.0 has added setter for the LoadFilter.LoadDataFilterOptions property to replace the m_LoadDataFilterOptions instance variable. Users may change the LoadDataFilterOptions property in their own implementation of LoadFilter class to change the behavior of loading template files.\nHere is a simple usage scenario.\nCheck the detailed article on Custom Template Filtering.\nC#\nclass CustomFilter : Aspose.Cells.LoadFilter\n{\npublic override void StartSheet(Worksheet sheet)\n{\nif (sheet.Name == \u0026amp;ldquo;Sheet1\u0026amp;rdquo;)\n{\n// Load everything\nthis.LoadDataFilterOptions = LoadDataFilterOptions.All;\n}\nelse\n{\n// Load nothing\nthis.LoadDataFilterOptions = LoadDataFilterOptions.None;\n}\n}\n}\n\\\nAdded CellsHelper.SignificantDigits Property\nAspose.Cells 17.1.0 has exposed the SignificantDigits property from the CellsHelper class which allows to get or set the number of significant digits for numeric values in …","date":-62135596800,"description":"","objectID":"6c5a4cc20e29739b9460ae5096d61aa1","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+17.1.0/","title":"Public API Changes in Aspose.Cells 17.1.0"},{"content":"This page lists public API changes that were introduced in Aspose.Cells 8.0.0. It includes not only new and obsoleted public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells which may affect the existing code.\nAdded MemorySetting to LoadOptions \u0026amp;amp; WorkbookSettings\nStarting from v8.0.0 of Aspose.Cells for .NET we have provided the memory usage options for performance considerations. MemorySetting property is now available in LoadOptions \u0026amp;amp; WorkbookSettings classes.\nExample\nDemonstrates how to read an Excel file (having large size) in optimized mode.\nC#\n//Initialize LoadOptions\nLoadOptions options = new LoadOptions();\n//Set memory preferences\noptions.MemorySetting = MemorySetting.MEMORY_PREFERENCE;\n//Instantiate the Workbook with an object of LoadOptions\nWorkbook book = new Workbook(myDir + \u0026amp;ldquo;large.xlsx\u0026amp;rdquo;, options);\nDemonstrates how to write large Dataset to a worksheet in optimized mode.\nC#\n//Instantiate a new Workbook\nWorkbook book = new Workbook();\n//Set the memory preferences for WorkbookSettings\nbook.Settings.MemorySetting = MemorySetting.MEMORY_PREFERENCE;\n//Input large data into the cells\n//\u0026amp;hellip;\u0026amp;hellip;\u0026amp;hellip;\nPlease check the detailed article on Optimizing Memory while Working with Large File.\nImplementations of Row \u0026amp;amp; Cell has changed\nIn previous versions, Row and Cell objects were kept in memory to represent corresponding row and cell in a Worksheet. The same instance was returned whenever RowCollection[int index] or Cells[int row, int column] were retrieved. For memory performance consideration, only properties and data of Row and Cell will be kept in the memory now onward. Hence, the Row \u0026amp;amp; Cell object have become the wrapper of aforesaid properties.\nExample\nDemonstrates how to compare the Cell and Row objects from now onward.\nC#\n//..\nrow1.Equals(row2);\ncell1.Equals(cell2);\n//..\nBecause the Row and Cell objects are instantiated according to the invocation, they will not be kept and …","date":-62135596800,"description":"","objectID":"f97058f5c77ead15ea7b0d34205af5cf","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.0.0/","title":"Public API Changes in Aspose.Cells 8.0.0"},{"content":"These page list public API changes that were introduced in Aspose.Cells 8.0.1. It includes not only new and obsoleted public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells which may affect existing code. Any behavior introduced that could be seen as a regression and modifies existing behavior is especially important and is documented here.\nMemorySetting Property Added to Cells Class\nCells class has exposed MemorySetting property which can be used to optimize the memory usage for cells data, and hence decrease the overall memory cost. The following example shows how to write a large data to a worksheet in optimized mode.\nC#\n//Instantiate a new Workbook\nWorkbook book = new Workbook();\n//Set the memory preferences\nbook.Settings.MemorySetting = MemorySetting.MemoryPreference;\n//To change the memory setting of existing sheets, please change memory setting for them manually:\nCells cells = book.Worksheets[0].Cells;\ncells.MemorySetting = MemorySetting.MemoryPreference;\n//Input large dataset into the cells of the worksheet\n//Your code goes here\nThe memory settings will not work for the default sheet automatically created by the Workbook object. In order to change the memory settings of existing sheets, please apply the memory setting manually before performing any data manipulation.\nPlease check the detailed article on Optimizing Memory while Working with Large Data Sets\n","date":-62135596800,"description":"","objectID":"9a09e3c14e8985b9630c9473f5674201","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.0.1/","title":"Public API Changes in Aspose.Cells 8.0.1"},{"content":"This document describes changes to the Aspose.Cells API from version 8.0.1 to 8.0.2, that may be of interest to module/application developers. It includes not only new and updated public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded TextDirection Property to Shape Class\nThe Shape class has exposed TextDirection property which can be used get or set the direction of the text flow for the Shape object. The TextDirection property can also be used to set the desired text direction for the comments in a spreadsheet as demonstrated below.\nC#\n//Instantiate a new Workbook\nvar book = new Workbook();\n//Get the first worksheet\nvar sheet = book.Worksheets[0];\n//Add a comment to A1 cell\nvar comment = sheet.Comments[sheet.Comments.Add(\u0026amp;ldquo;A1\u0026amp;rdquo;)];\n//Set its vertical alignment setting\ncomment.CommentShape.TextVerticalAlignment = TextAlignmentType.Center;\n//Set its horizontal alignment setting\ncomment.CommentShape.TextHorizontalAlignment = TextAlignmentType.Right;\n//Set the Text Direction - Right-to-Left\ncomment.CommentShape.TextDirection = TextDirectionType.RightToLeft;\n//Set the Comment note\ncomment.Note = \u0026amp;ldquo;This is my Comment Text. This is test\u0026amp;rdquo;;\n//Save the Excel file\nbook.Save(myDir + \u0026amp;ldquo;output.xlsx\u0026amp;rdquo;);\nPlease check the detailed article on Changing Text Direction of the Comment\nAdded ConvertFormulasData Property to HTMLLoadOptions Class\nConvertFormulasData property has been added to the HTMLLoadOptions Class, in order to facilitate the developers to load Excel formulas from HTML files. The boolean ConvertFormulasData property indicates whether or not to convert the string to a formula when the string value starts with character \u0026amp;lsquo;=\u0026amp;rsquo;.\nC#\n//Create an instance of HTMLLoadOptions\nHTMLLoadOptions loadOptions = new HTMLLoadOptions();\n//Set ConvertFormulasData to true\nloadOptions.ConvertFormulasData = true;\n//Create an instance of Workbook and load an HTML based spreadsheet\n//while passing …","date":-62135596800,"description":"","objectID":"b8ccc5a22d6107961942dc7ff97ae322","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.0.2/","title":"Public API Changes in Aspose.Cells 8.0.2"},{"content":"This document describes changes to the Aspose.Cells API from version 8.0.2 to 8.1.0, that may be of interest to module/application developers. It includes not only new and updated public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded HtmlSaveOptions.ExportHiddenWorksheet Property\nThe HtmlSaveOptions class has exposed ExportHiddenWorksheet property which can be used to specify if hidden worksheets are exported to HTML format. The default value is true. whereas if set to false, the Aspose.Cells will not export hidden worksheet contents.\nPlease check the detailed article on Prevent Exporting Hidden Worksheet\nAdded Cell.StringValueWithoutFormat Property\nStringValueWithoutFormat property has been added to the Cell Class, in order to facilitate the developers to retrieve the cell value without any formatting applied.\nBelow provided code snippet demonstrate the usage of Cell.StringValueWithoutFormat property as compared to the cell.DisplayStringValue by creating a spreadsheet from scratch and applying the number format to one of the cells.\nC#\n//Create an instance of Workbook\nWorkbook book = new Workbook();\n//Access first worksheet\nWorksheet sheet = book.Worksheets[0];\n//Access A1 cell\nCell cell = sheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\n//Put a value cell and convert it to number\ncell.PutValue(\u0026amp;ldquo;123456\u0026amp;rdquo;, true);\n//Create a new Style object and add it to Workbook\u0026amp;rsquo;s Style Collection\nStyle style = book.Styles[book.Styles.Add()];\n//Set Number format for Style object\nstyle.Number = 3;\n//Set the style of A1 cell\ncell.SetStyle(style, new StyleFlag() { NumberFormat = true });\n//Get formatted string value\nstring formatted = cell.DisplayStringValue;\nConsole.WriteLine(formatted);\n//Get un-formatted string value\nstring unformatted = cell.StringValueWithoutFormat;\nConsole.WriteLine(unformatted);\nOutput of above code is as follow\n123,456\n123456\nObsoleted Bytes, Characters, CharactersWithSpaces, Lines, Paragraphs Properties …","date":-62135596800,"description":"","objectID":"431be840274738916be63e01f4aadc2d","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.1.0/","title":"Public API Changes in Aspose.Cells 8.1.0"},{"content":"This document describes changes to the Aspose.Cells API from version 8.1.0 to 8.1.1, that may be of interest to module/application developers. It includes not only new and updated public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded HtmlSaveOptions.PresentationPreference Property\nThe HtmlSaveOptions class has exposed PresentationPreference property which can be used to render the results with better layout when exporting spreadsheets to HTML or MHTML. The default value is false. whereas if set to true, the Aspose.Cells API will export the worksheet contents with better presentation.\nPlease check the detailed article on Use PresentationPreference Option for Better Layout\nAdded Support for Worksheet Scenarios\nA scenario is named what-if model that includes variable input cells linked together by one or more formulas accordingly. Aspose.Cells API has exposed Worksheet.Scenarios property along with the following classes in order to facilitate the users in creating, manipulating and removing scenarios from worksheets,\n Scenario: Represents an individual scenario. ScenarioCollection: Represents a collection of scenarios. ScenarioInputCellCollection: Represents a list of input-cells for a particular scenario. ScenarioInputCell: Represents an input-cell from the collection of input-cells for a particular scenario.  Please check the detailed article on How to Create, Manipulate or Remove Scenarios from Worksheets.\n","date":-62135596800,"description":"","objectID":"f3937ecb08ef5cfefa8bb95dcb751baa","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.1.1/","title":"Public API Changes in Aspose.Cells 8.1.1"},{"content":"This document describes changes to the Aspose.Cells API from version 8.1.1 to 8.1.2, that may be of interest to module/application developers. It includes not only new and updated public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded Support for Warning if Font Substitution Occur\nWith Aspose.Cells for .NET 8.1.2, the WarningInfo, WarningType classes, IWarningCallback interface and SaveOptions.WarningCallback, ImageOrPrintOptions.WarningCallback properties have been added to facilitate the user to receive warning if font substitution occurs while converting spreadsheets to images or PDF format.\nPlease check the detailed article on Getting Warnings for Font Substitution while Rendering Spreadsheets\nDeleted Obsolete PdfSaveOptions.ChartImageType Property\nAspose.Cells for .NET 8.1.2 has removed the obsolete PdfSaveOptions.ChartImageType property from the public API.\n","date":-62135596800,"description":"","objectID":"49cafefdee58e04a41716e842336c74e","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.1.2/","title":"Public API Changes in Aspose.Cells 8.1.2"},{"content":"This document describes changes to the Aspose.Cells API from version 8.1.2 to 8.2.0, that may be of interest to module/application developers. It includes not only new and updated public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded MultiThreadReading Property for Cells Class\nWith Aspose.Cells for .NET 8.2.0, the MultiThreadReading property has been added to the Cells class in order to provide more robust mechanism to read cells values with multiple threads simultaneously. Setting the Boolean type property to true in the multi-threaded application makes sure that each thread will receive the correct cells value.\nPlease check the detailed article on Simultaneously Read Cells Values in Multi-Threaded Environment for more information.\nAdded Overloads for AutoFitRows \u0026amp;amp; AutoFitColumns Methods\nNew overloads for AutoFitRows \u0026amp;amp; AutoFitColumns have been added to the Worksheet class, allowing the developers to auto fit the rows \u0026amp;amp; columns based on their respective ranges while passing an instance of the AutoFitterOptions class.\nThe signatures of aforesaid methods are as follow:\n AutoFitRows(int startRow, int endRow, AutoFitterOptions options) AutoFitColumns(int firstColumn, int lastColumn, AutoFitterOptions options)  Please check the detailed article on Auto Fit Rows and Columns.\n","date":-62135596800,"description":"","objectID":"dd8d7927a53fb960d10e1aca05085254","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.2.0/","title":"Public API Changes in Aspose.Cells 8.2.0"},{"content":"This document describes changes to the Aspose.Cells API from version 8.2.0 to 8.2.1, that may be of interest to module/application developers. It includes not only new and updated public methods, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded GetValidation() method for Cell Class\nData validation is one of the features that spreadsheet designers use to stop users from inserting invalid values into a particular cell. With Aspose.Cells for .NET 8.2.1, the API has exposed a simple mechanism that identifies if data validation has been applied on a cell. Use the GetValidation method of the Cell class to acquire any applied validation. If there is no validation, the method returns null. Similarly, you may use the GetValidationInCell method of ValidationCollection class to acquire the validation applied on any cell by providing its row and column indices.\nPlease check the detailed article on Get Validation Applied on a Cell for more information.\nAdded GetValidationValue() method for Cell class\nIn addition to determining whether validation has been applied, you can also verify if a given value satisfies the data validation rules for a particular cell. This feature is useful in scenarios when you want to verify if the value entered in the cell satisfies the data validation rules on the fly. The Aspose.Cells API has exposed the GetValidationValue method for the Cell class. If the value entered in a cell does not satisfy the data validation rules, the GetValidationValue method for the Cell class returns false.\nPlease check the detailed article on Verify that Cell Value Satisfies Data Validation Rules.\nAdded overload ToPrinter(PrinterSettings printerSettings) method for WorkbookRender class\nYou can use the overloaded method to render workbook to Printer via PrinterSettings.\n","date":-62135596800,"description":"","objectID":"c2cdb70328b8b9ac1dc009766b88976e","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.2.1/","title":"Public API Changes in Aspose.Cells 8.2.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.2.1 to 8.2.2 that may be of interest to module/application developers.\nAdded APIs\nProperty BuiltInDocumentPropertyCollection.Version Added\nThe new property Version has been added to the BuiltInDocumentPropertyCollection class in order to allow developers to retrieve the version of the application that created a given spreadsheet.\nPlease check the detailed article Get Version of the Application that Created the Spreadsheet for more information.\nC#\nvar book = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\nvar properties = book.BuiltInDocumentProperties;\nConsole.WriteLine(properties.Version);\n\\\nProperty Chart.Worksheet Added\nBefore the release of Aspose.Cells 8.2.2, it was not possible to retrieve the instance of the Worksheet from a Chart object it holds. Aspose.Cells 8.2.2 has filled up this gap by providing the Chart.Worksheet property.\nPlease check the detailed article Get Worksheet of the Chart for more information.\nC#\nvar workbook = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\nvar chart = workbook.Worksheets[0].Charts[0];\nvar worksheet = chart.Worksheet;\nConsole.WriteLine(\u0026amp;ldquo;Chart\u0026amp;rsquo;s Sheet Name: \u0026amp;quot; + worksheet.Name);\n","date":-62135596800,"description":"","objectID":"a0ae5f8379dd9376b187ba269ffff3e4","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.2.2/","title":"Public API Changes in Aspose.Cells 8.2.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.2.2 to 8.3.0 that may be of interest to module/application developers.\nAdded APIs\nProperty WorkbookSettings.AutoRecover Added\nThe new property AutoRecover has been added to the WorkbookSettings class in order to allow developers to set option of Auto-Recovery for the spreadsheets in their applications.\nPlease check the article Setting Spreadsheet Auto Recovery for more information.\nC#\nvar book = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\nvar settings = book.Settings;\nsettings.AutoRecover = true;\n\\\nProperty WorkbookSettings.CrashSave Added\nA Boolean type property CrashSave has been added to the WorkbookSettings class that indicates whether the application last saved the workbook file after a crash.\nC#\nvar book = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\nvar settings = book.Settings;\nConsole.WriteLine(settings.CrashSave);\n\\\nProperty WorkbookSettings.DataExtractLoad Added\nThe property DataExtractLoad has been added to the WorkbookSettings class in order to allow the developers to get the information regarding the last recovery. If the property DataExtractLoad returns true that indicates that the data recovery has been performed on the spreadsheet.\nC#\nvar book = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\nvar settings = book.Settings;\nConsole.WriteLine(settings.DataExtractLoad);\n\\\nProperty WorkbookSettings.RepairLoad Added\nThe property RepairLoad indicates if the spreadsheet has been repaired in the last loading with Excel application.\nC#\nvar book = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\nvar settings = book.Settings;\nConsole.WriteLine(settings.RepairLoad);\n\\\nProperty TxtLoadOptions.KeepExactFormat Added\nThe property KeepExactFormat has been added to the TxtLoadOptions class that indicates whether the exact formatting should be kept for the cell value when string/text is converted to numbers or DateTime. This property has been added to match the behavior of MS Excel application for loading DateTime or …","date":-62135596800,"description":"","objectID":"be738e75df61ad729ee70deb7c9c572c","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.3.0/","title":"Public API Changes in Aspose.Cells 8.3.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.3.0 to 8.3.1 that may be of interest to module/application developers.\nAdded APIs\nProperty DataLabels.ShowCellRange Added\nThe property ShowCellRange have been added to the DataLabels class in order to mimic the Excel\u0026amp;rsquo;s functionality of formatting Chart\u0026amp;rsquo;s Data Labels at run-time. Please note, Excel provides this feature through the following steps.\n Select Data Labels of the Series and right click to open the pop up menu. Click the Format Data Labels\u0026amp;hellip; and it will show Label Options. Check or un-check the check box Label Contains - Value From Cells.  The sample code below accesses the Data Labels of the Chart Series and then set DataLabels.ShowCellRange method to true to mimic the Excel\u0026amp;rsquo;s feature of Label Contains - Value From Cells.\nC#\n//Create workbook from the source Excel file\nWorkbook workbook = new Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\n//Access the first worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Access the chart inside the worksheet\nChart chart = worksheet.Charts[0];\n//Check the \u0026amp;ldquo;Label Contains - Value From Cells\u0026amp;rdquo;\nDataLabels dataLabels = chart.NSeries[0].DataLabels;\ndataLabels.ShowCellRange = true;\n//Save the workbook\nworkbook.Save(\u0026amp;ldquo;output.xlsx\u0026amp;rdquo;);\nVB.NET\n\u0026amp;lsquo;Create workbook from the source Excel file\nDim m_workbook As Workbook = New Workbook(\u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;)\n\u0026amp;lsquo;Access the first worksheet\nDim m_worksheet As Worksheet = m_workbook.Worksheets(0)\n\u0026amp;lsquo;Access the chart inside the worksheet\nDim m_chart As Chart = m_worksheet.Charts(0)\n\u0026amp;lsquo;Check the \u0026amp;ldquo;Label Contains - Value From Cells\u0026amp;rdquo;\nDim m_dataLabels As DataLabels = m_chart.NSeries(0).DataLabels\nm_dataLabels.ShowCellRange = True\n\u0026amp;lsquo;Save the workbook\nm_workbook.Save(\u0026amp;ldquo;output.xlsx\u0026amp;rdquo;)\nPlease check the article Showing Cell Range as the Data Labels for more information.\nMethods Cell.GetTable \u0026amp;amp; ListObject.PutCellValue Added\nThe methods …","date":-62135596800,"description":"","objectID":"fa2ae799a7224304a70465e08d020d34","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.3.1/","title":"Public API Changes in Aspose.Cells 8.3.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.3.1 to 8.3.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc. and removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nMechanism to Set Absolute Position of PivotItem\nIn order to provide the feature PivotItem\u0026amp;rsquo;s Absolute Positioning, the Aspose.Cells for .NET 8.3.2 has exposed a series of properties and helping methods as listed below.\n PivotItem.Position property can be used to specify the position index in all the PivotItems regardless of the parent node. PivotItem.PositionInSameParentNode property can be used to specify the position index in the PivotItems under the same parent node. PivotItem.Move(int count, bool isSameParent) method can be used to move the item up or down based on the count value, where count is the number of position to move the PivotItem up or down. If the count value is less than zero, the item will be moved up where as if the count value is larger than zero, the PivotItem will move down, Boolean type isSameParent parameter specify whether the moving operation has to be performed in the same parent node or not.  Please note, it is necessary to call the PivotTable.RefreshData and PivotTable.CalculateData methods before using PivotItem.Position, PivotItem.PositionInSameParentNode properties and PivotItem.Move(int count, bool isSameParent) method.\nClass SignatureLine Added\nAspose.Cells for .NET 8.3.2 provides the support for the Signature Line to mimic the MS Excel\u0026amp;rsquo;s equivalent feature. This release of Aspose.Cells for .NET has exposed the SignatureLine class and the Picture.SignatureLine property for this purpose.\nThe following sample code adds a Signature Line using Picture.SignatureLine property to the workbook.\nC#\n//Create workbook object\nWorkbook workbook = new Workbook();\n//Insert picture of your choice\nint …","date":-62135596800,"description":"","objectID":"879d4613e3649e57af9d91772a84f5db","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.3.2/","title":"Public API Changes in Aspose.Cells 8.3.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.3.2 to 8.4.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc. and removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nMechanism to Modify the VBA/Macro Code in Spreadsheets\nIn order to provide the feature of VBA/Macro Code Manipulation, the Aspose.Cells for .NET 8.4.0 has exposed a series of new classes and properties in the Aspose.Cells.Vba namespace. A few of the important details of these new classes are as follow.\n VbaProject class can be used to fetch the VBA project from a given spreadsheet. VbaModuleCollection class represents the collection of VBA modules that are part of a given VbaProject. VbaModule class represents a single module from the VbaModuleCollection.  The following code snippet shows how to dynamically modify the VBA code segments.\nC#\n//Create workbook object from source Excel file\nWorkbook workbook = new Workbook(\u0026amp;ldquo;source.xlsm\u0026amp;rdquo;);\n//Change the VBA Module Code\nforeach (VbaModule module in workbook.VbaProject.Modules)\n{\nstring code = module.Codes;\n//Replace the original message with the modified message\nif (code.Contains(\u0026amp;ldquo;This is test message.\u0026amp;quot;))\n{\ncode = code.Replace(\u0026amp;ldquo;This is test message.\u0026amp;quot;, \u0026amp;ldquo;This is Aspose.Cells message.\u0026amp;quot;);\nmodule.Codes = code;\n}\n}\n//Save the output Excel file\nworkbook.Save(\u0026amp;ldquo;output.xlsm\u0026amp;rdquo;);\n\\\nAbility to Remove Pivot Table\nAspose.Cells for .NET 8.4.0 has exposed two methods for the PivotTableCollection to provide the feature of Pivot Table removal from a given spreadsheet. The details of aforesaid methods are as follow.\n PivotTableCollection.Remove method accepts an object of PivotTable, and removes it from the collection. PivotTableCollection.RemoveAt method accepts a zero index based integer value and removes the particular PivotTable from the …","date":-62135596800,"description":"","objectID":"d3e8f398257c6b01def773ccf4f6498c","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.4.0/","title":"Public API Changes in Aspose.Cells 8.4.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.4.0 to 8.4.1 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc. and removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nMechanism to Modify Database Connection\nThe Aspose.Cells.ExternalConnections.ExternalConnection class already contained the method \u0026amp;amp; properties that could be used to inspect the database connection details stored in a spreadsheet. Most of the properties associated with Aspose.Cells.ExternalConnections.ExternalConnection class were read only until the release of Aspose.Cells for .NET 8.4.1. With this release, the API has provided the support to manipulate the database connection settings as well.\nThe following code snippet shows how to dynamically modify database connection settings.\nC#\n//Create workbook object\nAspose.Cells.Workbook workbook = new Aspose.Cells.Workbook(input);\n//Access first data connection\nAspose.Cells.ExternalConnections.ExternalConnection conn = workbook.DataConnections[0];\n//Change a few properties\nconn.Name = \u0026amp;ldquo;MyConnectionName\u0026amp;rdquo;;\nconn.OdcFile = \u0026amp;ldquo;MyDefaulConnection.odc\u0026amp;rdquo;;\nconn.ConnectionDescription = \u0026amp;ldquo;Test Connection\u0026amp;rdquo;;\nconn.Credentials = Aspose.Cells.ExternalConnections.CredentialsMethodType.Prompt;\n//Save the workbook\nworkbook.Save(output);\n\\\nHere are a few most important properties exposed by the {Aspose.Cells.ExternalConnections.ExternalConnection}} class.\n   Property Name Description     BackgroundRefresh Indicates whether the connection can be refreshed in the background (asynchronously). true if preferred usage of the connection is to refresh asynchronously in the background; false if preferred usage of the connection is to refresh synchronously in the foreground.   ConnectionDescription Specifies the user description for this connection   ConnectionId Specifies The …","date":-62135596800,"description":"","objectID":"b53c14db688989b4e9552b9c52069400","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.4.1/","title":"Public API Changes in Aspose.Cells 8.4.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.4.1 to 8.4.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nImproved Chart Creation Mechanism\nThe Aspose.Cells.Charts.Chart class has exposed the SetChartDataRange method to ease the task of chart creation. The SetChartDataRange method accepts two parameters, where first parameter is of type string that specifies the cell area from which to plot the data series. The second parameter is of type Boolean that specifies the plot orientation, that is; whether to plot the chart data series from a range of cell values by row or by columns.\nThe following code snippet shows how to create a column chart with few lines of code assuming the the chart\u0026amp;rsquo;s plot series data is present on the same worksheet from cell A1 to D4.\nC#\n//Add a new chart of type Column to chart collection\nint idx = worksheet.Charts.Add(ChartType.Column, 6, 5, 20, 13);\n//Retrieve the newly added chart instance\nChart chart = worksheet.Charts[idx];\n//Specify the chart\u0026amp;rsquo;s data series from cell A1 to D4\nchart.SetChartDataRange(\u0026amp;ldquo;A1:D4\u0026amp;rdquo;, true);\n\\\nMethod VbaModuleCollection.Add Added\nAspose.Cells for .NET 8.4.2 has exposed the VbaModuleCollection.Add method to add a new VBA module to the instance of Workbook. The VbaModuleCollection.Add method accepts a parameter of type of Worksheet to add a worksheet specific module.\nThe following code snippet shows how to use the VbaModuleCollection.Add method.\nC#\n//Create new workbook\nWorkbook workbook = new Workbook();\n//Access first worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Add VBA module for first worksheet\nint idx = workbook.VbaProject.Modules.Add(worksheet);\n//Access the VBA Module, set its name and code\nAspose.Cells.Vba.VbaModule module = workbook.VbaProject.Modules[idx]; …","date":-62135596800,"description":"","objectID":"30099c9d36def233c41c47aa0351273b","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.4.2/","title":"Public API Changes in Aspose.Cells 8.4.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.4.2 to 8.5.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nChanged the ICustomFunction.CalculateCustomFunction Parameters\nIf one parameter for the custom function is cell reference, in old version Aspose.Cells APIs used to convert the cell reference to one cell value or an object array of all cell values in the referred area. However, for many functions and users the cell values array for all cells in the referred area is not required, they just need one single cell corresponding to the position of the formula, or just need the reference itself instead of the cell value or value array. For some situations, fetching all cell values even increased the risk of circular reference error.\nTo support such kind of requirement, Aspose.Cells for .NET 8.5.0 has changed the parameter value to the \u0026amp;ldquo;paramsList\u0026amp;rdquo; for referred area. Since v8.5.0, the API just puts the ReferredArea object into the \u0026amp;ldquo;paramsList\u0026amp;rdquo; when the corresponding parameter is a reference or its calculated result is reference. If you need the reference itself then you can use the ReferredArea directly. If you need to get one single cell value from the reference corresponding with the formula\u0026amp;rsquo;s position, you can use ReferredArea.GetValue(rowOffset, int colOffset) method. If you need cell values array for the whole area, then you can use ReferredArea.GetValues method.\nNow as Aspose.Cells for .NET 8.5.0 gives the ReferredArea in \u0026amp;ldquo;paramsList\u0026amp;rdquo;, the ReferredAreaCollection in \u0026amp;ldquo;contextObjects\u0026amp;rdquo; will not be needed anymore(in old versions it could not give one-to-one map to the parameters of the custom function always), so the this release has also removed it from \u0026amp;ldquo;contextObjects\u0026amp;rdquo; now.\nThis change requires …","date":-62135596800,"description":"","objectID":"a897932c98eca9fd0ca68c0f7457d5ee","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.5.0/","title":"Public API Changes in Aspose.Cells 8.5.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.5.0 to 8.5.1 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nMethod Workbook.Dispose Added\nWorkbook object now implements the System.IDisposable interface which has a single Dispose method. You can either directly call the Workbook.Dispose method or create a Workbook object in a Using structure to call this method automatically.\nC#\n//Create workbook object\nWorkbook book = new Workbook();\n//Call Dispose method\nbook.Dispose();\n//Call Dispose method via Using statement\nusing (Workbook book = new Workbook())\n{\n//do processing\n}\n\\\nMethod Cell.GetHeightOfValue Added\nAspose.Cells for .NET 8.5.1 has exposed the Cell.GetHeightOfValue method to get the height of cell value. By using this method you can calculate height of the cell value and then set the height of the row of that cell respectively. Check the detailed article on how to calculate the cell height \u0026amp;amp; width.\nEnumeration TableDataSourceType Added\nAspose.Cells for .NET 8.5.1 has exposed the enumeration Aspose.Cells.Tables.TableDataSourceType to retrieve the data source type of a ListObject. The TableDataSourceType enumeration as following fields.\n TableDataSourceType.QueryTable TableDataSourceType.SharePoint TableDataSourceType.Worksheet TableDataSourceType.XML  Property ListObject.DataSourceType Added\nWith the release of v8.5.1, the Aspose.Cells API has exposed the readonly ListObject.DataSourceType property that can be used to detect the data source type of a ListObject.\nHere is the simplest usage scenario.\nC#\nWorkbook book = new Workbook(\u0026amp;ldquo;D:/book1.xlsx\u0026amp;rdquo;);\nWorksheet sheet = book.Worksheets[0];\nListObject listObject = sheet.ListObjects[0];\nif (listObject.DataSourceType == Aspose.Cells.Tables.TableDataSourceType.QueryTable)\n{ …","date":-62135596800,"description":"","objectID":"c4dbb84f398330dd18d97b50fb62387a","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.5.1/","title":"Public API Changes in Aspose.Cells 8.5.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.5.1 to 8.5.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nRender Worksheet to Graphic Context\nThis release of Aspose.Cells for .NET API has exposed two new overloads of SheetRender.ToImage method that now allows to accept an instance of System.Drawing.Graphics class to render in Graphics context. The signatures of newly added methods are as follow.\n SheetRender.ToImage(int pageIndex, Graphics g, float x, float y) SheetRender.ToImage(int pageIndex, Graphics g, float x, float y, float width, float height)  Following is the simple usage scenario.\nC#\n//Create workbook object from source file\nWorkbook workbook = new Workbook(filePath);\n//Access first worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Create empty Bitmap\nBitmap bmp = new Bitmap(800, 800);\n//Create Graphics Context\nGraphics g = Graphics.FromImage(bmp);\ng.Clear(Color.Blue);\n//Set one page per sheet to true in image or print options\nImageOrPrintOptions opts = new ImageOrPrintOptions();\nopts.OnePagePerSheet = true;\n//Render worksheet to graphics context\nSheetRender sr = new SheetRender(worksheet, opts);\nsr.ToImage(0, g, 0, 0);\n//Save the graphics context image in Png format\nbmp.Save(\u0026amp;ldquo;test.png\u0026amp;rdquo;, ImageFormat.Png);\n\\\nMethod PivotTable.GetCellByDisplayName Added\nAspose.Cells for .NET 8.5.2 has exposed the PivotTable.GetCellByDisplayName method that can be used to retrieve the Cell object by the name of the PivotField. This method could be useful in scenarios where you wish to highlight or format the PivotField header.\nFollowing is the simple usage scenario.\nC#\n//Create workbook object from source excel file\nWorkbook workbook = new Workbook(filePath);\n//Access first worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Access first …","date":-62135596800,"description":"","objectID":"7ba48696e715179878f5ac6a22e119d9","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.5.2/","title":"Public API Changes in Aspose.Cells 8.5.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.5.2 to 8.6.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Metadata Manipulation Without Creating an Object of Workbook\nThis release of Aspose.Cells for .NET API has exposed two new classes namely WorkbookMetadata \u0026amp;amp; MetadataOptions along with a new enumeration MetadataType that now allows manipulate the document properties (metadata) without creating an instance of Workbook. The WorkbookMetadata class is light weight and provides very easy to use, efficient mechanism to read, write \u0026amp;amp; update document properties without impacting the over all performance.\nFollowing is the simple usage scenario.\nC#\n//Load a spreadsheet with WorkbookMetadata while specifying appropriate MetadataType\nMetadataOptions options = new MetadataOptions(MetadataType.DocumentProperties);\nWorkbookMetadata metadata = new WorkbookMetadata(filePath, options);\n//Set some properties\nmetadata.CustomDocumentProperties.Add(\u0026amp;ldquo;test\u0026amp;rdquo;, \u0026amp;ldquo;test\u0026amp;rdquo;);\n//Save the metadata info to spreadsheet\nmetadata.Save(filePath);\n\\\nProperty HtmlSaveOptions.ExportFrameScriptsAndProperties Added\nAspose.Cells for .NET 8.6.0 has exposed the HtmlSaveOptions.ExportFrameScriptsAndProperties property that can be used to influence the creation of additional scripts while converting the spreadsheets to HTML format. With default settings, the Aspose.Cells APIs export the spreadsheet in HTML format as Excel application does the export, that is; the resultant HTML contains the frames and conditional comments, that detects the browser type \u0026amp;amp; adjusts the layout accordingly. The default value of HtmlSaveOptions.ExportFrameScriptsAndProperties property is true, that means; the export is done as per Excel standards. However, if the property is set …","date":-62135596800,"description":"","objectID":"fb8b8e30781ae7b90d9ccdde3c786420","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.6.0/","title":"Public API Changes in Aspose.Cells 8.6.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.6.0 to 8.6.1 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for HTML Link Target Type\nThis release of Aspose.Cells for .NET API has exposed an enumeration namely HtmlLinkTargetType along with a new property HtmlSaveOptions.LinkTargetType that together allows to set the target type for the links in spreadsheet while conversion to HTML format. The possible values of the HtmlLinkTargetType enumeration as follow where the default value is Self.\n HtmlLinkTargetType.Blank: Opens the linked document/page in a new window or tab. HtmlLinkTargetType.Parent: Opens the linked document/page in parent frame. HtmlLinkTargetType.Self: Opens the linked document/page in the same frame where the link was clinked. HtmlLinkTargetType.Top: Opens the linked document/page in the full body of the window.  Following is the simple usage scenario.\nC#\n//Load a spreadsheet\nWorkbook workbook = new Workbook(inputFilePath);\n//Create an instance of HtmlSaveOptions\nHtmlSaveOptions options = new HtmlSaveOptions();\n//Set the LinkTargetType property to appropriate value\noptions.LinkTargetType = HtmlLinkTargetType.Blank;\n//Convert the spreadsheet to HTML with preset HtmlSaveOptions\nworkbook.Save(outputFilePath, options);\n\\\nMethod VbaModuleCollection.Remove Added\nAspose.Cells for .NET 8.6.1 has exposed another overload of the VbaModuleCollection.Remove method that can now accept an instance of Worksheet to remove all the VBA modules associated with the specified Worksheet.\nFollowing is the simple usage scenario.\nC#\n//Load a spreadsheet\nWorkbook workbook = new Workbook(inputFilePath);\n//Retrieve the VBA modules from the Workbook\nVbaModuleCollection modules = workbook.VbaProject.Modules;\n//Remove the VBA modules from specific Worksheet …","date":-62135596800,"description":"","objectID":"35b8ccc3ce59db1430d138ea36a4557d","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.6.1/","title":"Public API Changes in Aspose.Cells 8.6.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.6.1 to 8.6.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for Call Back with Smart Markers\nThis release of Aspose.Cells for .NET API has exposed the WorkbookDesigner.CallBack property and ISmartMarkerCallBack interface that together allows to get the notifications about the cell reference and/or smart marker being processed. Following piece of code demonstrates the usage of ISmartMarkerCallBack interface to define a new class that handles the call back for WorkbookDesigner.Process method.\nC#\nclass SmartMarkerCallBack : ISmartMarkerCallBack\n{\nWorkbook workbook;\ninternal SmartMarkerCallBack(Workbook workbook)\n{\nthis.workbook = workbook;\n}\npublic void Process(int sheetIndex, int rowIndex, int colIndex, string tableName, string columnName)\n{\nConsole.WriteLine(\u0026amp;ldquo;Processing Cell : \u0026amp;quot; + workbook.Worksheets[sheetIndex].Name + \u0026amp;ldquo;!\u0026amp;rdquo; + CellsHelper.CellIndexToName(rowIndex, colIndex));\nConsole.WriteLine(\u0026amp;ldquo;Processing Marker : \u0026amp;quot; + tableName + \u0026amp;ldquo;.\u0026amp;rdquo; + columnName);\n}\n}\n\\\nRest of the process includes loading the designer spreadsheet containing the Smart Markers with WorkbookDesigner and process it by setting the data source. However, in order to enable the notifications, it is necessary to set the WorkbookDesigner.CallBack property before calling the WorkbookDesigner.Process method as demonstrated below.\nC#\n//Loading the designer spreadsheet in an instance of Workbook\nWorkbook workbook = new Workbook(inputFilePath);\n//Loading the instance of Workbook in an instance of WorkbookDesigner\nWorkbookDesigner designer = new WorkbookDesigner(workbook);\n//Set the WorkbookDesigner.CallBack property to an instance of newly created class\ndesigner.CallBack = new SmartMarkerCallBack(workbook);\n//Set …","date":-62135596800,"description":"","objectID":"3035548c6035b392d59ce04a2ecd6d40","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.6.2/","title":"Public API Changes in Aspose.Cells 8.6.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.6.2 to 8.6.3 that may be of interest to module/application developers. It includes not only new and updated public methods, added classes, but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for HTML Parsing while Importing Data\nThis release of Aspose.Cells for .NET API has exposed the ImportTableOptions.IsHtmlString property which directs the API to parse the HTML tags while importing data onto the Worksheet and set the parsed result as cell value. Please note, Aspose.Cells APIs already provide the Cell.HtmlString to perform this task for a single cell, however, while importing data in bulk such as from a DataTable, the ImportTableOptions.IsHtmlString property (when set to true) tries to parse all the supported HTML tags and sets the parsed results to the corresponding cells.\nHere is the simplest usage scenario.\nC#\n//create an instance of ImportTableOptions\nvar importOptions = new ImportTableOptions();\n//Set IsHtmlString to true so that the API can parse the HTML\nimportOptions.IsHtmlString = true;\n//Import data from DataTable while passing instance of ImportTableOptions\ncells.ImportData(table, 0, 0, importOptions);\n\\\nMethod Workbook.CreateBuiltinStyle Added\nAspose.Cells for .NET 8.6.3 has exposed the Workbook.CreateBuiltinStyle method that can be used to create an object of the Style class that corresponds to one of the built-in styles offered by the Excel application. The Workbook.CreateBuiltinStyle method accepts a constant from the enumeration BuiltinStyleType. Please note, with previous releases of the Aspose.Cells APIs, same task could be accomplished via StyleCollection.CreateBuiltinStyle method but as the recent releases of Aspose.Cells APIs have removed the StyleCollection class therefore the newly exposed Workbook.CreateBuiltinStyle method can be considered as an alternative approach to achieve the same.\nFollowing is the simple …","date":-62135596800,"description":"","objectID":"63c513baa33ee6f7c70cc19bf6f1c12e","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.6.3/","title":"Public API Changes in Aspose.Cells 8.6.3"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.6.3 to 8.7.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for VBA Project Digital Signing, Detection \u0026amp;amp; Extraction\nThis release of Aspose.Cells for .NET has exposed some new properties and methods to aid the users in tasks such as digitally signing a VBA project, detecting if a VBA project is signed \u0026amp;amp; valid. Moreover, the new API allows to extract the certificate as raw data from digitally signed VBA project in Workbook.\nDigitally Sign VBA Project\nAspose.Cells for .NET 8.7.0 has exposed the VbaProject.Sign method that can be used to digitally sign the VBA project in a Workbook. The said method accepts an instance of DigitalSignature class which resides in the Aspose.Cells.DigitalSignatures namespace.\nFollowing is the simple usage scenario.\nC#\n//Create an instance of Workbook\n//Optionally load an existing spreadsheet\nvar book = new Workbook();\n//Access the VbaProject from the Workbook\nvar vbaProject = book.VbaProject;\n//Sign the VbaProject using the X509Certificate\nvbaProject.Sign(new DigitalSignature(new System.Security.Cryptography.X509Certificates.X509Certificate2(cert), \u0026amp;ldquo;Comments\u0026amp;rdquo;, DateTime.Now));\n\\\nDetection of Digitally Signed VBA Project\nNewly exposed VbaProject.IsSigned property can be used to in detect if the VBA project in a Workbook is digitally signed. The VbaProject.IsSigned property is of type Boolean, which returns true if the VBA project is digitally signed and vice versa.\nFollowing is the simple usage scenario.\nC#\n//Create an instance of Workbook and load an existing spreadsheet\nvar book = new Workbook(inFilePath);\n//Access the VbaProject from the Workbook\nvar vbaProject = book.VbaProject;\n//Check if VbaProject is digitally signed\nif …","date":-62135596800,"description":"","objectID":"fdecdd563c37a2b52677a5b0de35cb21","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.7.0/","title":"Public API Changes in Aspose.Cells 8.7.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.7.0 to 8.7.1 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nAdded LookInType.OriginalValues Property\nAspose.Cells APIs already support the Find or Search Data feature for spreadsheets in order to find some particular piece of contents in cell value \u0026amp;amp; formula. However, this feature was lacking the aspect of formatting applied onto the cell that may change the appearance as well as the value of the contents, consequently make the text unsearchable using the original value. With this release of Aspose.Cells APIs, another constant by the name LookInType.OriginalValues has been exposed to the public API which allows to overcome the situation as discussed above.\nFor more details on this feature, please review the detailed article on Search Data Using Original Values\nFollowing is the simple usage scenario.\nC#\n//Create workbook object\nWorkbook workbook = new Workbook();\n//Access first worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Add 10 in cell A1 and A2\nworksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(10);\nworksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(10);\n//Add Sum formula in cell D4 but customize it as \u0026amp;mdash;\nCell cell = worksheet.Cells[\u0026amp;ldquo;D4\u0026amp;rdquo;];\nStyle style = cell.GetStyle();\nstyle.Custom = \u0026amp;ldquo;\u0026amp;mdash;\u0026amp;quot;;\ncell.SetStyle(style);\n//The result of formula will be 20\n//but 20 will not be visible because\n//the cell is formated as \u0026amp;mdash;\ncell.Formula = \u0026amp;ldquo;=Sum(A1:A2)\u0026amp;quot;;\n//Calculate the workbook\nworkbook.CalculateFormula();\n//Create find options\nFindOptions options = new FindOptions();\noptions.LookInType = LookInType.OriginalValues;\noptions.LookAtType = LookAtType.EntireContent;\nCell foundCell = null;\nobject obj = 20;\n//Find 20 which is Sum(A1:A2) and formatted as \u0026amp;mdash; …","date":-62135596800,"description":"","objectID":"96ce67ec9e5eb597a70a76af037ee636","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.7.1/","title":"Public API Changes in Aspose.Cells 8.7.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.7.1 to 8.7.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nExtended the Default Calculation Engine\nAspose.Cells APIs have powerful calculation engine that can calculate almost all of the Microsoft Excel functions. Moreover, the Aspose.Cells APIs now allow to extend the default calculation engine to meet custom calculation requirements of any application.\nFollowing APIs have been added with the release of Aspose.Cells for .NET 8.7.2.\n AbstractCalculationEngine Class CalculationData Class CalculationOptions.CustomEngine Property  Above mentioned APIs allow to implement custom calculation engine for all functions (including Excel\u0026amp;rsquo;s native functions) with more flexibility.\nFor more details on this feature, please review the detailed article on Implementing Custom Calculation Engine\nFollowing is the simple usage scenario.\nC#\npublic class MyEngine : AbstractCalculationEngine\n{\npublic override void Calculate(CalculationData data)\n{\nstring funcName = data.FunctionName.ToUpper();\nif (\u0026amp;ldquo;MYFUNC\u0026amp;rdquo;.Equals(funcName))\n{\n//do calculation for MYFUNC here\nint count = data.ParamCount;\nobject res = null;\nfor (int i = 0; i \u0026amp;lt; count; i++)\n{\nobject pv = data.GetParamValue(i);\nif (pv is ReferredArea)\n{\nReferredArea ra = (ReferredArea)pv;\npv = ra.GetValue(0, 0);\n}\n//process the parameter here\n//res = \u0026amp;hellip;;\n}\ndata.CalculatedValue = res;\n}\n}\n}\n\\\nAdded Overloaded Indexer for TextBoxCollection\nAspose.Cells for .NET 8.7.2 has exposed the overloaded indexed for the TextBoxCollection class in order to access the instance of TextBox using its name as string.\nFor more details on this feature, please review the detailed article on Accessing the TextBox via its Name\nSimple usage scenario looks as follow.\nC# …","date":-62135596800,"description":"","objectID":"59654f84a4d0f32634d8879beb8e2d96","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.7.2/","title":"Public API Changes in Aspose.Cells 8.7.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.7.2 to 8.8.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nGet Cell References for External Connection\nAspose.Cells for .NET 8.8.0 has exposed the following new properties that are helpful in retrieving the target \u0026amp;amp; output cell references for external connections stored in the spreadsheet.\n QueryTable.ConnectionId: Gets the connection Id of the query table. ExternalConnection.Id: Gets the Id of the external connection. ListObject.QueryTable: Gets the linked QueryTable.  For more details on this feature, please review the detailed article on Find Query Tables and List Objects related to External Data Connections\nAdded HTMLLoadOptions.KeepPrecision Property\nAspose.Cells for .NET 8.8.0 has added the HTMLLoadOptions.KeepPrecision property in order to control the conversion of long numeric values to exponential notation while importing HTML files. By default, any value longer than 15 digits gets converted to exponential notation if the data is being imported from HTML string or file. However, now the users can control this behaviour with the help of HTMLLoadOptions.KeepPrecision property. If the said property is set to true, the values will be imported as they are in the source.\nFor more details on this feature, please review the detailed article on Avoid the Conversion of Large Numeric Values to Exponential Notation \nFollowing is the simple usage scenario.\nC#\nstring html = @\u0026amp;rdquo;\n  9999999999999999 10.8%    \u0026amp;ldquo;;\nbyte[] byteArray = Encoding.UTF8.GetBytes(html);\nHTMLLoadOptions loadOptions = new Aspose.Cells.HTMLLoadOptions(LoadFormat.Html);\nloadOptions.KeepPrecision = true;\nMemoryStream stream = new MemoryStream(byteArray);\nWorkbook workbook = new Workbook(stream, loadOptions);\nWorksheet …","date":-62135596800,"description":"","objectID":"83bd59036f7b27ec078ab13a5bc248dd","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.8.0/","title":"Public API Changes in Aspose.Cells 8.8.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.8.0 to 8.8.1 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nFilter the Data for Loading\nAspose.Cells for .NET 8.8.1 has exposed the LoadDataFilterOptions enumeration along with LoadOptions.LoadDataFilterOptions property which can be used to specify the data type that should be loaded when building the workbook from a template file. Filtering loaded data can improve the performance for special purposes, especially when using LightCells APIs.\nThe LoadDataFilterOptions enumeration provides the following selections.\n All to load everything from the spreadsheet. None to load nothing from the spreadsheet. CellBlank loads the cells whose values are blank. CellBool loads cells whose values are Boolean. CellData loads cells data including values, formulas and formatting. CellError loads cells whose values are error. CellNumeric loads cells whose values are numeric (including Date \u0026amp;amp; Time). CellString loads cells whose values are text/string. CellValue loads only cell values (all types). Chart loads only charts. ConditionalFormatting loads only conditional formatting rules. DataValidation loads only data validation rules. DocumentProperties loads only document properties. Formula loads formulas including defined names. MergedArea loads only merged cells. PivotTable loads Pivot Tables. Settings loads only Workbook \u0026amp;amp; Worksheet settings. Shape loads only shapes. Style loads cells formatting. Table loads Excel tables/List Objects.  For more details on this feature, please review the detailed article on Filter Data for Loading.\nFollowing is the simple usage scenario.\nC#\n//Create an instance of LoadOptions \u0026amp;amp; initialize it with type of template to be loaded\nvar options = new LoadOptions(LoadFormat.Xlsx); …","date":-62135596800,"description":"","objectID":"43909c1cd410913e23ce67c3f9b35d84","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.8.1/","title":"Public API Changes in Aspose.Cells 8.8.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.8.1 to 8.8.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nUpdate References Automatically while Deleting Blank Rows \u0026amp;amp; Columns\nAspose.Cells for .NET 8.8.2 has exposed the overloaded versions of the Cells.DeleteBlankRows \u0026amp;amp; Cells.DeleteBlankColumns methods. The new methods can accept an instance of DeleteOptions class and can be used to overcome the situations that could arise due to the broken references in formulas, chart series data and so on. The DeleteOptions class currently has only one member, a Boolean type property by the name UpdateReference. If the said property is set to true and the instance of DeleteOptions class is passed to the Cells.DeleteBlankRows \u0026amp;amp; Cells.DeleteBlankColumns methods, the API will internally adjust the formula references (if any) to accommodate the changes.\nFor more details on this feature, please review the detailed article on Deleting Blank Rows \u0026amp;amp; Columns with Updated References.\nFollowing is the simple usage scenario.\nC#\n//Create an instance of Workbook \u0026amp;amp; load an existing spreadsheet\nvar book = new Workbook(dir + \u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\n//Access worksheet from which blank rows/columns have to be deleted\nvar sheet = book.Worksheets[0];\n//Access cells of the desired worksheet\nvar cells = sheet.Cells;\n//Create an instance of DeleteOptions class\nDeleteOptions options = new DeleteOptions();\n//Set UpdateReference property to true;\noptions.UpdateReference = true;\n//Delete all blank rows and columns\ncells.DeleteBlankColumns(options);\ncells.DeleteBlankRows(options);\n","date":-62135596800,"description":"","objectID":"e703c1b419b5ac50c9a2759d84322383","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.8.2/","title":"Public API Changes in Aspose.Cells 8.8.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.8.2 to 8.8.3 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nSupport for ActiveX Controls\nAspose.Cells for .NET 8.8.3 has exposed the AddActiveXControl method that allows to add an ActiveX control to the ShapeCollection. The aforementioned method requires 7 parameters to specify the control type, location to place the control and size of the control. The type can be specified using the ControlType enumeration with following possible values.\n ControlType.CheckBox ControlType.ComboBox ControlType.CommandButton ControlType.Image ControlType.Label ControlType.ListBox ControlType.RadioButton ControlType.ScrollBar ControlType.SpinButton ControlType.TextBox ControlType.ToggleButton ControlType.Unknown  For more details on this feature, please review the detailed article on Adding ActiveX Controls to Worksheet.\nFollowing is the simple usage scenario.\nC#\n// Create an instance of Workbook\nvar book = new Workbook();\n// Access first worksheet from the collection\nvar sheet = book.Worksheets[0];\n// Add Toggle Button ActiveX Control to the ShapeCollection at specified location\nvar shape = sheet.Shapes.AddActiveXControl(ControlType.ToggleButton, 4, 0, 4, 0, 100, 30);\n// Access the ActiveX Control object and set its linked cell property\nActiveXControl control = shape.ActiveXControl;\ncontrol.LinkedCell = \u0026amp;ldquo;A1\u0026amp;rdquo;;\n// Save the result on disc\nbook.Save(dir + \u0026amp;ldquo;output.xlsx\u0026amp;rdquo;, SaveFormat.Xlsx);\n\\\nAdded LoadOptions.SetPaperSize Method\nAspose.Cells for .NET 8.8.3 allows to set the default print paper size from the default printer\u0026amp;rsquo;s setting while using the newly exposed LoadOptions.SetPaperSize method as demonstrated below. Please note, the input parameter to the aforementioned method is the value …","date":-62135596800,"description":"","objectID":"3a64fe5c5504cb4acfac3a5631a65bc3","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.8.3/","title":"Public API Changes in Aspose.Cells 8.8.3"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.8.3 to 8.9.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nAdded HtmlSaveOptions.DefaultFontName Property\nAspose.Cells for .NET 8.9.0 has exposed the DefaultFontName property for the HtmlSaveOptions class that allows to specify the default font name while rendering spreadsheets to HTML format. The default font will be used only when the font of style does not exist. The default value of HtmlSaveOptions.DefaultFontName property is null that means, Aspose.Cells for .NET API will use the universal font which has the same family with the original font.\nFor more details on this feature, please review the article on Setting Default Font for Rendering Spreadsheets to HTML Format.\nFollowing is the simple usage scenario.\nC#\n// Create an instance of HtmlSaveOptions\nvar options = new HtmlSaveOptions();\n// Set default font name for Html rendering\noptions.DefaultFontName = \u0026amp;ldquo;Arial\u0026amp;rdquo;;\n// Load a spreadsheet in an instance of Workbook\nvar book = new Workbook(dir + \u0026amp;ldquo;sample.xlsx\u0026amp;rdquo;);\n// Save the spreadsheet in Html format while passing instance of HtmlSaveOptions\nbook.Save(dir + \u0026amp;ldquo;output.html\u0026amp;rdquo;, options);\n\\\nAdded ImageOrPrintOptions.DefaultFont Property\nAspose.Cells for .NET 8.9.0 allows to set the default font name for the ImageOrPrintOptions class by exposing the DefaultFont property. The said property can be used when Unicode characters in the spreadsheet are not set with correct font in cell style therefore such characters may appear as blocks in the resultant images.\nSet the DefaultFont property to MingLiu or MS Gothic to show Unicode characters. If the said property is not set, Aspose.Cells will use the system\u0026amp;rsquo;s default font to show Unicode characters.\nFor more details on …","date":-62135596800,"description":"","objectID":"87b7b842ac1a9d3b73f841a99b6cc6cd","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.9.0/","title":"Public API Changes in Aspose.Cells 8.9.0"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.9.0 to 8.9.1 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nConfigurable Font Sources\nAspose.Cells for .NET has exposed a number of classes to provide the support for configurable font sources for rendering spreadsheets. Here is the list of classes which have been added with Aspose.Cells for .NET 8.9.1.\n FontConfigs class specifies the font settings. FontSourceBase class is an abstract base class for the classes that allow the user to specify various font sources. FileFontSource class represents the single TrueType font file stored in the file system. FolderFontSource class represents the folder that contains TrueType font files. MemoryFontSource class represents the single TrueType font file stored in memory. FontSourceType enumeration specifies the type of a font source.  With above mentioned changes in place, the Aspose.Cells for .NET allows to set the fonts as detailed below.\n Set one custom font folder while using FontConfigs.SetFontFolder method. Set multiple custom font folder while using FontConfigs.SetFontFolders method. Set font sources from a custom font folder, a single font file or font data from an array of bytes while using FontConfigs.SetFontSources method.  Here is simple usage scenario of aforementioned methods.\nC#\n// Defining string variables to store paths to font folders \u0026amp;amp; font file\nstring fontFolder1 = \u0026amp;ldquo;D:/Arial\u0026amp;rdquo;;\nstring fontFolder2 = \u0026amp;ldquo;D:/Calibri\u0026amp;rdquo;;\nstring fontFile = \u0026amp;ldquo;D:/Arial/arial.ttf\u0026amp;rdquo;;\n// Setting first font folder with SetFontFolder method\n// Second parameter directs the API to search the subfolders for font files\nFontConfigs.SetFontFolder(fontFolder1, true);\n// Setting both font folders with SetFontFolders method\n// Second parameter …","date":-62135596800,"description":"","objectID":"b3653ec95ec836dc28bd48704f9822f3","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.9.1/","title":"Public API Changes in Aspose.Cells 8.9.1"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.9.1 to 8.9.2 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nPlease also check the Public API Changes introduced in Aspose.Cells for .NET 8.9.1\nAdded APIs\nAdded TextOptions Class \u0026amp;amp; FontSettings.TextOptions Property\nAspose.Cells for .NET has exposed the TextOptions class along with FontSettings.TextOptions property in order to control the appearance of textual parts of a Shape.\nHere is simple usage scenario of FontSettings.TextOptions property.\nC#\n// Initialize Workbook instance\nvar book = new Workbook();\n// Access first worksheet from collection\nvar sheet = book.Worksheets[0];\n// Add a Shape of type TextBox to the collection\nvar shape = sheet.Shapes.AddTextBox(0, 0, 0, 0, 100, 200);\n// Access TextOptions of Shape\nvar textOptions = shape.TextBody[1].TextOptions;\n\\\nAdded TextOptions.Fill, Outline \u0026amp;amp; Shadow Properties\nAspose.Cells for .NET 8.9.2 has exposed the TextOptions.Fill, TextOptions.Outline \u0026amp;amp; TextOptions.Shadow properties which allows to control the aspects of textual contents of the shape, such as fill, shadow \u0026amp;amp; outline respectively.\nHere is simple usage scenario of aforementioned properties.\nC#\n// Initialize Workbook instance\nvar book = new Workbook();\n// Access first worksheet from collection\nvar sheet = book.Worksheets[0];\n// Add a Shape of type TextBox to the collection\nvar shape = sheet.Shapes.AddTextBox(0, 0, 0, 0, 100, 200);\n// Set text for TextBox\nshape.Text = \u0026amp;ldquo;Aspose\u0026amp;rdquo;;\n// Access TextOptions of Shape\nvar textOptions = shape.TextBody[1].TextOptions;\n// Set shadow\ntextOptions.Shadow.PresetType = PresetShadowType.Below;\n// Set fill color\ntextOptions.Fill.FillType = FillType.Solid;\ntextOptions.Fill.SolidFill.Color = Color.Red;\n// Set outline color …","date":-62135596800,"description":"","objectID":"0c05af380337e6c510a5520cf0063432","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+8.9.2/","title":"Public API Changes in Aspose.Cells 8.9.2"},{"content":"This document describes the changes to the Aspose.Cells API from version 8.9.2 to 9.0.0 that may be of interest to module/application developers. It includes not only new and updated public methods, added \u0026amp;amp; removed classes etc., but also a description of any changes in the behavior behind the scenes in Aspose.Cells.\nAdded APIs\nAdded Shape.TextOptions Property\nAspose.Cells for .NET has exposed the TextOptions property for the Shape class in order to control the appearance of textual parts of a Shape.\nHere is simple usage scenario of Shape.TextOptions property.\nC#\n// Initialize an instance of Workbook\nvar book = new Workbook();\n// Get the default Worksheet from the Workbook\nvar sheet = book.Worksheets[0];\n// Add a TextBox to the collection\nvar textboxIndex = sheet.TextBoxes.Add(2, 1, 160, 200);\n// Get the TextBox object\nvar textbox = sheet.TextBoxes[textboxIndex];\n// Add text to the TextBox\ntextbox.Text = \u0026amp;ldquo;Hello Aspose!\u0026amp;quot;;\n// Format the textual contents\ntextbox.TextOptions.Color = System.Drawing.Color.Red;\ntextbox.TextOptions.IsItalic = true;\n\\\nAdded LoadOptions.CultureInfo Property\nAspose.Cells for .NET 9.0.0 has exposed the LoadOptions.CultureInfo property which allows inject an instance of CultureInfo at the time of loading a document in an instance of Workbook.\nHere is simple usage scenario of aforementioned properties.\nCheck the detailed article on Loading Spreadsheet with Specific CultureInfo\nC#\n// Create an instance of CultureInfo and populate its properties\nvar culture = new CultureInfo(\u0026amp;ldquo;en-GB\u0026amp;rdquo;);\nculture.NumberFormat.NumberDecimalSeparator = \u0026amp;ldquo;,\u0026amp;quot;;\nculture.DateTimeFormat.DateSeparator = \u0026amp;ldquo;-\u0026amp;quot;;\nculture.DateTimeFormat.ShortDatePattern = \u0026amp;ldquo;dd-MM-yyyy\u0026amp;rdquo;;\n// Create an instance of LoadOptions and set the CultureInfo property\nvar options = new LoadOptions(LoadFormat.Html);\noptions.CultureInfo = culture;\n// Load a HTML or TXT file in an instance of Workbook with instance of LoadOptions\nvar book = new Workbook(dir + …","date":-62135596800,"description":"","objectID":"ee6ef6b1f4c48f9fcc6442a355ee30bd","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/public+api+changes+in+aspose.cells+9.0.0/","title":"Public API Changes in Aspose.Cells 9.0.0"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"b66d150eedf4f5a1648a2546318c54a5","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migratingfromearlierversionsofasposecells/","title":"Migrating from Earlier Versions of Aspose.Cells"},{"content":"Aspose.Cells for .NET allows you to perform almost any tasks through your application that a user can perform in Microsoft Excel. Aspose.Cells is performant and robust and has the added benefit of working independently of Microsoft Automation. This article shows how to add borders to cells in a worksheet using Aspose.Cells for .NET compared to VSTO.\nAdding Borders to Cells\nTo add borders to cells in a spreadsheet, take the following steps:\n Set up the worksheet:  Instantiate an Application object. (VSTO only.) Add a Workbook. Get the first sheet. Add text to the cells that you\u0026amp;rsquo;ll add borders to.   Add borders:  Define a range. Apply a border style to the range. Repeat for each range and each border style you want to set. This example applies hairlines, thin, medium and thick lines.   Finish:  Autofit the column that the cells are in to fit the text neatly. Save the document.    These steps are shown in code below. The first code examples show how to implement them using VSTO with either C# or Visual Basic. After the VSTO examples are examples that show how to perform the same steps using Aspose.Cells for .NET, again using either C# or Visual Basic. The Aspose.Cells code samples are a lot shorter because Aspose.Cells is optimized for efficient coding.\nThe code generates an Excel file with a number of cells on the first sheet, each with a different border:\n\nCells with borders applied.\nAdding Borders using VSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.ApplicationClass ExcelApp = new Excel.ApplicationClass();\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n\\\n//Put some text into different cells (A2, A4, …","date":-62135596800,"description":"","objectID":"de03c65a9cb1e633f9ff16cd6040213b","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/add+borders+to+cells+in+a+worksheet/","title":"Add Borders to Cells in a Worksheet"},{"content":"Aspose.Cells for .NET allows you to perform almost any tasks through your application that a user can perform in Microsoft Excel. This article compares how to add a hyperlink to a cell in a worksheet using VSTO and Aspose.Cells for .NET.\nAdding Hyperlinks to Cells\nTo add hyperlinks to cells in a spreadsheet, take the following steps:\n Set up the worksheet:  Instantiate an Application object. (VSTO only.) Add a Workbook. Get the first sheet. Add text to the cells that you\u0026amp;rsquo;ll add a hyperlink to.   Add hyperlink. Save the document.  These steps are shown in the code examples below. The first examples shows how to use VSTO with either C# or Visual Basic to add a hyperlink to a cell. The examples that follow show how to do the same thing using Aspose.Cells for .NET, again using C# or Visual Basic.\nThe code samples generate an Excel file that has a hyperlink in cell A1 on the first worksheet.\n\nA hyperlink is added to cell A1.\nAdding Hyperlinks to Cells with VSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.ApplicationClass ExcelApp = new Excel.ApplicationClass();\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n\\\n//Define a range object(A1).\nExcel.Range _range;\n_range = objSheet.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;A1\u0026amp;rdquo;);\n//Add a hyperlink to it.\nobjSheet.Hyperlinks.Add(_range, \u0026amp;ldquo;http://www.aspose.com/\u0026amp;quot;, Type.Missing, \u0026amp;ldquo;Click to go to Aspose site\u0026amp;rdquo;, \u0026amp;ldquo;Aspose Site!\u0026amp;quot;);\n//Save the excel file.\nobjBook.SaveCopyAs(\u0026amp;ldquo;c:\\Hyperlink_test.xls\u0026amp;rdquo;);\n//Quit the Application.\nExcelApp.Quit();\n\\\nAdding Hyperlinks to Cells with Aspose.Cells for .NET\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\nusing …","date":-62135596800,"description":"","objectID":"27185b3b34c6e691c615d1eb0bb9773b","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/add+hyperlinks+to+cells/","title":"Add Hyperlinks to Cells"},{"content":"When working with a template file, sometimes, there\u0026amp;rsquo;s a need to add extra worksheets into the workbook to collect data. The new cells will be filled with data at specified positions and locations in each worksheet.\nSimilarly, you may need a specific worksheet to be active and viewed first when the file is opened in Microsoft Excel. An \u0026amp;ldquo;active sheet\u0026amp;rdquo; is the sheet that you\u0026amp;rsquo;re working on in a workbook. The name on the tab of the active sheet is bold by default.\nAdding worksheets and setting which sheet is active are common and simple tasks that developers need to know how to perform. In this article, we carry out these tasks using VSTO and Aspose.Cells for .NET.\nAdding Worksheets and Activating a Sheet\nFor the purposes of this migration tip:\n Add new worksheets to an existing Microsoft Excel file. Fill data into the cells of each new worksheet. Activate a sheet in the workbook. Save as Microsoft Excel file.  Below, are parallel code snippets for VSTO (C#, VB) and Aspose.Cells for .NET (C#, VB), that show how to achieve these tasks.\nVSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.Application excelApp = new Excel.ApplicationClass();\n//Specify the template excel file path.\nstring myPath = @\u0026amp;ldquo;d:\\test\\My_Book1.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Declare a Worksheet object.\nExcel.Worksheet newWorksheet;\n//Add 5 new worksheets to the workbook and fill some data\n//into the cells.\nfor (int i = 1; i \u0026amp;lt; 6; i++)\n{\n//Add a worksheet to the workbook.\nnewWorksheet = …","date":-62135596800,"description":"","objectID":"3f0b2e206502b897fdfc4829a789dda6","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/adding+new+worksheets+to+workbook+and+activating+a+sheet/","title":"Adding New Worksheets to Workbook and Activating a Sheet"},{"content":"To get an understanding of what data is in a range, it is often easier to sort and filter the data than to look at columns of unordered data. Sorting organizes data in either ascending or descending order, making it easier to find specific values. Filtering the data, allows you to show only certain values. It helps focus in on particular items in sales records, for example.\nUsers of Microsoft Excel can apply auto-filtering to columns. Auto-filtering adds a menu to the top of the column, from which you can sort of filter column data. This feature is also available to developers who work with Excel spreadsheets, either through VSTO or Aspose.Cells for .NET.\nAuto Filtering Data\nTo apply auto-filtering to a column:\n Create a workbook. Get a worksheet. Add sample data. Apply auto-filter. Auto-fit columns to make the display attractive. Save the spreadsheet.  The code samples in this article show how to perform these steps using VSTO with either C# or Visual Basic, or using Apose.Cells, again with either C# or Visual Basic.\nAuto-filtering Data with VSTO\nC#\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\u0026amp;hellip;\u0026amp;hellip;\u0026amp;hellip;//Instantiate the Application object.\nExcel.ApplicationClass ExcelApp = new Excel.ApplicationClass();\n\\\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n\\\n//Get the First sheet.\nExcel.Worksheet sheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n\\\n//Add data into A1 and B1 Cells as headers.\nsheet.Cells[1, 1] = \u0026amp;ldquo;Product ID\u0026amp;rdquo;;\nsheet.Cells[1, 2] = \u0026amp;ldquo;Product Name\u0026amp;rdquo;;\n//Add data into details cells.\nsheet.Cells[2, 1] = 1;\nsheet.Cells[3, 1] = 2;\nsheet.Cells[4, 1] = 3;\nsheet.Cells[5, 1] = 4;\nsheet.Cells[2, 2] = \u0026amp;ldquo;Apples\u0026amp;rdquo;;\nsheet.Cells[3, 2] = \u0026amp;ldquo;Bananas\u0026amp;rdquo;;\nsheet.Cells[4, 2] = \u0026amp;ldquo;Grapes\u0026amp;rdquo;;\nsheet.Cells[5, 2] = \u0026amp;ldquo;Oranges\u0026amp;rdquo;; …","date":-62135596800,"description":"","objectID":"e06a41f73e05df602a5cb054a1f32ea3","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/auto+filter+data/","title":"Auto Filter Data"},{"content":"Charts present data in an easy to understand way. Users who work with Microsoft Excel can create a number of different charts and customize them. The same features are available for developers who work with Aspose.Cells for .NET.\nCreating a Pie Chart\nThis article compares how to create a pie chart using Office Automation and VSTO to using Aspose.Cells for .NET. The steps for creating a pie chart are:\n Creating a workbook and worksheet. Adding sample data. Referencing productsChart. Adding a pie chart, defining the data range and chart title. Saving spreadsheet.  The code samples in this article show how to add a pie chart with VSTO, using either C# or Visual Basic, compared to creating one with Aspose.Cells, again using either C# or Visual Basic.\nCreating a Pie Chart with VSTO\nThe code samples that follow show how to add a pie chart to a spreadsheet using VSTO.\nC#\nvoid PieChart()\n{\n//Access a Vsto Worksheet\nMicrosoft.Office.Tools.Excel.Worksheet sheet = this;\n//Add sample data for pie chart\n//Add headings in A1 and B1\nsheet.Cells[1, 1] = \u0026amp;ldquo;Products\u0026amp;rdquo;;\nsheet.Cells[1, 2] = \u0026amp;ldquo;Users\u0026amp;rdquo;;\n\\\n//Add data from A2 till B4\nsheet.Cells[2, 1] = \u0026amp;ldquo;Aspose.Cells\u0026amp;rdquo;;\nsheet.Cells[2, 2] = 10000;\nsheet.Cells[3, 1] = \u0026amp;ldquo;Aspose.Slides\u0026amp;rdquo;;\nsheet.Cells[3, 2] = 8000;\nsheet.Cells[4, 1] = \u0026amp;ldquo;Aspose.Words\u0026amp;rdquo;;\nsheet.Cells[4, 2] = 12000;\n//Chart reference\nMicrosoft.Office.Tools.Excel.Chart productsChart;\n//Add a Pie Chart\nproductsChart = sheet.Controls.AddChart(0, 105, 330, 200, \u0026amp;ldquo;ProductUsers\u0026amp;rdquo;);\nproductsChart.ChartType = Microsoft.Office.Interop.Excel.XlChartType.xlPie;\n//Set chart title\nproductsChart.HasTitle = true;\nproductsChart.ChartTitle.Text = \u0026amp;ldquo;Users\u0026amp;rdquo;;\n//Gets the cells that define the data to be charted.\nMicrosoft.Office.Interop.Excel.Range chartRange = sheet.get_Range(\u0026amp;ldquo;A2\u0026amp;rdquo;, \u0026amp;ldquo;B4\u0026amp;rdquo;);\nproductsChart.SetSourceData(chartRange, missing);\n//Access the Active workbook from Vsto sheet …","date":-62135596800,"description":"","objectID":"9dcd714f9f56ed4bf9dcda67348bc42d","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/create+a+pie+chart/","title":"Create a Pie Chart"},{"content":"Aspose.Cells for .NET lets developers perform most of the the tasks that users can perform in Microsoft Excel through their applications. This article explains how to apply a named range programmatically.\nA named range is an Excel feature that lets you assign a name to a cell, or a range of cells, in an Excel spreadsheet. You can then use the name in formulas to refer to the cell (or range). Sensibly named ranges make formulas easier to understand.\nA named range has to be unique within its scope so do not use the same name for several ranges in a worksheet. Descriptive range names help avoid this: for example, OrderSubTotal is more descriptive than SubTotal and also less likely to be duplicated on a sheet.\nCreating a Named Range\nTo create a named range:\n Set up the worksheet:  Instantiate an Application object. (VSTO only.) Add a Workbook. Get the first sheet.   Create a named range:  Define a range. Name the range.   Save the file.  The code examples below show how to perform these steps using VSTO with either C# or Visual Basic. The code examples that follow show how to do the same thing using Aspose.Cells for .NET, again with either C# or Visual Basic.\nCreating a Named Range with VSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Create Excel Object\nExcel.ApplicationClass xl = new Excel.ApplicationClass();\n//Create a new Workbook\nExcel.Workbook wb = xl.Workbooks.Add(Missing.Value);\n//Get Worksheets Collection\nExcel.Sheets xlsheets = wb.Sheets;\n//Select the first sheet\nExcel.Worksheet excelWorksheet = (Excel.Worksheet)xlsheets[1];\n//Select a range of cells\nExcel.Range range = (Excel.Range)excelWorksheet.get_Range(\u0026amp;ldquo;A1:B4\u0026amp;rdquo;, Type.Missing);\n//Add Name to Range\nrange.Name = \u0026amp;ldquo;Test_Range\u0026amp;rdquo;;\n//Put data in range cells\nforeach (Excel.Range cell in range.Cells)\n{\ncell.set_Value(Missing.Value, …","date":-62135596800,"description":"","objectID":"c281b86912be8099f6ab3a08290bb849","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/creating+a+named+range/","title":"Creating a Named Range"},{"content":"When presenting workbooks to customers, or doing a presentation, it can be useful to hide worksheets in a workbook. A structured approach to spreadsheet modelling suggests that data, formulas and visualizations such as charts are kept on separate sheets. This approach keeps the layout clean and simple and makes the workbook easier to navigate. When presenting results, you might want to hide the data or formula sheets from view to avoid distraction.\nUsers who work in Microsoft Excel, can easily hide and then unhide (show) worksheets. The same features are available to developers who program with Excel spreadsheets. There are different ways of working with spreadsheets from within software applications. One method is to use VSTO, another is Aspose.Cells for .NET.\nHiding and Unhiding Worksheets\nThis article compares hiding and unhiding worksheets with VSTO, using either C# or Visual Basic, to performing the same task with Aspose.Cells, again using either C# or Visual Basic. Aspose.Cells lets you work without Microsoft Excel installed.\nThe steps to hide a worksheet are:\n Open a file. Get a worksheet. Hide the worksheet. Save the file.  To unhide a worksheet again, simply toggle visibility on for the hidden sheet.\nThe code samples below first show how to hide a worksheet. The first samples show the process with VSTO, using either C# or Visual Basic, compared to using Aspose.Cells, again using either C# or Visual Basics.\nThe second set of code samples show the line used to unhide the worksheet in VSTO or Aspose.Cells.\nHiding Worksheets\nBelow are code samples for VSTO and Aspose.Cells that illustrate how to hide a worksheet in a workbook.\n**Hiding Worksheets with VSTO **\nC#\n\\\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\n//Instantiate the Application object.\nExcel.Application excelApp = new Excel.ApplicationClass(); …","date":-62135596800,"description":"","objectID":"2e058a6aec0b7c24566a008ad2815600","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/hide+and+unhide+worksheets+in+a+workbook/","title":"Hide and Unhide Worksheets in a Workbook"},{"content":"Generally, comments are used to add additional information to cells in a worksheet. We use them every now and then and we delete them when we do not need them any longer. Comments are useful if you need to document a particular value or to help you remember what a formula does. When you move the mouse pointer over a cell that has a comment, the comment pops up in a small box.\nIn this article, we compare how to add and remove comments from cells using VSTO and Aspose.Cells for .NET. Aspose.Cells for .NET works with Microsoft Excel files independently of Office Automation and giives you powerful tools for creating and manipulating spreadsheets.\nAdding and Removing Comments on Cells\nTo add comments to cells:\n Open an existing Excel file. Add a comment to a cell. Save the file.  To remove the comments, the process is similar, with the exception that the comment is removed.\nThe code samples below illustrate first how to add a comment and then how to remove a comment with either VSTO or Aspose.Cells for .NET.\nInserting Comments\nThese code snippets show how to add a comment to a cell first with VSTO (C#, VB) and then with Aspose.Cells for .NET (C#, VB).\nInserting a Comment with VSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.Application excelApp = new Excel.ApplicationClass();\n//Specify the template excel file path.\nstring myPath=@\u0026amp;ldquo;d:\\test\\Book1.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Get the A1 cell.\nExcel.Range rng1=excelApp.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, Missing.Value);\n//Add the comment with text.\nrng1.AddComment(\u0026amp;ldquo;This …","date":-62135596800,"description":"","objectID":"41d148ae9d6e5dbc81e39a8874d52db4","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/inserting+and+removing+cell+comments+in+a+worksheet/","title":"Inserting and Removing Cell Comments in a Worksheet"},{"content":"While working with worksheets, you often need to create a title / heading in a single cell that spans the top of your worksheet. You might be creating an invoice, and want a fewer columns for the total or summary values. When you want to make one cell from two or more cells, you merge the cells. We carry out the task using VSTO and Aspose.Cells for .NET independently.\nDescription\nOpen an existing excel file, Merge some cells in the first worksheet in the workbook and save the excel file.\nMerging Cells\nFollowing are the parallel code snippets for VSTO (C#, VB) and Aspose.Cells for .NET (C#, VB).\n1) VSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.Application excelApp = new Excel.ApplicationClass();\n//Specify the template excel file path.\nstring myPath=@\u0026amp;ldquo;d:\\test\\MyBook.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Get the range of cells i.e.., A1:C1.\nExcel.Range rng1 = excelApp.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;C1\u0026amp;rdquo;);\n//Merge the cells.\nrng1.Merge(Missing.Value); //Save the file.\nexcelApp.ActiveWorkbook.Save();\n//Quit the Application.\nexcelApp.Quit();\n\\\n2) Aspose.Cells for .NET\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\nusing Aspose.Cells;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Specify the template excel file path.\nstring myPath=@\u0026amp;ldquo;d:\\test\\MyBook.xls\u0026amp;rdquo;;\n//Open the excel file.\nworkbook.Open(myPath);\n//Get the range of cells i.e.., A1:C1.\nAspose.Cells.Range rng1 = workbook.Worksheets[0].Cells.CreateRange(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;C1\u0026amp;rdquo;);\n//Merge the cells.\nrng1.Merge();\n//Save the file. …","date":-62135596800,"description":"","objectID":"2edb332ee4d749a4144d21f65c856ed2","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/merge+or+unmerge+cells+in+a+worksheet/","title":"Merge or UnMerge Cells in a Worksheet"},{"content":"To prevent someone from accidentally or deliberately changing, moving, or deleting worksheets, you can protect workbook elements with or without a password. To protect a workbook\u0026amp;rsquo;s structure so that worksheets in the workbook can\u0026amp;rsquo;t be moved, deleted, hidden, unhidden, or renamed, and new worksheets can\u0026amp;rsquo;t be inserted, specify the ProtectionType as Structure.\nTo protect Windows so that they are the same size and position each time the workbook is opened, specify the ProtectionType as Windows. In this article, we show how to protect and unprotect workbooks using VSTO and Aspose.Cells for .NET to let you compare the two methods.\nAspose.Cells works independently of Microsoft Office Automation and is developed to be easy to use and produce neat code.\nProtecting a workbook does not stop users from editing cells. To protect the data, you must protect the worksheets.\nProtecting a Workbook\nTo open an existing Microsoft Excel file, protect the workbook with structure and Windows attributes and save the file.\nBelow are parallel code snippets for VSTO (C#, VB) and Aspose.Cells for .NET (C#, VB) that show how to protect a workbook.\nVSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.Application excelApp = new Excel.ApplicationClass();\n//Specify the template excel file path.\nstring myPath = @\u0026amp;ldquo;d:\\test\\MyBook.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Protect the workbook specifying a password with Structure and Windows attributes.\nexcelApp.ActiveWorkbook.Protect(\u0026amp;ldquo;007\u0026amp;rdquo;, true, true);\n//Save the file. …","date":-62135596800,"description":"","objectID":"ed382763dc4abe7dec2a4a36228a2203","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/protecting+and+unprotecting+workbooks/","title":"Protecting and Unprotecting Workbooks"},{"content":"Sometimes, a column header is much wider than the data in the cells below. This can cause unnecessary whitespace on the page. One solution is to rotate the text vertically so that it takes less horizontal space. In Microsoft Excel, rotating text is easy. Luckily, it is possible to rotate text programmatically too, so that developers can rotate labels in the spreadsheets they create within their applications.\nThis article looks at how to rotate text in cells using Aspose.Cells for .NET compared to doing the same thing with VSTO.\nRotating Text in Cells\nTo rotate text in a cell on a worksheet, take the following steps:\n Create a workbook and get a worksheet. Add samples text. Format the text: rotate, add background colour. Save the file.  The code samples that follow show how to perform these steps first in VSTO, using either C# or Visual Basic, and then in Aspose.Cells, again using either C# or Visual Basic.\nThe code examples in this article give the output shown below. A cell with rotated text.\nRotating Text with VSTO\nC#\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\u0026amp;hellip;\u0026amp;hellip;\u0026amp;hellip;//Instantiate the Application object.\nExcel.ApplicationClass ExcelApp = new Excel.ApplicationClass();\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Put some text into cell B2.\nobjSheet.Cells[2, 2] = \u0026amp;ldquo;Aspose Heading\u0026amp;rdquo;;\n//Define a range object(B2).\nExcel.Range _range;\n_range = objSheet.get_Range(\u0026amp;ldquo;B2\u0026amp;rdquo;, \u0026amp;ldquo;B2\u0026amp;rdquo;);\n//Specify the angle of rotation of the text.\n_range.Orientation = 45;\n//Set the background color.\n_range.Interior.Color = System.Drawing.ColorTranslator.ToWin32(Color.FromArgb(0, 51, 105));\n//Set the font color of cell text\n_range.Font.Color = …","date":-62135596800,"description":"","objectID":"b10f3db538255fab1008cab023736bb1","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/rotating+cell+text/","title":"Rotating Cell Text"},{"content":"Background images sit behind the text and lines in a spreadsheet. They are used to give information about a workbook, for example when used as status watermarks, but can also add company branding, or decoration. Microsoft Excel allows users to add background images manually.\nDevelopers can also add background images through their applications, using either Aspose.Cells for .NET or VSTO. This article compares the two approaches.\nSetting a Background Picture on a Worksheet\nTo apply a background image to a spreadsheet:\n Create a workbook and access the sheet you want to apply a background image to. Apply the background image. Save the workbook.  The code samples that follow show how to do this first with VSTO, using either C# or Visual Basic, and then with Aspose.Cells for .NET, again using either C# or Visual Basic.\nThe code examples in this article create a worksheet with a repeating background image, like the one in the screentshot below.\nA background has been set for the worksheet.\nSetting Background Pictures with VSTO\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\n\\\nusing Microsoft.VisualStudio.Tools.Applications.Runtime;\nusing Excel = Microsoft.Office.Interop.Excel;\nusing Office = Microsoft.Office.Core;\nusing System.Reflection;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate the Application object.\nExcel.ApplicationClass ExcelApp = new Excel.ApplicationClass();\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Set a background picture for the sheet.\nobjSheet.SetBackgroundPicture(\u0026amp;ldquo;e:\\test\\school.jpg\u0026amp;rdquo;);\n//Save the excel file.\nobjBook.SaveCopyAs(\u0026amp;ldquo;c:\\BackgroundPicBook.xls\u0026amp;rdquo;);\n//Quit the Application.\nExcelApp.Quit();\n\\\nSetting Background Pictures with Aspose.Cells for .NET\nC#\n\u0026amp;hellip;\u0026amp;hellip;.\nusing Aspose.Cells;\n\u0026amp;hellip;\u0026amp;hellip;.\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Get the first worksheet.\nWorksheet …","date":-62135596800,"description":"","objectID":"5e98727e0fb9e92cadc2e4346592c800","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/set+background+picture+of+a+worksheet/","title":"Set Background Picture of a Worksheet"},{"content":"This technical tip will illustrate how you can use formulas/functions to process data with VSTO and Aspose.Cells for .NET through code.\n***Description ***\n\\\n***Using Formulas/Functions to Process Data ***\n\\\n***1) VSTO ***\nC#\n//Note: To help you better, the code uses full namespacing\nvoid AddingCellFormula()\n{\n//Access vsto application\nMicrosoft.Office.Interop.Excel.Application app = Globals.ThisAddIn.Application;\n//Access workbook\nMicrosoft.Office.Interop.Excel.Workbook workbook = app.ActiveWorkbook;\n//Access worksheet\nMicrosoft.Office.Interop.Excel.Worksheet m_sheet = workbook.Worksheets[1];\n//Access vsto worksheet\nMicrosoft.Office.Tools.Excel.Worksheet worksheet = Globals.Factory.GetVstoObject(m_sheet);\n//Access cells A1, A2, A3 , A4\nMicrosoft.Office.Interop.Excel.Range cellA1 = worksheet.Range[\u0026amp;ldquo;A1\u0026amp;rdquo;];\nMicrosoft.Office.Interop.Excel.Range cellA2 = worksheet.Range[\u0026amp;ldquo;A2\u0026amp;rdquo;];\nMicrosoft.Office.Interop.Excel.Range cellA3 = worksheet.Range[\u0026amp;ldquo;A3\u0026amp;rdquo;];\nMicrosoft.Office.Interop.Excel.Range cellA4 = worksheet.Range[\u0026amp;ldquo;A4\u0026amp;rdquo;];\n//Set integer values in cells A1, A2 and A3\ncellA1.Value = 10;\ncellA2.Value = 20;\ncellA3.Value = 30;\n//Add formula in cell A4\ncellA4.Formula = \u0026amp;ldquo;=Sum(A1:A3)\u0026amp;quot;;\n//Set the font bold in cell A4\ncellA4.Font.Bold = true;\n//Set the background color to Yellow in cell A4\ncellA4.Interior.Color = Excel.XlRgbColor.rgbYellow;\n//Save the workbook\nworkbook.SaveAs(\u0026amp;ldquo;D:\\OutputVsto.xlsx\u0026amp;rdquo;);\n//Quit the application\napp.Quit();\n}\n\\\n***2) Aspose.Cells for .NET ***\nC#\nvoid AddingCellFormula()\n{\n//Create workbook\nWorkbook workbook = new Workbook();\n//Access worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Access cells A1, A2, A3 , A4\nCell cellA1 = worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\nCell cellA2 = worksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;];\nCell cellA3 = worksheet.Cells[\u0026amp;ldquo;A3\u0026amp;rdquo;];\nCell cellA4 = worksheet.Cells[\u0026amp;ldquo;A4\u0026amp;rdquo;];\n//Set integer values in cells A1, A2 and A3\ncellA1.Value = 10;\ncellA2.Value = 20; …","date":-62135596800,"description":"","objectID":"b18efed41ab0539b50900002aee025d3","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/use+formulas+functions+to+process+data/","title":"Use Formulas Functions to Process Data"},{"content":"Wrapping text makes it easier to read: a cell with wrapped text expands to fit the text so that the text isn\u0026amp;rsquo;t displayed over other cells.\nWith Aspose.Cells for .NET, developers can perform most of the tasks in their applications that users can perform with Microsoft Excel, including wrapping text in cells. This article explains how, and compares the task using VSTO and Aspose.Cells. Aspose.Cells is optimized for efficient coding and works without Microsoft Automation.\nWrapping Cell Text\nTo create a worksheet with two cells, one with wrapped text and one without:\n Set up the worksheet:  Create a workbook. Access the first worksheet.   Add text:  Add text to cell A1. Add wrapped text to cell A5.   Save the spreadsheet.  The code samples below show how to perform these steps using VSTO with either C# or Visual Basic. Code samples that show how to do the same thing using Aspose.Cells for .NET, again using either C# or Visual Basic follow immediately after.\nRunning the code results in a spreadsheet with two cells, one that has text that hasn\u0026amp;rsquo;t been wrapped, and one that has:\n   Output wrapping cell text with VSTO Output wrapping cell text with Aspose.Cells for .NET     Wrapping Cell Text Using VSTO     C#\n//Note: To help you better, the code uses full namespacing\nvoid WrappingCellText()\n{\n//Access vsto application\nMicrosoft.Office.Interop.Excel.Application app = Globals.ThisAddIn.Application;\n//Access workbook\nMicrosoft.Office.Interop.Excel.Workbook workbook = app.ActiveWorkbook;\n//Access worksheet\nMicrosoft.Office.Interop.Excel.Worksheet m_sheet = workbook.Worksheets[1];\n//Access vsto worksheet\nMicrosoft.Office.Tools.Excel.Worksheet sheet = Globals.Factory.GetVstoObject(m_sheet);\n//Place some text in cell A1 without wrapping\nMicrosoft.Office.Interop.Excel.Range cellA1 = sheet.Cells.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;);\ncellA1.Value = \u0026amp;ldquo;Sample Text Unwrapped\u0026amp;rdquo;;\n//Place some text in cell A5 with wrapping\nMicrosoft.Office.Interop.Excel.Range cellA5 = …","date":-62135596800,"description":"","objectID":"87a2f7ffa5165b1672585f80b178b865","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/wrapping+cell+text/","title":"Wrapping Cell Text"},{"content":"Articles in this section\nAttachments: Add Borders to Cells in a Worksheet-001.png (image/png) Add Borders to Cells in a Worksheet-002.png (image/png) Add Hyperlinks to Cells-001.png (image/png) Add Hyperlinks to Cells-002.png (image/png) Set Background Picture of a Worksheet-001.png (image/png) Rotating Cell Text-001.png (image/png) Rotating Cell Text-002.png (image/png) Create a Pie Chart-001.png (image/png) Create a Pie Chart-002.png (image/png) Auto Filter Data-001.png (image/png) Auto Filter Data-002.png (image/png) Wrapping Cell Text-001.png (image/png) Wrapping Cell Text-002.png (image/png) Wrapping Cell Text-003.png (image/png) Wrapping Cell Text-004.png (image/png) Use Formulas Functions to Process Data-001.png (image/png) Use Formulas Functions to Process Data-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"acd1598e08eef7785151c695bf3f2848","permalink":"https://roywangt.github.io/cellsnet/developerguide/knowledgebase/migrationfrommicrosoftofficeautomationtoaspose/","title":"Migration from Microsoft Office Automation to Aspose"},{"content":"   Contents Summary\n1 Adjust workbook compression level\n |     Adjust workbook compression level     Developers can adjust the compression level of the workbook when working with larger workbooks. Developers may prioritize smaller file sizes over processing time or vice versa. Aspose.Cells provides OoxmlCompressionType enumeration which you can use to set the compression level of the workbook. The OoxmlCompressionType enumeration provides the following members.\n Level1: The fastest but least effective compression. Level2: A little slower, but better, than level 1. Level3: A little slower, but better, than level 2. Level4: A little slower, but better, than level 3. Level5: A little slower than level 4, but with better compression. Level6: A good balance of speed and compression efficiency. Level7: Pretty good compression! Level8: Better compression than Level7! Level9: The \u0026amp;ldquo;best\u0026amp;rdquo; compression, where best means greatest reduction in the size of the input data stream. This is also the slowest compression.  \\\nThe following code snippet demonstrates the use of OoxmlCompressionType enumeration and compares the conversion time for Level1, Level6, and Level9. You may also compare the sizes of the generated files.\n\\\n","date":-62135596800,"description":"","objectID":"2b8c776892f912e938c978979b66addb","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/adjust+workbook+compression+level/","title":"Adjust workbook compression level"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 AutoFit Columns and Rows while loading HTML in Workbook\n3 Sample Code\n |     Possible Usage Scenarios     You can autofit columns and rows while loading your HTML file inside the Workbook object. Please set the HtmlLoadOptions.AutoFitColsAndRows property to **true **for this purpose.\nAutoFit Columns and Rows while loading HTML in Workbook\nThe following sample code first loads the sample HTML into Workbook without any load options and saves it in XLSX format. It then again loads the sample HTML into Workbook but this time, it loads the HTML after setting the HtmlLoadOptions.AutoFitColsAndRows property to **true **and saves it in XLSX format. Please download both the output excel files i.e.Output Excel File Without AutoFitColsAndRows and Output Excel File With AutoFitColsAndRows. The following screenshot shows the effect of HtmlLoadOptions.AutoFitColsAndRows property on both output excel files.\nSample Code\nAttachments: Effect-of-HTMLLoadOptions.AutoFitColsAndRows.png (image/png) outputWithout_AutoFitColsAndRows.xlsx (application/xlsx) outputWith_AutoFitColsAndRows.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"48bdedc3a78770a05688a0a9debcf17c","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/autofit+columns+and+rows+while+loading+html+in+workbook/","title":"AutoFit Columns and Rows while loading HTML in Workbook"},{"content":"   Contents Summary\n1 Convert CSV to JSON 1.1 Sample Code\n1.2 Console Output\n |     Convert CSV to JSON     Aspose.Cells supports converting CSV to JSON. For this, the API provides ExportRangeToJsonOptions and JsonUtility classes. The ExportRangeToJsonOptions class provides the options for exporting range to JSON. The ExportRangeToJsonOptions class has the following properties.\n ExportAsString: This exports the string value of the cells to JSON. HasHeaderRow: This indicates whether the range contains a header row. Indent: Indicates the indent.  The JsonUtility class exports the JSON using the export options set with the ExportRangeToJsonOptions class.\nThe following code sample demonstrates the use of ExportRangeToJsonOptions and JsonUtility classes to load the source CSV file and prints the JSON output in the console.\nSample Code\nConsole Output\n[ { \u0026amp;ldquo;id\u0026amp;rdquo;: 1, \u0026amp;ldquo;language\u0026amp;rdquo;: \u0026amp;ldquo;Java\u0026amp;rdquo;, \u0026amp;ldquo;edition\u0026amp;rdquo;: \u0026amp;ldquo;third\u0026amp;rdquo;, \u0026amp;ldquo;author\u0026amp;rdquo;: \u0026amp;ldquo;Herbert Schildt\u0026amp;rdquo;, \u0026amp;ldquo;streetAddress\u0026amp;rdquo;: 126, \u0026amp;ldquo;city\u0026amp;rdquo;: \u0026amp;ldquo;San Jone\u0026amp;rdquo;, \u0026amp;ldquo;state\u0026amp;rdquo;: \u0026amp;ldquo;CA\u0026amp;rdquo;, \u0026amp;ldquo;postalCode\u0026amp;rdquo;: 394221 }, { \u0026amp;ldquo;id\u0026amp;rdquo;: 2, \u0026amp;ldquo;language\u0026amp;rdquo;: \u0026amp;ldquo;C++\u0026amp;rdquo;, \u0026amp;ldquo;edition\u0026amp;rdquo;: \u0026amp;ldquo;second\u0026amp;rdquo;, \u0026amp;ldquo;author\u0026amp;rdquo;: \u0026amp;ldquo;EAAAA\u0026amp;rdquo;, \u0026amp;ldquo;streetAddress\u0026amp;rdquo;: 126, \u0026amp;ldquo;city\u0026amp;rdquo;: \u0026amp;ldquo;San Jone\u0026amp;rdquo;, \u0026amp;ldquo;state\u0026amp;rdquo;: \u0026amp;ldquo;CA\u0026amp;rdquo;, \u0026amp;ldquo;postalCode\u0026amp;rdquo;: 394221 }, { \u0026amp;ldquo;id\u0026amp;rdquo;: 3, \u0026amp;ldquo;language\u0026amp;rdquo;: \u0026amp;ldquo;.Net\u0026amp;rdquo;, \u0026amp;ldquo;edition\u0026amp;rdquo;: \u0026amp;ldquo;second\u0026amp;rdquo;, \u0026amp;ldquo;author\u0026amp;rdquo;: \u0026amp;ldquo;E.Balagurusamy\u0026amp;rdquo;, \u0026amp;ldquo;streetAddress\u0026amp;rdquo;: 126, \u0026amp;ldquo;city\u0026amp;rdquo;: \u0026amp;ldquo;San Jone\u0026amp;rdquo;, \u0026amp;ldquo;state\u0026amp;rdquo;: \u0026amp;ldquo;CA\u0026amp;rdquo;, \u0026amp;ldquo;postalCode\u0026amp;rdquo;: 394221 } ]\nAttachments: SampleJson_out.csv (application/vnd.ms-excel) SampleJson.json (application/json) DocumentConversionProgressForTiff_out.tiff (image/tiff) sampleUseWorkbookRenderForImageConversion.xlsx …","date":-62135596800,"description":"","objectID":"37a20cdc63fdd6fdc035121fe54e2d8d","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/convert+csv+to+json/","title":"Convert CSV to JSON"},{"content":"Aspose.Cells supports conversion of Excel Workbook into PDF. In this example, we will see the complete conversion of an Excel Workbook into PDF.\n   Contents Summary\n1 Converting Excel Workbook to PDF 1.1 Direct Conversion\n1.2 Advanced Conversion 1.2.1 Saving Workbook to PDF/A Complied Files\n1.2.2 Set the PDF Creation Time\n1.2.3 Set ContentCopyForAccessibility option\n1.2.4 Export Custom properties to PDF\n1.3 Conversion Attributes\n |     Converting Excel Workbook to PDF     PDF files are widely used to exchange documents between organizations, government sectors, and individuals. It is a standard document format and software developers are often asked to find a way to convert Microsoft Excel files into PDF documents.\nAspose.Cells supports converting Excel files to PDF and maintains high visual fidelity in the conversion.\nAspose.Cells for .NET directly writes the information about API and Version Number in output documents. For example, upon rendering Document to PDF, Aspose.Cells for .NET populates Application field with value \u0026amp;lsquo;Aspose.Cells\u0026amp;rsquo; and PDF Producer field with value, e.g \u0026amp;lsquo;Aspose.Cells v17.9\u0026amp;rsquo;.\nPlease note that you cannot instruct Aspose.Cells for .NET to change or remove this information from output Documents.\nDirect Conversion\nAspose.Cells for .NET supports conversion from spreadsheets to PDF independently of other software. Simply save an Excel file to PDF using the Workbook class\u0026amp;rsquo; Save method. The Save method provides the SaveFormat.Pdf enumeration member that converts the native Excel files to PDF format.\nFollow the below steps to directly convert the Excel spreadsheets to PDF format:\n Instantiate an object of the Workbook class by calling its empty constructor. You may open/load an existing template file or skip this step if you are creating the workbook from scratch. Do any work (input data, apply formatting, set formulas, insert pictures or other drawing objects, and so on) on the spreadsheet using Aspose.Cells\u0026amp;rsquo; APIs. …","date":-62135596800,"description":"","objectID":"d95897a3fe9cd7a81f7faf7a0111547a","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/convert+excel+workbook+to+pdf/","title":"Convert Excel Workbook to PDF"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Convert Excel file to PDF format compatible with PDFA-1a\n3 Screenshot\n4 Sample Code\n |     Possible Usage Scenarios     PDF/A is a unique flavor of PDF designed for the long-term preservation of documents. PDF/A is an ISO-standardized version of the Portable Document Format (PDF) which is an archival format of PDF that embeds all fonts used in the document within the PDF file. PDF/A differs from PDF by prohibiting features, such as font linking (as opposed to font embedding) and encryption. Aspose.Cells enables you to save the Excel files to PDF/A compliant PDF files (both PdfA1a and PdfA1b are supported). This topic describes how to save the Excel workbook to PDF/A compliant (PdfA1a) PDF file.\nConvert Excel file to PDF format compatible with PDFA-1a\nDevelopers may use the PdfSaveOptions class to set different attributes for the conversion. Setting different properties of the PdfSaveOptions class gives you control over the print, font, security and compression settings for the output PDF. The most important property is PdfSaveOptions.Compliance that enables you to save the Excel files to PDF/A compliant PDF files.\nThe following sample code explains how to convert Excel file to PDF format compatible with PDFA-1a. Please see its output PDF as well as the screenshot for a reference.\nScreenshot\nSample Code\nAttachments: outputCompliancePdfA1a.pdf (application/pdf) Convert-Excel-file-to-PDFA-1a.png (image/png)\n","date":-62135596800,"description":"","objectID":"5e819c5830c6321ce4be858d82b90f77","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/convert+excel+file+to+pdf+format+compatible+with+pdfa-1a/","title":"Convert Excel file to PDF format compatible with PDFA-1a"},{"content":"   Contents Summary\n1 Convert Excel to HTML with tooltip\n |     Convert Excel to HTML with tooltip     There might be cases where the text is cut off in the generated HTML and you want to display the complete text as a tooltip on the hover event. Aspose.Cells supports this by providing HtmlSaveOptions.AddTooltipText property. Setting the HtmlSaveOptions.AddTooltipText property to true will add the complete text as a tooltip in the generated HTML.\nThe following image shows the tooltip in the generated HTML file.\nThe following code sample loads the source excel file and generates the output HTML file with the tooltip.\nSample Code\nAttachments: DocumentConversionProgressForTiff_out.tiff (image/tiff) sampleUseWorkbookRenderForImageConversion.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PagesBook1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AddTooltipToHtmlSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AddTooltipToHtmlSample_out.zip (application/zip) AddTooltipToHtml.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"9df4ad1e617b9aedb60ebf125384a49a","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/convert+excel+to+html+with+tooltip/","title":"Convert Excel to HTML with tooltip"},{"content":"   Contents Summary\n1 Convert JSON to CSV\n |     Convert JSON to CSV     Aspose.Cells supports converting simple as well as nested JSON to CSV. For this, the API provides JsonLayoutOptions and JsonUtility classes. The JsonLayoutOptions class provides the options for JSON layout like IgnoreArrayTitle(ignores the title if the array is a property of an object) or ArrayAsTable(processes the array as a table). The JsonUtility class processes the JSON using the layout options set with the JsonLayoutOptions class.\nThe following code sample demonstrates the use of JsonLayoutOptions and JsonUtility classes to load the source JSON file and generates the output CSV file.\nSample Code\nAttachments: AddTooltipToHtml.jpg (image/jpeg) AddTooltipToHtmlSample_out.zip (application/zip) AddTooltipToHtmlSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PagesBook1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUseWorkbookRenderForImageConversion.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) DocumentConversionProgressForTiff_out.tiff (image/tiff) SampleJson.json (application/json) SampleJson_out.csv (application/vnd.ms-excel)\n","date":-62135596800,"description":"","objectID":"5ec810dc104197391e37fdb66c4e7639","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/convert+json+to+csv/","title":"Convert JSON to CSV"},{"content":"Aspose.Cells supports conversion between many formats. Technically, conversion means to load a workbook in one file format and save it into another.\n   Contents Summary\n1 Converting Excel Workbook to XPS\n2 Converting Excel Workbook to MHTML Files\n3 Converting Excel Workbook to HTML\n4 Setting the Image Preferences for HTML\n5 Convert Excel Workbook to Markdown\n |     Converting Excel Workbook to XPS     The XPS document format consists of structured XML markup that defines the layout of a document and the visual appearance of each page, along with rendering rules for distributing, archiving, rendering, processing and printing documents.\nThe markup language for XPS is a subset of XAML which allows it to incorporate vector graphics elements in documents, using XAML to mark up the Windows Presentation Foundation (WPF) primitives. The elements used are described in terms of paths and other geometrical primitives.\nAn XPS file is, in fact, a Unicoded ZIP archive using the Open Packaging Conventions, containing the files which make up the document. These include an XML markup file for each page, text, embedded fonts, raster images, 2D vector graphics, as well as the digital rights management information. The contents of an XPS file can be examined simply by opening it in an application which supports ZIP files.\nFrom Aspose.Cells 6.0.0, Microsoft Excel to XPS conversion is supported.\n\\\nConverting Excel Workbook to MHTML Files\nMHTML combines normal HTML with external resources (that is, content that is usually linked in, like images, animations, audio and so on) into one file. They are used for emails with the .mht file extension.\nAspose.Cells supports reading and writing MHTML files.\nThe code example below shows how to save a workbook as an MHTML file.\n\\\nConverting Excel Workbook to HTML\nThe Aspose.Cells API provides support for exporting spreadsheets to HTML format. For this purpose, Aspose.Cells uses the HtmlSaveOptions class to provide the flexibility to control several …","date":-62135596800,"description":"","objectID":"b3422e6a83f8905054273ddfd5e414af","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/convert+workbook+to+different+formats/","title":"Convert Workbook to Different Formats"},{"content":"Aspose.Cells allows you to export a worksheet from the workbook and convert it into different formats. This article explains how to convert a worksheet to different formats.\n   Contents Summary\n1 Converting Worksheet to Image\n2 Converting Worksheet to SVG\n |     Converting Worksheet to Image     Worksheets contain data that you want to analyze. For example, a worksheet can contain parameters, totals, percentages, exceptions, and calculations.\nAs a developer, you might need to present worksheets as images. For example, you might need to use an image of a worksheet in an application or web page. You might want to insert an image into a Microsoft Word document, a PDF file, a PowerPoint presentation or some other document type. Simply put, you want a worksheet rendered as an image so that you can use it somewhere else.\nAspose.Cells supports converting Excel worksheets to images. To use this feature, you need to import the Aspose.Cells.Rendering namespace to your program or project. It has several valuable classes for rendering and printing, for example SheetRender, ImageOrPrintOptions, WorkbookRender , and others.\nThe SheetRender class represents a worksheet to render as images. It has an overloaded method, ToImage, that can convert a worksheet to image file(s) with different attributes or options. It returns a System.Drawing.Bitmap object and you can save an image file to disk or stream. Several image formats are supported, for example BMP, PNG, GIF, JPG, JPEG, TIFF, EMF.\nThe following code snippet shows how to convert a worksheet in an Excel file to an image file.\n\\\nAt present, the API for converting worksheets to images does not support 3D bubble charts.\nConverting Worksheet to SVG\nSVG stands for Scalable Vector Graphics. SVG is a specification based on XML standards for two-dimensional vector graphics. It is an open standard that has been under development by the World Wide Web Consortium (W3C) since 1999.\nAspose.Cells for .NET has been able to convert worksheets to …","date":-62135596800,"description":"","objectID":"72ce77a960b6d8d4d0661b331a63569e","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/converting+worksheet+to+different+image+formats/","title":"Converting Worksheet to Different Image Formats"},{"content":"With Aspose.Cells it is possible to open files, for example, to retrieve data, or to use a designer template to speed up the development process.\n   Contents Summary\n1 Opening a File via a Path\n2 Opening a File using a Stream\n3 Opening a File with Data only\n4 Loading Visible Sheets only\n |     Opening a File via a Path     Developers can open a Microsoft Excel file using its file path on the local computer by specifying it in the Workbook class constructor. Simply pass the path in the constructor as a string. Aspose.Cells will automatically detect the file format type.\n\\\nOpening a File using a Stream\nIt is also possible to open an Excel file as a stream. To do so, use an overloaded version of the constructor that takes the *Stream *object that contains the file.\n\\\nOpening a File with Data only\nTo open a file with data only, use the LoadOptions and LoadFilter classes to set the related attribute and options of the classes for the template file to be loaded.\n\\\nLoading Visible Sheets only\nWhile loading a Workbook sometimes you may only need data in visible worksheets in a workbook. Aspose.Cells allows you to skip data in invisible worksheets while loading a workbook. To do this, create a custom function that inherits the LoadFilter class and pass its instance to LoadOptions.LoadFilter property.\n\\\nHere is the implementation of the *CustomnLoad *class referenced in the above snippet.\nAn exception will be thrown if you try to open non-native Excel files or other file formats (for example PPT/PPTX, DOC/DOCX, etc.) by Aspose.Cells.\nThere are fair chances that the Workbook constructor may throw System.OutOfMemoryException while loading large spreadsheets. This exception suggests that the available memory is insufficient to completely load the spreadsheet into the memory therefore the spreadsheet has to be loaded while enabling the Memory Preferences.\n","date":-62135596800,"description":"","objectID":"3fdc301fb4f47c5f704e1485accd2e93","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/different+ways+to+open+files/","title":"Different Ways to Open Files"},{"content":"Aspose.Cells makes it possible to create and save files. This article explains the various ways in which files can be saved.\n   Contents Summary\n1 Different Ways to Save Files\n2 Saving File to Some Location\n3 Saving Workbook to Text or CSV Format\n4 Saving Text Files with Custom Separator\n5 Saving File to a Stream\n |     Different Ways to Save Files     Aspose.Cells provides the Workbook which represents a Microsoft Excel file and provides the properties and methods necessary to work with Excel files. The Workbook class provides the Save method used to save Excel files. The Save method has many overloads that are used to save files in different ways.\nThe file format that the file is saved to is decided by the SaveFormat enumeration\n   File Format Types Description     CSV Represents a CSV file   Excel97To2003 Represents an Excel 97 - 2003 file   Xlsx Represents an Excel 2007 XLSX file   Xlsm Represents an Excel 2007 XLSM file   Xltx Represents an Excel 2007 template XLTX file   Xltm Represents an Excel 2007 macro-enabled XLTM file   Xlsb Represents an Excel 2007 binary XLSB file   SpreadsheetML Represents a Spreadsheet XML file   TSV Represents a Tab-separated values file   TabDelimited Represents a Tab Delimited text file   ODS Represents an ODS file   Html Represents HTML file(s)   MHtml Represents an MHTML file(s)   Pdf Represents a PDF file   XPS Represents an XPS document   TIFF Represents Tagged Image File Format (TIFF)   Saving File to Some Location     To save files to a storage location, specify the file name (complete with storage path) and the desired file format (from the SaveFormat enumeration) when calling the Workbook object\u0026amp;rsquo;s Save method.\n\\\nSaving Workbook to Text or CSV Format\nSometimes, you want to convert or save a workbook with multiple worksheets into text format. For text formats (for example TXT, TabDelim, CSV, etc.), by default both Microsoft Excel and Aspose.Cells save the contents of the active worksheet only.\nThe following code …","date":-62135596800,"description":"","objectID":"90265caf4c50b46ed27c47f8b8c5cf6e","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/different+ways+to+save+files/","title":"Different Ways to Save Files"},{"content":"Microsoft Excel (97 - 2007) enables you to encrypt and password protect your spreadsheets. It uses algorithms provided by a cryptographic service provider, or CSP, a set of cryptographic algorithms with different properties. The default CSP is \u0026amp;lsquo;Office 97/2000 Compatible\u0026amp;rsquo; or \u0026amp;lsquo;Weak Encryption (XOR)\u0026#39;. It\u0026amp;rsquo;s important to choose the proper encryption key length. Some CSPs don\u0026amp;rsquo;t support more than 40 or 56 bits. That\u0026amp;rsquo;s considered to be weak encryption. For strong encryption, a minimum key length of 128 bits is required. Microsoft Windows contains CSPs that offer strong encryption types as well, for example the \u0026amp;lsquo;Microsoft Strong Cryptographic Provider\u0026amp;rsquo;. To give you an idea, 128 bits encryption is what banks use to encrypt the connection with their Internet Banking systems.\nAspose.Cells allows you to encrypt and password protect Microsoft Excel files with your desired encryption type.\n   Contents Summary\n1 Using Microsoft Excel\n2 Encryption with Aspose.Cells 2.1 Specifying Password to modify Option\n3 Encryption/Decryption of ODS file with Aspose.Cells\n ||      Using Microsoft Excel      To set file encryption settings in Microsoft Excel (here Microsoft Excel 2003):\n From the Tools menu, select Options. A dialog will appear. Select the Security tab. Input a password and click Advanced Choose the encryption type and confirm the password.  Encryption with Aspose.Cells\nThe following example shows how to encrypt and password protect an excel file using the Aspose.Cells API.\n\\\nSpecifying Password to modify Option\nThe following example shows how to set the Password to modify Microsoft Excel option for an existing file using the Aspose.Cells API.\n\\\nEncryption/Decryption of ODS file with Aspose.Cells\nAspose.Cells allows to encrypt and decrypt ODS file. Decrypted ODS file can be opened both in Excel and OpenOffice, however encrypted ODS file can only be opened by OpenOffice after providing the password. Excel cannot open the encrypted ODS …","date":-62135596800,"description":"","objectID":"1166bce8ba9c135d85741e17d71d4a8c","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/encrypting+excel+files/","title":"Encrypting Excel Files"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get Warnings while Loading Excel File\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Sometimes the user tries to load the workbook which is somewhat corrupt but loadable. In such case, Aspose.Cells throws warnings while loading the workbook. You can catch these warnings by implementing the IWarningCallback interface and setting LoadOptions.WarningCallback property.\nGet Warnings while Loading Excel File\nThe following sample code explains how to get warnings while loading excel file. The code loads the sample excel file which throws DuplicateDefinedName warning on loading. This warning is then caught by IWarningCallback.Warning() method that prints the warning messages on the console. The code then saves the workbook as output excel file. If you open the sample excel file in Microsoft Excel, it will also display you this warning as shown in this screenshot. Please also check the console output of the code given below for more understanding.\nSample Code\nConsole Output\nHere is the console output of the above code when executed with the provided sample excel file.\nDuplicate Defined Name Warning: Name:PRINT_AREA;ReferTo:Introduction!$D$16:$D$17\nDuplicate Defined Name Warning: Name:PRINT_AREA;ReferTo:Panel!$B$228\nDuplicate Defined Name Warning: Name:PRINT_AREA;ReferTo:\u0026amp;lsquo;Queries \u0026amp;lsquo;!$D$14:$D$16\nAttachments: sampleDuplicateDefinedName.xlsx (application/xlsx) Get-Warnings-while-Loading-Excel-File.png (image/png) outputDuplicateDefinedName.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"424f9e03cdd8abd0ad38cc82ba6780ad","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/get+warnings+while+loading+excel+file/","title":"Get Warnings while Loading Excel File"},{"content":"   Contents Summary\n1 Keep Separators for Blank Rows while exporting spreadsheets to CSV format\n2 Sample Code\n |     Keep Separators for Blank Rows while exporting spreadsheets to CSV format     Aspose.Cells provides the ability to keep line separators while converting spreadsheets to CSV format. For this, You may use the KeepSeparatorsForBlankRow property of TxtSaveOptions class. KeepSeparatorsForBlankRow is a boolean property. To keep the separators for blank lines while converting the Excel File to CSV, set the KeepSeparatorsForBlankRow property to true.\nThe following sample code loads the source Excel file. It sets TxtSaveOptions.KeepSeparatorsForBlankRow property to **true **and saves it as output.csv. The screenshot shows the comparison between the source Excel file, the default output generated while converting the spreadsheet to CSV and the output generated by setting KeepSeparatorsForBlankRow to true.\n\\\nSample Code\nAttachments: Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.csv (application/vnd.ms-excel) KeepSeparatorsForBlankRowComparison.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"0f4b2cfd916c10aef7d83fe7a5976d45","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/keep+separators+for+blank+rows+while+exporting+spreadsheets+to+csv+format/","title":"Keep Separators for Blank Rows while exporting spreadsheets to CSV format"},{"content":"Aspose.Cells can open a range of different Microsoft Excel Versions Files, such as Microsoft Excel 95/97 - 2003, SpreadsheetML, Opening Microsoft Excel 2007/2010 XLSX or Encrypted Excel Files.\n   Contents Summary\n1 Opening Files of Different Microsoft Excel Versions 1.1 Opening Microsoft Excel 95/5.0 Files\n1.2 Opening Microsoft Excel 97 - 2003 Files\n1.3 Opening Microsoft Excel 2007/2010 XLSX Files\n1.4 Opening Encrypted Excel Files\n1.5 Unsupported Excel formats\n |     Opening Files of Different Microsoft Excel Versions     An application often has to be able to open Microsoft Excel files created in different versions, for example, Microsoft Excel 95,97, or Microsoft Excel 2007/2010. You might need to load a file in any one of several formats, including XLS, XLSX, XLSM, XLSB, SpreadsheetML, TabDelimited or TSV, CSV, ODS and so on. Use the constructor, or specify the Workbook class\u0026amp;rsquo; FileFormat type attribute that specifies the format using the FileFormatType enumeration.\nThe FileFormatType enumeration contains many pre-defined file formats some of which are given below.\n   File Format Types Description     CSV Represents a CSV file   Excel97To2003 Represents an Excel 97 - 2003 file   Xlsx Represents an Excel 2007/2010/2013 XLSX file   Xlsm Represents an Excel 2007/2010/2013 XLSM file   Xltx Represents an Excel 2007/2010/2013 template XLTX file   Xltm Represents an Excel 2007/2010/2013 macro-enabled XLTM file   Xlsb Represents an Excel 2007/2010/2013 binary XLSB file   Excel2003XML Represents a SpreadsheetML file   TSV Represents a Tab-separated values file   TabDelimited Represents a Tab Delimited text file   ODS Represents an ODS file   HTML Represents an HTML file   MHTML Represents an MHTML file   Opening Microsoft Excel 95/5.0 Files     To open a Microsoft Excel 95/5.0 file, use LoadOptions and set the related attribute for the LoadOptions class for the template file to be loaded. A sample file for testing this feature can be downloaded from the following …","date":-62135596800,"description":"","objectID":"4d1a2c705997968055f59c8e166c4a0b","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/opening+different+microsoft+excel+versions+files/","title":"Opening Different Microsoft Excel Versions Files"},{"content":"Using Aspose.Cells you can open files with different formats. Aspose.Cells can open a range of file formats such as Microsoft Excel spreadsheets (XLS, XLSX, XLSM, XLSB), SpreadsheetML, Comma-separated values (CSV), Tab Delimited or Tab-separated values (TSV) files etc.\n   Contents Summary\n1 Opening Files with Different Formats 1.1 Opening SpreadsheetML Files\n1.2 Opening HTML Files\n1.3 Opening CSV Files 1.3.1 Opening CSV files and replacing invalid characters\n1.3.2 Using preferred parser\n1.4 Opening Text Files with Custom Separator\n1.5 Opening Tab Delimited Files\n1.6 Opening Tab-Separated Values (TSV) Files\n1.7 Opening SXC Files\n1.8 Opening FODS Files\n |     Opening Files with Different Formats     Aspose.Cells allows developers to open spreadsheet files with different formats such as SpreadsheetML, Comma-separated values (CSV), Tab Delimited or Tab-separated values (TSV), ODS files. To open such files, developers can use the same methodology as they use for opening files of different Microsoft Excel versions.\nOpening SpreadsheetML Files\nSpreadsheetML files are XML representations of spreadsheets including all information about it, such as formatting, formulae etc. Since Microsoft Excel XP, an XML export option is added to Microsoft Excel that exports your spreadsheets to SpreadsheetML files.\n\\\nOpening HTML Files\nAspose.Cells allows you to open HTML file into Workbook object. The HTML file should Microsoft Excel oriented i.e MS-Excel should be able to open it.\n\\\nOpening CSV Files\nComma Separated Values (CSV) files contain records where the values are separated by commas. Data is stored as a table where each column is separated by the comma character and quoted by the double quote character. If a field value contains a double quote character it is escaped with a pair of double quote characters. You can also use Microsoft Excel to export spreadsheet data to CSV.\n\\\nOpening CSV files and replacing invalid characters\nIn Excel, when CSV file with special characters is …","date":-62135596800,"description":"","objectID":"490286bd4a82c0e7c0cee4cdbbf1d51f","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/opening+files+with+different+formats/","title":"Opening Files with Different Formats"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read Numbers Spreadsheet Developed by Apple Inc. using Aspose.Cells\n3 Sample Code\n |     Possible Usage Scenarios     Numbers is a spreadsheet application developed by Apple Inc. Aspose.Cells can read Numbers spreadsheet but it does not support writing to it. It can read Numbers spreadsheet\u0026amp;rsquo;s Data, Style and Formulas.\nRead Numbers Spreadsheet Developed by Apple Inc. using Aspose.Cells\nThe following sample code loads the Sample Numbers Spreadsheet and converts it to Output PDF Format. You will have to use LoadOptions class and specify LoadFormat.Numbers as a parameter in its constructor to load it successfully. Please download both of them from the given links. You can try the code with any Numbers spreadsheet. Please also read the comments of the code for more help.\nSample Code\nAttachments: sampleNumbersByAppleInc.numbers (application/octet-stream) outputNumbersByAppleInc.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"5647876431186deeb379ba4f0f4ac725","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/read+numbers+spreadsheet+developed+by+apple+inc.+using+aspose.cells/","title":"Read Numbers Spreadsheet Developed by Apple Inc. using Aspose.Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Save Workbook to Strict Open XML Spreadsheet Format\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to save the workbook in Strict Open XML Spreadsheet format. For that purpose, it provides the Workbook.Settings.Compliance property. If you set its value as OoxmlCompliance.Iso29500_2008_Strict, then the output Excel file will be saved in Strict Open XML Spreadsheet format.\nSave Workbook to Strict Open XML Spreadsheet Format\nThe following sample code creates a workbook and sets the value of the Workbook.Settings.Compliance property as OoxmlCompliance.Iso29500_2008_Strict and saves it as output Excel file. If you open the output Excel file in Microsoft Excel and open the Save As\u0026amp;hellip; dialog box, you will see its format as Strict Open XML Spreadsheet as shown in this screenshot.\nSample Code\nAttachments: outputSaveWorkbookToStrictOpenXMLSpreadsheetFormat.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Save-Workbook-to-Strict-Open-XML-Spreadsheet-Format.png (image/png)\n","date":-62135596800,"description":"","objectID":"02293aac8240c50efd499ec4a67da37b","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/save+workbook+to+strict+open+xml+spreadsheet+format/","title":"Save Workbook to Strict Open XML Spreadsheet Format"},{"content":"Aspose.Cells makes it possible to manipulate files. This article explains the various ways in which files can be saved to a response object.\n   Contents Summary\n1 Saving File to Response Object 1.1 XLS Files\n1.2 XLSX Files\n1.3 PDF Files\n |     Saving File to Response Object     It is also possible to generate a file dynamically and send it directly to a client browser. In order to do so, use a special overloaded version of the Save method that accepts the following parameters:\n ASP.NET HttpResponse object. File name. ContentDisposition, the content-disposition type of the output file. SaveOptions, the file format type  The ContentDisposition enumeration determines whether the file being sent to the browser provides the option to open by itself directly in the browser or in an application associated with .xls/.xlsx or another extension.\nThe enumeration contains the following pre-defined save types:\n   Type Description     Attachment Sends the spreadsheet to the browser and opens in an application as an attachment associated with .xls/.xlsx or other extensions   Inline Sends the document to the browser and presents an option to save the spreadsheet to disk or open inside the browser   XLS Files     \\\nXLSX Files\n\\\nPDF Files\n\\\n","date":-62135596800,"description":"","objectID":"ee75029b14088f448e0b723ee4bcefb7","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/saving+file+to+response+object/","title":"Saving File to Response Object"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Track Conversion Progress of Excel to TIFF\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Sometimes converting large excel files can take some time. During this time, you might want to show the document conversion progress instead of just a loading screen to enhance the usability of your application. Aspose.Cells supports tracking document conversion process by providing the IPageSavingCallback interface. The IPageSavingCallback interface provides PageStartSaving and PageEndSaving methods that you can implement in your custom class. You may also control which pages are rendered as demonstrated in the TestPageSavingCallback custom class.\nTrack Conversion Progress of Excel to TIFF\nThe following code sample loads the source excel file and prints its conversion progress in the console by using the TestPageSavingCallback custom class that implements the IPageSavingCallback interface. The output file generated is attached for your reference.\nOutput File\nSample Code\nThe following is the code for the *TestTiffPageSavingCallback *custom class.\nConsole Output\nStart saving page index 0 of pages 10 End saving page index 0 of pages 10 Start saving page index 1 of pages 10 End saving page index 1 of pages 10 Start saving page index 2 of pages 10 End saving page index 2 of pages 10 Start saving page index 3 of pages 10 End saving page index 3 of pages 10 Start saving page index 4 of pages 10 End saving page index 4 of pages 10 Start saving page index 5 of pages 10 End saving page index 5 of pages 10 Start saving page index 6 of pages 10 End saving page index 6 of pages 10 Start saving page index 7 of pages 10 End saving page index 7 of pages 10 Start saving page index 8 of pages 10 End saving page index 8 of pages 10\nAttachments: PagesBook1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUseWorkbookRenderForImageConversion.xlsx …","date":-62135596800,"description":"","objectID":"050390f9dba6005d157f74abeced733f","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/track+conversion+progress+of+excel+to+tiff/","title":"Track Conversion Progress of Excel to TIFF"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Track Document Conversion Progress\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Sometimes converting large excel files can take some time. During this time, you might want to show the document conversion progress instead of just a loading screen to enhance the usability of your application. Aspose.Cells supports tracking document conversion process by providing the IPageSavingCallback interface. The IPageSavingCallback interface provides PageStartSaving and PageEndSaving methods that you can implement in your custom class. You may also control which pages are rendered as demonstrated in the TestPageSavingCallback custom class.\nTrack Document Conversion Progress\nThe following code sample loads the source excel file and prints its conversion progress in the console by using the TestPageSavingCallback custom class that implements the IPageSavingCallback interface.\nSample Code\nThe following is the code for the TestPageSavingCallback custom class.\nConsole Output\nStart saving page index 0 of pages 11 End saving page index 0 of pages 11 Start saving page index 1 of pages 11 End saving page index 1 of pages 11 Start saving page index 2 of pages 11 End saving page index 2 of pages 11 Start saving page index 3 of pages 11 End saving page index 3 of pages 11 Start saving page index 4 of pages 11 End saving page index 4 of pages 11 Start saving page index 5 of pages 11 End saving page index 5 of pages 11 Start saving page index 6 of pages 11 End saving page index 6 of pages 11 Start saving page index 7 of pages 11 End saving page index 7 of pages 11 Start saving page index 8 of pages 11 End saving page index 8 of pages 11\nAttachments: PagesBook1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"fd5c8e22ffa8be6258fad3122bcf65ea","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/track+document+conversion+progress/","title":"Track Document Conversion Progress"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Trim Leading Blank Rows and Columns while exporting spreadsheets to CSV format\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes, your Excel or CSV file has leading blank columns or rows. For example, consider this line\n,,,data1,data2\nHere the first three cells or columns are blank. When you open such a CSV file in Microsoft Excel, then Microsoft Excel discards these leading blank rows and columns.\nBy default, Aspose.Cells does not discard leading blank columns and rows on saving but if you want to remove them just like Microsoft Excel does, then Aspose.Cells provides TxtSaveOptions.TrimLeadingBlankRowAndColumn property. Please set it to **true **and then all the leading blank rows and columns will be discarded on saving.\nPrior to the release of Aspose.Cells for .NET 20.4, the default value of TxtSaveOptions.TrimLeadingBlankRowAndColumn was false. Since the 20.4 release, the default value of TxtSaveOptions.TrimLeadingBlankRowAndColumn is true.\nTrim Leading Blank Rows and Columns while exporting spreadsheets to CSV format\nThe following sample code loads the source excel file which has two leading blank columns. It first saves the excel file in CSV format without any changes and then it sets TxtSaveOptions.TrimLeadingBlankRowAndColumn property to **true **and saves it again. The screenshot shows the source excel file, output CSV file without trimming, and the output CSV file with trimming.\n\\\nSample Code\nAttachments: effect-of-TxtSaveOptions.TrimLeadingBlankRowAndColumn-property.png.png (image/png) sampleTrimBlankColumns.xlsx (application/xlsx) outputTrimBlankColumns.csv (application/vnd.ms-excel) outputWithoutTrimBlankColumns.csv (application/vnd.ms-excel)\n","date":-62135596800,"description":"","objectID":"151adc0560c18f963ed5d91752c759fc","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/trim+leading+blank+rows+and+columns+while+exporting+spreadsheets+to+csv+format/","title":"Trim Leading Blank Rows and Columns while exporting spreadsheets to CSV format"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"36e973aac9078aad0e2406da14297641","permalink":"https://roywangt.github.io/cellsnet/developerguide/loadingsavingconvertingandmanaging/","title":"Loading, Saving, Converting and Managing"},{"content":"   Contents Summary\n1 Consolidation function 1.1 Applying ConsolidationFunction to Data Fields of Pivot Table\n |     Consolidation function     Aspose.Cells can be used to apply ConsolidationFunction to data fields (or value fields) of the pivot table. In Microsoft Excel, you can right-click the value field and then select Value Field Settings\u0026amp;hellip; option and then select the tab Summarize Values By. From there, you can select any ConsolidationFunction of your choice like Sum, Count, Average, Max, Min, Product, Distinct Count, etc.\nAspose.Cells provides ConsolidationFunction enumeration to support the following consolidation functions.\n ConsolidationFunction.Average ConsolidationFunction.Count ConsolidationFunction.CountNums ConsolidationFunction.DistinctCount ConsolidationFunction.Max ConsolidationFunction.Min ConsolidationFunction.Product ConsolidationFunction.StdDev ConsolidationFunction.StdDevp ConsolidationFunction.Sum ConsolidationFunction.Var ConsolidationFunction.Varp  Applying ConsolidationFunction to Data Fields of Pivot Table\nThe following code applies Average consolidation function to the first data field (or value field) and DistinctCount consolidation function to the second data field (or value field).\n\\\nDistinctCount consolidation function is supported by Microsoft Excel 2013 only.\n","date":-62135596800,"description":"","objectID":"b580a40b5a0d985e69f6067898430cbb","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/consolidation+function/","title":"Consolidation Function"},{"content":"   Contents Summary\n1 Custom sorting in Pivot Table\n |     Custom sorting in Pivot Table     By using the Aspose.Cells API, you can sort Pivot Tables on field values. The following code snippet loads the sample excel file and adds three pivot tables. The first pivot table is without custom sorting, the second pivot table is sorted on \u0026amp;ldquo;SeaFood\u0026amp;rdquo; row field values and the third pivot table is sorted on \u0026amp;ldquo;28/07/2000\u0026amp;rdquo; column field values.\nSample source file and output files can be downloaded from here for testing the sample code:\nSource Excel File\nOutput Excel File\nOutput PDF File\n\\\nAttachments: SamplePivotSort.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) out.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"8c8c58e6cd92dd809d210e47fb7aa003","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/custom+sorting+in+pivot+table/","title":"Custom sorting in Pivot Table"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Customize Globalization Settings for Pivot Table\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes you want to customize the Pivot Total, Sub Total, Grand Total, All Items, Multiple Items, Column Labels, Row Labels, Blank Values text as per your requirements. Aspose.Cells allows you to customize the globalization settings of the pivot table to deal with such scenarios. You can also use this feature to change the labels to other languages like Arabic, Hindi, Polish, etc.\nCustomize Globalization Settings for Pivot Table\nThe following sample code explains how to customize globalization settings for the pivot table. It creates a class CustomPivotTableGlobalizationSettings derived from a base class GlobalizationSettings and overrides all of its necessary methods. These methods return the customized text for the Pivot Total, Sub Total, Grand Total, All Items, Multiple Items, Column Labels, Row Labels, Blank Values. Then it assigns the object of this class to WorkbookSettings.GlobalizationSettings property. The code loads the source excel file that contains the pivot table, refreshes and calculate its data and saves it as output PDF file. The following screenshot shows the effect of the sample code on the output PDF. As you can see in the screenshot, different parts of the pivot table have now a customized text returned by the overridden methods of GlobalizationSettings class.\nSample Code\nAttachments: outputPivotTableGlobalizationSettings.pdf (application/pdf) Setting-Custom-Pivot-Table-Globalization-Settings.png (image/png) samplePivotTableGlobalizationSettings.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"8aa2cbda1f8fda77678a85d44b379870","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/customize+globalization+settings+for+pivot+table/","title":"Customize Globalization Settings for Pivot Table"},{"content":"Pivot table based reports are useful but prone to error if target users do not have detailed knowledge of Excel to configure these reports. In these circumstances, organizations will want to restrict users from being able to change a pivot table based report. Common pivot table features like adding additional filters, slicers, fields, or changing the order of certain things in the report are mostly not recommended for every user. On the other hand, these users shall also be able to refresh the report and use existing filters or slicers. Aspose.Cells has provided this ability to developers for restricting users from changing these reports while creating these reports. For this purpose, Excel provides a feature to disable the pivot table ribbon and the same is provided by Aspose.Cells i.e. developer can disable the ribbon which contains controls to modify these reports.\nDisable Pivot Table Ribbon using PivotTable.EnableWizard\nFollowing code demonstrates this feature by accessing a pivot table from a sheet and then setting EnableWizard to false. Sample pivot table file can be downloaded from this link.\n\\\n","date":-62135596800,"description":"","objectID":"f319644db5db10b37b56a8c3b461d9af","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/disable+pivot+table+ribbons/","title":"Disable Pivot Table Ribbons"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find and Refresh the Nested or Children Pivot Tables of Parent Pivot Table\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes, one pivot table uses another pivot table as a data source, so it is called a child pivot table or nested pivot table. You can find the children pivot tables of a parent pivot table using the PivotTable.GetChildren() method.\nFind and Refresh the Nested or Children Pivot Tables of Parent Pivot Table\nThe following sample code loads the sample Excel file that contains three pivot tables. The bottom two pivot tables are the children of the above pivot table as shown in this screenshot. The code finds the children pivot table using the PivotTable.GetChildren() method and then refreshes them one by one.\nSample Code\nAttachments: Refresh-Children-Pivot-Tables.png (image/png) sampleRefreshChildrenPivotTables.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"2eee83696408488dc2e1e88fa394bcd6","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/find+and+refresh+the+nested+or+children+pivot+tables+of+parent+pivot+table/","title":"Find and Refresh the Nested or Children Pivot Tables of Parent Pivot Table"},{"content":"   Contents Summary\n1 Pivot Table Appearance 1.1 Setting Pivot Table Format Options 1.1.1 Setting the AutoFormat Type\n1.1.2 Setting Format Options\n1.1.3 Formatting Look and Feel Manually\n1.2 Setting Pivot Field Format Options 1.2.1 Setting Row/Column/Page Fields Format\n1.3 Setting Data fields format\n1.4 Clearing Pivot Fields\n |     Pivot Table Appearance     How to Create a Pivot Table explains how to create a simple pivot table. This article describes how to customize a pivot table\u0026amp;rsquo;s appearance by setting various properties:\n Pivot table format options Pivot fields format options Data field format options  Setting Pivot Table Format Options\nThe PivotTable class controls the overall pivot table and can be formatted in a number of ways.\nSetting the AutoFormat Type\nMicrosoft Excel offers a number of different pre-set report formats. Aspose.Cells support these formatting options too. To access them:\n Set PivotTable.IsAutoFormat to true. Assign a formatting option from the PivotTableAutoFormatType enumeration.  \\\nSetting Format Options\nThe code sample below shows how to format the pivot table to show grand totals for rows and columns, and how to set the report\u0026amp;rsquo;s field order. It also shows how to set a customer string for null values.\n\\\nFormatting Look and Feel Manually\nTo formatting how the pivot table report looks manually, instead of using pre-set report formats, use the PivotTable.Format() and PivotTable.FormatAll() methods. Create a style object for your desired formatting, for example:\n\\\nSetting Pivot Field Format Options\nThe PivotField class represents a field in a pivot table and can be formatted in a number of ways. The code sample below shows how to:\n Access row fields. Setting subtotals. Setting autorsort. Setting autorshow.  Setting Row/Column/Page Fields Format\n\\\nSetting Data fields format\nThe code sample below shows how to set display formats and number format for data fields.\n\\\nClearing Pivot Fields\nThe PivotFieldCollection has a method named …","date":-62135596800,"description":"","objectID":"3fded215f94034e4c07d3a5617643d05","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/formatting+pivot+table/","title":"Formatting Pivot Table"},{"content":"   Contents Summary\n1 Get External Connection Data Source of Pivot Table\n |     Get External Connection Data Source of Pivot Table     Aspose.Cells provides the ability to get the external connection data source of the pivot table. For this, the API provides the ExternalConnectionDataSource property of the PivotTable class. The ExternalConnectionDataSource property returns the ExternalConnection object. The following code snippet demonstrates the use of the PivotTable.ExternalConnectionDataSource property to get the external connection data source of the pivot table.\nThe source file used in the code snippet is attached for reference.\nSource File\nAttachments: PivotTableHideAndSort_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PivotTableHideAndSortSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SamplePivotTableExternalConnection.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"566e17499943ddba7ddbdf674bc580b1","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/get+external+connection+data+source+of+pivot+table/","title":"Get External Connection Data Source of Pivot Table"},{"content":"Aspose.Cells now supports fetching the refresh date and refresh by who information from a workbook.\nPivotTable.RefreshDate returns the date on which the PivotTable report was last refreshed. Similarly PivotTable.RefreshByWho property returns the name of the user who refreshed the report last time. Following example demonstrates this feature and sample file can be downloaded from the following link.\nSourcePivotTable.xlsx\nSample Code\n\\\nAttachments: sourcePivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"00e4e6b70d0632426289222d9c24f6ae","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/get+pivot+table+refresh+date+and+refresh+by+who+information/","title":"Get Pivot Table refresh date and refresh by who information"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Group Pivot Fields in the Pivot Table\n3 Sample Code\n |     Possible Usage Scenarios     Microsoft Excel allows you to group pivot fields of the pivot table. When there is a large amount of data related to a pivot field, it is often useful to group them into sections. Aspose.Cells also provides this feature using the PivotTable.SetManualGroupField() method. Group Pivot Fields in the Pivot Table\nThe following sample code loads the sample Excel file and performs grouping on the first pivot field using the PivotTable.SetManualGroupField() method. It then refreshes and calculates data of the pivot table and saves the workbook as output Excel file. The screenshot shows the effect of the sample code on the sample Excel file. As you can see in the screenshot, the first pivot field is now grouped by months and quarters.\nSample Code\nAttachments: Group-Pivot-Fields-In-Pivot-Table.png (image/png) sampleGroupPivotFieldsInPivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputGroupPivotFieldsInPivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"2b927fcb26f555967a1d405107cc33f3","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/group+pivot+fields+in+the+pivot+table/","title":"Group Pivot Fields in the Pivot Table"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Parsing Pivot Cached Records while loading Excel file\n3 Sample Code\n |     Possible Usage Scenarios     When you create a Pivot Table, Microsoft Excel takes a copy of the source data and stores it in the Pivot Cache. The Pivot Cache is held inside the memory of Microsoft Excel. You cannot see it but that is the data the Pivot Table references when you build your Pivot Table or change a Slicer selection or move rows/columns around. This enables Microsoft Excel to be very responsive to changes in the Pivot Table but it can also double the size of your file. After all, the Pivot Cache is just a duplicate of your source data so it makes sense that your file size will be potentially double.\nWhen you load your Excel file inside the Workbook object, you can decide whether you also want to load the records of Pivot Cache or not, using the LoadOptions.ParsingPivotCachedRecords property. The default value of this property is false. If Pivot Cache is quite big, it can increase the performance. But if you also want to load the records of Pivot Cache, you should set this property as true.\nParsing Pivot Cached Records while loading Excel file\nThe following sample code explains the usage of LoadOptions.ParsingPivotCachedRecords property. It loads the sample Excel file while parsing the pivot cached records. Then it refreshes the pivot table and saves it as the output Excel file.\nSample Code\nAttachments: sampleParsingPivotCachedRecords.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputParsingPivotCachedRecords.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"aa94caef110452d7e016467140d26488","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/parsing+pivot+cached+records+while+loading+excel+file/","title":"Parsing Pivot Cached Records while loading Excel file"},{"content":"   Contents Summary\n1 Pivot Table Hide and Sort data\n |     Pivot Table Hide and Sort data     Aspose.Cells supports hiding and sorting data in the pivot table. The following code snippet demonstrates this feature by sorting the Score column in descending order and then hiding the rows with a score less than 60.\n\\\nThe source and output excel files used in the code snippet are attached for reference.\nSource File\nOutput File\nAttachments: PivotTableHideAndSortSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PivotTableHideAndSort_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"5fc7940845add163a62b974524f3132d","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/pivot+table+hide+and+sort+data/","title":"Pivot Table Hide and Sort data"},{"content":"   Contents Summary\n1 Create Pivot Table 1.1 Create Pivot Table Using Microsoft Excel\n1.2 Create Pivot Table Using Aspose.Cells\n2 Pivot Table\u0026amp;rsquo;s Source Data 2.1 Changing a Pivot Table\u0026amp;rsquo;s Source Data\n |     Create Pivot Table     It is possible to use Aspose.Cells to add pivot tables to spreadsheets programmatically.\nCreate Pivot Table Using Microsoft Excel\nAspose.Cells provides a special set of classes in the Aspose.Cells.Pivot namespace that are used to create and control pivot tables. These classes are used to create and set PivotTable objects, the building blocks of a pivot table. The objects are:\n PivotField represents a field in a PivotTable. PivotFieldCollection represents a collection of all the PivotField objects in the PivotTable. PivotTable represents a PivotTable on a worksheet. PivotTableCollection represents a collection of all the PivotTable objects on a worksheet.  Create Pivot Table Using Aspose.Cells\n Add data to a worksheet using the Cell object\u0026amp;rsquo;s PutValue method. This data will be used as the pivot table\u0026amp;rsquo;s data source. Add a pivot table to the worksheet by calling the PivotTables collection\u0026amp;rsquo;s add method, which is encapsulated in the Worksheet object. Access the new PivotTable object from the PivotTables collection by passing the PivotTable index. Use any of the PivotTable objects (explained above) to manage the pivot table.  After executing the example code, a pivot table is added to the worksheet.\n\\\nWhen assigning a range of cells as the data source, the range must go from top left to bottom right. For example, \u0026amp;ldquo;A1:C3\u0026amp;rdquo; is valid but \u0026amp;ldquo;C3:A1\u0026amp;rdquo; is not.\nPivot Table\u0026amp;rsquo;s Source Data\nThere are times when you want to create Microsoft Excel reports with pivot tables that take data from different data sources (such as a database) that are not known at design time. This article provides an approach to dynamically change a pivot table\u0026amp;rsquo;s data source.\nChanging a Pivot Table\u0026amp;rsquo;s Source Data …","date":-62135596800,"description":"","objectID":"b47c9a87c0c2a793c97f42a58a3b53c1","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/pivot+table+and+source+data/","title":"Pivot Table and Source Data"},{"content":"Aspose.Cells now supports refreshing and calculating pivot table having calculated items. Please use the PivotTable.RefreshData() and PivotTable.CaclulateData() as usual to perform this function.\nRefresh and Calculate Pivot Table having Calculated Items\nThe following sample code loads the source excel file which contains a pivot table having three calculated items such as \u0026amp;ldquo;add\u0026amp;rdquo;, \u0026amp;ldquo;div\u0026amp;rdquo;, \u0026amp;ldquo;div2\u0026amp;rdquo;. We first change the value of cell D2 to 20 and then refresh and calculate pivot table using Aspose.Cells APIs and save the workbook in PDF format. The results in the output PDF shows that Aspose.Cells refreshed and calculated the pivot table having calculated items successfully. You can verify it using Microsoft Excel by manually putting the value 20 in cell D2 and then refreshing the pivot table via Alt+F5 shortcut key or clicking the pivot table Refresh button.\n\\\nAttachments: sample.xlsx (application/xlsx) output.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"adacda77594772092710fa95a851111a","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/refresh+and+calculate+pivot+table+having+calculated+items/","title":"Refresh and Calculate Pivot Table having Calculated Items"},{"content":"   Contents Summary\n1 Show report filter pages option\n |     Show report filter pages option     Excel supports creating pivot tables, adding report filters and enable the \u0026amp;ldquo;Show Report Filter Pages\u0026amp;rdquo; option. Aspose.Cells also supports this feature to enable the \u0026amp;ldquo;Show Report Filter Pages\u0026amp;rdquo; option on the created pivot table. Following is the screen showing the \u0026amp;ldquo;Show Report Filter Pages\u0026amp;rdquo; option in Excel.\nSample source file and output files can be downloaded from here for testing the sample code:\nSource Excel File Output Excel File\n\\\nAttachments: Show report pages filter option.png (image/png) samplePivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSamplePivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SamplePivotSort.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) out_java.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) out.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"2a932027eea15f71c0e939a6ff0eab72","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/show+report+filter+pages+option/","title":"Show report filter pages option"},{"content":"   Contents Summary\n1 \u0026amp;ldquo;Rank Smallest to Largest\u0026amp;rdquo; and \u0026amp;ldquo;Rank Largest to Smallest\u0026amp;rdquo; display format option\n |     Aspose.Cells supports all the data display formats of DataField.     \u0026amp;ldquo;Rank Smallest to Largest\u0026amp;rdquo; and \u0026amp;ldquo;Rank Largest to Smallest\u0026amp;rdquo; display format option\nAspsoe.Cells provides the ability to set the display format option for pivot fields. For this, the API provides the PivotField.DataDisplayFormat property. To rank largest to smallest, you may set the PivotField.DataDisplayFormat property to PivotFieldDataDisplayFormat.RankLargestToSmallest. The following code snippet demonstrates setting the display format options.\nSample source and output files can be downloaded from here for testing the sample code:\nSource Excel File\nOutput Excel File\n\\\nAttachments: out.pdf (application/pdf) out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SamplePivotSort.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PivotTableSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PivotTableDataDisplayFormatRanking_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"348c643ccc641ecbd1a0904d2604d7c4","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/working+with+data+display+formats+of+datafield+in+pivot+table/","title":"Working with data display formats of DataField in Pivot Table"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"a36142a583079b4704717e19fe557894","permalink":"https://roywangt.github.io/cellsnet/developerguide/pivottables/","title":"Pivot Tables"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add PDF Bookmarks with Named Destinations\n3 Sample Code\n |     Possible Usage Scenarios     Named Destinations are special kinds of bookmarks or links in PDF that do not depend on PDF pages. It means, if pages are added or deleted from PDF, bookmarks may become invalid but named destinations will remain intact. To create Named Destination, please set the PdfBookmarkEntry.DestinationName property.\nAdd PDF Bookmarks with Named Destinations\nPlease see the following sample code, its source Excel file, and its output PDF file. The screenshot shows the bookmarks and named destinations inside the output PDF. The screenshot also describes how to view Named Destinations and that you need Professional version of Acrobat Reader. Sample Code\nAttachments: samplePdfBookmarkEntry_DestinationName.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Add PDF Bookmarks with Named Destinations.png (image/png) outputPdfBookmarkEntry_DestinationName.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"bc746b7e2389f968efaee4bc26d84da4","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/add+pdf+bookmarks+with+named+destinations/","title":"Add PDF Bookmarks with Named Destinations"},{"content":"This article provides information on how to insert PDF bookmarks when converting a spreadsheet to PDF.\nAspose.Cells allows you to add bookmarks on the fly. PDF bookmarks can drastically improve the navigability of long documents. When adding bookmark links to PDF document, you can have precise control over the exact view you want, you\u0026amp;rsquo;re not limited to linking to a page. You can set up the precise view by positioning the target page, and then create the bookmark.\nPlease see the following sample code to find out how to add PDF bookmarks. The code generates a simple workbook, specifies PDF bookmarks with destination locations and generates the PDF file.\n\\\nIf your spreadsheet has formulas, it is best to call Workbook.CalculateFormula just before rendering the spreadsheet to PDF format. Doing so will ensure that the formula dependent values are refreshed \u0026amp;amp; rendered correctly in PDF.\nAttachments: Add PDF Bookmarks-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"dcee5514d1215bdeaf842e76a063003b","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/add+pdf+bookmarks/","title":"Add PDF Bookmarks"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Avoid Blank Page in Output PDF when there is Nothing to Print\n3 Sample Code\n4 Exception\n |     Possible Usage Scenarios     When the Excel file is empty and the user saves it to PDF using Aspose.Cells, it renders a blank page in output PDF. Sometimes, this default behavior is undesirable. Aspose.Cells provides the PdfSaveOptions.OutputBlankPageWhenNothingToPrint property to deal with this issue. If you will set it as false, then CellsException will occur whenever there is nothing to print in the output PDF.\nAvoid Blank Page in Output PDF when there is Nothing to Print\nThe following sample code creates an empty workbook and then saves it as PDF after setting the PdfSaveOptions.OutputBlankPageWhenNothingToPrint property as false. Since there is nothing to print in the output PDF, the CellsException occurs as shown below.\nSample Code\nException\nAspose.Cells.CellsException was unhandled\nHResult=-2146232832\nMessage=There is nothing to output/print.\nSource=Aspose.Cells\nStackTrace:\nat Aspose.Cells.Workbook.Save(String fileName, SaveOptions saveOptions)\n","date":-62135596800,"description":"","objectID":"49aab0b12137d604329bf400877991ad","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/avoid+blank+page+in+output+pdf+when+there+is+nothing+to+print/","title":"Avoid Blank Page in Output PDF when there is Nothing to Print"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Control loading of External Resources in MS Excel Workbook while rendering to PDF\n3 Sample Code\n |     Possible Usage Scenarios     Your Excel file may contain external resources e.g. linked images or objects. When you convert your Excel file to PDF, Aspose.Cells retrieves these external resources and renders them to PDF. But sometimes, you do not want to load these external resources and more than that, you want to manipulate them. You can do this using WorkbookSettings.StreamProvider which implements the IStreamProvider interface.\nControl loading of External Resources in MS Excel Workbook while rendering to PDF\nThe following sample code explains how to make use of WorkbookSettings.StreamProvider to control the loading of external resources and manipulate them. Please check the sample Excel file used inside the code and the output PDF generated by the code. The screenshot shows how the old external image in the sample Excel file was replaced with a new image in the output PDF.\nSample Code\nAttachments: samplePdfSaveOptions_StreamProvider.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) newPdfSaveOptions_StreamProvider.png (image/png) outputPdfSaveOptions_StreamProvider.pdf (application/pdf) oldPdfSaveOptions_StreamProvider.png (image/png) Outcome of PdfSaveOptions_StreamProvider.png (image/png)\n","date":-62135596800,"description":"","objectID":"91aed0336e725ae15f537d112b8a579d","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/control+loading+of+external+resources+in+ms+excel+workbook+while+rendering+to+pdf/","title":"Control loading of External Resources in MS Excel Workbook while rendering to PDF"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create PdfBookmarkEntry for Chart Sheet\n3 Sample Code\n |     Possible Usage Scenarios     Earlier, Aspose.Cells would create PdfBookmarkEntry for a normal sheet. But now Aspose.Cells can also create PdfBookmarkEntry for chart sheet. Since chart sheet does not have any other cell except cell A1, so it will create PdfBookmarkEntry for cell A1 only. Create PdfBookmarkEntry for Chart Sheet\nThe following sample code loads the sample Excel file which has four sheets. Two of them are normal sheets and the other two are chart sheets. It creates four bookmark entries as follows\n Bookmark-I Bookmark-II-Chart1 Bookmark-III Bookmark-IV-Chart2  The following screenshot shows the output PDF generated by the sample code for a reference.\nSample Code\nAttachments: sampleCreatePdfBookmarkEntryForChartSheet.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Create-PdfBookmarkEntry-for-Chart-Sheet.png (image/png) outputCreatePdfBookmarkEntryForChartSheet.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"a6e0f8b2b9680c34e3490b2dbe57fc1e","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/create+pdfbookmarkentry+for+chart+sheet/","title":"Create PdfBookmarkEntry for Chart Sheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Export Range of Cells in a Worksheet to Image\n3 Screenshot of Sample Excel File and its Exported Image\n4 Sample Code\n |     Possible Usage Scenarios     You can make an image of a worksheet using Aspose.Cells. However, sometimes you need to export only a range of cells in a worksheet to an image. This article explains how to achieve this.\nExport Range of Cells in a Worksheet to Image\nTo take an image of a range, set the print area to the desired range and then set all margins to 0. Also set ImageOrPrintOptions.OnePagePerSheet to true. The following code takes an image of the range D8:G16. Below is a screenshot of the sample Excel file used in the code. You can try the code with any Excel file.\nScreenshot of Sample Excel File and its Exported Image\n\\\nExecuting the code creates an image of the range D8:G16 only.\nSample Code\nAttachments: Sample Excel File.png (image/png) Output Image.jpg (image/jpeg) Output Image.jpg (image/jpeg) sampleExportRangeOfCellsInWorksheetToImage.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"fbd27cc04e347147bc394f9ef7cfd6f0","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/export+range+of+cells+in+a+worksheet+to+image/","title":"Export Range of Cells in a Worksheet to Image"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get DrawObject and Bound while rendering to Pdf using DrawObjectEventHandler class\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells provides an abstract class DrawObjectEventHandler which has a Draw() method. The user can implement DrawObjectEventHandler and utilize the Draw() method to get the DrawObject and Bound while rendering Excel to PDF or Image. Here is a brief description of the parameters of the Draw() method.\n drawObject  DrawObject will be initialized and returned when rendering\n x  Left of DrawObject\n y  Top of DrawObject\n width  Width of DrawObject\n height  Height of DrawObject\nIf you are rendering Excel file to PDF, then you can utilize DrawObjectEventHandler class with PdfSaveOptions.DrawObjectEventHandler. Similarly, if you are rendering Excel file to Image, you can utilize DrawObjectEventHandler class with ImageOrPrintOptions.DrawObjectEventHandler.\nGet DrawObject and Bound while rendering to Pdf using DrawObjectEventHandler class\nPlease see the following sample code. It loads the sample Excel file and saves it as output PDF. While rendering to PDF, it utilizes PdfSaveOptions.DrawObjectEventHandler property and captures the DrawObject and Bound of existing cells and objects e.g. images etc. If the DrawObject type is Cell, it prints its Bound and StringValue. And if the DrawObject type is Image, it prints its Bound and Shape Name. Please see the console output of the sample code given below for more help.\nSample Code\nConsole Output\n[X]: 153.6035 [Y]: 82.94118 [Width]: 103.2035 [Height]: 14.47059 [Cell Value]: This is sample text.\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\n[X]: 267.6917 [Y]: 153.4853 [Width]: 160.4491 [Height]: 128.0647 [Shape Name]: Sun\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\nAttachments: sampleGetDrawObjectAndBoundUsingDrawObjectEventHandler.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) …","date":-62135596800,"description":"","objectID":"26c2ac4ef7216aad7926b9553ec8ef7c","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/get+drawobject+and+bound+while+rendering+to+pdf+using+drawobjecteventhandler+class/","title":"Get DrawObject and Bound while rendering to Pdf using DrawObjectEventHandler class"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Ignore Errors while Rendering Excel to PDF\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes when you convert your Excel file to PDF, errors or exceptions occur and the conversion process terminates. You can ignore all such errors during the conversion process by using the PdfSaveOptions.IgnoreError property. This way, the conversion process will complete smoothly without throwing any error or exception but the loss of data may occur. Therefore, please use this property only if the loss of data is not critical for you.\nIgnore Errors while Rendering Excel to PDF\nThe following code loads the sample Excel file but the sample Excel file is erroneous and throws an error during conversion to PDF in 17.11 but since we are using PdfSaveOptions.IgnoreError property, it does not throw an error. However, one rounded red arrow like shape as shown in this screenshot is lost. Sample Code\nAttachments: outputErrorExcel2Pdf.pdf (application/pdf) sampleErrorExcel2Pdf.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) PdfSaveOptions.IgnoreError-True-Ignores-the-Errors-while-Excel2Pdf-Conversion.png (image/png) sampleErrorExcel2Pdf.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"264b73b7090090c10ca3f810d74ade66","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/ignore+errors+while+rendering+excel+to+pdf/","title":"Ignore Errors while Rendering Excel to PDF"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Output Blank Page when there is Nothing to Print\n3 Sample Code\n |     Possible Usage Scenarios     If the sheet is empty, then Aspose.Cells will not print anything when you export worksheet to image. You can change this behavior by using ImageOrPrintOptions.OutputBlankPageWhenNothingToPrint property. When you will set it true, it will print the blank page.\nOutput Blank Page when there is Nothing to Print\nThe following sample code creates the empty workbook which has an empty worksheet and renders the empty worksheet to an image after setting the ImageOrPrintOptions.OutputBlankPageWhenNothingToPrint property as true. Consequently, it generates the blank page as there is nothing to print which you can see in the image below.\nSample Code\nAttachments: OutputBlankPageWhenNothingToPrint.png (image/png)\n","date":-62135596800,"description":"","objectID":"70d3ef815df21a62933ca50dec1b419a","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/output+blank+page+when+there+is+nothing+to+print/","title":"Output Blank Page when there is Nothing to Print"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Render Office Add-Ins while converting Excel to Pdf\n3 Sample Code\n |     Possible Usage Scenarios     Earlier, Aspose.Cells could not render Office Add-Ins when Excel file is saved to Pdf format. Now Aspose.Cells renders it fine. You do not need to use any special method or property to render Office Add-Ins in output Pdf. Just save your Excel file to Pdf format and it will render Office Add-Ins.\nRender Office Add-Ins while converting Excel to Pdf\nThe following sample code saves the sample Excel file which contains the Office Add-Ins. Please see the output Pdf generated with the previous version i.e. 17.11 and the output Pdf generated with newer version i.e. 17.12 and onward. The previous version output Pdf is blank but the newer version output Pdf shows the Office Add-In.\nSample Code\nAttachments: sampleRenderOfficeAdd-Ins.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output-17.11.0.pdf (application/pdf) output-17.12.0.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"29e213bd9157489c7363f60cf1639d9f","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/render+office+add-ins+while+converting+excel+to+pdf/","title":"Render Office Add-Ins while converting Excel to Pdf"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Render Sequence of Pages using PageIndex and PageCount Properties of ImageOrPrintOptions\n3 Sample Code\n |     Possible Usage Scenarios     You can render a sequence of pages of your Excel file to images by using Aspose.Cells with ImageOrPrintOptions.PageIndex and ImageOrPrintOptions.PageCount properties. These properties are useful when there are so many e.g. thousands of pages in your worksheet but you want to render some of them only. This will not only save the processing time but will also save the memory consumption of the rendering process.\nRender Sequence of Pages using PageIndex and PageCount Properties of ImageOrPrintOptions\nThe following sample code loads the sample Excel file and renders only pages 4, 5, 6 and 7 using the ImageOrPrintOptions.PageIndex and ImageOrPrintOptions.PageCount properties. Here are the rendered pages generated by the code.\n             Sample Code     Attachments: sampleImageOrPrintOptions_PageIndexPageCount.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputImage-7.png (image/png) outputImage-6.png (image/png) outputImage-4.png (image/png) outputImage-5.png (image/png)\n","date":-62135596800,"description":"","objectID":"99217ea1cd0d943fe1a3aa85dfbd42f0","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/render+sequence+of+pages+using+pageindex+and+pagecount+properties+of+imageorprintoptions/","title":"Render Sequence of Pages using PageIndex and PageCount Properties of ImageOrPrintOptions"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify how to cross string in output PDF/Image using TextCrossType\n |     Possible Usage Scenarios     When a cell contains text or string but it is larger than the width of the cell, then the string overflows if the next cell in the next column is null or empty. When you save your Excel file into PDF/Image, you can control this overflow by specifying the cross type using the TextCrossType enumeration. It has the following values\n TextCrossType.Default  Display text like MS Excel which depends on the next cell. If the next cell is null, the string will cross or it will be truncated.\n TextCrossType.CrossKeep  Display the string like MS Excel exporting PDF/Image\n TextCrossType.CrossOverride  Display all the text by crossing other cells and override the text of crossed cells\n TextCrossType.StrictInCell  Only display the string within the width of the cell.\nSpecify how to cross string in output PDF/Image using TextCrossType\nThe following sample code loads the sample Excel file and saves it to PDF/Image format by specifying different TextCrossType. The sample Excel file and output files can be downloaded from the following links:\nsampleCrossType.xlsx\noutputCrossType.pdf\noutputCrossType.png\nSample Code\nAttachments: output-17.12.0.pdf (application/pdf) output-17.11.0.pdf (application/pdf) sampleRenderOfficeAdd-Ins.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputCrossType.pdf (application/pdf) outputCrossType.png (image/png) sampleCrossType.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"73e4bb0ca41417197b438a44e92a36d8","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/specify+how+to+cross+string+in+output+pdf+and+image/","title":"Specify how to cross string in output PDF and image"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"f8b5236fe80947344bb6dd65dfac7650","permalink":"https://roywangt.github.io/cellsnet/developerguide/rendering/","title":"Rendering"},{"content":"When working with spreadsheets and adding data to rows or columns, you might need to change the height of rows or width of columns. Sometimes, applying formatting on rows or columns means that the current height or width needs to change to show the data. Normally, users adjust row heights and column widths in a WYSIWYG environment using Microsoft Excel. But, with Aspose.Cells developers can perform these operations at runtime.\n   Contents Summary\n1 Working with Rows 1.1 Adjusting Row Height 1.1.1 Setting the Height of a Row\n1.1.2 Setting the Height of All Rows in a Worksheet\n2 Working with Columns 2.1 Setting the Width of a Column\n2.2 Setting Column Width in Pixels\n2.3 Setting the Width of All Columns in a Worksheet\n ||      Working with Rows      Adjusting Row Height\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a WorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet.\nThe Cells collection provides several methods to manage rows or columns in a worksheet. Some of these are discussed below in more detail.\nSetting the Height of a Row\nIt is possible to set the height of a single row by calling the Cells collection\u0026amp;rsquo;s SetRowHeight method. The SetRowHeight method takes the following parameters as follows:\n Row index, the index of the row that you\u0026amp;rsquo;re changing the height of. Row height, the row height to apply on the row.  \\\nSetting the Height of All Rows in a Worksheet\nIf developers need to set the same row height for all rows in the worksheet, they can do it by using the StandardHeight property of the Cells collection.\nExample:\nWorking with Columns\nSetting the Width of a Column\nSet the width of a column by calling the Cells collection\u0026amp;rsquo;s SetColumnWidth method. The SetColumnWidth method takes the following parameters:\n Column index, …","date":-62135596800,"description":"","objectID":"ed87324c9b49615e9654800e9857f812","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/adjusting+row+height+and+column+width/","title":"Adjusting Row Height and Column Width"},{"content":"Microsoft Excel lets users auto size the width and height of cells according to its content. This feature is also available through Aspose.Cells so developers can auto size the dimensions of a cell at runtime.\n   Contents Summary\n1 Auto Fitting 1.1 AutoFit Row - Simple\n1.2 AutoFit Row in a Range of Cells\n1.3 AutoFit Column in a Range of Cells\n1.4 AutoFit Rows for Merged Cells\n2 Important to Know\n |     Auto Fitting     Aspose.Cells provides a Workbook class that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing a worksheet. This article looks at using the Worksheet class to autofit rows or columns.\nAutoFit Row - Simple\nThe most straight-forward approach to auto-sizing the width and height of a row is to call the Worksheet class AutoFitRow method. The AutoFitRow method takes a row index (of the row to be resized) as a parameter.\n\\\nAutoFit Row in a Range of Cells\nA row is composed of many columns. Aspose.Cells allows developers to auto-fit a row based on the content in a range of cells within the row by calling an overloaded version of the AutoFitRow method. It takes the following parameters:\n Row index, the index of the row about to be auto-fitted. First column index, the index of the row\u0026amp;rsquo;s first column. Last column index, the index of the row\u0026amp;rsquo;s last column.  The AutoFitRow method checks the contents of all the columns in the row and then auto-fits the row.\n\\\nAutoFit Column in a Range of Cells\nA column is composed of many rows. It is possible to auto-fit a column based on the content in a range of cells in the column by calling an overloaded version of AutoFitColumn method that takes the following parameters:\n Column index, the index of the column about to be auto-fitted. First row index, the index of the column\u0026amp;rsquo;s first row. Last …","date":-62135596800,"description":"","objectID":"ca6d296a93a339984a7f40966e468cef","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/autofit+rows+and+columns/","title":"AutoFit Rows and Columns"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Convert Text to Columns using Aspose.Cells\n3 Sample Code\n |     Possible Usage Scenarios     You can convert your Text to Columns using Microsoft Excel. This feature is available from Data Tools under the *Data *tab. In order to split the contents of a column to multiple columns, the data should contain a specific delimiter such as a comma (or any other character) based on which Microsoft Excel splits the contents of a cell to multiple cells. Aspose.Cells also provides this feature via Worksheet.Cells.TextToColumns() method.\nConvert Text to Columns using Aspose.Cells\nThe following sample code explains the usage of Worksheet.Cells.TextToColumns() method. The code first adds some people name in column A of the first worksheet. The first and last name is separated by space character. Then it applies Worksheet.Cells.TextToColumns()method on column A and save it as output excel file. If you open the output excel file, you will see, first names are in column A while last names are in column B as shown in this screenshot.\nSample Code\nAttachments: outputTextToColumns.xlsx (application/xlsx) Split-text-into-columns.png (image/png)\n","date":-62135596800,"description":"","objectID":"f1bc44a9a542dbadcfd13306ba5f21a9","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/convert+text+to+columns+using+aspose.cells/","title":"Convert Text to Columns using Aspose.Cells"},{"content":"   Contents Summary\n1 Introduction\n2 Copying Rows and Columns with Microsoft Excel\n3 Pasting Rows and Columns using Paste Options with Microsoft Excel\n4 Using Aspose.Cells 4.1 Copying Rows\n4.2 Copying Columns\n4.3 Pasting Rows/Columns with Paste Options\n |     Introduction     Sometimes, you need to copy rows and columns in a worksheet without copying the entire worksheet. With Aspose.Cells, it is possible to copy rows and columns within or between workbooks. When a row (or column) is copied, the data contained in it, including formulas - with updated references - and values, comments, formatting, hidden cells, images, and other drawing objects are copied too.\nCopying Rows and Columns with Microsoft Excel\n Select the row or column that you want to copy. To copy rows or columns, click Copy on the Standard toolbar, or press CTRL+C. Select a row or column below or to the right of where you want to copy your selection. When you are copying rows or columns, click Copied Cells on the Insert menu.  If you click Paste on the Standard toolbar or press CTRL+V instead of clicking a command on the Insert menu, any contents of the destination cells are replaced.\nPasting Rows and Columns using Paste Options with Microsoft Excel\n Select the cells that contain the data or other attributes that you want to copy. On the Home tab, click Copy. Click the first cell in the area where you want to paste what you copied. On the Home tab, click the arrow next to Paste, and then select Paste Special. Select the options you want.  Using Aspose.Cells\nCopying Rows\nAspose.Cells provides the CopyRow method of the Cells class. This method copies all types of data including formulas, values, comments, cell formats, hidden cells, images and other drawing objects from the source row to the destination row.\nThe CopyRow method takes the following parameters:\n the source Cells object, the source row index, and the destination row index.  Use this method to copy a row within a sheet, or to another sheet. …","date":-62135596800,"description":"","objectID":"d72561552a9d1048de1bf60841b3dd39","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/copying+rows+and+columns/","title":"Copying Rows and Columns"},{"content":"   Contents Summary\n1 Introduction\n2 Group Management of Rows and Columns 2.1 Grouping Rows and Columns 2.1.1 Group Settings\n2.2 Summary Rows to Below of Detail\n2.3 Summary Columns to Right of Detail\n3 Ungrouping Rows and Columns\n |     Introduction     In a Microsoft Excel file, you can create an outline for the data to let you show and hide levels of detail with a single mouse click.\nClick the Outline Symbols, 1,2,3, + and - to quickly display only the rows or columns that provide summaries or headings for sections in a worksheet, or you can use the symbols to see details under an individual summary or heading as shown below in the figure:\n   Grouping Rows and Columns.        Group Management of Rows and Columns    Aspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a WorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet.\nThe Cells collection provides several methods to manage rows or columns in a worksheet, few of these are discussed below in more detail.\nGrouping Rows and Columns\nIt is possible to group rows or columns by calling the GroupRows and GroupColumns methods of the Cells collection. Both methods take the following parameters:\n First row/column index, the first row or column in the group. Last row/column index, the last row or column in the group. Is hidden, a Boolean parameter that specifies whether to hide rows/columns after grouping or not.  \\\nGroup Settings\nMicrosoft Excel allows you to configure group settings for displaying:\n Summary rows below detail. Summary columns to the right of detail.  Developers can configure these group settings using the Outline property of the Worksheet class.\nSummary Rows to Below of Detail\nIt is possible to control whether summary rows are displayed below detail by setting the Outline class\u0026amp;rsquo; …","date":-62135596800,"description":"","objectID":"289c1d1113cf8bee576391dd2ba77676","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/grouping+and+ungrouping+rows+and+columns/","title":"Grouping and Ungrouping Rows and Columns"},{"content":"Sometimes, it makes sense to hide certain rows or columns in a worksheet and display them later. Microsoft Excel provides this feature and so does Aspose.Cells.\n   Contents Summary\n1 Controlling the Visibility of Rows and Columns 1.1 Hiding Rows and Columns\n1.2 Showing Rows and Columns\n1.3 Hiding Multiple Rows and Columns\n ||      Controlling the Visibility of Rows and Columns      Aspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a WorksheetCollection that allows developers to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet. The Cells collection provides several methods for managing rows or columns in a worksheet. A few of these are discussed below.\nHiding Rows and Columns\nDevelopers can hide a row or column by calling the HideRow and HideColumn methods of the Cells collection respectively. Both methods take the row and column index as a parameter to hide the specific row or column.\n\\\nIt is also possible to hide a row or column by setting the row height or column width to 0 respectively.\nShowing Rows and Columns\nDevelopers can show any hidden row or column by calling the UnhideRow and UnhideColumn methods of the Cells collection respectively. Both methods take two parameters:\n Row or column index - the index of a row or column that is used to show the specific row or column. Row height or column width - the row height or column width assigned to the row or column after unhiding.  \\\nWhile making a hidden column visible, if you need to restore it to previously assigned width or to its original width, please unhide the column with a negative width. For example: worksheet.Cells.UnhideColumn(5, -1)\nHiding Multiple Rows and Columns\nDevelopers can hide multiple rows or columns at once by calling the HideRows and HideColumns methods of the Cells collection respectively. Both methods …","date":-62135596800,"description":"","objectID":"673942660d9f7526eed166d7ba5d37e1","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/hiding+and+showing+rows+and+columns/","title":"Hiding and Showing Rows and Columns"},{"content":"   Contents Summary\n1 Introduction\n2 Managing Rows and Columns 2.1 Insert a Row\n2.2 Inserting Multiple Rows\n2.3 Insert a Row with Formatting\n2.4 Deleting Multiple Rows\n2.5 Insert a Column\n2.6 Delete a Column\n |     Introduction     Whether creating a new worksheet from scratch or working on an existing worksheet, we may need to add extra rows or columns to accommodate more data. Inversely, we may also need to delete rows or columns from specified positions in the worksheet. To fulfill these requirements, Aspose.Cells provides a very simplest set of classes and methods, discussed below.\nManaging Rows and Columns\nAspose.Cells provides a class Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet.\nThe Cells collection provides several methods managing rows and columns in a worksheet. Some of these are discussed below.\nWhen rows or columns are added, the content in the worksheet is shifted down or to the right, and if rows or columns are removed, the content is shifted up or the left.\nInsert a Row\nInsert a row into the worksheet at any location by calling the InsertRow method of the Cells collection. The InsertRow method takes the index of the row where the new row will be inserted.\n\\\nInserting Multiple Rows\nTo insert multiple rows into a worksheet, call the InsertRows method of the Cells collection. The InsertRows method takes two parameters:\n Row index, the index of the row from where the new rows will be inserted. Number of rows, the total number of rows that need to be inserted.  \\\nInsert a Row with Formatting\nTo insert a row with formatting options, use the InsertRows overload that takes InsertOptions as a parameter. Set the CopyFormatType property of InsertOptions class with CopyFormatType Enumeration. The CopyFormatType …","date":-62135596800,"description":"","objectID":"7589a2f5e8b0abc92e2a71697a508acb","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/inserting+and+deleting+rows+and+columns/","title":"Inserting and Deleting Rows and Columns"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"c002433a001003fd14af069ea5b7b789","permalink":"https://roywangt.github.io/cellsnet/developerguide/rowsandcolumns/","title":"Rows and Columns"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create Slicer to a Pivot Table\n3 Sample Code \n |     Possible Usage Scenarios     A slicer is used to filter data quickly. It can be used to filter data both in a table or pivot table. Microsoft Excel allows you to create slicer by selecting a table or pivot table and then clicking the Insert \u0026amp;gt; Slicer. Aspose.Cells also allows you to create slicer using the Worksheet.Slicers.Add() method.\nCreate Slicer to a Pivot Table\nPlease see the following sample code. It loads the sample Excel file that contains the pivot table. It then creates the slicer based on the first base pivot field. Finally, it saves the workbook in output XLSX and output XLSB format. The following screenshot shows the slicer created by Aspose.Cells in the output Excel file.\n**Sample Code **\nAttachments: sampleCreateSlicerToPivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputCreateSlicerToPivotTable.xlsb (application/vnd.ms-excel.sheet.binary.macroenabled.12) outputCreateSlicerToPivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Slicer-has-been-created-in-output-Excel-file-using-Aspose.Cells-API.png (image/png)\n","date":-62135596800,"description":"","objectID":"d767e194561c0cbdc7c4adb87b2b7cf0","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/create+slicer+to+a+pivot+table/","title":"Create Slicer to a Pivot Table"},{"content":"   Contents Summary\n1 Draw Slicer while rendering Excel to PDF\n2 Sample Code\n |     Draw Slicer while rendering Excel to PDF     If you have an Excel file which has slicer applied to it and you want to export the Excel to PDF with the slicer settings, Aspose.Cells now supports this by default. You simply export the Excel file with slicer to PDF, the generated PDF will show the slicer applied.\nThe following sample code loads the sample Excel file that contains an existing slicer. It then saves the workbook as output PDF file. The following screenshot compares the source Excel file and the generated PDF file.\nSample Code\nAttachments: Updating-Slicer-using-Aspose.Cells.png (image/png) outputUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SlicerExcelToPDF.jpg (image/jpeg) SampleSlicerChart.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SampleSlicerChart.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"2736009a0fdf7e6965b213333ce340dd","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/draw+slicer+while+rendering+excel+to+pdf/","title":"Draw Slicer while rendering Excel to PDF"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Formatting Slicer\n3 Sample Code\n |     Possible Usage Scenarios     You can format the slicer in Microsoft Excel by setting its number of columns or by setting its style etc. Aspose.Cells also allows you to do this using the Slicer.NumberOfColumns and Slicer.StyleType properties.\nFormatting Slicer\nPlease see the following code, it loads the sample Excel file that contains a slicer. It accesses the slicer and sets its number of columns and style type and saves it as output Excel file. The screenshot shows how the slicer looks after the execution of the sample code.\nSample Code\nAttachments: sampleFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Formatting-Slicer-using-Aspose.Cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"92a9086569a7a3d95c10a680ff70b8c6","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/formatting+slicer/","title":"Formatting Slicer"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Removing Slicer\n3 Sample Code\n |     Possible Usage Scenarios     If you want to remove slicer in Microsoft Excel, just select it and press the *Delete *button. Similarly, if you want to remove it using Aspose.Cells API programmatically, please use the Worksheet.Slicers.Remove() method. It will remove the slicer from the worksheet. Removing Slicer\nThe following sample code loads the sample Excel file that contains an existing slicer. It accesses the slicers and then removes it. Finally, it saves the workbook as output Excel file. The following screenshot shows the slicer that will be removed after the execution of the sample code.\nSample Code\nAttachments: outputRemovingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleRemovingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Removing-Slicer-using-Aspose.Cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"6a997218b32012a21e2697fc8689fce0","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/removing+slicer/","title":"Removing Slicer"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Rendering Slicer\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells supports the rendering of slicer shape. If you convert your worksheet into an image or you save your workbook to PDF or HTML formats, you will see, slicers are rendered properly.\nRendering Slicer\nThe following sample code loads the sample Excel file that contains an existing slicer. It converts the worksheet into an image by setting the print area that covers only the slicer. The flowing image is the output image that shows the rendered slicer. As you can see, slicer has been rendered properly and it looks the same as in the sample Excel file.\nSample Code\nAttachments: outputRenderingSlicer.png (image/png) sampleRenderingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"e922c021831362108457262017254b85","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/rendering+slicer/","title":"Rendering Slicer"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Updating Slicer\n3 Sample Code\n |     Possible Usage Scenarios     If you want to update slicer in Microsoft Excel, select or unselect its items, it will then update the slicer table or pivot table accordingly. Please use Slicer.SlicerCache.SlicerCacheItems to select or unselect slicer items with Aspose.Cells and then call Slicer.Refresh() method to update the slicer table or pivot table. Updating Slicer\nThe following sample code loads the sample Excel file that contains an existing slicer. It unselects the 2nd and 3rd items of the slicer and refreshes the slicer. It then saves the workbook as output Excel file. The following screenshot shows the effect of the sample code on the sample Excel file. As you can see in the screenshot, refreshing the slicer with selected items has also refreshed the pivot table accordingly.\nSample Code\nAttachments: outputUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Updating-Slicer-using-Aspose.Cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"989ed3d71c3ddf686728b76779bfb8f6","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/updating+slicer/","title":"Updating Slicer"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"807f1103625c690bc48bba36cd797779","permalink":"https://roywangt.github.io/cellsnet/developerguide/slicers/","title":"Slicers"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Auto-Populate Smart Marker Data to Other Worksheets if Data is too Large\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes, you want to auto-populate smart marker data to other worksheets if it is too large. Suppose, your data source has 1500000 records. These are too many records for a single worksheet, then you can move the rest of the records to the next worksheet. Auto-Populate Smart Marker Data to Other Worksheets if Data is too Large\nThe following sample code has a data source that has 21 records. We want to show only 15 records in one worksheet, then the rest of the records will automatically move to the second worksheet. Please note, the second worksheet should also have the same smart marker tag and you must call WorkbookDesigner.Process(sheetIndex, isPreserved) method for both sheets. Please see the output Excel file generated by the code for a reference.\nSample Code\nAttachments: outputAutoPopulateSmartMarkerDataToOtherWorksheets.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"12417af8c79e7b8439b43ac206da8f89","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/auto+populate+smart+marker+data+to+other+worksheets+if+data+is+too+large/","title":"Auto Populate Smart Marker Data to Other Worksheets if Data is too Large"},{"content":"   Contents Summary\n1 Copy Style Attribute 1.1 Copying Styles from Cells with Smart Markers\n2 Adding Custom Labels 2.1 Introduction\n2.2 Adding custom Labels to concatenate with the Subtotal rows in Smart Markers\n |     Copy Style Attribute     Sometimes, when using smart markers, you want to copy the style of the cell that contains the smart marker tags. You can use the CopyStyle attribute of the smart marker\u0026amp;rsquo;s tags for this purpose.\nCopying Styles from Cells with Smart Markers\nThis example uses a simple template Microsoft Excel file with two markers in the A2 and B2 cells. The marker pasted in cell B2 uses the CopyStyle attribute, whereas the marker in cell A2 does not. Apply simple formatting (for example, set the font color to red and set the cell fill color to yellow).\nWhen executing the code, Aspose.Cells copies the formatting to all the records in column B but does not keep the formatting in column A.\n\\\nAdding Custom Labels\nIntroduction\nWhile working with Smart Markers\u0026amp;rsquo; grouping data feature, sometimes you need to add your own custom labels to the summary row. You also want to concatenate the Column\u0026amp;rsquo;s name with that Label, e.g \u0026amp;ldquo;Sub Total of Orders\u0026amp;rdquo;. Aspose.Cells provides you Label and LabelPosition attributes, so you may place your custom labels in the Smart Markers while concatenating with the Subtotal rows in grouping data.\nAdding custom Labels to concatenate with the Subtotal rows in Smart Markers\nThis example uses a data file and a template file with a few markers in the cells. When executing the code, Aspose.Cells adds some custom labels to the summary rows for the grouped data.\nAttachments: LabelPosition-Files.zip (application/zip) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SmartMarker_Designer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"8dcda0c1597b9b394b2b98634e2d7f0b","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/formatting+smart+markers/","title":"Formatting Smart Markers"},{"content":"   Contents Summary\n1 Set custom DataSource for WorkbookDesigner 1.1 Sample Code\n |     Set custom DataSource for WorkbookDesigner     Aspose.Cells provides the option to set custom DataSource for WorkbookDesigner. The API provides an overloaded method WorkbookDesigner.SetDataSource which takes the name of the source as the first parameter and the instance of the class that implements ICellsDataTable as the second parameter. The following code snippet demonstrates the use of WorkbookDesigner.SetDataSource method to set the custom DataSource.\nSample Code\nThe implementation of CustomerDataSource, Customer, and CustomerList classes is given below\nThe source and output excel files are attached for reference.\nSource File\nOutput File\nAttachments: WorkingWithContentTypeProperties.jpg (image/jpeg) WorkingWithContentTypeProperties_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SmartMarker1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) dest.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f665cff88654574d54e3313d33216d18","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/set+custom+datasource+for+workbookdesigner/","title":"Set custom DataSource for WorkbookDesigner"},{"content":"   Contents Summary\n1 Show leading apostrophe in cells 1.1 Sample Code\n |     Show leading apostrophe in cells     In Microsoft Excel, the leading apostrophe in the cell\u0026amp;rsquo;s value is hidden. Aspose.Cells provides the feature to display the apostrophe by default. For this, the API provides Workbook.Settings.QuotePrefixToStyle property. This property indicates whether to set the QuotePrefix property when entering string value starting with a single quote to the cell. Setting the Workbook.Settings.QuotePrefixToStyle property to **false **will display the leading apostrophe in the output excel file.\nThe following screenshot shows the output excel file with the visible apostrophe.\nThe following code snippet demonstrates this by adding data with Smart Markers in the source excel file. The source and output excel files are attached for reference.\nSource File\nOutput File\nSample Code\nThe implementation of *DataObject *class is given below\nAttachments: dest.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SmartMarker1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) WorkingWithContentTypeProperties_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) WorkingWithContentTypeProperties.jpg (image/jpeg) AllowLeadingApostrophe.jpg (image/jpeg) AllowLeadingApostropheSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AllowLeadingApostropheSample_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"dc8cec81d52699636a8509fb721c35d0","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/show+leading+apostrophe+in+cells/","title":"Show leading apostrophe in cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Using Formula parameter in Smart Marker field\n3 Sample Code\n |     \\     Possible Usage Scenarios\nSometimes, you want to embed formula in the smart marker field. This article describes how to make use of the *Formula *parameter to embed formula in the smart marker field.\nUsing Formula parameter in Smart Marker field\nThe following sample code embeds the formula in the smart marker field named TestFormula and its data source name is MyDataSource, so the complete field with formula parameter looks like \u0026amp;amp;=MyDataSource.TestFormula(formula) and after the execution of the code, the final output Excel file will have formulas in cells from A1 till A5.\nSample Code\nAttachments: outputUsingFormulaParameterInSmartMarkerField.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"841401281f33e3c68ac91d324f6443a7","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/using+formula+parameter+in+smart+marker+field/","title":"Using Formula parameter in Smart Marker field"},{"content":"Using Image Markers while Grouping Data in Smart Markers\nThe following sample creates a workbook and then adds the following smart marker tags in cells D2, E2 and F2 respectively.\n\u0026amp;amp;=Person.Name(group:normal,skip:1)\n\u0026amp;amp;=Person.City\n\u0026amp;amp;=Person.Photo(Picture:FitToCell)\nThen it fills the data source with data and calls the WorkbookDesigner.Process() method to process smart marker tags. The code uses these images i.e moon.png and moon2.png but you can use any image.\n\\\nAttachments: moon.png (image/png) moon2.png (image/png) image-markers-while-grouping-data.png (image/png) image-markers-while-grouping-data.png (image/png)\n","date":-62135596800,"description":"","objectID":"24ebd37ff9fd1f24eef06ad4bf8c81f6","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/using+image+markers+while+grouping+data+in+smart+markers/","title":"Using Image Markers while Grouping Data in Smart Markers"},{"content":"   Contents Summary\n1 Introduction\n2 Designer Spreadsheet \u0026amp;amp; Smart Markers 2.1 Smart Marker Options\n2.2 Parameters\n2.3 Dynamic Formulas\n3 Using Variable Arrays\n4 Grouping Data 4.1 Parameters 4.1.1 group:normal/merge/repeat\n4.1.2 skip\n4.1.3 subtotalN\n5 Using Anonymous Types or Custom Objects\n6 Image Markers 6.1 Image Parameters\n7 Using Nested Objects\n8 Using Generic List as Nested Object\n9 Using HTML property of Smart Markers\n10 Getting Notifications while Merging Data with Smart Markers\n |     Introduction     Smart markers are used to let Aspose.Cells know what information to place in a Microsoft Excel designer spreadsheet. Smart markers allow you to create templates that contain only specific information and formatting.\nDesigner Spreadsheet \u0026amp;amp; Smart Markers\nDesigner spreadsheets are standard Excel files that contain visual formatting, formulas and smart markers. They can contain smart markers that reference one or more data source, such as information from a project and information for related contacts. Smart markers are written into the cells where you want the information.\nAll smart markers start with \u0026amp;amp;=. An example of a data marker is \u0026amp;amp;=Party.FullName. If the data marker results in more than one item, for example, a complete row, then the following rows are moved down automatically to make room for the new information. Thus sub-totals and totals can be placed on the row immediately after the data marker to make calculations based on the inserted data. To make calculations on the inserted rows, use dynamic formulas.\nSmart markers consist of the data source and field name parts for most information. Special information may also be passed with variables and variable arrays. Variables always fill only one cell whereas variable arrays may fill several. Only use one data marker per cell. Unused smart markers are removed.\nSmart marker may also contain parameters. Parameters allow you to modify how the information is laid out. They are appended to the end …","date":-62135596800,"description":"","objectID":"7867043adb9f8c9c26fe91f8c6a96192","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/using+smart+markers/","title":"Using Smart Markers"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"4761a90e1feda373ddfb71b8c7f95d41","permalink":"https://roywangt.github.io/cellsnet/developerguide/smartmarkers/","title":"Smart Markers"},{"content":"   Contents Summary\n1 Create Table 1.1 Advantages of a List Object\n1.2 Creating a List Object using Microsoft Excel\n1.3 Using Aspose.Cells API\n2 Format a Table 2.1 Formatting a List Object\n |     Create Table     One of the advantages of spreadsheets is that they allow you to create different types of lists, for example, phone lists, task lists, lists of transactions, assets or liabilities. Several users can work together to use, create and maintain various lists.\nAspose.Cells supports creating and managing Lists.\nAdvantages of a List Object\nThere are quite a few advantages when you convert a list of data to an actual List Object\n New rows and columns are automatically included. A total row at the bottom of your list can be easily added to display SUM, AVERAGE, COUNT, etc. Columns added to the right are automatically incorporated into the List object. Charts based on rows and columns will be expanded automatically. Named ranges assigned to rows and columns will be expanded automatically. The list is protected from accidental row and column deletion.  Creating a List Object using Microsoft Excel\n Selecting data range for creating a List object This displays the Create List dialog. Implement the List object for the data and specifying total row (Select Data, then List, followed by Total Row).  Using Aspose.Cells API\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing a worksheet. To create a ListObject in a worksheet, use the ListObjects collection property of the Worksheet class. Each ListObject is, in fact, an object of the ListObjectCollection class, which further provides the Add method for adding a List object and specifying a range of cells for the list.\nAccording to the specified range of cells, …","date":-62135596800,"description":"","objectID":"80f69da201747bba8a2a6ca44bc1fdab","permalink":"https://roywangt.github.io/cellsnet/developerguide/tables/create+and+format+table/","title":"Create and Format Table"},{"content":"Sometimes, you need to find out Query Tables and List Objects related to some External Data Connection. Query Tables are related to External Data Connection object with Connection Id, while List Objects are related to a Query Table.\nFind Query Tables and List Objects related to External Data Connections\nThe following sample code explains how you can find Query Tables and List Objects related to External Data Connection. The code uses the sample excel file which you can download from the provided link. You can also see the output of this sample code at the bottom of this article.\nNow write the following method into your application which is used by the above sample.\nHere is the console output of the above sample code using this sample excel file.\nconnection: AAPL Connection\nquerytable hp?s=AAPL+Historical+Prices\nrefersto: =Sheet1!$Q$1:$W$69\nconnection: BOSL066360W7_SQLEXPRESS Test\nquerytable BOSL066360W7_SQLEXPRESS Test\nTable Table_BOSL066360W7_SQLEXPRESS_Test\nrefersto: Sheet1!A1:B3\nconnection: BOSL066360W7_SQLEXPRESS Test1\nquerytable BOSL066360W7_SQLEXPRESS Test_1\nTable Table_BOSL066360W7_SQLEXPRESS_Test_1\nrefersto: Sheet1!D1:E2\nconnection: UWTI Connection\nquerytable hp?s=UWTI+Historical+Prices\nrefersto: =Sheet1!$H$1:$N$69\nAttachments: sample.xlsm (application/xlsx)\n","date":-62135596800,"description":"","objectID":"8440b642f23ad4ac05f185074395bc66","permalink":"https://roywangt.github.io/cellsnet/developerguide/tables/find+query+tables+and+list+objects+related+to+external+data+connections/","title":"Find Query Tables and List Objects related to External Data Connections"},{"content":"   Contents Summary\n1 Read and Write Table with Query Table Data Source\n |     Read and Write Table with Query Table Data Source     With Aspose.Cells, you can read and write a table which has a QueryTable as Datasource. The support for this feature also exists for XLS files. The following code snippet demonstrates reading and writing such a table by first reading the table and then modifying it to add the totals row.\nThe source and output excel files are attached for reference.\nSource File\nOutput File\nAttachments: SampleTableWithQueryTable.xls (application/vnd.ms-excel) SampleTableWithQueryTable_out.xls (application/vnd.ms-excel)\n","date":-62135596800,"description":"","objectID":"a103d45ab0f83f8f61de8318f67a8cb0","permalink":"https://roywangt.github.io/cellsnet/developerguide/tables/read+and+write+table+with+query+table+data+source/","title":"Read and Write Table with Query Table Data Source"},{"content":"You can set the comment of the Table or List Object inside the worksheet using the ListObject.Comment property. The comment will be visible inside the xl/tables/tableName.xml file.\nSet the Comment of Table or List Object inside the Worksheet\nThe following sample code loads the source excel file, sets the comment of the first table or list object inside the worksheet.\n\\\nAttachments: setting-list-object-comment.png (image/png) source.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"ad4467ac2b216a57f1f5882ecba80007","permalink":"https://roywangt.github.io/cellsnet/developerguide/tables/set+the+comment+of+table+or+list+object+inside+the+worksheet/","title":"Set the Comment of Table or List Object inside the Worksheet"},{"content":"   Contents Summary\n1 Introduction\n2 Using Microsoft Excel\n3 Using Aspose.Cells\n4 Convert Table to Range with Options\n |     Introduction     Sometimes you create a table in Microsoft Excel and do not want to keep working with the table functionality that it comes with. Instead, you want something that looks like a table. To keep data in a table without losing formatting, convert the table to a regular range of data. Aspose.Cells does support this feature of Microsoft Excel for tables and list objects.\nUsing Microsoft Excel\nUse the Convert to Range feature to quickly convert a table to a range without losing formatting. In Microsoft Excel 2007/2010:\n Click anywhere in the table to make sure that the active cell is in a table column. On the Design tab, in the Tools group, click Convert to Range.  Using Aspose.Cells\n\\\nThe table features are no longer available after the table has been converted to a range. For example, row headers no longer include the sort and filter arrows, and structured references (references that use table names) that were used in formulas turn into regular cell references.\nConvert Table to Range with Options\nAspose.Cells provides additional options while converting Table to Range through the TableToRangeOptions class. The TableToRangeOptions class provides LastRow property which allows you to set the last index of the table row. The table formatting will be retained up to the specified row index and the rest of the formatting will be removed.\nThe sample code given below demonstrates the use of TableToRangeOptions class.\n","date":-62135596800,"description":"","objectID":"91fc4c2e378cd55521d70b15e69da9da","permalink":"https://roywangt.github.io/cellsnet/developerguide/tables/tables+and+ranges/","title":"Tables and Ranges"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"93aa8e8051132e25ac864d6fc7427d7a","permalink":"https://roywangt.github.io/cellsnet/developerguide/tables/","title":"Tables"},{"content":"Articles in this section\nAttachments: Using a Common Button to Submit Grid Data-001.png (image/png) Using a Common Button to Submit Grid Data-002.png (image/png) Using a Common Button to Submit Grid Data-003.png (image/png) Using a Common Button to Submit Grid Data-004.png (image/png) showformulas1.png (image/png) showformulas2.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-001.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-002.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-003.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-004.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-005.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-006.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-007.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-008.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-009.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-010.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-011.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-012.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-013.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-014.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-001.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-002.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-003.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-004.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-005.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-006.png (image/png) …","date":-62135596800,"description":"","objectID":"87fca81f755e95dcd76f2bf7a61fe499","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/","title":"Technical Articles"},{"content":"Hyperlinks are useful for accessing information on other worksheets, or on websites. Microsoft Excel lets users add hyperlinks on text in cells, and on images. Image hyperlinks can make navigating a worksheet easier, for example, as next and previous buttons, or logos that link to particular sites. This document explains how to insert image hyperlinks in a worksheet using Aspose.Cells.\nAspose.Cells allows you to add hyperlinks to images in spreadsheets at runtime. It is possible to set and modify the link\u0026amp;rsquo;s screen tip and address. The following sample code illustrates how to add an image hyperlink into a worksheet.\n\\\nAttachments: Add Image Hyperlinks-001.png (image/png) image-hyperlink.png (image/png)\n","date":-62135596800,"description":"","objectID":"d523e7186c5a464a698f1da9881d2fa4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/add+image+hyperlinks/","title":"Add Image Hyperlinks"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add Word Art Text with Built-in Styles\n ||      Possible Usage Scenarios      You can add Word Art Text with Built-in Styles using Aspose.Cells. Please use ShapeCollection.AddWordArt() method for this purpose.\nAdd Word Art Text with Built-in Styles\nThe following sample code adds Word Art texts with different Built-in Styles. Please check the output excel file generated with this code. This is how the output excel file looks in Microsoft Excel.\nAttachments: output.xlsx (application/xlsx) add-word-art-using-cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"a955e4ca97e1cd9cf9f58f6f9f378fc4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/add+word+art+text+with+built-in+styles/","title":"Add Word Art Text with Built-in Styles"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Calculation of Excel 2016 MINIFS and MAXIFS functions\n ||      Possible Usage Scenarios      Microsoft Excel 2016 supports MINIFS and MAXIFS functions. These functions are not supported in Excel 2013 or earlier versions. Aspose.Cells also supports the calculation of these function. The following screenshot illustrates the usage of these functions. Please read the red comments inside the screenshot to know how these functions work.\nCalculation of Excel 2016 MINIFS and MAXIFS functions\nThe following sample code loads the sample excel file and calls the Workbook.CalculateFormula() method to perform the formula calculation via Aspose.Cells and then saves the results in the output PDF.\n\\\nAttachments: support-of-minifs-and-maxifs-functions.png (image/png) sample_MINIFS_MAXIFS.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"eb9178a8e65a58ef3c6267265a99b60f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/calculation+of+excel+2016+minifs+and+maxifs+functions/","title":"Calculation of Excel 2016 MINIFS and MAXIFS functions"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Change the Absolute Path of External Link Data Source File\n ||      Possible Usage Scenarios      If you want to change the absolute path of the external link data source file, then please use the Workbook.AbsolutePath property. Initially, this property will be set to the path from where the excel file was loaded. But you can set it to an empty string or you can set it to some local folder path or remote network path. Whenever you will change this property, the path of external link data source file will also be changed.\nChange the Absolute Path of External Link Data Source File\nThe following sample code loads the sample excel file which contains an external link. It first prints the external link data source which prints the remote path. Then it removes the remote path and prints again, this time, it prints external link data source with the local path. Then it changes the Workbook.AbsolutePath property to a local and remote path and prints the external link data source again and changes are reflected in the console output.\n\\\nHere is the console or debug output after the execution of the above sample code with the sample excel file.\n\\\nExternal Link Data Source: http:\\ws874dmErit\\WebFiles\\Files\\300\\ExternalAccounts.xlsx\nExternal Link Data Source After Removing Remote Path: D:\\Downloads\\ExternalAccounts.xlsx\nExternal Link Data Source After Changing Workbook.AbsolutePath to Local Path: C:\\Files\\Extra\\ExternalAccounts.xlsx\nExternal Link Data Source After Changing Workbook.AbsolutePath to Remote Path: http://www.aspose.com/WebFiles/ExcelFiles/ExternalAccounts.xlsx\nAttachments: sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"485fcc0ec4a691386f054a37766a89d2","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/change+the+absolute+path+of+external+link+data+source+file/","title":"Change the Absolute Path of External Link Data Source File"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Check if Workbook contains hidden External Links 2.1 Sample Code\n2.2 Console Output\n ||      Possible Usage Scenarios      Sometimes, the workbook contains external links which are hidden and cannot be viewed in Microsoft Excel. Aspose.Cells retrieves all the external links whether they are visible or hidden. However, you can check the ExternalLink.IsVisible property to check if the external link is visible or not\nCheck if Workbook contains hidden External Links\nThe following sample code loads the source excel file which contains hidden external links. These links cannot be viewed in Microsoft Excel but they are present inside the workbook. After printing ExternalLink.DataSource and ExternalLink.IsReferred property, it prints the ExternalLink.IsVisible property. In the console output below, you see, all of its external links are not visible.\nSample Code\nConsole Output\nHere is the console output of the above sample code when executed with the given sample excel file.\n\\\nData Source: C:\\International\\DDB\\FAS 133\\Swap Rates\\GS_1M_3M_1_2_5_¥$_(B)IRSwaps_0400.xls\nIs Referred: True\nIs Visible: False\nData Source: C:\\DIST DAY\\MAY TEMPLATES\\030601t.xls\nIs Referred: True\nIs Visible: False\nData Source: C:\\AREVIEW\\2002 Controllable\\Autobrct.xls\nIs Referred: True\nIs Visible: False\nData Source: C:\\CARDSFO\\Main Files\\Rate Forecast\\FY 11\\IFR 11 01 (New Model REPORTS 11.08.07).xls\nIs Referred: True\nIs Visible: False\nAttachments: sample.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"f692768217ac494ded54e576ff971ca6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/check+if+workbook+contains+hidden+external+links/","title":"Check if Workbook contains hidden External Links"},{"content":"In the Japanese** **Calendar, a new era begins with the reign of a new emperor. On 1st May 2019, a new emperor came into power with which the Heisei era ended and the Reiwa era began.\n\\\nAspose.Cells provides a way to convert Gregorian dates to Japanese dates. During this conversion, the changes in the era are also considered. The following code snippet converts the source Excel file containing Gregorian dates to the output PDF with Japanese dates as shown in the image below.\n\\\nAttachments: sampleFilterChars.xlsx (application/vnd.openxmlformats-officedocument.spre) sampleFilterChars.pdf (application/pdf) NoShapes.png (image/png) NoCharts.png (image/png) NoConditionalFormatting.png (image/png) sample.xlsx (application/vnd.openxmlformats-officedocument.spre) JapaneseDates.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) JapaneseDates.pdf (application/pdf) JapaneseDateConversion.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"86d72a14e72c5f303c0924dffbb26f69","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/convert+dates+to+japanese+dates/","title":"Convert Dates to Japanese Dates"},{"content":"   Contents Summary\n1 Convert XLS to XLSX with Combo Chart\n2 Sample Code\n |     Convert XLS to XLSX with Combo Chart     Sometimes converting XLS file with combo charts generated by older versions of MS Excel to XLSX resulted in the chart being flattened. With the release of Aspose.Cells for .NET 19.7, this issue has been addressed and the charts are rendered correctly. The following screenshots compare the results of XLSX files generated before and after the update.\nThe result before the update\nThe result after the update\nSample Code\nAttachments: XlsToXlsxWithChartBefore.jpg (image/jpeg) XlsToXlsxWithChartAfter.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"030ceb146a68bc45eb0a4598beb72945","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/convert+xls+to+xlsx+with+combo+chart/","title":"Convert XLS to XLSX with Combo Chart"},{"content":"Create Style object using CellsFactory class\nThe following sample code creates Style object using CellsFactory class and then sets the Default Style of the workbook. Please download the output excel file to see the results of this code for your reference.\n\\\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f5b0246fb3f7873232696d874fc3a28a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/create+style+object+using+cellsfactory+class/","title":"Create Style object using CellsFactory class"},{"content":"Microsoft Office 2007/2010 replaced menus and toolbars with a Ribbon at the top of the application window. The Ribbon is customizable. Aspose.Cells allows you to\n Keep Ribbon XML without parsing it, Read and write Ribbon XML without parsing it, Get and set Ribbon XML data.  If you want to change the Ribbon XML, you have to parse it with an XML parser or other Ribbon XML tool.\n\\\n\\\n","date":-62135596800,"description":"","objectID":"719458c3f66fdd6413e47b10aff654c8","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/customizing+the+ribbon+xml/","title":"Customizing the Ribbon XML"},{"content":"Office Open XML (also known as OOXML or Microsoft Open XML (MOX)) is an XML-based file format developed by Microsoft for representing office documents like spreadsheets, charts, presentations, and word processing documents.\n\\\nAspose.Cells provides a way to detect the file format of encrypted** Microsoft Open XML** files. To identify the file type, use the FileFormatUtil.DetectFileFormat method as shown below in the code example.\n\\\nAttachments: sample.xlsx (application/vnd.openxmlformats-officedocument.spre) NoConditionalFormatting.png (image/png) NoCharts.png (image/png) NoShapes.png (image/png) sampleFilterChars.pdf (application/pdf) sampleFilterChars.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"5b36a186bc0176c85117cbdce76c6305","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/detect+file+format+of+encrypted+office+open+xml+-+ooxml+files/","title":"Detect File Format of Encrypted Office Open XML - OOXML Files"},{"content":"This document is designed to provide the necessary information how we can extract data from some data source to a splendid grid like control, paste a chart in it and export the report with graph to MS Excel for making analysis, comparisons and printing.\n   Contents Summary\n1 Overview\n2 The Aspose Components\n3 Aspose.Cells Grid Controls\n4 Aspose.Chart\n5 Aspose.Cells\n6 Designing the Interface\n7 Retrieving Data from an XML File 7.1 XML File Structure\n8 Filling the Worksheet of the Aspose.Cells.GridWeb control with Data\n9 Formatting Data in the Cells\n10 Creating Chart based on the Source Range using Aspose.Chart component\n11 Producing the formatted Report (.XLS File) with Graph using Aspose.Cells component\n12 Running the Application\n ||      Overview      There are certain web scenarios that demand both Reporting and Presentations, a combination of parts or objects that can work together well. The article explains how easy it is to design and generate stylish excel reports dynamically in WYSIWYG manner. It exports data from an XML file (You may also utilize other data sources) to Aspose.Cells.GridWeb control which provides you the real environment that allows you to apply rich and appealing format to data and calculate formula results like MS Excel. It also generates a sophisticated chart based on the Worksheet source data using Aspose.Chart component and pastes the chart image into the Sales Report. Finally, the excel report with graph attached is saved to disk using Aspose.Cells component.\nThis article includes the source code and fully featured demo project for such functionality.\nIt allows the users with a detailed perceptive on how to create a business report to input data into a worksheet of the grid and apply some formatting to the cells in the rows and columns, embed a graph based on the source range of data before saving the excel report to the disk.\nThe Aspose Components\nI use three of Aspose‘s components to perform the task with ease. Aspose, The .NET and …","date":-62135596800,"description":"","objectID":"f0fd1bb575858c12619be64fdcf6090e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/dynamically+generate+formatted+excel+reports+with+an+elegant+graph/","title":"Dynamically Generate Formatted Excel Reports with an Elegant Graph"},{"content":"Possible Usage Scenarios\nPlease use LoadOptions.LoadFilter property while filtering data from the workbook. But if you want to filter data from individual worksheets, then you will have to override the LoadFilter.StartSheet method. Please provide appropriate value from the LoadDataFilterOptions enumeration while creating or working with LoadFilter.\nThe LoadDataFilterOptions enumeration has the following possible values.\n All BookSettings CellBlank CellBool CellData CellError CellNumeric CellString CellValue Chart ConditionalFormatting DataValidation DefinedNames DocumentProperties Formula Hyperlinks MergedArea PivotTable Settings Shape SheetData SheetSettings Structure Style Table VBA XmlMap  Filter Objects while loading Workbook\nThe following sample code illustrates how to filter charts from the workbook. Please check the sample excel file used in this code and the output PDF generated by it. As you can see in the output PDF, all charts have been filtered out of the workbook.\nFilter Objects while loading Worksheet\nThe following sample code loads the source excel file and filters the following data from its worksheets using a custom filter.\n It filters Charts from worksheet named NoCharts. It filters Shapes from worksheet named NoShapes. It filters Conditional Formatting from worksheet named NoConditionalFormatting.  Once, it loads the source excel file with a custom filter, it takes the images of all worksheets one by one. Here are the output images for your reference. As you can see, the first image does not have charts, the second image does not have shapes and the third image does not have conditional formatting.\n NoCharts.png NoShapes.png NoConditionalFormatting.png  \\\nThis is how to use the CustomLoadFilter class as per worksheet names.\nAttachments: sampleFilterChars.xlsx (application/vnd.openxmlformats-officedocument.spre) sampleFilterChars.pdf (application/pdf) NoShapes.png (image/png) sample.xlsx (application/vnd.openxmlformats-officedocument.spre) …","date":-62135596800,"description":"","objectID":"6c98cba1d4745ebad0481b3efdadedd9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/filter+objects+while+loading+workbook+or+worksheet/","title":"Filter Objects while loading Workbook or Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find if Data Points are in the Second Pie or Bar on a Pie of Pie or Bar of Pie Chart\n3 Console Output\n ||      Possible Usage Scenarios      You can find if data points of series are in the second pie on Pie of Pie chart or in the bar of Bar of Pie chart using Aspose.Cells. Please use the ChartPoint.IsInSecondaryPlot property to determine it.\nPlease download the sample excel file used in the following sample code and see its console output. If you open the sample excel file, you will find, all the data points which are less than 10 are inside the bar of Bar of Pie chart as also shown by console output.\nFind if Data Points are in the Second Pie or Bar on a Pie of Pie or Bar of Pie Chart\nThe following sample code shows how to find if data points are in the second pie or bar on a Pie of Pie or Bar of Pie chart.\n\\\nConsole Output\nPlease see the following console output generated after the execution of the above sample code with the sample excel file. If IsInSecondaryPlot is false, the data point is inside the Pie or if it is true, then the data point is inside the Bar.\n\\\nValue: 15\nIsInSecondaryPlot: False\nValue: 9\nIsInSecondaryPlot: True\nValue: 2\nIsInSecondaryPlot: True\nValue: 40\nIsInSecondaryPlot: False\nValue: 5\nIsInSecondaryPlot: True\nValue: 4\nIsInSecondaryPlot: True\nValue: 25\nIsInSecondaryPlot: False\nAttachments: PieBars.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"7e95a9bc741c4e544fdec8a49bb6eb14","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/find+if+data+points+are+in+the+second+pie+or+bar+on+a+pie+of+pie+or+bar+of+pie+chart/","title":"Find if Data Points are in the Second Pie or Bar on a Pie of Pie or Bar of Pie Chart"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get or Set the Class Identifier of the Embedded OLE Object 2.1 Sample Code\n2.2 Console Output\n ||      Possible Usage Scenarios      Aspose.Cells provides the OleObject.ClassIdentifier property which you can use to get or set the class identifier of embedded ole object. Ole Object Class Identifiers are actually GUIDs i.e Globally Unique Identifiers. GUID is always 16-bytes long, therefore Class Identifiers are also 16-bytes long. They are often found inside the Windows Registry and provide information to host application about how to open embedded ole object containing various embedded resources inside the client application.\nGet or Set the Class Identifier of the Embedded OLE Object\nThe following screenshot shows the Ole Object Class Identifier i.e GUID which has been read from the sample excel file containing the embedded PowerPoint ole object.\nSample Code\nPlease see the following sample code executed with sample excel file and its console output which prints the Class Identifier of Ole Object i.e GUID. The printed GUID is exactly same as shown inside the screenshot.\n\\\nConsole Output\nThis is the console output of the above sample code when executed with the sample excel file.\nDC020317-E6E2-4A62-B9FA-B3EFE16626F4\nAttachments: sample.xls (application/vnd.ms-excel) class-identifier-of-the-ole-object.png (image/png)\n","date":-62135596800,"description":"","objectID":"013226a82558c4794357423d2f8894e8","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/get+or+set+the+class+identifier+of+the+embedded+ole+object/","title":"Get or Set the Class Identifier of the Embedded OLE Object"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Load the Workbook with specific System Culture Info\n ||      Possible Usage Scenarios      Earlier, you have to change the culture info of the entire thread to deal with numbers and dates in particular culture format, but now Aspose.Cells provides LoadOptions.CultureInfo property which you can use to load your workbook with specific culture info without changing the culture info of the entire thread.\nLoad the Workbook with specific System Culture Info\nThe following sample code shows how to load the workbook with specific system culture Info to deal with dates.\n\\\nThe following sample code shows how to load the workbook with specific system culture Info to deal with numbers.\n\\\n","date":-62135596800,"description":"","objectID":"267ec39252eb41b9456ee246f4f9a60d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/load+the+workbook+with+specific+system+culture+info/","title":"Load the Workbook with specific System Culture Info"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"8427af7205833474ce9c83fea0d91d25","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managing+vba+modules/","title":"Managing VBA Modules"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Propagate Formula in Table or List Object automatically while entering data in new rows\n ||      Possible Usage Scenarios      Sometimes, you want a formula in your Table or List Object automatically propagates to new rows while entering new data. This is the default behavior of Microsoft Excel. In order to achieve the same thing with Aspose.Cells, please use ListColumn.Formula property.\nPropagate Formula in Table or List Object automatically while entering data in new rows\nThe following sample code creates a Table or List Object in such a way that the formula in column B will automatically propagate to new rows when you will enter new data. Please check the output excel file generated with this code. If you enter any number in cell A3, you will see, the formula in cell B2 automatically propagates to cell B3.\n\\\nAttachments: output.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"34b7161bf004427600c410a45816e4ed","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/propagate+formula+in+table+or+list+object+automatically+while+entering+data+in+new+rows/","title":"Propagate Formula in Table or List Object automatically while entering data in new rows"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Set preset WordArt style to the text of the shape\n ||      Possible Usage Scenarios      You can set preset WordArt style to the text of the shape using Aspose.Cells. Please use FontSetting.SetWordArtStyle() or FontSettingCollection.SetWordArtStyle() methods for this purpose.\nSet preset WordArt style to the text of the shape\nThe following sample code creates a text box with some text and then sets preset WordArt style of its text using FontSetting.SetWordArtStyle() method. This is how the output excel file looks in Microsoft Excel.\n\\\nAttachments: set-preset-WordArt-style-to-the-text-of-the-shape.png (image/png) output.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"81b3a85696518c6cd68eb0a5d9887159","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/set+preset+wordart+style+to+the+text+of+the+shape/","title":"Set preset WordArt style to the text of the shape"},{"content":"Possible Usage Scenarios\nScaleCrop and LinksUpToDate are two extended built-in document properties defined inside the OpenXml format. The purpose of these properties are following\n1) ScaleCrop\nThis element indicates the display mode of the document thumbnail. Set this element to TRUE to enable scaling of the document thumbnail to the display. Set this element to FALSE to enable cropping of the document thumbnail to show only sections that fit the display.\nThe possible values for this element are defined by the W3C XML Schema boolean datatype.\n2) LinksUpToDate\nThis element indicates whether hyperlinks in a document are up-to-date. Set this element to TRUE to indicate that hyperlinks are updated. Set this element to FALSE to indicate that hyperlinks are outdated.\nThe possible values for this element are defined by the W3C XML Schema boolean datatype.\nScreenshot showing these properties inside the app.xml file\nSetting ScaleCrop and LinksUpToDate properties of Built-In Document Properties\nThe following sample code sets the ScaleCrop and LinksUpToDate extended built-in document properties of the workbook. Please check the output excel file generated with this code, change its extension to .zip and extract its contents and view the app.xml as shown in the screenshot above.\n\\\nAttachments: setting-scalecrop-and-linksuptodate-properties.png (image/png) output.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"93336c44bec0d8278b4825ca9e57bb7f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/setting+scalecrop+and+linksuptodate+properties+of+built-in+document+properties/","title":"Setting ScaleCrop and LinksUpToDate properties of Built-In Document Properties"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Update ActiveX ComboBox Control\n3 Sample Code\n ||      Possible Usage Scenarios      You can read or write the values of ActiveX ComboBox Control using Aspose.Cells. Please access the ActiveX Control via Shape.ActiveXControl property and check its type via ActiveXControl.Type property, it should return ControlType.ComboBox value and then typecast it into ComboBoxActiveXControl object and read or modify its various properties.\nPlease download the sample excel file used in the following sample code and the output excel file generated by it.\nUpdate ActiveX ComboBox Control\nThe following screenshot shows the effect of the sample code on the sample excel file. As you can see, the ActiveX ComboBox value has been updated to \u0026amp;ldquo;This is combo box control\u0026amp;rdquo;.\n        Sample Code    The following sample code updates the value of ActiveX ComboBox Control present inside the sample excel file.\n\\\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Update-ActiveX-ComboBox-using-Aspose.Cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"7042e460a04e7d3bd5c717cbfb4ca0d8","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/update+activex+combobox+control/","title":"Update ActiveX ComboBox Control"},{"content":"Sometimes you need to read and write large Microsoft Excel files with a huge list of data or content in the worksheet. The LightCells API is useful for creating huge Excel spreadsheets: with it, you need less memory and get better performance and efficiency.\n   Contents Summary\n1 Event Driven Architecture 1.1 Writing a Large Excel File 1.1.1 Writing a Large Excel File:Example\n1.2 Reading Large Excel Files 1.2.1 Reading Large Excel Files:Example\n ||      Event Driven Architecture      Aspose.Cells provides the LightCells API, mainly designed to manipulate cell data one by one without building a complete data model block (using the Cell collection etc.) into memory. It works in an event-driven mode.\nTo save workbooks, provide the cell content cell by cell when saving, and the component saves it to the output file directly.\nWhen reading template files, the component parses every cell and provides their value one by one.\nIn both procedures, one Cell object is processed and then discarded, the Workbook object does not hold the collection. In this mode, therefore, memory is saved when importing and exporting Microsoft Excel file that has a large data set which would otherwise use a lot of memory.\nEven though the LightCells API processes the cells in the same way for XLSX and XLS files (it does not actually load all cells in memory but processes one cell and then discards it), it saves memory more effectively for XLSX files than XLS files because of the different data models and structures of the two formats.\nHowever, for XLS files, to save more memory, developers can specify a temporary location for saving temporary data generated during the Save process. Commonly, using LightCells API to save XLSX file may save 50% or more memory than using the common way, saving XLS may save about 20-40% memory.\nWriting a Large Excel File\nAspose.Cells provide an interface, LightCellsDataProvider, that needs to be implemented in your program. The interface represents the data provider …","date":-62135596800,"description":"","objectID":"adffb89a6d22030d0a7324cee34bb578","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/using+lightcells+api/","title":"Using LightCells API"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Working with the Glow Effect of Shape or Chart\n ||      Possible Usage Scenarios      Aspose.Cells provides the Shape.Glow property along with GlowEffect class to work with the glow effect of shape or chart. The GlowEffect class contains the following properties which can be set to achieve different results as per application requirements.\n GlowEffect.Size GlowEffect.Transparency GlowEffect.Color  Working with the Glow Effect of Shape or Chart\nThe following sample code loads the source excel file and accesses the first shape in the first worksheet and sets the sub-properties of Shape.Glow property and then saves the workbook in output excel file.\n\\\nAttachments: output.xlsx (application/xlsx) sample.xlsx (application/xlsx) glow-effect-of-shape.png (image/png)\n","date":-62135596800,"description":"","objectID":"ebeff3046113c0ea84a841dcf1f396fc","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/working+with+the+glow+effect+of+shape+or+chart/","title":"Working with the Glow Effect of Shape or Chart"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Working with the Reflection Effect of Shape or Chart\n ||      Possible Usage Scenarios      Aspose.Cells provides the Shape.Reflection property along with ReflectionEffect class to work with the reflection effect of shape or chart. The ReflectionEffect class contains the following properties which can be set to achieve different results as per application requirements.\n Blur Direction Distance FadeDirection RotWithShape Size Transparency Type  Working with the Reflection Effect of Shape or Chart\nThe following sample code loads the source excel file and accesses the first shape in the default worksheet and sets different properties of Shape.Reflection class and then saves the workbook in the output excel file.\n\\\nAttachments: sample.xlsx (application/xlsx) output.xlsx (application/xlsx) reflection-effect-of-shape.png (image/png)\n","date":-62135596800,"description":"","objectID":"869ece4bfca2a2f8980748cf314b08ae","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/working+with+the+reflection+effect+of+shape+or+chart/","title":"Working with the Reflection Effect of Shape or Chart"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Working with the Shadow Effect of Shape or Chart\n ||      Possible Usage Scenarios      Aspose.Cells provides the Shape.ShadowEffect property along with ShadowEffect class to work with the shadow effect of shape or chart. The ShadowEffect class contains the following properties which can be set to achieve different results as per application requirements.\n Angle Blur Color Distance PresetType Size Transparency  Working with the Shadow Effect of Shape or Chart\nThe following sample code loads the source excel file and accesses the first shape in the first worksheet and sets the sub-properties of Shape.ShadowEffect property and then saves the workbook in the output excel file.\n\\\nAttachments: sample.xlsx (application/xlsx) output.xlsx (application/xlsx) shadow-effect-of-shape.png (image/png)\n","date":-62135596800,"description":"","objectID":"1d93ccf54650898d39127d14f8ccc5b7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/working+with+the+shadow+effect+of+shape+or+chart/","title":"Working with the Shadow Effect of Shape or Chart"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Working with the ThreeDFormat of Shape or Chart\n ||      Possible Usage Scenarios      Aspose.Cells provides the Shape.ThreeDFormat property along with ThreeDFormat class to work with the 3-D Format of shape or chart. The ThreeDFormat class contains different properties which can be set to achieve different results as per application requirements.\nWorking with the ThreeDFormat of Shape or Chart\nThe following sample code loads the source excel file and accesses the first shape in the first worksheet and sets the sub-properties of Shape.ThreeDFormat property and then saves the workbook in the output excel file.\n\\\nAttachments: ThreeDformat-of-shape.png (image/png) output.xlsx (application/vnd.openxmlformats-officedocument.spre) sample.xlsx (application/vnd.openxmlformats-officedocument.spre) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"7c57dc2a23b5d0ff4594fa995d40063a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/working+with+the+threedformat+of+shape+or+chart/","title":"Working with the ThreeDFormat of Shape or Chart"},{"content":"Articles in this section\nAttachments: Format Worksheet Cells in a Workbook-001.png (image/png) Format Worksheet Cells in a Workbook-002.png (image/png) Convert an Excel Chart to Image-001.png (image/png) Convert an Excel Chart to Image-002.png (image/png) Convert an Excel Chart to Image-003.png (image/png) Convert an Excel Chart to Image-004.png (image/png) Convert an Excel Chart to Image-005.png (image/png) Convert an XLS File to PDF Format-001.png (image/png) Convert an XLS File to PDF Format-002.png (image/png) Convert an XLS File to PDF Format-003.png (image/png) Convert an XLS File to PDF Format-004.png (image/png) Convert an XLS File to PDF Format-005.png (image/png) Convert an XLS File to PDF Format-006.png (image/png) Convert an XLS File to PDF Format-007.png (image/png) Convert an XLS File to PDF Format-008.png (image/png) Convert an XLS File to PDF Format-009.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-001.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-002.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-003.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-004.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-005.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-006.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-007.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-008.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-009.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-010.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-011.png (image/png) Dynamically Generate Formatted Excel Reports with an Elegant Graph-012.png (image/png) Dynamically Generate Formatted Excel Reports with an …","date":-62135596800,"description":"","objectID":"298f1dc83d0049de3c3f9e1ea122624f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/","title":"Aspose.Cells General"},{"content":"   Contents Summary\n1 Access the Text Box by the Name 1.1 Console Output\n ||      Access the Text Box by the Name      Earlier, text boxes are accessed by index from the Workheet.TextBoxes collection but now you can also access the text box by name from this collection. This is a convenient and quick way to access your text box if you already know its name.\nThe following sample code first creates a text box and assigns it some text and name. Then in the next lines, we access the same text box by its name and print its text.\n\\\nConsole Output\nHere is the console output of the above sample code.\nThis is MyTextBox\n","date":-62135596800,"description":"","objectID":"ad3f7cedc3a1f802003f3c94c566705e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/access+the+text+box+by+the+name/","title":"Access the Text Box by the Name"},{"content":"You can add ActiveX controls with Aspose.Cells using the ShapeCollection.AddActiveXControl() method. This method takes a parameter ControlType which tells what type of ActiveX control needs to be added inside a worksheet. It has the following values.\n ControlType.CheckBox ControlType.ComboBox ControlType.CommandButton ControlType.Image ControlType.Label ControlType.ListBox ControlType.RadioButton ControlType.ScrollBar ControlType.SpinButton ControlType.TextBox ControlType.ToggleButton ControlType.Unknown  Once, you have added the ActiveX control inside the shape collection, you can then access the ActiveX control object via Shape.ActiveXControl property and then set its various properties.\nThe following sample code adds Toggle Button ActiveX Control using Aspose.Cells.\n\\\nAttachments: output.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"4578d7a13bf4a5d76261fe740ce0072d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/add+activex+controls+using+aspose.cells/","title":"Add ActiveX Controls using Aspose.Cells"},{"content":"You can use WordArt to add special text effects to spreadsheets. For example, stretch a title, decorate text, make the text fit a preset shape, or apply the affected text to a chart’s plot area as a watermark. The WordArt becomes an object that you can move or position in your spreadsheets to add decoration.\nThe following example shows how to add a WordArt shape as a watermark for the chart plot area.\nThe following example shows how to add a WordArt shape as a watermark for an existing chart’s plot area.\n\\\nAttachments: Add WordArt Watermark to Chart-001.png (image/png) Add WordArt Watermark to Chart-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"87ea31de0fbdec255844e40746ef1d64","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/add+wordart+watermark+to+chart/","title":"Add WordArt Watermark to Chart"},{"content":"Use WordArt to add special text effects to spreadsheets. For example, stretch a title across the top of the file, decorate text, and make text fit a preset shape, or apply text to an Excel sheet as a background watermark. The WordArt becomes an object that you can move or position in spreadsheets to add decoration.\nThe following example shows how to add a WordArt shape to set a background watermark for a worksheet.\n\\\nAttachments: Add WordArt Watermark to Worksheet-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"3d5ceb8bdc6e3e514785562e10420591","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/add+wordart+watermark+to+worksheet/","title":"Add WordArt Watermark to Worksheet"},{"content":"You can add custom labels to data points in the series of the chart. Aspose.Cells provides ChartPoint.DataLabels.Text property to add these custom labels. This article will explain how to use this property to add custom labels to data points in the series of the chart.\nThe following code creates Scatter Chart Connected By Lines With Data Markers and then adds Custom Labels to the Data Points in the Series of the Chart. Each custom label shows the Series Name and Point Name. You can use any other text instead of it.\n\\\nAttachments: Custom-Labels-to-Data-Points.png (image/png) Custom-Labels-to-Data-Points.png (image/png)\n","date":-62135596800,"description":"","objectID":"b3b2cb220f71fdefd72ce5ab167bcdfb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/adding+custom+labels+to+data+points+in+the+series+of+the+chart/","title":"Adding Custom Labels to Data Points in the Series of the Chart"},{"content":"You can change the text alignment of partial text inside TextBox shape using the appropriate Html text.\nAttachments: SampleTextboxExcel2016.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"22fcdba47af4b001e2285f6255cb073e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/applying+text+alignment+to+partial+text+inside+the+textbox/","title":"Applying text alignment to partial text inside the TextBox"},{"content":"Aspose.Cells provides the OleObject.AutoLoad property to refresh the OLE object when the excel file is opened in Microsoft Excel. Because of this property, the OLE object will display the correct OLE image generated by Microsoft Excel.\nThe following sample code loads the sample excel file which has a non-real OLE image. The OLE object is actually a Microsoft Word document but the sample excel file shows the animal image instead of Microsoft Word image. But if you open the output excel file, you will see Microsoft Excel displays the correct OLE image.\n\\\nAttachments: sample.xlsx (application/xlsx) source-excel-file-with-OLE-object-having-unreal-image.png (image/png) output-excel-file-with-OLE-object-having-real-image.png (image/png) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f32ec1bdd4a566fc1541e18f01923fad","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/automatically+refresh+ole+object+via+microsoft+excel+using+aspose.cells/","title":"Automatically refresh OLE object via Microsoft Excel using Aspose.Cells"},{"content":"Aspose.Cells provides Shape.Geometry.ShapeAdjustValues property to make changes to the adjustment points with shapes. In the Microsoft Excel UI, adjustments display as yellow diamond nodes. For example:\n Rounded Rectangle has an adjustment to change the arc Triangle has an adjustment to change the location of the point Trapezoid has an adjustment to change the width of the top Arrows have two adjustments to change the shape of the head and tail  This article will explain the use of Shape.Geometry.ShapeAdjustValues property to change the adjustment value of the different shapes.\nThe below code sample shows how to change adjustment values of the shape.\n\\\nAttachments: Drawing-Shapes-Before-Adjustment.Png (image/png) Drawing-Shapes-After-Adjustment.Png (image/png)\n","date":-62135596800,"description":"","objectID":"232f129583a0cde9e6eff949842ffd9c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/change+adjustment+values+of+the+shape/","title":"Change Adjustment Values of the Shape"},{"content":"You can change the character spacing of excel textbox or shape using the FontSetting.TextOptions.Spacing property.\nThe following sample code changes the character spacing of the text box in an excel file to point 4 and then saves it on disk.\n\\\nAttachments: output-textbox-having-increased-character-spacing.png (image/png) character-spacing.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) input-excel-file-with-sample-textbox.png (image/png)\n","date":-62135596800,"description":"","objectID":"6a68ee84a89657c8c21d9dbe88ca0b89","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/change+character+spacing+of+excel+textbox+or+shape/","title":"Change Character Spacing of Excel TextBox or Shape"},{"content":"Sometimes, you need to copy elements on a worksheet, for example, pictures, charts and other drawing objects, between worksheets. Aspose.Cells supports this feature. Charts, images, and other objects can be copied with the highest degree of precision.\nThis article gives you a detailed understanding of how to copy shapes between worksheets.\n   Contents Summary\n1 Copying a Picture from one Worksheet to Another\n2 Copy a Chart from one Worksheet to Another\n3 Copy Controls and Other Drawing Objects from One Worksheet to Another\n ||      Copying a Picture from one Worksheet to Another      To copy a picture from one worksheet to another, use the Worksheet.Pictures.Add method as shown in the sample code below.\n\\\nCopy a Chart from one Worksheet to Another\nThe following code demonstrates the use of Worksheet.Shapes.AddCopy method to copy a chart from one worksheet to another.\n\\\nCopy Controls and Other Drawing Objects from One Worksheet to Another\nTo copy controls and other drawing objects, use the Worksheet.Shapes.AddCopy method as shown in the example below.\n\\\nAttachments: Copy Shapes between Worksheets-001.png (image/png) Copy Shapes between Worksheets-002.png (image/png) Copy Shapes between Worksheets-003.png (image/png) Copy Shapes between Worksheets-004.png (image/png) Copy Shapes between Worksheets-005.png (image/png) Copy Shapes between Worksheets-006.png (image/png) Copy Shapes between Worksheets-007.png (image/png) Copy-Shapes-between-Worksheets-005b.png (image/png) Copy-Shapes-between-Worksheets-002b.png (image/png) Copy-Shapes-between-Worksheets-004a.png (image/png)\n","date":-62135596800,"description":"","objectID":"e8dc795780524ac1fcfb4db15717e7bd","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/copy+shapes+between+worksheets/","title":"Copy Shapes between Worksheets"},{"content":"Microsoft Excel allows you to copy a sparkline by specifying the data range and location of a sparkline group. Aspose.Cells supports this feature.\nTo copy a sparkline to other cells in Microsoft Excel:\n Select the cell containing the sparkline. Select Edit Data from the Sparkline section of the Design tab. Select Edit Group Location \u0026amp;amp; Data. Specify the data range and location. Click OK.  Aspose.Cells provides the SparklineCollection.Add(dataRange, row, column) method to specify a sparkline group\u0026amp;rsquo;s data range and location. The following sample code loads the source Excel file as shown in the screenshot above, then accesses the first sparkline group and adds data ranges and locations in the sparkline group. Finally, it writes the output Excel file on disk which is also shown in the screenshot above.\n\\\n\\\n\\\n\\\n\\\n\\\n\\\nAttachments: sparklines-source-excel-file.png (image/png) sparklines-output-excel-file.png (image/png)\n","date":-62135596800,"description":"","objectID":"3117d9ccc7f5ef04bd97b1f1e5e325a3","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/copy+sparkline+by+specifying+data+range+and+location+of+sparkline+group/","title":"Copy Sparkline by Specifying Data Range and Location of Sparkline Group"},{"content":"Dynamic (or interactive) charts have the ability to change when you change the scope of data. In other words, the dynamic charts can automatically reflect changes when the data source is changed. In order to trigger the change in the data source, one can use the filtering option of Excel Tables or use a control such as ComboBox or Dropdown list.\nThis article demonstrates the usage of Aspose.Cells for .NET APIs to create dynamic charts using both of the aforementioned approaches.\n   Contents Summary\n1 Using Excel Tables\n2 Using Dynamic Formulas\n ||      Using Excel Tables      Excel tables are referred to as ListObjects in Aspose.Cells\u0026amp;rsquo; perspective, therefore, we will use the term \u0026amp;ldquo;ListObject\u0026amp;rdquo; instead of \u0026amp;ldquo;Table\u0026amp;rdquo; for clarity. Please read in detail on how to create ListObjects with Aspose.Cells for .NET API.\nListObjects provides the in-built functionality to sort \u0026amp;amp; filter the data upon user interaction. Both sorting \u0026amp;amp; filtering options are provided through the drop-down lists which are automatically added to the header row of the ListObject. Due to these features (sorting \u0026amp;amp; filtering), the ListObject seems to be the perfect candidate to serve as the data source to a dynamic chart because when sorting or filtering is changed, the representation of data in the chart will be changed to reflect the current state of the ListObject.\nIn order to keep the demonstration simple to understand, we will create the Workbook from scratch and move forward step by step as outlined below.\n Create an empty Workbook. Access the Cells of the first Worksheet in the Workbook. Insert some data to the cells. Create ListObject based on the inserted data. Create Chart based on the data range of ListObject. Save the result on the disc.  \\\nUsing Dynamic Formulas\nIn case you do not wish to use the ListObject as a data source to the dynamic chart, the other option is to use Excel functions (or formulas) to create a dynamic range of data, and a control (such …","date":-62135596800,"description":"","objectID":"72b45832710ec904a96773031ad6a9c5","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/create+dynamic+charts/","title":"Create Dynamic Charts"},{"content":"Microsoft Excel provides a feature to add Signature Line in Excel workbooks. You can add a Signature Line by clicking the Insert Tab and then selecting Signature Line from the Text group.\nAspose.Cells also provides this feature and has exposed the Picture.SignatureLine property for this purpose. This article will explain how to use this property to add a Signature Line using Aspose.Cells.\nThe following sample code adds a Signature Line using Picture.SignatureLine property and saves the workbook.\n\\\nAttachments: signature-line-using-aspose.cells.png (image/png) signature-line-using-aspose.cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"99feec3a3178ec002f04d80ad3d71512","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/create+signature+line+in+an+excel+workbook+using+aspose.cells/","title":"Create Signature Line in an Excel Workbook using Aspose.Cells"},{"content":"You can set the horizontal alignment of your paragraph text using the TextParagraph.AlignmentType property.\nThe following sample code creates three lines and sets the horizontal alignment of each of them.\n\\\nAttachments: output.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"f292e0672ab7dde9053344b2e17b9021","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/create+textbox+in+which+each+line+is+having+different+horizontal+alignment/","title":"Create TextBox in which each line is having different Horizontal Alignment"},{"content":"This article explains how to create a pie chart with leader lines from scratch while using Aspose.Cells for .NET API. In Excel, the \u0026amp;lsquo;Show leader lines\u0026amp;rsquo; option is set by default so when you create a pie chart in Excel the leader lines are shown. However, while creating a similar chart with Aspose.Cells APIs, you have to explicitly set the Series.HasLeaderLines property.\nTo demonstrate the usage of Aspose.Cells for .NET API to create a pie chart with leader lines, we will first create a new Workbook and input some data that will serve as the series data source. Once the data is in place, we will add a Chart of type ChartType.Pie to the collection of charts and set its different aspects to get the desired chart view.\n\\\n\\\nSo far we have created a pie chart and set its different aspects. Now we are going to turn on the leader lines for the chart. Please note, to show the leader lines, we have to move the data labels a little.\nThe following piece of code turns on the leader lines, refresh the chart and then calculates the data labels\u0026amp;rsquo; positions to move them accordingly.\n\\\nFinally, the following code saves the chart in image format and the workbook in XLSX format.\n\\\n   Resultant Pie Chart         Attachments: PieChartLeaderLines.png (image/png)\n","date":-62135596800,"description":"","objectID":"90df9ca98525299df5f8096ebaf8ccd5","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/creating+pie+chart+with+leader+lines/","title":"Creating Pie Chart with Leader Lines"},{"content":"A waterfall chart is a special type of chart that is normally used to demonstrate how the starting position either increases or decreases. Microsoft Excel has many predefined chart types, including column, line, pie, bar, radar, etc. but the waterfall chart is beyond the basic graphs and can be created using the existing chart types with little or more customization.\nAspose.Cells APIs allows to create a waterfall chart with the help of line chart. The API also allows customizing the chart appearance to give it the shape of the waterfall by setting the Series.UpBars \u0026amp;amp; Series.DownBars properties.\nBelow provided code snippet demonstrates the usage of Aspose.Cells for .NET API to create a waterfall chart from scratch.\n\\\n","date":-62135596800,"description":"","objectID":"bbba613aacde2e87455b14dbee2755b6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/creating+waterfall+chart/","title":"Creating Waterfall Chart"},{"content":"This article explains how to add custom colors to pie chart slices/sectors. By default, pie charts use the Microsoft Excel default template. To use other colors, redefine the colors in the chart.\nTo set a custom color for a pie chart\u0026amp;rsquo;s individual slices or sectors:\n Access the Series object\u0026amp;rsquo;s ChartPoint. Assign the color of your choice using the ChartPoint.Area.ForegroundColor property.  This article also explains how to:\n A chart\u0026amp;rsquo;s category data. A chart title linked to a cell. The chart title font settings. The position of the legend.  \\\nChartPoint.Area.ForegroundColor is not specific to pie charts but it can be used for all types of charts.\nAttachments: Custom-Slice-or-Sector-Colors-in-Pie-Chart.Png (image/png)\n","date":-62135596800,"description":"","objectID":"1676a06c29acbf3ad8194ba3fd52cd0d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/custom+slice+or+sector+colors+in+pie+chart/","title":"Custom Slice or Sector Colors in Pie Chart"},{"content":"Sometimes, the user needs to know if a particular axis exists in the Chart. For example, he wants to know if a Secondary Value Axis exists inside the chart or not. Some charts like Pie, PieExploded, PiePie, PieBar, Pie3D, Pie3DExploded, Doughnut, DoughnutExploded, etc do not have an axis.\nAspose.Cells provides Chart.HasAxis(AxisType axisType, bool isPrimary) method to determine if the chart has a particular axis or not.\nThe following sample code demonstrates the use of Chart.HasAxis(AxisType axisType, bool isPrimary) to determine if the sample chart has Primary and Secondary Category and Value Axis.\n\\\nConsole Output\nThe console output of the code has been shown below which displays true for Primary Category and Value Axis and false for Secondary Category and Value Axis.\nHas Primary Category Axis: True\nHas Secondary Category Axis: False\nHas Primary Value Axis: True\nHas Seconary Value Axis: False\nAttachments: sample-chart.png (image/png)\n","date":-62135596800,"description":"","objectID":"ff9d81753b1a64d42f1941c4b0c3dd7e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/determine+which+axis+exists+in+the+chart/","title":"Determine which Axis exists in the Chart"},{"content":"Microsoft Excel 2013 allows users to wrap or unwrap text inside the Data Labels of the Chart. By default, the text inside the Data Labels of the Chart is in the wrapped state.\nAspose.Cells provides a DataLabels.IsTextWrapped property which you can set True or False to Enable or Disable Text Wrapping of Data Labels respectively.\nThe below code sample shows how to disable text wrapping for the data labels of the chart.\n\\\nAttachments: wrapped-text-in-data-labels.png (image/png) unwrapped-text-in-data-labels.png (image/png)\n","date":-62135596800,"description":"","objectID":"4f8939335c6e5849a85f4297ab4caf83","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/disable+text+wrapping+for+data+labels+of+the+chart/","title":"Disable Text Wrapping for Data Labels of the Chart"},{"content":"Aspose.Cells now provides Chart.SetChartDataRange() method to set up chart easily. Using this method, you will now not need to add series and category axis data separately.\nThe following sample code explains the use Chart.SetChartDataRange() method to set up chart easily.\n\\\n","date":-62135596800,"description":"","objectID":"dd956fd4431145ab1849195ea5fd3d25","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/easy+way+for+chart+setup+using+chart.setchartdatarange+method/","title":"Easy way for Chart Setup using Chart.SetChartDataRange method"},{"content":"Sometimes, you need to know the absolute position of a shape in a worksheet. Aspose.Cells provides the Shape.LeftToCorner and Shape.TopToCorner properties for this purpose. These properties return the absolute position of the shape inside the worksheet in pixels.\nThe following sample code displays the absolute position of the first shape in the worksheet in pixels. The sample code displays the following console output:\nAbsolute Position of this Shape is (320 , 183)\nAttachments: absolute-position-of-the-shape-in-pixel.png (image/png)\n","date":-62135596800,"description":"","objectID":"9efda6a6f9a14378f7abc4a5101dfc6a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/finding+absolute+position+of+shape+inside+the+worksheet/","title":"Finding Absolute Position of Shape inside the Worksheet"},{"content":"Aspose.Cells APIs provide the WorkbookDesigner class to work with Smart Markers where the formatting \u0026amp;amp; formulas are placed in the designer spreadsheets and then processed with WorkbookDesigner class to fill up the data according to specified Smart Markers. It is also possible to create Excel charts by processing Smart Markers, which will require the following steps.\n Creation of designer spreadsheet Processing designer spreadsheet against the specified data source Creation of chart based on populated data     Contents Summary\n1 Creation of Designer Spreadsheet\n2 Processing Designer Spreadsheet\n3 Creation of Chart\n ||      Creation of Designer Spreadsheet      A designer spreadsheet is a simple Excel file created with Microsoft Excel application or Aspose.Cells APIs containing the visual formatting, formulas and smart markers, where the contents can be populated at runtime.\nFor the sake of simplicity, we will create the designer spreadsheet using the Aspose.Cells for .NET API and later process it against a dynamically created data source for demonstration purposes.\n\\\nProcessing Designer Spreadsheet\nIn order to process the designer spreadsheet, one must have a data source that corresponds to the Smart Markers used in the designer spreadsheet. For instance, we have created a Smart Marker entry as \u0026amp;amp;=Sales.Year, that represents the Year column in the DataTable Sales. In case a corresponding column isn\u0026amp;rsquo;t available in the data source, the Aspose.Cells APIs will skip the processing for that particular Smart Marker, and as a result, the data for the particular Smart Marker will not be populated.\nIn order to demonstrate this use case, we will create the data source from scratch and process it against the designer spreadsheet created in the previous step. However, in a real-time scenario, data could already be available for further processing so you can skip the creation of data source if data is already available.\n\\\nThe processing of Smart Markers is quite …","date":-62135596800,"description":"","objectID":"f0963b31f3ca91f930f6113fa53c0bfb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/generate+chart+by+processing+smart+markers/","title":"Generate Chart by Processing Smart Markers"},{"content":"Aspose.Cells provide rich features to manage shapes in the spreadsheet. Sometimes there is a need to get the connection points of a shape for aligning or placing the shapes at the appropriate place. For this purpose, all the connection points are required. The following code can be used to get the list of connection points of a shape by using the Shape.ConnectionPoints property.\nAttachments: Output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SampleTextboxExcel2016.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f2704ecee598121d85841eb1b61d3dde","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/get+connection+points+from+shape/","title":"Get Connection points from shape"},{"content":"You can retrieve the Equation Text of Chart Trendline using Aspose.Cells. Aspose.Cells provides Trendline.DataLabels.Text property which returns the Equation Text of chart trendline. To make use of this property, you will first have to call Chart.Calculate() method.\nThe following screenshot shows the Chart with a Trendline and its Equation Text is shown in Red color. We will retrieve this text using the Trendline.DataLabels.Text property in the following sample code.\nOutput\nThis is the console output of the above sample code.\nEquation Text: y = 8.1333x + 5\nAttachments: Trendline-Equation-shown-in-Red-color.png (image/png)\n","date":-62135596800,"description":"","objectID":"786b14647840df4852eb6d6299fb46ad","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/get+equation+text+of+chart+trendline/","title":"Get Equation Text of Chart Trendline"},{"content":"Sometimes, you want to access a worksheet from a chart\u0026amp;rsquo;s reference. Aspose.Cells provides the Chart.Worksheet property which returns the reference of the worksheet that contains the chart.\nThe following example shows how to use the Chart.Worksheet property. The code first prints the name of the worksheet, then accesses the first chart on the worksheet. It then prints the worksheet name again, using the Chart.Worksheet property.\nBelow is the console output that the sample code results in. As you can see, it prints the same worksheet name both times.\nSheet Name: Portfolio\nChart\u0026amp;rsquo;s Sheet Name: Portfolio\n","date":-62135596800,"description":"","objectID":"ce2c5d0722de95411336b71f125581c7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/get+worksheet+of+the+chart/","title":"Get Worksheet of the Chart"},{"content":"Aspose.Cells APIs allow adding WordArt watermarks on the worksheet in a way that the WordArt becomes an object that you can be moved and positioned on the worksheet. It is also possible to lock the WordArt object for any interaction such as editing, movement \u0026amp;amp; selection. This article explains the usage of Shape.SetLockedProperty method to lock a few aspects of the watermark.\nAspose.Cells APIs allow locking certain aspects of the watermark so that the user interaction could be limited or completely blocked. The following code snippet demonstrates the usage of Aspose.Cells for .NET API to lock selection, movement, editing, and re-sizing of the watermark by creating a spreadsheet from scratch.\n\\\n","date":-62135596800,"description":"","objectID":"0e30d6ec8e935cbef69846aa159bbe40","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/locking+wordart+watermark/","title":"Locking WordArt Watermark"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read Color of the Glow Effect of Shape\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenarios      If you want to read the color of the glow effect of any shape, then please use the Shape.Glow.Color property. It will help you find the various properties relating to the color of the glow effect of the shape.\nRead Color of the Glow Effect of Shape\nPlease see the following sample code and its source excel file and the console output for your reference. The following screenshot shows the glow effect of the shape inside the source excel file when viewed in Microsoft Excel.\nSample Code\nConsole Output\nHere is the console output of the above sample code when executed with the provided source excel file.\nColor: Color [A=222, R=255, G=0, B=0]\nColorIndex: 16711672\nIsShapeColor: True\nTransparency: 0.13\nType: RGB\nAttachments: color-of-glow-effect.png (image/png) sourceGlowEffectColor.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"d51f652e4a63a66327f45f9f80e26046","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/read+color+of+shape%27s+glow+effect/","title":"Read Color of Shape's Glow Effect"},{"content":"Sometimes, you have a linked shape in your Excel file which is linked to some cell. In Microsoft Excel, changing the value of the linked cell also changes the value of the linked shape. This also works fine with Aspose.Cells if you want to save your workbook in XLS or XLSX format. However, if you want to save your workbook in PDF or HTML format, then you will have to call Worksheet.Shapes.UpdateSelectedValue() method to refresh the value of the linked shape.\nExample\nThe following screenshot shows the source Excel file used in the sample code below. It has a linked picture linked to cells A1 to E4. We will change the value of cell B4 with Aspose.Cells and then call Worksheet.Shapes.UpdateSelectedValue() method to refresh the value of the picture and save it in PDF format.\nYou can download the source Excel file and the output PDF from the given links.\nCode\nAttachments: Refresh Values of Linked Objects.png (image/png) LinkedShape.xlsx (image/png) output.pdf (image/png) sampleRefreshValueOfLinkedShapes.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputRefreshValueOfLinkedShapes.pdf (application/pdf) RefreshValueOfLinkedShapes.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"0d463e0db6421ad69c08c34fcc29ac2a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/refresh+values+of+linked+shapes/","title":"Refresh Values of Linked Shapes"},{"content":"Excel application provides the Resize shape to fit text option for Chart\u0026amp;rsquo;s DataLabels in order to increase the size of the shape so that the text fits inside of it.\n   Contents Summary\n1 Resize Chart\u0026amp;rsquo;s Data Label Shape To Fit Text in Microsoft Excel\n2 Resize Chart\u0026amp;rsquo;s Data Label Shape To Fit Text\n ||      Resize Chart\u0026amp;rsquo;s Data Label Shape To Fit Text in Microsoft Excel      This option can be accessed on the Excel interface by selecting any of the data labels on the chart. Right-click and select the Format DataLabels menu. On Size \u0026amp;amp; Properties tab, expand Alignment to reveal the related properties including the Resize shape to fix text option.\nResize Chart\u0026amp;rsquo;s Data Label Shape To Fit Text\nIn order to mimic Excel\u0026amp;rsquo;s feature of resizing data label shapes to fit the text, the Aspose.Cells APIs have exposed the boolean type DataLabels.IsResizeShapeToFitText property. The following piece of code shows the simple usage scenario of DataLabels.IsResizeShapeToFitText property.\n\\\nAttachments: Excel-Resize-Shape-To-Fit-Text.png (image/png) Excel-Resize-Shape-To-Fit-Text.png (image/png) DataLabels-Before.png (image/png) DataLabels-After.png (image/png)\n","date":-62135596800,"description":"","objectID":"e3f260cf055137059220a70af06d5afb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/resize+chart%27s+data+label+shape+to+fit+text/","title":"Resize Chart's Data Label Shape To Fit Text"},{"content":"You can use Aspose.Cells to create rich text custom data label of the chart point. Aspose.Cells provides the DataLabels.Characters() method to return the FontSetting object which can be used to set the font properties of the text like its color, boldness, etc.\nRich Text Custom Data Label of Chart Point\nThe following code accesses the first chart point of the first series, sets its text and then sets the font of the first 10 characters by settings it\u0026amp;rsquo;s color to red and boldness to true.\n\\\n","date":-62135596800,"description":"","objectID":"49dad347755b20181a08df3a453e7da8","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/rich+text+custom+data+label+of+chart+point/","title":"Rich Text Custom Data Label of Chart Point"},{"content":"You can set the line space of the paragraph, its space before and space after using the TextParagraph.LineSpace, TextParagraph.SpaceBefore and TextParagraph.SpaceAfter properties of the TextParagraph class.\nThe following sample code explains the usage of the mentioned properties.\n\\\nAttachments: output.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"e7c1654d6efc2a681bbbb4c88b381512","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/set+line+spacing+of+the+paragraph+in+a+shape+or+textbox/","title":"Set Line Spacing of the Paragraph in a Shape or Textbox"},{"content":"Aspose.Cells allows you to set a gradient, texture, pattern or picture as fill effects for different objects, such as the plot area, chart area, or legend box of a chart. This document shows how to add an image to a chart\u0026amp;rsquo;s background.\nTo achieve this, Aspose.Cells provides the Chart.PlotArea.Area.FillFormat.ImageData property. The following code sample demonstrates the use of Chart.PlotArea.Area.FillFormat.ImageData property to set a picture as a background fill in the chart.\n\\\nAttachments: aspose-logo.png (image/png) output-chart-with-background-image.png (image/png)\n","date":-62135596800,"description":"","objectID":"9d63661cc2e3549478c8cc37edb835e0","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/set+picture+as+background+fill+in+the+chart/","title":"Set Picture as Background Fill in the Chart"},{"content":"If you want to set the text of the chart\u0026amp;rsquo;s legend entry fill to none so that it should not display inside the chart legend then please set the LegendEntry.IsTextNoFill to true.\nThe following sample code sets the text of the chart\u0026amp;rsquo;s second legend entry fill to none. Please download the sample excel file used in this code and the output excel file generated by it for your reference.\nThe following screenshot highlights the effect of this code on sample excel file.\n\\\nAttachments: sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) set-text-of-second-legend-entry-fill-to-none.png (image/png)\n","date":-62135596800,"description":"","objectID":"6e73c9429c47bbf9c2d65d616ef6218e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/set+text+of+chart+legend+entry+fill+to+none+using+aspose.cells/","title":"Set text of chart legend entry fill to none using Aspose.Cells"},{"content":"You can set the Shadow of Text Effects of any Shape or TextBox. Please use the Shape.TextBody property. It presents the setting of the shape\u0026amp;rsquo;s text and returns FontSetting objects. After accessing it, please set the Shadow via FontSetting.TextOptions.Shadow.PresetType.PresetType property. This property is of the type PresetShadowType which has several values. Some of these are\n OffsetDiagonalBottomRight OffsetBottom OffsetDiagonalTopRight InsideLeft InsideCenter PerspectiveDiagonalUpperLeft PerspectiveDiagonalLowerRight  The following code snippet demonstrates the use of FontSetting.TextOptions.Shadow.PresetType.PresetType property to set shadow of text effects of Shape or TextBox.\n\\\nAttachments: output.xlsx (application/vnd.openxmlformats-officedocument.spre) Text-Effects\u0026amp;ndash;Shadow\u0026amp;ndash;Offset-Bottom.png (image/png)\n","date":-62135596800,"description":"","objectID":"1d34f86b1274f3547f4ba46dd919b44f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/setting+shadow+of+text+effects+of+shape+or+textbox/","title":"Setting Shadow of Text Effects of Shape or TextBox"},{"content":"In Microsoft Excel 2013, you can display a cell range for data labels. Aspose.Cells supports this feature.\nCheck-box to Show Cell Range as Data Labels\nTo show the cell range as data labels in Microsoft Excel:\n Select the series data labels and right-click to open the context menu. Select Format Data Labels. Label options are displayed. Select or clear the option Label Contains - Value From Cells.  The sample code below accesses a chart series data labels and sets the DataLabels.ShowCellRange property to true to select the Label Contains - Value From Cells option.\n\\\nAttachments: show-cell-range.png (image/png)\n","date":-62135596800,"description":"","objectID":"5000a8a89fdce83d2a2d7896879e4bc0","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/showing+cell+range+as+the+data+labels/","title":"Showing Cell Range as the Data Labels"},{"content":"Articles in this section\nAttachments: Copy Shapes between Worksheets-001.png (image/png) Copy Shapes between Worksheets-002.png (image/png) Copy Shapes between Worksheets-003.png (image/png) Copy Shapes between Worksheets-004.png (image/png) Copy Shapes between Worksheets-005.png (image/png) Copy Shapes between Worksheets-006.png (image/png) Copy Shapes between Worksheets-007.png (image/png) Copy-Shapes-between-Worksheets-005b.png (image/png) Copy-Shapes-between-Worksheets-002b.png (image/png) Copy-Shapes-between-Worksheets-004a.png (image/png) aspose-logo.png (image/png) output-chart-with-background-image.png (image/png) Add WordArt Watermark to Worksheet-001.png (image/png) Add WordArt Watermark to Chart-001.png (image/png) Add WordArt Watermark to Chart-002.png (image/png) Custom-Slice-or-Sector-Colors-in-Pie-Chart.Png (image/png) wrapped-text-in-data-labels.png (image/png) unwrapped-text-in-data-labels.png (image/png) absolute-position-of-the-shape-in-pixel.png (image/png) Custom-Labels-to-Data-Points.png (image/png) Trendline-Equation-shown-in-Red-color.png (image/png) Refresh Values of Linked Objects.png (image/png) LinkedShape.xlsx (image/png) output.pdf (image/png) show-cell-range.png (image/png) sparklines-source-excel-file.png (image/png) sparklines-output-excel-file.png (image/png) sample-chart.png (image/png) signature-line-using-aspose.cells.png (image/png) PieChartLeaderLines.png (image/png)\n","date":-62135596800,"description":"","objectID":"4ef3b0fe0c53868645c540bae9c6132d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingchartsandshapes/","title":"Managing Charts and Shapes"},{"content":"2-Color Scale and 3-Color Scale Conditional Formattings are added in the same way except they are differed by FormatCondition.ColorScale.Is3ColorScale property. This property is false for 2-Color Scale and true for 3-Color Scale Conditional Formattings.\nThe following sample code adds 2-Color and 3-Color Scale Conditional Formattings. It generates the output excel file.\n\\\nAttachments: 2-3-ColorScale-ConditionalFormattings.png (image/png) output.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"7f5ca2cf194f70b8fb261e120c23e8eb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingconditionalformats/adding+2-color+scale+and+3-color+scale+conditional+formattings/","title":"Adding 2-Color Scale and 3-Color Scale Conditional Formattings"},{"content":"Aspose.Cells APIs provide the means to add \u0026amp;amp; manipulate conditional formatting rules for the Worksheet object. These rules can be tailored in a number of ways to get the desired formatting based on conditions or rules. This article will demonstrate the use of Aspose.Cells for .NET APIs to apply shading to alternate rows \u0026amp;amp; columns with the help of conditional formatting rules and Excel\u0026amp;rsquo;s built-in functions.\nThis article makes use of Excel\u0026amp;rsquo;s built-in functions such as ROW, COLUMN \u0026amp;amp; MOD. Here are some details of these functions for a better understanding of the code snippet provided ahead.\n ROW() function returns the row number of a cell reference. If the reference parameter is omitted, it assumes that the reference is the cell address in which the ROW function has been entered in. COLUMN() function returns the column number of a cell reference. If the reference parameter is omitted, it assumes that the reference is the cell address in which the COLUMN function has been entered in. MOD() function returns the remainder after a number is divided by a divisor, where the first parameter to the function is the numeric value whose remainder you wish to find and the second parameter is the number used to divide into the number parameter. If the divisor is 0, then it will return the #DIV/0! error.  Let\u0026amp;rsquo;s start writing some code to accomplish this goal with the help of Aspose.Cells for .NET API.\n\\\nThe following snapshot shows the resultant spreadsheet loaded in Excel application.\n        In order to apply the shading to alternative columns, all you have to do is to change the formula =MOD(ROW(),2)=0 as =MOD(COLUMN(),2)=0, that is; instead of getting the row index, modify the formula to retrieve the column index.   The resultant spreadsheet, in this case, will look as follow.           Attachments: Alternative_Row_Shading_With_Conditional_Formatting.png (image/png) Alternative_Column_Shading_With_Conditional_Formatting.png (image/png)\n","date":-62135596800,"description":"","objectID":"9b01ff2756ae474dc7b6ffc970a35764","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingconditionalformats/apply+shading+to+alternate+rows+and+columns+with+conditional+formatting/","title":"Apply Shading to Alternate Rows and Columns with Conditional Formatting"},{"content":"Sometimes, you need to generate images of Conditional Formatting DataBars. You can use Aspose.Cells DataBar.ToImage() method to generate these images. This article shows how to generate a DataBar image using Aspose.Cells.\nThe following sample code generates the DataBar image of cell C1. First, it accesses the format condition object of the cell and then from that object, it accesses the DataBar object and uses its ToImage() method to generate the image of the cell. Finally, it saves the image on disk.\n\\\n","date":-62135596800,"description":"","objectID":"ee43ebf9808c34294866e0204e53ef04","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingconditionalformats/generate+conditional+formatting+databars+images/","title":"Generate Conditional Formatting DataBars Images"},{"content":"Sometimes, you need to retrieve icon sets that are used in the conditional formatting of a cell or a range of cells and you want to create an image file based on it. You might require to read the data bars or color scales used in the conditional formatting. Aspose.Cells supports this feature.\nThe following code sample shows how to read icon sets that are used for conditional formatting. With Aspose.Cell\u0026amp;rsquo;s simple API, the icon set\u0026amp;rsquo;s image data is saved as an image.\n\\\n","date":-62135596800,"description":"","objectID":"c9eb42ccfc68ad740a776189618bde84","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingconditionalformats/get+icon+sets%2c+data+bars+or+color+scales+objects+used+in+conditional+formatting/","title":"Get Icon Sets, Data Bars or Color Scales Objects used in Conditional Formatting"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"cee1e119560af81687f03824b9c216ea","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingconditionalformats/","title":"Managing Conditional Formats"},{"content":"Aspose.Cells supports modifying existing SQL Data Connection. The article will explain how to use Aspose.Cells to modify different properties of SQL Data Connection.\nYou can add or see Data Connections inside Microsoft Excel by following Data \u0026amp;gt; Connections menu command.\nSimilarly, Aspose.Cells provides the means to access and modify the Data Connections using Workbook.DataConnections collection.\nModify existing SQL Data Connection using Aspose.Cells\nThe following sample illustrates the use of Aspose.Cells to modify SQL Data Connection of the workbook. You can download the source Excel file used in this code and the output Excel file generated by the code from the following links.\n Source Excel File Output Excel File  \\\nAttachments: DataConnection.xlsx (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"de89a92c02f9c1088ff440833012e819","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingdatabaseconnections/modify+existing+sql+data+connection+using+aspose.cells/","title":"Modify existing SQL Data Connection using Aspose.Cells"},{"content":"Aspose.Cells provides Worksheet.QueryTables collection which returns the object of type QueryTable by index. It has the following two properties\n QueryTable.AdjustColumnWidth QueryTable.PreserveFormatting  These are both boolean values. You can view them in Microsoft Excel via Data \u0026amp;gt; Connections \u0026amp;gt; Properties.\nReading and Writing Query Table of Worksheet\nThe following sample code reads the first QueryTable of the first worksheet and then prints both of the QueryTable properties. Then it sets the QueryTable.PreserveFormatting to true.\nYou can download the source Excel file used in this code and the output Excel file generated by the code from the following links.\n Source Excel File Output Excel File  \\\nConsole Output\nHere is the console output of the above sample code\nAdjust Column Width: True\nPreserve Formatting: False\n**Retrieve query table result range **\nAspose.Cells provides option to read the address i.e. result range of cells for a query table. Following code demonstrates this feature by reading the address of result range for a query table. Sample file can be downloaded here.\nAttachments: before-setting-query-table.png (image/png) Output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) after-setting-query-table.png (image/png) Query TXT.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"0503006e9f126e2020164d67024e171f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingdatabaseconnections/reading+and+writing+query+table+of+worksheet/","title":"Reading and Writing Query Table of Worksheet"},{"content":"Aspose.Cells can help you retrieve SQL connection data. This includes any and all data that is required to make a connection to the SQL server, for example, server URL, username, table name, full SQL query, query type, location of the table, and name of the named range associated with it.\nIn Microsoft Excel, connect to a database by:\n Clicking the Data menu and selecting From Other Sources followed by From SQL Server. Then select Data followed by Connections. Use the Connections wizard to connect to the database and create a database query.  Aspose.Cells provides the Workbook.DataConnections property for retrieving external connections. It returns a collection of ExternalConnection objects in the workbook.\nIf the ExternalConnection object contains SQL connection data, it can be type-caste to a DBConnection object and its properties can be used to retrieve database command, command type, connection description, connection information, credentials, and so on.\n\\\nAttachments: SQL-Connection-Data.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"93f3c3eb3161b15fa7604e7433c9e842","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingdatabaseconnections/retrieving+sql+connection+data/","title":"Retrieving SQL Connection Data"},{"content":"You can access external data connection of any type using the Workbook.DataConnections collection. One type of such data connection is WebQuery. This article will show you how to work with WebQuery data connection. You can create WebQuery data connection in Microsoft Excel using the Data \u0026amp;gt; From Web menu.\nWorking with External Data Connection of type WebQuery\nThe following code shows how to work with external data connection of type WebQuery. It uses the sample excel file which you can download from the provided link. You can also see the console output of this code further below.\n\\\nConsole Output\nHere is the console output of the above code with this sample excel file.\nWeb Query URL: http://www.aspose.com/docs/display/cellsnet/Home\nAttachments: WebQuerySample.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"f0960e74a661590fad45eed4cb240fe9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingdatabaseconnections/working+with+external+data+connection+of+type+webquery/","title":"Working with External Data Connection of type WebQuery"},{"content":"Articles in this section\nAttachments: SQL-Connection-Data.PNG (image/png) DataConnection.xlsx (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"79bc0a8dabe154370c643685948de861","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingdatabaseconnections/","title":"Managing Database Connections"},{"content":"Microsoft Excel allows you to change the Layout of Pivot Table using PivotTable Tools \u0026amp;gt; Design \u0026amp;gt; Report Layout menu commands. You can change the Layout in these three forms\n Show in Compact Form Show in Outline Form Show in Tabular Form  Aspose.Cells also provides PivotTable.ShowInCompactForm(), PivotTable.ShowInOutlineForm() and PivotTable.ShowInTabularForm() methods to change the layout of pivot table in these three forms.\nThe following sample code first shows the Pivot Table in Compact Form, then it shows the Pivot Table in Outline Form and lastly it shows Pivot Table in Tabular Form.\n\\\n","date":-62135596800,"description":"","objectID":"285ea27d625d66cb3589e6f949111fd4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/changing+the+layout+of+pivot+table/","title":"Changing the Layout of Pivot Table"},{"content":"A pivot table is an interactive summary of records. For example, you may have hundreds of invoice entries in a list in a worksheet. A pivot table can total the invoices by customer, product or date. With Microsoft Excel it is possible to quickly re-arrange the information in the pivot table by dragging buttons to a new position.\nA pivot chart is an interactive graphical representation of the data in a pivot table. Pivot charts were introduced in Excel 2000. Using a pivot chart makes it even easier to understand the data since the pivot table creates subtotals and totals automatically.\nAspose.Cells supports pivot tables and pivot charts.\n   Contents Summary\n1 Adding Pivot Tables and Charts 1.1 Preparing to use Aspose.Cells\n1.2 Adding a Pivot Table\n1.3 Adding a Pivot Chart\n ||      Adding Pivot Tables and Charts      Aspose.Cells provides a special set of classes used to create pivot tables. These classes are used to create and set PivotTable objects, which act as a PivotTable object\u0026amp;rsquo;s basic building blocks:\n PivotField, a field in a pivot table report. PivotFields, a collection of all the PivotField objects in a pivot table. PivotTable, a PivotTable report on a worksheet. PivotTables, a collection of all the PivotTable objects on the worksheet.  Preparing to use Aspose.Cells\n Download and install Aspose.Cells:  Download Aspose.Cells. Install it on your development computer. All Aspose components, when installed, work in evaluation mode. The evaluation mode has no time limit and it only injects watermarks into produced documents. To work with the component in its full capacity you do need to have a valid license.   Create a project:  Start Visual Studio.Net. Create a new console application.   Add references: Add reference to the Aspose.Cells component into your project, for example \u0026amp;hellip;\\Program Files\\Aspose\\Aspose.Cells\\Bin\\Net1.0\\Aspose.Cells.dll  Adding a Pivot Table\nTo create a pivot table using Aspose.Cells:\n Add some data to a worksheet cells using a …","date":-62135596800,"description":"","objectID":"e510bc16907ea32148e9f3b6c189c893","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/create+pivot+tables+and+pivot+charts/","title":"Create Pivot Tables and Pivot Charts"},{"content":"Aspose.Cells provides a feature to delete or remove Pivot Table from a Worksheet. You can delete the pivot table using pivot table object or pivot table position. Please use the Worksheet.PivotTables.Remove() method to delete the pivot table using pivot table object and Worksheet.PivotTables.RemoveAt() method to delete pivot table object using its position inside the pivot table collection.\nThe following sample code deletes two pivot tables from the worksheet. First it removes pivot table using Worksheet.PivotTables.Remove() method and then it removes pivot table using Worksheet.PivotTables.RemoveAt() method\n\\\n","date":-62135596800,"description":"","objectID":"74628edfc9475107947823dcf9911481","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/delete+pivot+table+from+a+worksheet/","title":"Delete Pivot Table from a Worksheet"},{"content":"Sometimes, you want to format pivot table cells. For example, you want to apply background color to pivot table cells. Aspose.Cells provides two methods PivotTable.FormatAll() and PivotTable.Format(), which you can use for this purpose.\nPivotTable.FormatAll() applies the style to entire pivot table while PivotTable.Format() applies the style to a single cell of the pivot table.\nThe following sample code formats the entire pivot table with a light blue color and then formats the table\u0026amp;rsquo;s second row yellow.\n\\\nAttachments: Format-PivotTable-1.PNG (image/png) Format-PivotTable-2.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"42ef8dfb9f8e2445f4c0ed2a985b82aa","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/format+pivot+table+cells/","title":"Format Pivot Table Cells"},{"content":"Aspose.Cells provides PivotTable.GetCellByDisplayName() method which you can use to access the cell object by display name of pivot field. This method is useful when you want to highlight or format your pivot field header. This article explains how to retrieve the cell object by the display name of data field and then apply formatting to it.\nGet the Cell object by DisplayName of PivotField of PivotTable\nThe following code accesses the first pivot table of the worksheet and then get cell by display name of second data field of the pivot table. It then changes the fill color and font color of the cell to light blue and black respectively. Below screenshots show how the pivot table looks before and after the execution of the code.\n   Pivot Table - Before              Pivot Table - After           Attachments: PivotTable-Before.PNG (image/png) PivotTable-After.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"7bf1e34afad0416b48d62e89c911402b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/get+the+cell+object+by+displayname+of+pivotfield+of+pivottable/","title":"Get the Cell object by DisplayName of PivotField of PivotTable"},{"content":"You can set different pivot table options using Aspose.Cells. One such option is \u0026amp;ldquo;For empty cells show\u0026amp;rdquo;. Setting this option all empty cells in a pivot table are displayed as a specified string.\n   Contents Summary\n1 Setting Pivot Table Option in Microsoft Excel\n2 Setting Pivot Table Option Using Aspose.Cells\n ||      Setting Pivot Table Option in Microsoft Excel      To find and set this option in Microsoft Excel:\n Select a pivot table and right-click. Select PivotTable Options. Select the Layout \u0026amp;amp; Format tab. Select the For empty cells show option and specify a string.  Setting Pivot Table Option Using Aspose.Cells\nAspose.Cells provides the PivotTable.DisplayNullString and PivotTable.NullString properties for setting the \u0026amp;ldquo;For empty cells show\u0026amp;rdquo; pivot table option.\n\\\nAttachments: For-empty-cells-show.png (image/png)\n","date":-62135596800,"description":"","objectID":"0fc4e9970eba807e33d4883de3fef784","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/setting+pivot+table+option+-+for+empty+cells+show/","title":"Setting Pivot Table Option - For Empty Cells Show"},{"content":"Aspose.Cells provides the PivotTable.IsExcel2003Compatible property which you can use to specify whether the PivotTable is compatible for Excel2003 while refreshing PivotTable. If true, a string must be less than or equal to 255 characters, so if the string is greater than 255 characters, it will be truncated. If false, a string will not have the aforementioned restriction. The default value is true.\nSpecify whether the PivotTable is compatible for Excel2003 while refreshing PivotTable\nThe following sample code explains the usage of PivotTable.IsExcel2003Compatible property. The original string is 383 characters long. But when PivotTable.IsExcel2003Compatible property is set true and pivot table is refreshed, the data of cell B5 of the pivot table is truncated and it becomes 255 characters long. However, when PivotTable.IsExcel2003Compatible property is set false and pivot table is again refreshed, the data of cell B5 of the pivot table is not truncated and remains 383 characters long. Please download the sample excel file used in this code, output excel file generated by it and its console output for your reference. Please also read the comments inside the code for better understanding of this property.\n\\\nAttachments: sample-pivot-table.xlsx (application/unknown) output.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"013424ad49dd0cc7fefe1ae99a7bdf39","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/specify+whether+the+pivottable+is+compatible+for+excel2003+while+refreshing+pivottable/","title":"Specify whether the PivotTable is compatible for Excel2003 while refreshing PivotTable"},{"content":"Sometimes, user needs to specify the absolute position of the pivot items, Aspose.Cells API has exposed few new properties and a method to achieve user requirement.\n Added PivotItem.Position property that can be used to specify the position index in all the PivotItems regardless of the parent node. Added PivotItem.PositionInSameParentNode property that can be used to specify the position index in the PivotItems under the same parent node. Added PivotItem.Move(int count, bool isSameParent) method in order to move the item up or down based on the count value, where count is the number of position to move the PivotItem up or down. If the count value is less than zero, the item will be moved up where as if the count value is larger than zero, the PivotItem will move down, Boolean type isSameParent parameter specify whether the moving operation has to be performed in the same parent node or not. Obsoleted the PivotItem.Move(int count) method therefore it is suggested to use the newly added method PivotItem.Move(int count, bool isSameParent) instead.  The following sample code creates a Pivot Table and then it specifies the Pivot Items positions in the same parent node. You can download the source Excel and output Excel files for your reference. If you open the output Excel file, you will see the Pivot Item \u0026amp;ldquo;4H12\u0026amp;rdquo; is at 0th position in parent \u0026amp;ldquo;K11\u0026amp;rdquo; and \u0026amp;ldquo;DIF400\u0026amp;rdquo; is at 3rd position. Similarly, CA32 is at position 1 and AAA3 is at position 2\n\\\nPlease note, it is necessary to call the PivotTable.RefreshData and PivotTable.CalculateData methods before using PivotItem.Position, PivotItem.PositionInSameParentNode properties and PivotItem.Move(int count, bool isSameParent) method.\nAttachments: source.xlsx (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"58f9cd98ba3fdf0beec213585426f867","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/specifying+the+absolute+position+of+the+pivot+item/","title":"Specifying the Absolute Position of the Pivot Item"},{"content":"This section includes following articles\nAttachments: Create Pivot Tables and Pivot Charts-001.png (image/png) Create Pivot Tables and Pivot Charts-002.png (image/png) Create Pivot Tables and Pivot Charts-003.png (image/png) Create Pivot Tables and Pivot Charts-004.png (image/png) Format-PivotTable-1.PNG (image/png) Format-PivotTable-2.PNG (image/png) For-empty-cells-show.png (image/png) source.xlsx (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"39288867b9d84f3bb62ee0695027362e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingpivottablesandpivotcharts/","title":"Managing Pivot Tables and Pivot Charts"},{"content":"Normally, you add values inside the Table or List Object using Cell.PutValue() method. But sometimes, you might need to add values inside the Table or List Object using the row and column offsets.\nIn order to access Table or List Object from a cell, use the Cell.GetTable() method. To add values inside it using the row and column offsets, use the ListObject.PutCellValue method.\nThe following screenshot shows the source Excel file used inside the code. It contains the empty table and highlights the cell D5 which lies inside the table. We will access this table from cell D5 using Cell.GetTable() method and then add the values inside it using both Cell.PutValue() and ListObject.PutCellValue methods.\n        The following screenshot shows the output Excel file generated by the code. As you can see cell D5 has a value and cell F6 which is at the offset 2,2 of the table has a value.            Sample Code    The following sample code loads the source Excel file as shown in the above screenshot and adds values inside the table and generates the output Excel file as shown above.\n\\\nAttachments: source-excel-file-with-table.png (image/png) output-excel-file-with-table.png (image/png) output-excel-file-with-table.png (image/png) source-excel-file-with-table.png (image/png)\n","date":-62135596800,"description":"","objectID":"613c0dcae863824633ffd9ec55b9bcf5","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/accessing+table+from+cell+and+adding+values+inside+it+using+row+and+column+offsets/","title":"Accessing Table from Cell and Adding Values inside it using Row and Column Offsets"},{"content":"Sometimes, you want to add conditional icons next to the text in a cell to make data more meaningful to readers. You want to use some of the conditional formatting icon types but without applying conditional formatting to cells. Aspose.Cells supports the feature.\nThe following code sample shows how to add conditional icons set with the Cell Text.\n\\\nAttachments: addcondiconsset.png (image/png) addcondiconsset.png (image/png)\n","date":-62135596800,"description":"","objectID":"7c8bd26f7fdcabb7f9fd813c52fa4c3a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/add+conditional+icons+set+with+the+cell+text/","title":"Add Conditional Icons Set with the Cell Text"},{"content":"Microsoft Excel lets users customize the look and feel of spreadsheets to a great extent. It is even possible to add background pictures to comments.\nComments are added to cells to record comments, anything from the details of how a formula is worked, where a value comes from or questions from reviewers. Adding a background image can be an aesthetic choice, or be used to strengthen branding.\n   Contents Summary\n1 Add Picture to Comment in Microsoft Excel\n2 Add Picture to Comment using Aspose.Cells\n ||      Add Picture to Comment in Microsoft Excel      With Microsoft Excel 2007, it is possible to have an image as the background to a cell comment. In Excel 2007, this is accomplished (supposing the comment has already been added) this way:\n Right-click the cell which contains the comment. Choose Show/Hide Comments and clear any text from the comment. Click on the border of the comment to select it. Choose Format, then Comment. On the Colors and Lines tab, click the arrow for Color. Click Fill Effects. On the Picture tab, click Select Picture. Locate and select the picture Click OK.  Add Picture to Comment using Aspose.Cells\nAspose.Cells provides this valuable feature.\nThe sample code below creates an XLSX file from scratch, and adds a comment with a picture background to cell A1.\n\\\nAttachments: Add a Picture to an Excel Comment-001.png (image/png) comment-picture.png (image/png)\n","date":-62135596800,"description":"","objectID":"432ad1da0d6fc7dd8c4f90396e06cad2","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/add+a+picture+to+an+excel+comment/","title":"Add a Picture to an Excel Comment"},{"content":"Aspose.Cells supports converting Microsoft Excel oriented HTML into XLS/XLSX format. It means, the HTML generated by Microsoft Excel can be converted back to XLS/XLSX format using Aspose.Cells.\nSimilarly, if there is some simple HTML, Aspose.Cells can convert it into HTML Rich Text. Aspose.Cells provides Cell.HtmlString property which can take such a simple HTML and convert it to formatted cell text.\nBelow code sample shows you how to add HTML rich text inside the cell. Please see the screenshot of the output Excel file.\n\\\nAttachments: HTML-formatted-text.png (image/png)\n","date":-62135596800,"description":"","objectID":"b4f95090bdc103b9f6fd1cd19085fbf8","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/adding+html+rich+text+inside+the+cell/","title":"Adding HTML Rich Text inside the Cell"},{"content":"Microsoft Excel provides a feature that allows you to auto-size the height of a cell according to its content. The feature is called auto-fit rows. Microsoft Excel doesn\u0026amp;rsquo;t set auto-fit operation on merged cells natively. Sometimes the feature becomes vital for a user who really needs to implement auto-fit rows on merged cells too.\nAspose.Cells supports this feature through the AutoFitterOptions API. Using this API, it is possible to auto-fit rows in a worksheet including merged cells.\n\\\nAttachments: AutoFit Rows for Merged Cells-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"f8ca0e04c7cd96548d14f196de01c878","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/autofit+rows+for+merged+cells/","title":"AutoFit Rows for Merged Cells"},{"content":"Sometimes you need to calculate the width and height of cell value to fit the cell value inside the cell. Aspose.Cells provides Cell.GetWidthOfValue() and Cell.GetHeightOfValue() methods for this purpose. By using these methods you can calculate width and height of the cell value and then set the width of the column and height of the row of that cell respectively and this will then adjust or fit the cell value inside the cell.\nAlternatively, you can also autofit rows and columns of your cell or range of cells using Aspose.Cells APIs.\nThe following code explains the use of Cell.GetWidthOfValue() and Cell.GetHeightOfValue() methods.\n\\\n","date":-62135596800,"description":"","objectID":"d5166a2237471f9e30f4ea9addcca1bf","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/calculate+the+width+and+height+of+the+cell+value+in+unit+of+pixels/","title":"Calculate the Width and Height of the Cell Value in Unit of Pixels"},{"content":"Sometimes, you need to copy data from one range of cells to another, copying the data only, not the formatting. Aspose.Cells offers this feature.\nThis article provides a sample code that uses Aspose.Cells to copy a range of data.\nThis example shows how to:\n Create a workbook. Add data to cells in the first worksheet. Create a Range. Create a Style object with specified formatting attributes. Apply the style formatting to the range. Create another range of cells. Copy data of the first range to this second range.  \\\n","date":-62135596800,"description":"","objectID":"472898ce8619b993b87d39ef5f22b1e1","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/copy+range+data+only/","title":"Copy Range Data Only"},{"content":"Copy Range Data Only explained how to copy the data from a range of cells to another range. Specifically, it process applied a new set of styles to the copied cells. Aspose.Cells can also copy a range complete with formatting. This article explains how.\nAspose.Cells provides a range of classes and methods for working with ranges, for example, CreateRange(), StyleFlag and ApplyStyle().\nThis example:\n Creates a workbook. Fills a number of cells in the first worksheet with data. Creates a Range. Creates a Style object with specified formatting attributes. Applies the style to the data range. Creates a second range of cells. Copies data with the formatting from the first range to the second range.  \\\n","date":-62135596800,"description":"","objectID":"ee7c1265e8b8644127edac8d9daf2878","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/copy+range+data+with+style/","title":"Copy Range Data with Style"},{"content":"Copy Range Data Only and Copy Range Data with Style explained how to copy data from a range to another on its own or complete with formatting. It is also possible to copy only the formatting. This article shows how.\nThis example creates a workbook, populates it with data and copies a range\u0026amp;rsquo;s style only.\n Create a range. Create a Style object with specified formatting attributes. Apply the style formatting to the range. Create a second range of cells. Copy the first range\u0026amp;rsquo;s formatting to the second range.  \\\n","date":-62135596800,"description":"","objectID":"199eb73528b8f0dee7e48c87919439ee","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/copy+range+style+only/","title":"Copy Range Style Only"},{"content":"Sometime user needs to copy row heights of source range to destination range. Aspose.Cells provides PasteType.RowHeights enum for this purpose. When you will set PasteOptions.PasteType property with PasteType.RowHeights enum then heights of all rows inside the source range will be copied to destination range.\nThe following sample code explains how to use PasteType.RowHeights enum to copy row heights of source range into destination range. Once you will open the output excel file generated by this code in Microsoft Excel, you will see that destination range row heights are exactly the same as source range row heights.\n\\\n","date":-62135596800,"description":"","objectID":"9dabad12365d5b41e66e929888839620","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/copy+row+heights+of+source+range+to+destination+range/","title":"Copy Row Heights of Source Range to Destination Range"},{"content":"Aspose.Cells APIs provide the facility to copy rows and columns within or between the workbooks. While copying row or column, all the data is copied along with the styling, formulas (with updated references) and resulting values, comments, cell styles, hidden cells, images and drawing objects.\n   Contents Summary\n1 Copying Rows 1.1 Copying Single Row\n1.2 Copying Multiple Rows\n2 Copying Columns 2.1 Copying Single Column\n2.2 Copying Multiple Columns\n ||      Copying Rows      Copying Single Row\nThe following example shows how to copy a single row in a worksheet. The example uses a Microsoft Excel spreadsheet as input and copies the first row to the next 10 rows in the same worksheet.\n\\\nCopying Multiple Rows\nYou can also copy multiple rows onto a new destination while using the Cells.CopyRows method which takes an additional parameter of type integer to specify the number of source rows to be copied.\n\\\nCopying Columns\nCopying Single Column\nThe following example shows how to copy a column in a worksheet. This example uses an existing spreadsheet as input to the process and copies the first column to the next 10 columns using two different approaches.\n\\\nCopying Multiple Columns\nSimilar to Cells.CopyRows method, the Aspose.Cells APIs also provide the Cells.CopyColumns method in order to copy multiple source columns to a new location.\n\\\nAttachments: Copy Rows and Columns-003.png (image/png) Copy Rows and Columns-004.png (image/png) Copy Rows and Columns-005.png (image/png) Copy Rows and Columns-004.png (image/png) Copy Rows and Columns-001.png (image/png) Copy Rows and Columns-002.png (image/png) Copy Rows and Columns-003.png (image/png) Copy Rows and Columns-006.png (image/png) Copy Rows and Columns-007.png (image/png) Copy Rows and Columns-008.png (image/png) Copy Rows and Columns-002.png (image/png) Copy Rows and Columns-004.png (image/png) Copy Rows and Columns-003.png (image/png)\n","date":-62135596800,"description":"","objectID":"b2ffea60097247b7ca074250e20fbfbf","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/copy+rows+and+columns/","title":"Copy Rows and Columns"},{"content":"It is possible to delete all blank rows and columns from a worksheet. This is useful when, for example, generating a PDF file from a Microsoft Excel file and want to convert only rows and columns that contain data.\nUse the following Aspose.Cells methods to delete empty rows and columns:\n To delete blank rows, use the Cells.DeleteBlankRows() method. To delete blank columns, use the Cells.DeleteBlankColumns() method.     Contents Summary\n1 Deleting Blank Rows\n2 Deleting Blank Columns\n ||      Deleting Blank Rows      \\\nDeleting Blank Columns\n\\\n","date":-62135596800,"description":"","objectID":"d4ca470b28e023fbb3700aff66f75170","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/delete+blank+rows+and+columns+in+a+worksheet/","title":"Delete Blank Rows and Columns in a Worksheet"},{"content":"This article provides information on how to get merged cell areas in a worksheet.\nAspose.Cells allows you to get merged cell areas in a worksheet. You can unmerge (split) them too. This article shows the simplest code using Aspose.Cells API to perform the task.\nThe component provides the Cells.MergedCells attribute which can get an ArrayList of merged cell areas. The following code sample shows you how to detect merged cells in a worksheet.\n\\\nAttachments: Detect Merged Cells in a Worksheet-001.png (image/png) Detect Merged Cells in a Worksheet-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"a17d2494a815a5a538d5dd10593e6085","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/detect+merged+cells+in+a+worksheet/","title":"Detect Merged Cells in a Worksheet"},{"content":"Aspose.Cells now provides the Style.QuotePrefix property to find if the cell value starts with a single quote mark. Before this property, there was no way to distinguish between strings like sample and \u0026amp;lsquo;sample etc.\nThe following sample code explains that the strings like sample and \u0026amp;lsquo;sample cannot be differentiated with Cell.StringValue property. Therefore we must use Style.QuotePrefix property to distinguish them.\n\\\n","date":-62135596800,"description":"","objectID":"0b3709325dc5177b1f72029e0cdfcd98","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/find+if+the+cell+value+starts+with+single+quote+mark/","title":"Find if the cell value starts with single quote mark"},{"content":"Aspose.Cells provides a method Cell.GetStringValue() which can be used to get the string value of the cell with or without any formatting. Suppose, you have a cell with value 0.012345 and you have formatted it to display two decimal places only. It will then display as 0.01 in Excel. You can retrieve string values both as 0.01 and as 0.012345 using the Cell.GetStringValue() method. It takes CellValueFormatStrategy enum as a parameter which has the following values\n CellValueFormatStrategy.CellStyle CellValueFormatStrategy.DisplayStyle CellValueFormatStrategy.None  The following sample code explains the use of Cell.GetStringValue() method.\n\\\n","date":-62135596800,"description":"","objectID":"d964fe9494f70c2737004908da5df269","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/get+cell+string+value+with+and+without+formatting/","title":"Get Cell String Value with and without Formatting"},{"content":"You can use Aspose.Cells to get the validation applied to a cell. Aspose.Cells provides the Cell.GetValidation() method for this purpose. If there is no validation applied on the cell, it returns null.\nSimilarly, you can use Worksheet.Validations.GetValidationInCell method to acquire the validation applied to a cell by providing its row and column indices.\nBelow code sample, shows you how to get validation applied on a cell.\n\\\nAttachments: Validation-applied-on-cell-C1.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"18d38caa86ca47502cc494843e6b7589","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/get+validation+applied+on+a+cell/","title":"Get Validation Applied on a Cell"},{"content":"An enumerator is an object that provides the ability to traverse a container or a collection. Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection, whereas IEnumerable is an interface that defines one method GetEnumerator which returns an IEnumerator interface, this, in turn, allows read-only access to a collection.\nAspose.Cells APIs provide a bunch of enumerators however, this article mainly discusses the three types as listed below.\n Cells Enumerator Rows Enumerator Columns Enumerator     Contents Summary\n1 How to use Enumerators 1.1 Cells Enumerator\n1.2 Rows Enumerator\n1.3 Columns Enumerator\n2 Where to use Enumerators 2.1 Using Display Range\n2.2 Using MaxDataRow \u0026amp;amp; MaxDataColumn\n3 Conclusion\n ||      How to use Enumerators      Cells Enumerator\nThere are various ways to access the Cells Enumerator, and one can use any of these methods based on the application requirements. Here are the methods that return the cells enumerator.\n Cells.GetEnumerator Row.GetEnumerator Range.GetEnumerator  All of the above-mentioned methods return the enumerator that allows traversing the collection of cells which have been initialized.\nWhile traversing the cells, the collection should not be modified (operations that will cause a new Cell to be instantiated or existing Cell to be deleted). Otherwise, the enumerator may not be able to traverse all cells correctly (some elements may be traversed repeatedly or skipped).\nThe following code example demonstrates the implementation of the IEnumerator interface for a Cells collection.\n\\\nRows Enumerator\nThe Rows Enumerator can be accessed while using the RowCollection.GetEnumerator method. The following code example demonstrates the implementation of the IEnumerator interface for RowCollection.\n\\\nColumns Enumerator\nThe Columns Enumerator can be accessed while using the ColumnCollection.GetEnumerator method. The following code example demonstrates the implementation of the …","date":-62135596800,"description":"","objectID":"a411f219fbbd997f7e75e87a0dfc3a2b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/how+and+where+to+use+enumerators/","title":"How and Where to Use Enumerators"},{"content":"Normally, named ranges are rectangular with cells continuous and adjacent to each other. But sometimes, you may need to use a non-sequential cell range in which cells are not adjacent. Aspose.Cells supports creating a named range with non-adjacent cells.\nThe code sample below shows how to create a named non-sequential range with Aspose.Cells for .NET.\n\\\n","date":-62135596800,"description":"","objectID":"775d4f059cc79f2435700c63c249bdc1","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/implementing+non-sequential+ranges/","title":"Implementing Non-Sequential Ranges"},{"content":"Sometimes you have an empty picture and need to show data or contents in the picture by setting a cell reference in the Formula Bar. Aspose.Cells supports this feature (Microsoft Excel 2010).\nInserting a Picture Based on Cell Reference\nAspose.Cells supports displaying the contents of a worksheet cell in an image shape. You can link the picture to the cell that contains the data that you want to display. Since the cell or cell range is linked to the graphic object, changes that you make to the data in that cell or cell range automatically appear in the graphic object. Add a picture to the worksheet by calling the AddPicture method of the ShapeCollection collection (encapsulated in the Worksheet object). Specify the cell range by using the Formula attribute of the Picture object.\nCode Example\nAttachments: referencedpic.png (image/png)\n","date":-62135596800,"description":"","objectID":"4d89181541943e7189f595dbc27c7526","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/insert+a+picture+based+on+cell+reference/","title":"Insert a Picture Based on Cell Reference"},{"content":"When creating a new worksheet, or working with an existing worksheet, you might need to add extra rows or columns to accommodate data. At other times, you might need to delete rows or columns from specified positions in the worksheet.\nAspose.Cells offers two methods for inserting and deleting rows: Cells.InsertRows and Cells.DeleteRows. These methods are optimized for performance and do the job very quickly.\nTo insert or remove a number of rows, we recommend that you always use the Cells.InsertRows and Cells.DeleteRows methods instead of using the Cells.InsertRow or DeleteRow methods in a loop.\nAspose.Cells works in the same way as Microsoft Excel does. When rows or columns are added, the worksheet content is shifted down and to the right. When rows or columns are removed, the worksheet content is shifted up or to the left. Any references in other worksheets and cells are updated when rows are added or removed.\n\\\n","date":-62135596800,"description":"","objectID":"69cfb61c947c10f0331b4b8e194aac51","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/insert+or+delete+rows+in+an+excel+worksheet/","title":"Insert or Delete Rows in an Excel Worksheet"},{"content":"You can use Aspose.Cells to merge or split a range of cells. Aspose.Cells provides the Range.Merge() and Range.UnMerge() methods for this purpose. This article explains how to merge a range of cells into a single cell.\nExample\nThe following sample code first creates a range - A1:D4 - then merges the cells in the range into a single cell using the Range.Merge() method. Similarly, you can split cells by creating a range and calling the Range.UnMerge() method.\n\\\nAttachments: output-of-merging-cells.png (image/png) output-of-merging-cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"bf66348be70788e53470820e1773ad04","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/merge+or+unmerge+range+of+cells/","title":"Merge or Unmerge Range of Cells"},{"content":"This article shows how to move a range of cells in a worksheet.\nThe following code sample shows you how to move range of cells in a worksheet.\n\\\nAttachments: Move Range of Cells in a Worksheet-001.png (image/png) Move Range of Cells in a Worksheet-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"a3ca3856d99a37d107963728c3c87fb9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/move+range+of+cells+in+a+worksheet/","title":"Move Range of Cells in a Worksheet"},{"content":"Populating a spreadsheet with data first by row and then by column improves the overall performance.\nPutting data in the sequence A1, B1, A2, B2 is faster than A1, A2, B1, B2. If there are many cells in a worksheet and you follow the second sequence, that is, you\u0026amp;rsquo;re filling the data row by row, this tip can make the program much faster.\n\\\n","date":-62135596800,"description":"","objectID":"f87248c5556ae082cb2c8cd2524888ab","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/populate+data+first+by+row+then+by+column/","title":"Populate Data First by Row then by Column"},{"content":"Needing to read cell values in multiple threads simultaneously is a common requirement. This article explains how to use Aspose.Cells for this purpose.\nTo read cell values in more than one thread simultaneously, set Worksheet.Cells.MultiThreadReading to true. If you do not, you might get the wrong cell values.\nThe following code:\n Creates a workbook. Adds a worksheet. Populates the worksheet with string values. It then creates two threads that simultaneously read values from random cells. If the values read are correct, nothing happens. If the values read are incorrect, then a message is displayed.  If you comment this line:\ntestWorkbook.Worksheets[0].Cells.MultiThreadReading = true;\nthen the following message is displayed:\nif (s != \u0026amp;ldquo;R\u0026amp;rdquo; + row + \u0026amp;ldquo;C\u0026amp;rdquo; + col)\n{\nMessageBox.Show(\u0026amp;ldquo;This message box will show up when cells read values are incorrect.\u0026amp;quot;);\n}\nOtherwise, the program runs without showing any message which means all values read from cells are correct.\n\\\n","date":-62135596800,"description":"","objectID":"7fc96e7a21869709924d5ab4d0b5221d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/reading+cell+values+in+multiple+threads+simultaneously/","title":"Reading Cell Values in Multiple Threads Simultaneously"},{"content":"Sometimes you need to search for and replace specific data in a range ignoring any cell values outside the desired range. Aspose.Cells allows you to limit a search to a specific range. This article explains how.\nAspose.Cells provides the FindOptions.SetRange() method for specifying a range when searching data. Below code sample search and replace data in a range.\n\\\nAttachments: Search-Data-Within-Range-1.PNG (image/png) Search-Data-Within-Range-2.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"bac86297e821145524ccce019293139b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/search+and+replace+data+in+a+range/","title":"Search and Replace Data in a Range"},{"content":"This article is designed to provide developers with a detailed understanding of how to sort data in a worksheet.\nData sorting is a handy and versatile feature of Microsoft Excel. Generally, sorting is performed on a list, which is defined as a contiguous group of data where the data is displayed in columns. Aspose.Cells allows you to sort worksheet data alphabetically or numerically. It sorts data in the same way as Microsoft Excel does.\nYou might work with Office Automation for data sorting but Office Automation has its drawbacks. There are several reasons and issues involved: security, stability, scalability/speed, price, and features. In short, there are many reasons to look for a different solution, with the top one being that Microsoft themselves strongly recommends against Office Automation from software solutions.\nIn this article, we create a console application in Visual Studio.NET, and sort data with a few simple lines of code using the Aspose.Cells API.\nUsing Aspose.Cells to Sort Data in a Worksheet\n Create a Microsoft Excel file with different data sets or contents. Download and install Aspose.Cells:  Download Aspose.Cells for .NET.   Install it on your development computer.  All Aspose components, when installed, work in evaluation mode. The evaluation mode has no time limit and it only injects watermarks into produced documents.\n Create a project:  Start Visual Studio .NET. Create a new console application.   Add a reference to Aspose.Cells in your project:  Add a reference to …\\Program Files\\Aspose\\ Aspose.Cells for .NET \\Bin\\Net1.0\\Aspose.Cells.dll   Sort the data in the worksheet:  Add code to the project.    \\\nAttachments: Sort Data-001.png (image/png) Sort Data-002.png (image/png) Sort Data-003.png (image/png) Sort Data-001.jpg (image/png) Sort Data-003.jpg (image/png)\n","date":-62135596800,"description":"","objectID":"e39385f8dde6bd79bc0794f962aef5b4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/sort+data/","title":"Sort Data"},{"content":"When you delete blank columns and rows in a worksheet, then its references in other worksheets become invalid. If you want to avoid this behavior and want those references of the current worksheet in other worksheets are also updated, then please use the DeleteOptions.UpdateReference property and set it to true.\n   Contents Summary\n1 Update references in other worksheets while deleting blank columns and rows in a worksheet 1.1 Programming Sample\n1.2 Console Output\n ||      Update references in other worksheets while deleting blank columns and rows in a worksheet      Please see the following sample code and its console output. The cell E3 in the second worksheet has a formula =Sheet1!C3 which is referring to cell C3 in the first worksheet. If you will set DeleteOptions.UpdateReference property as true, this formula will be updated and become =Sheet1!A1 on deleting blank columns and rows in the first worksheet. However, if you will set DeleteOptions.UpdateReference property as false, the formula in cell E3 of the second worksheet will remain =Sheet1!C3 and become invalid.\nProgramming Sample\n\\\nConsole Output\nThis is the console output of the above sample code when DeleteOptions.UpdateReference property has been set as true.\nCell E3 before deleting blank columns and rows in Sheet1.\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\nCell Formula: =Sheet1!C1\nCell Value: 4\nCell E3 after deleting blank columns and rows in Sheet1.\n-\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;\u0026amp;mdash;-\nCell Formula: =Sheet1!A1\nCell Value: 4\nThis is the console output of the above sample code when DeleteOptions.UpdateReference property has been set as false. As you can see, the formula in cell E3 of the second worksheet is not updated and its cell value is now 0 instead of 4 which is invalid.\nCell E3 before deleting blank columns and rows in …","date":-62135596800,"description":"","objectID":"578ad6d3d21ec493931ad8462abe5316","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/update+references+in+other+worksheets+while+deleting+blank+columns+and+rows+in+a+worksheet/","title":"Update references in other worksheets while deleting blank columns and rows in a worksheet"},{"content":"Microsoft Excel allows users to define error checking options and rules. Users often see error checks when creating formulas, a small triangle at the top right corner of a cell highlights when there\u0026amp;rsquo;s a problem with a cell. Excel provides information that helps users to correct common problems.\n   Contents Summary\n1 Types of Errors\n2 Numbers Stored as Text\n ||      Types of Errors      Errors that mean that the formula cannot return a result - such as dividing a number by zero - require immediate attention and an error value is displayed in the cell. Clicking on the green triangle shows an exclamation mark, clicking this opens a list of options.\nThe error can be resolved using the options, or be ignored. Ignoring an error means that that error will not appear in further error checks.\nAspose.Cells provides error checking option features. The ErrorCheckOption class manages different types of error checks, for example, numbers stored as text, formula calculation errors, and validation errors. Use the ErrorCheckType enumeration to set the desired error checking.\nNumbers Stored as Text\nOccasionally, numbers might be formatted and stored in cells as text. This can cause problems with calculations or produce confusing sort orders. Numbers that are formatted as text are left-aligned instead of right-aligned in the cell. If a formula that should perform a mathematical operation on cells doesn\u0026amp;rsquo;t return a value, check the alignment in the cells that the formula refers to – some or all of those cells might be numbers formatted as text.\nYou can use the error checking options to quickly convert numbers stored as text to real numbers. In Microsoft Excel 2003:\n On the Tools menu, click Options. Select the Error Checking tab. Number stored as text option is checked by default. Disable it.  The following sample code shows how to disable the numbers stored as text error checking option for a worksheet in the template XLS file using the Aspose.Cells APIs.\n\\\nAttachments: Use …","date":-62135596800,"description":"","objectID":"8db94bb76a5fe95152aacc2b23d9f8d3","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/use+error+checking+options/","title":"Use Error Checking Options"},{"content":"Microsoft Excel allows users to add data validation rules to cells. For example, a decimal validation specifies that only numbers between 10 and 20 can be entered. If a user enters a different number. Microsoft Excel shows an error message and prompts them to enter a number in the correct range. If you copy and paste a number, say 3, into the cell, Excel does not run a validation check or show an error message.\nSometimes, it is necessary to verify whether a value satisfies the data validation rules applied to the cell programmatically. In the case above, for example, the entry should fail.\nIntroduction\nAspose.Cells provides the Cell.GetValidationValue() method to validate cell values programmatically. If the value in a cell does not satisfy the data validation rule applied to that cell, it returns False, else True.\nThe following sample code illustrates how the Cell.GetValidationValue() method works. First, it enters the value 3 into C1. Because this does not satisfy the data validation rule, the Cell.GetValidationValue() method returns False. Then, it enters the value 15 into C1. Because this value satisfies the data validation rule, the Cell.GetValidationValue() method returns True. Similarly, it returns False for value 30.\n\\\nOutput\nIs 3 a Valid Value for this Cell: False\nIs 15 a Valid Value for this Cell: True\nIs 30 a Valid Value for this Cell: False\nAttachments: Validation-applied-on-cell-C1.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"68f7fcba3c00a3254ff724aae1f11c23","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/verify+that+cell+value+satisfies+data+validation+rules/","title":"Verify that Cell Value Satisfies Data Validation Rules"},{"content":"Articles in this section\n\\\nAttachments: Detect Merged Cells in a Worksheet-001.png (image/png) Detect Merged Cells in a Worksheet-002.png (image/png) Sort Data-001.png (image/png) Sort Data-002.png (image/png) Sort Data-003.png (image/png) Sort Data-001.jpg (image/png) Sort Data-003.jpg (image/png) Copy Rows and Columns-001.png (image/png) Copy Rows and Columns-002.png (image/png) Copy Rows and Columns-003.png (image/png) Copy Rows and Columns-004.png (image/png) Move Range of Cells in a Worksheet-001.png (image/png) Move Range of Cells in a Worksheet-002.png (image/png) AutoFit Rows for Merged Cells-001.png (image/png) Add a Picture to an Excel Comment-001.png (image/png) comment-picture.png (image/png) Use Error Checking Options-001.png (image/png) referencedpic.png (image/png) addcondiconsset.png (image/png) Search-Data-Within-Range-1.PNG (image/png) Search-Data-Within-Range-2.PNG (image/png) output-of-merging-cells.png (image/png) Validation-applied-on-cell-C1.PNG (image/png) HTML-formatted-text.png (image/png) source-excel-file-with-table.png (image/png) output-excel-file-with-table.png (image/png)\n","date":-62135596800,"description":"","objectID":"8c89863b3ffbcd5abed20a20cc24801d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingrowscolumnsandcells/","title":"Managing Rows, Columns and Cells"},{"content":"   Contents Summary\n1 Adding Custom Properties visible inside Document Information Panel 1.1 Related Article\n ||      Adding Custom Properties visible inside Document Information Panel      Aspose.Cells can be used to add custom properties inside the workbook object which are visible inside the Document Information Panel. You can open the Document Information Panel in Microsoft Excel using File \u0026amp;gt; Info \u0026amp;gt; Properties \u0026amp;gt; Show Document Panel menu commands.\nPlease use Workbook.ContentTypeProperties.Add() method to add a custom property which will be visible in the Document Information Panel\nThe following sample code adds two custom properties. The first property is without any type and the second property has a type as DateTime. Once, you will open the output Excel file generated by this code, you will see these two properties inside the Document Information Panel.\n\\\nRelated Article\n Use Custom XML Parts in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"bfdc47ce82c30d5adfd48cd45fee1d60","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/adding+custom+properties+visible+inside+document+information+panel/","title":"Adding Custom Properties visible inside Document Information Panel"},{"content":"This article is designed to provide a detailed understanding of how to add conditional formatting to a range of cells in a worksheet.\nConditional formatting is an advanced feature in Microsoft Excel that allows you to apply formats to a range of cells, and have that formatting change depending on the value of the cell or the value of a formula. For example, the background of a cell may be red to highlight a negative value, or the text color might be green for a positive value. When the value of the cell meets the format condition, the format is applied. If the value of the cell does not meet the format condition, the cell\u0026amp;rsquo;s default formatting is used.\nIt\u0026amp;rsquo;s possible to apply conditional formatting with Microsoft Office Automation but that has its drawbacks. There are several reasons and issues involved: for example, security, stability, scalability and speed. The main reason for finding another solution is that Microsoft themselves strongly recommends against Office Automation for software solutions.\nThis article shows how to create a console application, add conditional formatting on cells with a few simplest lines of code using the Aspose.Cells API.\n   Contents Summary\n1 Using Aspose.Cells to Apply Conditional Formatting Based on Cell Value\n2 Using Aspose.Cells to Apply Conditional Formatting Based on Formula\n ||      Using Aspose.Cells to Apply Conditional Formatting Based on Cell Value       Download and Install Aspose.Cells.  Download Aspose.Cells for .NET.   Install it on your development computer. All Aspose components, when installed, work in evaluation mode. The evaluation mode has no time limit and it only injects watermarks into produced documents. Create a project. Start Visual Studio.NET and create a new console application. This example creates a C# console application, but you can use VB.NET too. Add references. Add a reference to Aspose.Cells to your project, for example add a reference to ….\\Program …","date":-62135596800,"description":"","objectID":"cb00532c01aebf5963a3b9f00f1cd832","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/apply+conditional+formatting+in+worksheets/","title":"Apply Conditional Formatting in Worksheets"},{"content":"When you set Page Setup Scaling using Fit to n page(s) wide by m tall option, Microsoft Excel calculates the Page Setup Scaling Factor. You can calculate the same thing using SheetRender.PageScale property. This property returns a double value which can be converted to percentage value. For example, if it returns 0.5 then it means scaling factor is 50%.\nThe following sample code illustrates how to calculate page setup scaling factor using SheetRender.PageScale property.\n\\\n","date":-62135596800,"description":"","objectID":"06a0a306976f1524858ef49c792d50aa","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/calculate+page+setup+scaling+factor/","title":"Calculate Page Setup Scaling Factor"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Change Data Source of the Chart to Destination Worksheet while Copying Rows or Range\n ||      Possible Usage Scenarios      When you copy rows or range which contains charts to a new worksheet, then the data source of the chart does not change. For example, if the data source of chart is =Sheet1!$A$1:$B$4, then after copying rows or range to new worksheet, the data source will remain the same i.e =Sheet1!$A$1:$B$4. It still refers to old worksheet i.e. Sheet1. This is also the behavior in Microsoft Excel. But if you want that it to refer to the new destination worksheet, then please use the CopyOptions.ReferToDestinationSheet property and set it to **true **while calling the Cells.CopyRows() method. Now if your destination worksheet is DestSheet, then the data source of your chart will change from =Sheet1!$A$1:$B$4 to =DestSheet!$A$1:$B$4.\nChange Data Source of the Chart to Destination Worksheet while Copying Rows or Range\nThe following sample code explains the usage of CopyOptions.ReferToDestinationSheet property while copying rows or range containing charts to a new worksheet. The code uses the sample excel file and generates the output excel file.\nAttachments: CopyOptions.ReferToDestinationSheet-effect-on-chart-data-source.png (image/png) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"93360e90dadbf3735ca18386fb77c226","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/change+data+source+of+the+chart+to+destination+worksheet+while+copying+rows+or+range/","title":"Change Data Source of the Chart to Destination Worksheet while Copying Rows or Range"},{"content":"Sometimes, you need to check if the given password matches with the Password to modify programmatically. Aspose.Cells provides WorkbookSettings.WriteProtection.ValidatePassword() method which you can use to check if the given Password to modify is correct or not.\n   Contents Summary\n1 Check Password to modify in Microsoft Excel\n2 Check Password to modify using Aspose.Cells 2.1 Console Output\n ||      Check Password to modify in Microsoft Excel      You can assign Password to open and Password to modify while creating your workbooks in Microsoft Excel. Please see this screenshot which shows the interface Microsoft Excel provides to specify these passwords.\n        Check Password to modify using Aspose.Cells    The following sample codes load the source Excel file. It has a Password to open as 1234 and Password to modify as 5678. The code first checks if 567 is correct Password to modify and it returns false and then it checks if 5678 is Password to modify and it returns true.\n\\\nConsole Output\nHere is the Console Output of the above sample code after loading the source Excel file.\nIs 567 correct Password to modify: False\nIs 5678 correct Password to modify: True\nAttachments: Specify passwords while saving workbook.png (image/png) Book1.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"ce123c6d6bf908fd3e7489a891c39966","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/check+password+to+modify+using+aspose.cells/","title":"Check Password to modify using Aspose.Cells"},{"content":"Sometimes, you need to combine workbooks with various content like images, charts and data into a single workbook. Aspose.Cells supports this feature. This article shows how to create a console application in Visual Studio and combine workbooks with a few, simple lines of code using Aspose.Cells.\nCombining Workbooks with Images and Charts\nThe example code combines two workbooks into a single workbook using Aspose.Cells. The code loads the source workbooks, uses the Workbook.combine() method to combine them and saves the output workbook.\nSource Workbooks\n charts.xlsx picture.xlsx  Output Workbooks\n combined.xlsx  Screenshots\nBelow are screenshots of the source and output workbooks.\nYou can use any source workbooks. These images are just for illustration purposes.\n**The first worksheet of the charts workbook - stacked **\n**Second worksheet of charts workbook - line **\n**First worksheet of the picture workbook - picture **\n**All three worksheets in the combined workbook - stacked, line, picture **\nAttachments: Combine Multiple Workbooks into a Single Workbook-001.png (image/png) Combine Multiple Workbooks into a Single Workbook-002.png (image/png) Combine Multiple Workbooks into a Single Workbook-003.png (image/png) Combine Multiple Workbooks into a Single Workbook-004.png (image/png) Combine Multiple Workbooks into a Single Workbook-005.png (image/png) Combine Multiple Workbooks into a Single Workbook-006.png (image/png) Combine Multiple Workbooks into a Single Workbook-007.png (image/png) Combine-Multiple-Workbooks-into-a-Single-Workbook-007a.png (image/png) Combine-Multiple-Workbooks-into-a-Single-Workbook-001b.png (image/png)\n","date":-62135596800,"description":"","objectID":"a9997a79d8dff8b58f3e6f95802c0938","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/combine+multiple+workbooks+into+a+single+workbook/","title":"Combine Multiple Workbooks into a Single Workbook"},{"content":"Sometimes, you need to combine multiple worksheets into a single worksheet. This can easily be achieved using Aspose.Cells API. This article will show you a code example that reads a source workbook and combines the data of all source worksheets into a single worksheet inside a destination workbook.\nThe following code snippet shows you how to combine multiple worksheets into a single worksheet.\n\\\nAttachments: sheet1.JPG (image/png) sheet2.JPG (image/png) sheet3.JPG (image/png) outputsheet.jpg (image/png) source.xlsx (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"070e058acc2cc253c012afc3c45f0ccb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/combine+multiple+worksheets+into+a+single+worksheet/","title":"Combine Multiple Worksheets into a Single Worksheet"},{"content":"Aspose.Cells now supports to fully convert revisions of XLSB file into XLSM file. Revisions are found inside the path \\xl\\revisions. You can view them by changing your XLSB file extension to ZIP. The \\xl\\revisions path contains files ending with .bin extensions.\nWhen you convert your XLSB file into XLSM file using Aspose.Cells, these .bin files successfully converts to .xml files as shown in these two screenshots.\nThe following code sample shows you how to convert the XLSB file into XLSM format using Aspose.Cells.\n\\\nAttachments: XLSB-Revisions.png (image/png) XLSM-Revisions.png (image/png)\n","date":-62135596800,"description":"","objectID":"59257a33c90d2e2381d4b776d8fdd69c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/convert+revision+of+xlsb+to+xlsm/","title":"Convert Revision of XLSB to XLSM"},{"content":"Sometimes, you do need a number of worksheets with common formatting and data entry. For example, if you work with quarterly budgets, you might want to create a workbook with sheets that contain the same column headings, row headings, and formulas. There is a way to do this: by creating one sheet and then copying it three times.\nAspose.Cells supports copying or moving worksheets within or between workbooks. Worksheets including data, formatting, tables, matrices, charts, images and other objects are copied with the highest degree of precision.\n   Contents Summary\n1 Copying and Moving Worksheets 1.1 Copying a Worksheet within a Workbook\n1.2 Moving a Worksheet within a Workbook\n1.3 Copying a Worksheet between Workbooks\n1.4 Moving a Worksheet between Workbooks\n ||      Copying and Moving Worksheets      Copying a Worksheet within a Workbook\nThe initial steps are the same for all examples.\n Create two workbooks with some data in Microsoft Excel. For the purposes of this example, we created two new workbooks in Microsoft Excel and input some data into the worksheets.   FirstWorkbook.xlsx (3 worksheets). SecondWorkbook.xlsx (1 worksheet).   Download and install Aspose.Cells:  Download Aspose.Cells for .NET. Install it on your development computer. All Aspose components, when installed, work in evaluation mode. The evaluation mode has no time limit and it only injects watermarks into produced documents.   Create a project:  Start Visual Studio.Net. Create a new console application.   Add references:  Add a reference to Aspose.Cells to the project. For example, add a reference to \u0026amp;hellip;\\Program Files\\Aspose\\Aspose.Cells\\Bin\\Net1.0\\Aspose.Cells.dll   Copy the worksheet within a workbook The first example copies the first worksheet (Copy) within FirstWorkbook.xlsx.  When executing the code, the worksheet named Copy is copied within FirstWorkbook.xlsx with the name Last Sheet.\n\\\nMoving a Worksheet within a Workbook\nThe code below shows how to move a worksheet from one …","date":-62135596800,"description":"","objectID":"a269204ae118caa804d809c382413c95","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/copy+and+move+worksheets+within+and+between+workbooks/","title":"Copy and Move Worksheets Within and Between Workbooks"},{"content":"Sometimes, you need to create, manipulate or delete scenarios in spreadsheets. A scenario is a named \u0026amp;lsquo;what if?\u0026amp;rsquo; model that includes variable input cells linked by one or more formulas. Before creating a scenario, design the worksheet so that it contains at least one formula that depends on cells that different values can be inserted into. The following example shows how to create and remove scenarios from a worksheet in a workbook via Aspose.Cells APIs.\nAspose.Cells provides some useful classes, for example, ScenarioCollection, Scenario, ScenarioInputCellCollection, and ScenarioInputCell classes. It also provides the Worksheet.Scenarios property. The sample code below opens an XLSX Excel file that contains some scenarios and removes an existing scenario. It also adds a new scenario to the worksheet before saving the Excel file. The example uses a very simple template file that contains a scenario.\n\\\nAttachments: scenario1.png (image/png)\n","date":-62135596800,"description":"","objectID":"a1d68828768ae421ed3d0b116894d9f4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/create%2c+manipulate+or+remove+scenarios+from+worksheets/","title":"Create, Manipulate or Remove Scenarios from Worksheets"},{"content":"Microsoft Excel allows users to define named ranges with two different scopes: workbook (also known as global scope) and worksheet.\n Named ranges with a workbook scope can be accessed from any worksheet within that workbook by simply using its name. Worksheet scoped named ranges are accessed with the reference of the particular worksheet in which it was created.  Aspose.Cells provides the same functionality as Microsoft Excel for adding workbook and worksheet scoped named ranges. When creating a worksheet scoped named range, the worksheet reference should be used in the named range to specify it as a worksheet scoped named range.\n   Contents Summary\n1 Adding a Named Range with Workbook Scoped\n2 Adding a Named Range with Worksheet Scope\n ||      Adding a Named Range with Workbook Scoped      \\\nAdding a Named Range with Worksheet Scope\n\\\n","date":-62135596800,"description":"","objectID":"7c283a90ff6136bb1aa09a10fd68f6ed","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/create+workbook+and+worksheet+scoped+named+ranges/","title":"Create Workbook and Worksheet Scoped Named Ranges"},{"content":"It is possible to protect the workbooks and worksheets separately. For instance, a spreadsheet may contain one or more worksheets that are password-protected, however, the spreadsheet itself may or may not be protected. Aspose.Cells APIs provide the means to detect if a given worksheet is password protected or not. This article demonstrates the usage of Aspose.Cells for .NET API to achieve the same.\nAspose.Cells for .NET 8.7.0 has exposed the Protection.IsProtectedWithPassword property to detect if a worksheet is password protected or not. Boolean type Protection.IsProtectedWithPassword property returns true if Worksheet is password-protected and false if not.\n\\\n","date":-62135596800,"description":"","objectID":"7a1c7963ebf9eee0a414bfcb78c36b39","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/detect+if+worksheet+is+password+protected/","title":"Detect if Worksheet is Password Protected"},{"content":"   Contents Summary\n1 Check for Populated Cells\n2 Check for Empty Initialized Cells\n3 Check for Shapes\n4 Programming Sample\n ||      Check for Populated Cells      Worksheets can have one or more cells populated with values where a value can be simple (text, numeric, date/time) or a formula or a formula based value. In such a case, it is easy to detect if a given worksheet is empty or not. All we have to check is the Cells.MaxDataRow or Cells.MaxDataColumn properties. If the aforementioned properties return zero or positive values that means, one or more cells have been populated, however, if any of these properties return -1 that indicates that none of the cells have been populated in the given worksheet.\nThe rows \u0026amp;amp; columns collections have zero-based index therefore a cell at row 0 \u0026amp;amp; column 0 means the first cell in the worksheet, which is A1.\nCheck for Empty Initialized Cells\nAll cells which have values are automatically initialized, however, there is a possibility that a worksheet has cells with only formatting applied. In such a scenario, the Cells.MaxDataRow or Cells.MaxDataColumn properties will return -1 indicating the absence of any populated values but initialized cells due to the cell formatting cannot be detected using this approach. In order to check if a worksheet has empty initialized cells, it is advised to use the IEnumerator.MoveNext method on the enumerator acquired from Cells collection. If the IEnumerator.MoveNext method returns true that means there are one or more initialized cells in the given worksheet.\nCheck for Shapes\nIt is possible that a given worksheet does not have any populated cells, however, it could contain shapes \u0026amp;amp; objects such as controls, charts, images and so on. If we need to check if a worksheet contains any shape, we can do it by inspecting the ShapeCollection.Count property. Any positive value indicates the presence of shape(s) in the worksheet.\nProgramming Sample\n\\\n","date":-62135596800,"description":"","objectID":"9b4888ceca68143828a86cae37729fa7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/detecting+empty+worksheets/","title":"Detecting Empty Worksheets"},{"content":"Aspose.Cells provides Workbook.IsLicensed property which you can use to determine if the license is loaded successfully or not. If you access this property before setting the license, it will return false and if you will call this property after setting the license, it will return true indicating that license has been loaded successfully.\nThe following code accesses the Workbook.IsLicensed property before setting a license and it returns false. Then it loads the license and accesses the property again which now returns true.\n\\\nConsole Output\nHere is the console (debug) output of the above sample code\nFalse\nTrue\n","date":-62135596800,"description":"","objectID":"4d10470598df3b9384808325356d58de","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/determining+if+the+license+is+loaded+successfully/","title":"Determining if the License is loaded successfully"},{"content":"Microsoft Excel\u0026amp;rsquo;s Compatibility Checker flags when saving a file in an earlier file format might cause functionality issues or loss of fidelity. The Compatibility Checker is a feature of Microsoft Office Excel 2007 and Microsoft Excel 2010.\nWhen you save a workbook in a previous version, Excel 97 through Excel 2003, from Excel 2007 or Excel 2010, the Compatibility Checker scans the workbook to see if it contains features that are not supported by the earlier version. To help you make decisions about how to handle compatibility issues, the Compatibility Checker displays dialog boxes with options. It can also be used to create a report on any issues in the workbook, or disable the feature.\nSometimes, you need to disable the Compatibility Checker for a particular spreadsheet. With Aspose.Cells\u0026amp;rsquo; APIs you can do this programmatically so that users don\u0026amp;rsquo;t get frustrated or confused by the Compatibility Checker dialog box popping up when they re-save the file in Microsoft Excel manually.\n   Contents Summary\n1 Using Microsoft Excel\n2 Using Aspose.Cells APIs 2.1 Code Examples\n ||      Using Microsoft Excel      To disable the Compatibility Checker in Microsoft Excel (for example Microsoft Excel 2007/2010):\n (Excel 2007) On the Office button, click Prepare, then Run Compatibility Checker, and then clear the Check compatibility when you save this workbook option. (Excel 2010) On the File tab, click Info, then Check for issues, click Check Compatibility, and, finally, clear the Check compatibility when you save this workbook option.  Using Aspose.Cells APIs\nSet the Workbook.Settings.CheckComptiliblity property to False to disable Microsoft Excel\u0026amp;rsquo;s Compatibility Checker.\nCode Examples\nThe code examples that follow show how to disable the Compatibility Checker with Aspose.Cells for .NET, first using C# and then using Visual Basic.\n\\\nAttachments: comp_check.png (image/png)\n","date":-62135596800,"description":"","objectID":"5e93c47530640685a09dcfc8c40657b5","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/disable+compatibility+checker+in+excel/","title":"Disable Compatibility Checker in Excel"},{"content":"Aspose.Cells allows you to access all the hyperlinks of the worksheet using the Worksheet.Hyperlinks collection. You can access each hyperlink from this collection one by one and edit its properties.\nThe following sample code accesses all the hyperlinks of the worksheet and changes their Hyperlink.Address property to the Aspose website.\n\\\n","date":-62135596800,"description":"","objectID":"4f4e1d300fd7a8a7b16e3ebd52730a6b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/editing+hyperlinks+of+worksheet/","title":"Editing Hyperlinks of Worksheet"},{"content":"Sometimes users want to export excel data into a data table without any formatting. For example, if some cell has a value 0.012345 and it is formatted as to display two decimal places, then when the user will export excel data to a data table, it will be exported as 0.01 and not as 0.012345. To deal with this problem, Aspose.Cells has provided ExportTableOptions.FormatStrategy property which can take one of these three values\n CellValueFormatStrategy.CellStyle CellValueFormatStrategy.DisplayStyle CellValueFormatStrategy.None  If you will set it to CellValueFormatStrategy.None, then it will export the data without any formatting.\nThe following sample explains the use of ExportTableOptions.FormatStrategy property to export excel data with and without any formatting.\n\\\nConsole Output\nBelow is the console debug output of the above sample code\nCell String Value: 0.01\nCell String Value without Format: 0.012345\nExport Data Table with Format Strategy as Cell Style: 0.01\nExport Data Table with Format Strategy as None: 0.012345\n","date":-62135596800,"description":"","objectID":"fa7ec7eaec4b5025c726a9a1a26bd3fb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/export+excel+data+to+datatable+without+any+formatting/","title":"Export Excel Data to DataTable without any Formatting"},{"content":"You can export data from worksheets into data tables using Aspose.Cells. Sometimes you want to export the data of visible rows only. Aspose.Cells provides a way to achieve this. Use the ExportTableOptions.PlotVisibleRows to specify that you want to export visible rows data only.\nThis example shows how to export data from the following worksheet. Rows 5, 6 and 7 are hidden.\n   Sample data in worksheet, rows 5, 6 and 7 are hidden        Once the data is exported to a data table using the Worksheet.Cells.ExportDataTable() method with the ExportTableOptions.PlotVisibleRows option, it will look like this. Hidden rows are plotted as blank rows       Hidden rows are exported to the data table as blank rows         Attachments: plot-visible-rows-1.png (image/png) plot-visible-rows-2.png (image/png)\n","date":-62135596800,"description":"","objectID":"61c35a069d63609d9ab69144a6af8946","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/export+visible+rows+data+from+worksheet/","title":"Export Visible Rows Data from Worksheet"},{"content":"Sometimes, you do need to extract OLE objects from a workbook. Aspose.Cells supports extracting and saving those OLe objects.\nThis article shows how to create a console application in Visual Studio.Net and extract different OLE objects from a workbook with a few simple lines of code.\n   Contents Summary\n1 Extract OLE Objects from a Workbook 1.1 Creating a Template Workbook\n1.2 Download and Install Aspose.Cells\n1.3 Create a Project\n1.4 Extract OLE Objects\n ||      Extract OLE Objects from a Workbook      Creating a Template Workbook\n Created a workbook in Microsoft Excel. Add a Microsoft Word document, an Excel workbook and a PDF document as OLE objects on first worksheet.     Template document with OLE objects (OleFile.xls)        Next extract the OLE objects and save them to the hard disk with their respective file types.    Download and Install Aspose.Cells\n Download Aspose.Cells for .NET. Install it on your development computer.  All Aspose components, when installed, work in evaluation mode. The evaluation mode has no time limit and it only injects watermarks into produced documents.\nCreate a Project\nStart Visual Studio.Net and create a new console application. This example will show a C# console application, but you can use VB.NET too.\n Add References  Add a reference to Aspose.Cells component to your project, for example add a reference to \u0026amp;hellip;\\Program Files\\Aspose\\Aspose.Cells\\Bin\\Net1.0\\Aspose.Cells.dll    Extract OLE Objects\nThe code below does the actual work of finding and extracting OLE objects. The OLE objects (DOC, XLS and PDF files) are saved to disk.\n\\\nAttachments: Extract Ole Objects from Workbook-001.png (image/png) Extract Ole Objects from Workbook-002.png (image/png) Extract Ole Objects from Workbook-003.png (image/png) Extract Ole Objects from Workbook-004.png (image/png) Extract Ole Objects from Workbook-005.png (image/png)\n","date":-62135596800,"description":"","objectID":"ff8a2bcc0c1a73fabdcf92e3efb2dc42","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/extract+ole+objects+from+workbook/","title":"Extract OLE Objects from Workbook"},{"content":"Sometimes, you want to specify which kind of data should be loaded when building the workbook from the template file. Filtering loaded data can improve the performance for your special purpose, especially when using LightCells APIs. Please use the LoadOptions.LoadFilter property for this purpose.\nThe following sample code loads only shape objects while loading the workbook from the template file which you can download from the given link. The following screenshot shows the template file contents and also explains that the data in Red color and Yellow background will not be loaded because LoadOptions.LoadFilter property has been set to LoadDataFilterOptions.Shape\nThe following screenshot shows the output PDF which you can download from the given link. Here you can see, the data in Red color and Yellow background is not present but all shapes are there.\n\\\nAttachments: output.pdf (application/pdf) not-data-but-shapes-will-be-loaded.png (image/png) output-pdf-after-loading-shapes-only.png (image/png) sample.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"2cee0e3ee79edb5bd0a8e73ef1ebcf9b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/filtering+the+kind+of+data+while+loading+the+workbook+from+template+file/","title":"Filtering the kind of data while loading the workbook from template file"},{"content":"Often you need to know the version number of the application that created a Microsoft Excel document. Aspose.Cells provides the Workbook.BuiltInDocumentProperties.Version property for this purpose.\nThe following sample code demonstrates the use of the Workbook.BuiltInDocumentProperties.Version property. It loads Excel files created with Microsoft Excel 2003, 2007, 2010 and 2013 and prints the version number of the application that created these Excel documents.\n\\\n","date":-62135596800,"description":"","objectID":"52b4bc74f9e1f1eb4a77e287c2695f69","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/get+the+version+number+of+the+application+that+created+the+excel+document/","title":"Get the Version Number of the Application that Created the Excel Document"},{"content":"Sometimes, you need to hide zero values in a spreadsheet. It might be a personal preference or a formatting standard.\nTo hide zero values in a worksheet in Microsoft Excel (for example Microsoft Excel 2003):\n From the Tools menu, select Options, and then select the View tab. Deselect the Zero values option. Click OK.  Please see the following sample code that demonstrates hiding zeros using Aspose.Cells.\n\\\nAttachments: Hiding the Display of Zero Values in the Worksheet-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"9c83fa1d77fe4744bf796b6ea6c43006","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/hiding+the+display+of+zero+values+in+the+worksheet/","title":"Hiding the Display of Zero Values in the Worksheet"},{"content":"Sometimes you need to detect a file\u0026amp;rsquo;s format before opening it because the file extension does not guarantee that the file content is appropriate. The file might be encrypted (a password-protected file) so it can\u0026amp;rsquo;t be read it directly, or we should not read it. Aspose.Cells provides the FileFormatUtil.DetectFileFormat() static method and some relevant APIs that you can use to process documents.\nThe following sample code illustrates how to detect a file format (using the file path) and check its extension. You can also determine whether the file is encrypted.\n\\\n","date":-62135596800,"description":"","objectID":"fcbaa18e83d3dcb06d39dd8b048859b9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/how+to+detect+a+file+format+and+check+if+the+file+is+encrypted/","title":"How to Detect a File Format and Check if the File is Encrypted"},{"content":"You can use Aspose.Cells to set AutoRecover property of workbook. The default value of this property is true. When you set it false on a workbook, Microsoft Excel disables Autorecover (Autosave) on that Excel file.\nAspose.Cells provides Workbook.Settings.AutoRecover property to enable or disable this option.\nThe following code explains how to use Workbook.Settings.AutoRecover property of the workbook. The code first reads the default value of this property which is true, then it sets it as false and saves the workbook. Then it reads the workbook again and reads the value of this property which is false at this time.\n\\\nOutput\nHere is the console output of the above sample code.\nAutoRecover: True\nAutoRecover: False\n","date":-62135596800,"description":"","objectID":"eaa2e1dfdb841b285f33b0a749c52390","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/how+to+set+autorecover+property+of+workbook/","title":"How to set AutoRecover property of Workbook"},{"content":"Sometimes you need to insert a picture from the web (http://) into a worksheet. To do so, specify the picture’s URL and the picture will be downloaded every time the spreadsheet is opened in Microsoft Excel. The image is not physically embedded into the Excel document, but points to a web resource.\nUsing Microsoft Excel\nIn Microsoft Excel (for example 2007):\n Click the Insert menu and select Picture. Specify the web address for the picture in the Insert Picture dialog.  Using Aspose.Cells for .NET\nAspose.Cells for .NET supports adding a linked image using the ShapeCollection.AddLinkedPicture(int upperLeftRow, int upperLeftColumn, int heightPixels, int widthPixels, string sourceFullName). The method returns a Picture object.\nThe following example shows how to add linked picture from web address to a worksheet.\n\\\nAttachments: Insert a Linked Picture from Web Address-001.png (image/png) Insert a Linked Picture from Web Address-002.png (image/png) Insert a Linked Picture from Web Address-003.png (image/png) Insert a Linked Picture from Web Address-004.png (image/png) Insert-a-Linked-Picture-from-Web-Address-001b.png (image/png) Insert-a-Linked-Picture-from-Web-Address-003b.png (image/png) Insert-a-Linked-Picture-from-Web-Address-004b.png (image/png)\n","date":-62135596800,"description":"","objectID":"3b8a877d470c90f30520217662be472a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/insert+a+linked+picture+from+web+address/","title":"Insert a Linked Picture from Web Address"},{"content":"Aspose.Cells provides the functionality to add different types of OLE objects to the excel worksheets. We will see in the following code examples, how to add a wav file as an OLE object using simple APIs provided by Aspose.Cells.\n","date":-62135596800,"description":"","objectID":"621516ed5d95d735b5738022fecbe56b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/inserting+a+wav+file+as+an+ole+object/","title":"Inserting a WAV file as an Ole Object"},{"content":"Aspose.Cells allows you to load your excel file without charts. Please use LoadOptions.LoadFilter property for this purpose.\nLoad Spreadsheet Without Charts\nThe following sample code loads the sample excel file without charts and saves it in output PDF format.\n\\\n","date":-62135596800,"description":"","objectID":"2d4b7d691e636782d62e6001d68c7477","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load+source+excel+file+without+charts/","title":"Load Source Excel File Without Charts"},{"content":"By default, Aspose.Cells loads the whole spreadsheet into memory. It is possible to only load specific sheets. This can improve performance and consume less memory. This approach is useful when working with a large workbook made up of many worksheets.\nHere is the implementation of the CustomLoad class.\n","date":-62135596800,"description":"","objectID":"4fdac53f161b97bafab5e641ace3b45f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load+specific+sheets+in+a+workbook/","title":"Load Specific Sheets in a Workbook"},{"content":"You can specify the printer paper size of your choice while loading your workbook using the LoadOptions.SetPaperSize() method. Please note, if you create a new file in MS Excel, you will find the paper size is the same as the setting of the default printer in your machine.\nThe following sample code illustrates the usage of LoadOptions.SetPaperSize() method. It first creates a workbook, then saves it in memory stream in XLSX format. Then it loads it with A5 paper size and saves it in PDF format. Then it loads it again with A3 paper size and saves it again in PDF format. If you open the output PDFs and check their paper size, you will see they are different. One is A5 and the other is A3. Please download the A5 output PDF and A3 output PDF generated by the code for your reference.\n\\\nAttachments: output-a3.pdf (application/kswps) output-a5.pdf (application/kswps)\n","date":-62135596800,"description":"","objectID":"5d47e7413aa2cf1944d4aedd86b33c7b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load+workbook+with+specified+printer+paper+size/","title":"Load Workbook with specified Printer Paper Size"},{"content":"Insert a Linked Picture from Web Address explained how to insert an image from the web into a spreadsheet. As well as linking to the image, you can extract and download the image data into a stream and then insert the image from the stream into the worksheet with Aspose.Cells. This adds the image to the spreadsheet\u0026amp;rsquo;s image collection whereas the other method loads the image from the web each time the spreadsheet is opened.\n","date":-62135596800,"description":"","objectID":"5e1757a36e8e94e3f71ce976e096ae57","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load+a+web+image+from+a+url+into+an+excel+worksheet/","title":"Load a Web Image from a URL into an Excel Worksheet"},{"content":"CSV file mostly contains textual data and they do not contain any formulas. However, sometimes it happens that CSV files also contain formulas. Such CSV files should be loaded by setting the TxtLoadOptions.HasFormula as true. Once this property will be set true, Aspose.Cells will not treat formula as simple text. They will be treated as formula and Aspose.Cells formula calculation engine will process them as usual.\nThe following code illustrates how you can load as well as import a CSV file with formulas. You can use any CSV file. For illustration purpose, we use the simple csv file which contains this data. As you see it contains a formula.\n300,500,=Sum(A1:B1)\n\\\nThe code first loads the CSV file, then import it again at cell D4. Finally, it saves the workbook object in XSLX format. The output XLSX file looks like this. As you see cell C3 and F4 contain formula and its result 800.\n       Attachments: output-xlsx-csv.png (image/png) sample.csv (application/vnd.ms-excel) output.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"bdf7349b49a810f55be7dd58dcaafd05","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/load+or+import+csv+file+with+formulas/","title":"Load or Import CSV file with Formulas"},{"content":"This document explains how to open a Microsoft Excel file in a browser without showing the Open-Save-Cancel dialog box.\nIt is to be noted here that the security restriction that does not allow direct download of a file is enforced by Microsoft (or other browser vendors), not by Aspose. It is imposed to block and restrict potentially harmful files from getting downloaded to local machines.\nIt is risky for the client’s local system to allow download without showing the Open-Save-Cancel dialog to prompt for download. There is no option or workaround available from Aspose as it will be a very big security risk.\nWhy a security risk?\nThe following image shows the Open-Save-Cancel dialog box shown by Internet Explorer when trying to download a file.\n   The Open-Save-Cancel dialog        As explained above, allowing a file to open or run on your system without confirmation that you really want it to is a security risk. Some files contains viruses, and some site will try to download harmful files to your machine without prompting you. It is therefore not recommended that you allow file download without the download prompt so that users have to verify the file and its source can be verified before downloading or running it. Disabling the download dialog box makes the system vulnerable to viruses, Trojans and hackers who may silently affect your system.    Opening a File without the Open-Save-Cancel dialog box\nWhile it is a big security concern, Microsoft still provides Internet Explorer settings that allow users to disable the Open-Save-Cancel prompt for file download.\nIn Windows Explorer:\n On the Tools menu, select Folder Options. Click the File Types tab in the Folder Options dialog. Select the XLS extension file type. Click Advanced. A dialog box is displayed. It has three options at the bottom. Uncheck Confirm open after download. Select the third option - Browse in same window - to view the Excel file in Internet Explorer without starting Microsoft Excel standalone. …","date":-62135596800,"description":"","objectID":"7c220eb1057a599416560038e9e4ffcd","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/opening+excel+file+without+open+save+cancel+dialog+box/","title":"Opening Excel File without Open Save Cancel Dialog Box"},{"content":"When building a workbook with large data sets, or reading a big Microsoft Excel file, the total amount of RAM the process will take is always a concern. There are measures that can be adapted to cope with the challenge. Aspose.Cells provides some relevant options and API calls to lower, reduce and optimize memory use. Also, it can help the process work more efficiently and run faster.\nUse the MemorySetting.MemoryPreference option to optimize memory use for cells data and decrease the overall memory cost. When building a large data set for cells, it can save a certain amount of memory compared to using the default setting (MemorySetting.Normal).\n   Contents Summary\n1 Optimizing Memory 1.1 Reading Large Excel Files\n1.2 Writing Large Excel Files\n2 Caution\n ||      Optimizing Memory      Reading Large Excel Files\nThe following example shows how to read a large Microsoft Excel file in optimized mode.\n\\\nWriting Large Excel Files\nThe following example shows how to write a large dataset to a worksheet in an optimized mode.\n\\\nCaution\nThe default option, MemorySetting.Normal is applied for all versions. For some situations, such as building a workbook with a large data set for cells, the MemorySetting.MemoryPreference option may optimize the memory use and decrease the memory cost for the application. However, this option may degrade performance in some special cases such as follow.\n Accessing Cells Randomly and Repeatedly: The most efficient sequence for accessing the cells collection is cell by cell in one row, and then row by row. Especially, if you access rows/cells by the Enumerator acquired from Cells, RowCollection and Row, the performance would be maximized with MemorySetting.MemoryPreference. Inserting \u0026amp;amp; Deleting Cells \u0026amp;amp; Rows: Please note that if there are lots of insert/delete operations for Cells/Rows, the performance degradation will be notable for *MemoryPreference *mode as compared to the Normal mode. Operating on Different Cell Types: If most of the …","date":-62135596800,"description":"","objectID":"dabb1c15bc996855f96937d6257955c7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/optimizing+memory+usage+while+working+with+big+files+having+large+datasets/","title":"Optimizing Memory Usage while Working with Big Files having Large Datasets"},{"content":"Sometimes, your CSV file contains multiple Encodings (Unicode, ANSI, UTF8, UTF7, etc). Aspose.Cells allows you to load such CSV files and converting them into other formats, for example, PDF or XLSX.\nAspose.Cells provides the TxtLoadOptions.IsMultiEncoded property, which you need to set to true to load your CSV file with multiple encodings properly.\nThe following screenshot shows a sample CSV file that contains two lines. The first line is in ANSI encoding and the second line is in Unicode encoding\n   Input file        The following screenshot shows the XLSX file converted from the above CSV file without setting the TxtLoadOptions.IsMultiEncoded property to true. As you can see, the Unicode text was not converted properly.       Output file 1: no accommodation made for multiple encoding        The following screenshot shows the XSLX file converted from the above CSV file after setting the TxtLoadOptions.IsMultiEncoded property to true. As you can see, the Unicode text is now converted properly.       Output file 2: IsMultiEncoded is set to true        Below is the sample code that converts the above CSV file into XLSX format properly.    \\\nAttachments: Muti-Encoded-CSV-File.Png (image/png) CSV-File-Coverted-To-XLSX-Without-Setting-IsMultiEncoded-True.Png (image/png) CSV-File-Converted-To-XLSX.Png (image/png)\n","date":-62135596800,"description":"","objectID":"d976f95453f4bdf417d1245a5d2143de","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/reading+csv+file+with+multiple+encodings/","title":"Reading CSV File with Multiple Encodings"},{"content":"Aspose.Cells provides Workbook.Dispose() method to release the unmanaged resources of the Workbook object. The dispose pattern is used only for objects that access unmanaged resources, such as file and pipe handles, registry handles, wait handles or pointers to blocks of unmanaged memory. This is because the garbage collector is very efficient at reclaiming unused managed objects, but it is unable to reclaim unmanaged objects.\nWorkbook object now implements the System.IDisposable interface which has a single method Dispose(). You can either directly call the Workbook.Dispose() method or you can use the *Using *statement to call this method automatically.\n\\\n","date":-62135596800,"description":"","objectID":"548f42756bb04c63b9a4b252c099fc34","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/release+unmanaged+resources+of+the+workbook/","title":"Release Unmanaged Resources of the Workbook"},{"content":"Unused styles in excel file not only take space but also cause performance issues while converting to different formats like PDF, HTML, etc. Aspose.Cells provides the Workbook.RemoveUnusedStyles() to remove all the unused styles inside the workbook.\nThe following code explains the usage of Workbook.RemoveUnusedStyles(). The code loads the template excel file which you can download from the provided link. It contains an unused style named AsposeStyle, this style and all other unused styles will be removed after the execution of the code.\nAttachments: remove-unused-style.png (image/png) Template-With-Unused-Custom-Style.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"3b47df21c49923ebd61c811695df14f2","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/remove+unused+styles+inside+the+workbook/","title":"Remove Unused Styles inside the Workbook"},{"content":"Aspose.Cells supports saving an ODS file (OpenDocument Spreadsheet) in the ODF (OpenDocument Format) 1.1 and 1.2 specifications. Aspose.Cells has OdsSaveOptions.IsStrictSchema11 property that specifies the use of ODF 1.1 specification for saving ODS files. The default value of this property is false, so the ODS file saved without this setting uses the 1.2 specifications.\nThe sample code below creates a workbook object, adds some value to cell A1 on the first worksheet and then saves the ODS file in ODF 1.1 and 1.2 specifications. By default, the ODS file is saved in ODF 1.2 specification.\n\\\n","date":-62135596800,"description":"","objectID":"f770edfffd4747f87a6ba09b31972d57","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/save+ods+file+in+odf+1.1+and+1.2+specifications/","title":"Save ODS File in ODF 1.1 and 1.2 Specifications"},{"content":"Sometimes the value of the data is hidden because it is formatted in some way. For example, suppose cell D4 has formula =Sum(A1:A2) and its value is 20 but it is formatted as \u0026amp;mdash;, then the value 20 is hidden and cannot be found using Microsoft Excel find options. However, you can find it using Aspose.Cells using LookInType.OriginalValues\nThe following sample code illustrates the above point. It finds cell D4 which cannot be found using Microsoft Excel find options but Aspose.Cells can find it using LookInType.OriginalValues. Please read the comments inside the code for more information.\n\\\nConsole Output\nHere is the console output of the above sample code.\nAspose.Cells.Cell [ D4; ValueType : IsNumeric; Value : \u0026amp;mdash;; Formula:=SUM(A1:A2)]\n","date":-62135596800,"description":"","objectID":"0ddaa5d1e02cc20b348477795cd5a672","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/search+data+using+original+values/","title":"Search Data using Original Values"},{"content":"You can make a worksheet more appealing by adding a picture as a worksheet background. This feature can be quite effective if you have a special corporate graphic that adds a hint of background without obscuring the data on the sheet. You can set background picture for a sheet using Aspose.Cells API.\n   Contents Summary\n1 Setting Sheet Background in Microsoft Excel\n2 Setting Sheet Background with Aspose.Cells\n ||      Setting Sheet Background in Microsoft Excel      To set a sheet\u0026amp;rsquo;s background image in Microsoft Excel (for example Microsoft Excel 2003):\n From the Format menu, select Sheet, and then select the Background option. Select a picture to set the sheet\u0026amp;rsquo;s background picture.  Setting Sheet Background with Aspose.Cells\nThe code below sets a background image using an image from a stream.\n\\\nAttachments: Set Background Picture for a Worksheet-001.png (image/png) Formula-Calculation-Mode.png (image/png) Set Background Picture for a Worksheet-001.jpg (image/png)\n","date":-62135596800,"description":"","objectID":"485570215e5bfed2cd496ab7c9b4a09b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/set+background+picture+for+a+worksheet/","title":"Set Background Picture for a Worksheet"},{"content":"Aspose.Cells allows you to change the color of individual worksheet tabs to make them prominent from the rest. For example, you can make Expenses red, Sales green, Assets blue, etc.\n   Contents Summary\n1 Setting Worksheet Tab Color with Microsoft Excel\n2 Setting Worksheet Tab Color with Aspose.Cells\n ||      Setting Worksheet Tab Color with Microsoft Excel       Right-click a tab in the tab-sheet at the bottom of the current worksheet. Select Tab color. Select a color from the palette. Click OK.  Setting Worksheet Tab Color with Aspose.Cells\nThe sample code below shows how to set tab color with Aspose.Cells.\n\\\nAttachments: colored-tabs.png (image/png)\n","date":-62135596800,"description":"","objectID":"d3fba3bcebb67c6c8073a28be3c22f3b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/set+worksheet+tab+color/","title":"Set Worksheet Tab Color"},{"content":"Microsoft Excel (97-2007/2010) enables you to encrypt and password protect spreadsheets. It uses algorithms provided by a Crypto Service Provider. A Crypto Service Provider (or CSP) is a set of cryptographic algorithms with different properties. The default CSP is \u0026amp;ldquo;Office 97/2000 Compatible\u0026amp;rdquo;. This is a CSP with some publicly known security issues. Spreadsheets that are secured with the \u0026amp;ldquo;weak encryption (XOR)\u0026amp;rdquo; or with the \u0026amp;ldquo;Office 97/2000 Compatible\u0026amp;rdquo; encryption type can be cracked easily.\nTo overcome this problem, use one of the strong encryption types provided by Microsoft Excel. You can change the encryption type to the strongest available CSP. For strong encryption, a minimum key length of 128 bits is required, for example, \u0026amp;lsquo;Microsoft Strong Cryptographic Provider\u0026amp;rsquo;.\nYou can also encrypt and password protect Excel files with strong encryption type using the Aspose.Cells API.\nApplying Encryption with Microsoft Excel\nTo implement file encryption in Microsoft Excel (for example 2007):\n From the Tools menu, select Options. Select the Security tab. Enter a value for the Password to open field. Click Advanced. Choose the encryption type and confirm the password.  Applying Encryption with Aspose.Cells\nThe code examples below apply strong encryption on a file and set a password.\n\\\nAttachments: Setting Strong Encryption Type-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"47760e94a0c57c34eae1089ba50a059d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/setting+strong+encryption+type/","title":"Setting Strong Encryption Type"},{"content":"It is possible to show formulas instead of calculated values in Microsoft Excel using the Show Formulas option from the Formulas ribbon. When formulas are shown, Microsoft Excel displays formulas in the worksheet. You can achieve the same thing using Aspose.Cells.\nAspose.Cells provides a Worksheet.ShowFormulas property. Set this to **true **to set Microsoft Excel to display formulas.\n\\\nAttachments: show-formulas-1.PNG (image/png) show-formulas-2.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"f487766795e03e4fefa14e5752379c1c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/show+formulas+instead+of+values+in+a+worksheet/","title":"Show Formulas Instead of Values in a Worksheet"},{"content":"   Contents Summary\n1 Using Custom XML Parts in Aspose.Cells 1.1 Related Article\n ||      Using Custom XML Parts in Aspose.Cells      Custom XML Parts are the XML data that is stored by different applications like SharePoint etc inside the excel file. This data is consumed by different applications that need it. Microsoft Excel does not make use of this data so there is no GUI to add it. You can view this data by changing the extension of .xlsx into .zip and then by opening it using WinZip. You can also open the ZIP file using any 3rd part Windows zip utility such as WinRAR or WinZip etc. The data is present inside the customXml folder.\nYou can add custom XML parts using Aspose.Cells via the Workbook.ContentTypeProperties.Add() method.\nThe following sample code makes use of Workbook.ContentTypeProperties.Add() method and adds the Book Catalog XML and its name is BookStore. The following image shows the result of this code. As you can see Book Catalog XML is added inside the BookStore node which is the name of this property.\nRelated Article\n Adding Custom Properties visible inside Document Information Panel  Attachments: custom-xml-parts-location.png (image/png) BookStore-XML-Part.png (image/png)\n","date":-62135596800,"description":"","objectID":"4c9bb75134e9e7ccbfe171c1d2218cca","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/use+custom+xml+parts+in+aspose.cells/","title":"Use Custom XML Parts in Aspose.Cells"},{"content":"Aspose.Cells allows you to load a light-weight version of workbook into memory to edit its metadata information. Please use the WorkbookMetadata class to load the workbook.\nThe following sample code uses WorkbookMetadata class to edit custom document properties of a workbook. Once you open the workbook using Workbook class, you will be able to read the document properties. Here is a sample code using the WorkbookMetadata class.\n\\\n","date":-62135596800,"description":"","objectID":"fd9341e30c5e91ad76b5a6d133fd43b3","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/using+workbookmetadata/","title":"Using WorkbookMetadata"},{"content":"Aspose.Cells APIs have enhanced the Protection class by introducing some useful properties \u0026amp;amp; methods. One such method is the VerifyPassword which allows specifying a password as an instance of *string *and verifies if the same password has been used to protect the Worksheet.\nThe Protection.VerifyPassword method returns **true **if the specified password matches the password used to protect the given worksheet and **false **if the specified password does not match. Following piece of code uses the Protection.VerifyPassword method in conjunction with Protection.IsProtectedWithPassword property to detect the password protection, and verifies the password.\n\\\n","date":-62135596800,"description":"","objectID":"f187b5661b83da4fb89323e13e4dccb4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/verify+password+used+to+protect+the+worksheet/","title":"Verify Password Used to Protect the Worksheet"},{"content":"Articles in this section\n\\\nAttachments: Hiding the Display of Zero Values in the Worksheet-001.png (image/png) Setting Strong Encryption Type-001.png (image/png) Copy and Move Worksheets Within and Between Workbooks-001.png (image/png) Copy and Move Worksheets Within and Between Workbooks-002.png (image/png) Copy and Move Worksheets Within and Between Workbooks-003.png (image/png) Copy and Move Worksheets Within and Between Workbooks-004.png (image/png) Copy and Move Worksheets Within and Between Workbooks-005.png (image/png) Copy and Move Worksheets Within and Between Workbooks-006.png (image/png) Copy and Move Worksheets Within and Between Workbooks-007.png (image/png) Copy and Move Worksheets Within and Between Workbooks-008.png (image/png) Set Background Picture for a Worksheet-001.png (image/png) Formula-Calculation-Mode.png (image/png) Set Background Picture for a Worksheet-001.jpg (image/png) Extract Ole Objects from Workbook-001.png (image/png) Extract Ole Objects from Workbook-002.png (image/png) Extract Ole Objects from Workbook-003.png (image/png) Extract Ole Objects from Workbook-004.png (image/png) Extract Ole Objects from Workbook-005.png (image/png) colored-tabs.png (image/png) Apply Conditional Formatting in Worksheets-001.png (image/png) Apply Conditional Formatting in Worksheets-002.png (image/png) Apply Conditional Formatting in Worksheets-003.png (image/png) Apply Conditional Formatting in Worksheets-004.png (image/png) Apply Conditional Formatting in Worksheets-005.png (image/png) Combine Multiple Workbooks into a Single Workbook-001.png (image/png) Combine Multiple Workbooks into a Single Workbook-002.png (image/png) Combine Multiple Workbooks into a Single Workbook-003.png (image/png) Combine Multiple Workbooks into a Single Workbook-004.png (image/png) Combine Multiple Workbooks into a Single Workbook-005.png (image/png) Combine Multiple Workbooks into a Single Workbook-006.png (image/png) Combine Multiple Workbooks into a Single …","date":-62135596800,"description":"","objectID":"8e475d8588aaf6fddd8ddaf94365d67a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/managingworkbooksandworksheets/","title":"Managing Workbooks and Worksheets"},{"content":"Some Unicode characters are not displayable by the user specified font. One such Unicode character is Non-breaking Hyphen (U+2011) and its Unicode number is 8209. This character cannot be displayed with Times New Roman, but it can be displayed with other fonts like Arial Unicode MS.\nWhen such a character occurs inside some word or sentence which is in some specific font like Times New Roman, then Aspose.Cells changes the font of entire word or sentence to font which could display this character like Arial Unicode to MS.\nHowever, this is undesirable behavior for some users and they want only that specific character\u0026amp;rsquo;s font must be changed instead of changing the font of entire word or sentence.\nTo deal with this problem, Aspose.Cells provides PdfSaveOptions.IsFontSubstitutionCharGranularity property which should be set true so that only the font of specific character which is not displayable to be changed to displayable font and rest of the word or sentence should remain in original font.\nExample\nThe following screenshot compares the two output PDFs generated by the sample code below.\nOne is generated without setting PdfSaveOptions.IsFontSubstitutionCharGranularity property and the other was generated after setting the PdfSaveOptions.IsFontSubstitutionCharGranularity property to true.\nAs you can see in the first Pdf, the font of entire sentence has changed from Times New Roman to Arial Unicode MS because of Non-Breaking Hyphen. While in the second Pdf, only the font of Non-Breaking Hyphen has changed.\n   First Pdf File            Second Pdf File        Sample Code    \\\nAttachments: change-the-font-of-specific-unicode-character.png (image/png) change-the-font-of-specific-unicode-character.png (image/png) change-the-font-of-specific-unicode-character-2.png (image/png)\n","date":-62135596800,"description":"","objectID":"b82506ad38564252ed47ed4181f94352","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/change+the+font+on+just+the+specific+unicode+characters+while+saving+to+pdf/","title":"Change the Font on just the specific Unicode characters while saving to PDF"},{"content":"Aspose.Cells allows you to change the HTML link target type. HTML link looks like this\nAs you can see the target attribute in above html link is _self. You can control this target attribute using the HtmlSaveOptions.LinkTargetType property. This property takes the HtmlLinkTargetType enum which has the following values.\n HtmlLinkTargetType.Blank HtmlLinkTargetType.Parent HtmlLinkTargetType.Self HtmlLinkTargetType.Top  Change the HTML Link Target Type\nThe following code illustrates the usage of HtmlSaveOptions.LinkTargetType property. It changes the link target type to blank. By default, it is parent. You can get the source excel file from this link however you can use any excel file which contains a html hyperlink inside it to run this code.\n\\\n\\\nAttachments: source.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"d134ea134c366d0b90c0c44ee2bcffa9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/change+the+html+link+target+type/","title":"Change the HTML Link Target Type"},{"content":"Aspose.Cells supports converting XLS files that contain images and charts to PDF documents. Aspose.Cells for .NET can work independently to convert a spreadsheet to PDF: Aspose.PDF for .NET is not required for the conversion. The process can be done in memory as the process does not depend on temporary or intermediary XML files. This means that large Excel files, for example, ones containing images, charts, and other drawing objects, can be converted quickly and efficiently.\nSample Code\n\\\nIf the spreadsheet contains formulas, it is best to call the Workbook.CalculateFormula method just before rendering to PDF. Doing so ensures that formula dependent values are recalculated, and the correct values are rendered in the PDF.\n","date":-62135596800,"description":"","objectID":"8a0f144dcde7fa0b4abc94de90752bdf","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/convert+xls+file+with+images+or+charts+to+pdf/","title":"Convert XLS File with Images or Charts to PDF"},{"content":"Charts are visually appealing and make it easy for users to see comparisons, patterns, and trends in data. For instance, rather than analyzing columns of worksheet numbers, a chart shows at a glance whether sales are falling or rising, or how actual sales compare to projected sales. People are frequently asked to present statistical and graphical information in an easy to understand and an easy to maintain manner. A picture helps.\nSometimes, charts are needed in an application or web pages. Or it might be needed needed for a Word document, a PDF file, a PowerPoint presentation or some other application. In each case, you want to render the chart as an image so that you can use it elsewhere.\n   Contents Summary\n1 Converting Charts to Images 1.1 Converting a Pie Chart to an Image File\n1.2 Converting a Column Chart to an Image File\n ||      Converting Charts to Images      In the examples here, a pie chart and a column char are converted to images.\nConverting a Pie Chart to an Image File\nFirst, create a pie chart in Microsoft Excel and then convert it to an image file with Aspose.Cells. The code in this example creates an EMF image based on the pie chart in the template Microsoft Excel file.\n   Output: pie chart image          Create a pie chart in Microsoft Excel :  Opened a new workbook in Microsoft Excel. Input some data into a worksheet. Created a pie chart based on the data. Save the file.       The input file.          Download and install Aspose.Cells:  Download Aspose.Cells for .NET. Install it on your development computer.    All Aspose components work in evaluation mode when first installed. The evaluation mode has no time limit and it only injects watermarks into output documents.\n Create a project:  Start Visual Studio.Net. Create a new console application. This example uses a C# console application, but you can use VB.NET too. Add a reference. This project uses Aspose.Cells so add a reference to Aspose.Cells, for example \u0026amp;hellip;\\Program …","date":-62135596800,"description":"","objectID":"17843191408722fbed850a804f88c57a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/convert+an+excel+chart+to+image/","title":"Convert an Excel Chart to Image"},{"content":"PDF (Portable Document Format) represents documents independently of the software, hardware, and operating system used to create those documents. A PDF file can be documents with any combination of text, graphics, and images in a device-independent and resolution-independent manner. PDF files are often compressed, so they take up less space than the original file.\nAt times, you need to convert a Microsoft Excel file to PDF. For this, you require a fast, secure, accurate and reliable solution that lets you distribute PDF documents around the world. There are numerous conversion tools that can perform this task. But you have to make sure that the layout of the original Excel document is retained in the output PDF file. Images, data formatting, fonts, attributes, colors, page setup settings, text orientation, borders, charts etc. should be rendered accurately and precisely. Aspose.Cells ensures high-fidelity conversion.\nThis document is designed to provide comprehensive understanding of how a Microsoft Excel document (containing images, charts, formatting etc.) can be converted to PDF. To that end, is shows how to create a simple console application in Visual Studio.Net that converts an Excel file to PDF using Aspose.Cells API. The conversion is performed with high degree of precision and accuracy.\n   Contents Summary\n1 Converting Excel to PDF 1.1 The Template Excel File\n1.2 Conversion Process\n1.3 Result\n ||      Converting Excel to PDF      This example uses an Excel file (SampleInput.xlsx) as a template. The workbook contains worksheets with charts and image. Each worksheet contians different types of formats using fonts, attributes, colors, shading effects and borders. There\u0026amp;rsquo;s a column chart on the first worksheet and an image on the last.\nThe Template Excel File\nThe template file has three worksheets, including charts and image as Media. The first worksheet has charts and last worksheet has an image as shown below in the screenshots.\n         The first …","date":-62135596800,"description":"","objectID":"74148d3ad3d5b33d131b4b1f2b04448b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/convert+an+xls+file+to+pdf+format/","title":"Convert an XLS File to PDF Format"},{"content":"Scalable Vector Graphics (SVG) is an XML-based vector image format for two-dimensional graphics that also supports interactivity and animation. The SVG specification is an open standard developed by the World Wide Web Consortium (W3C) since 1999.\nSVG images and their behaviors are defined in XML text files. This means that they can be searched, indexed, scripted, and compressed. As XML files, SVG images can be created and edited with any text editor, but are more often created with drawing software.\nAspose.Cells can save chart into images in various formats like BMP, JPEG, PNG, GIF, SVG etc. This article explains how to save a chart to SVG format.\nThe following sample code explains how to use Aspose.Cells to convert a chart into an SVG format image. The code loads the source Microsoft Excel file and then saves the first chart found on the first worksheet to SVG.\n\\\nAttachments: Chart-image-in-SVG-format.png (image/png) SVG-chart-image-inside-notepad.png (image/png)\n","date":-62135596800,"description":"","objectID":"2b63f4d95cff59ec77611597f6ce4add","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/converting+chart+to+image+in+svg+format/","title":"Converting Chart to Image in SVG Format"},{"content":"This document is designed to provide the developers with a detailed understanding on how to convert a worksheet to an image file \u0026amp;amp; worksheet with multiple pages to an image file per page.\nSometimes, you might need to present worksheets as images, for example to use them in applications or web pages. You might need to insert the images into a Word document, a PDF file, a PowerPoint presentation or use them in some other scenario. Simply, you want to render the worksheet as an image. Aspose.Cells supports converting worksheets in Microsoft Excel files to images. Also, Aspose.Cells supports converting a workbook to multiple image files, one per page.\nYou might use Office Automation to achieve this, but Office automation has its own drawbacks. There are several reasons and issues involved: for example security, stability, scalability/Speed, price, and features. In short, there are many reasons, but the main one is that Microsoft themselves strongly recommends against Office automation.\n   Contents Summary\n1 Using Aspose.Cells to Convert Worksheet to Image File 1.1 Setup Project\n1.2 Convert Worksheet to Image File\n2 Using Aspose.Cells to Convert Worksheet to Image File by Page 2.1 Convert Worksheet to Image by page\n ||      Using Aspose.Cells to Convert Worksheet to Image File      This article shows how to create a console application in Visual Studio.Net, convert a worksheet to an image, and a worksheet into one image for each worksheet with a few and simplest lines of code using the Aspose.Cells API.\nYou need to import the Aspose.Cells.Rendering namespace to your program/project. It has several valuable classes, such as SheetRender, ImageOrPrintOptions, WorkbookRender and so on. The Aspose.Cells.Rendering.SheetRender class represents a worksheet to render images for the worksheet and has an overloaded ToImage method that can convert a worksheet to image files directly with any attributes or options set. It can return a System.Drawing.Bitmap object and you can save …","date":-62135596800,"description":"","objectID":"0170eaa9ebfbdc3c1b81dcc24d40ec0c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/converting+worksheet+to+image+and+worksheet+to+image+by+page/","title":"Converting Worksheet to Image and Worksheet to Image by Page"},{"content":"This document is designed to provide a detailed understanding of how to convert a worksheet to an image file and apply different image and print options for the image, options like resolution, TIFF compression, image format and page quality.\n   Contents Summary\n1 Saving Worksheets to Images - Different Approaches\n2 Using Aspose.Cells to Convert Worksheet to Image using ImageOrPrint options. 2.1 Creating a template workbook in Microsoft Excel\n2.2 Download and Install Aspose.Cells\n2.3 Create a Project\n2.4 Add References\n2.5 Convert Worksheet to Image file\n3 Conversion Options\n4 Image conversion using WorkbookRender\n ||      Saving Worksheets to Images - Different Approaches      Sometimes, you might require presenting your worksheets as a pictorial representation. You do need to present the worksheet images into your applications or web pages. You might need to insert the images into a Word document, a PDF file, a PowerPoint presentation or use them in some other scenario. Simply you want a worksheet rendered as an image, so that you can use it elsewhere. Aspose.Cells supports converting worksheets in Excel files to images. Also, Aspose.Cells supports setting different options like image format, resolution (both vertical and horizontal), image quality and other image and print options.\nYou might try Office Automation but Office automation has its own drawbacks. There are several reasons and issues involved: for example, security, stability, scalability and speed, price, and features. In Short, there are many reasons, with the top one being that Microsoft themselves strongly recommends against Office automation from software solutions.\nThis article shows how to create a console application in Visual Studio .NET, perform the conversion of worksheet to image using different image and print options with a few and simplest lines of code using Aspose.Cells API.\nYou need to import Aspose.Cells.Rendering namespace to your program/project. It has several valuable classes, for …","date":-62135596800,"description":"","objectID":"a26a683f6aed399086c6f673874d7384","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/converting+worksheet+to+image+using+imageorprint+options/","title":"Converting Worksheet to Image using ImageOrPrint Options"},{"content":"Sometimes, you need to generate the image of your worksheet as transparent image. You want to apply transparency to all cells which have no fill colors. Aspose.Cells provides the ImageOrPrintOptions.Transparent property to apply transparency to worksheet image. When this property is false, then cells with no fill colors are drawn with white color and when it is true, cells with no fill colors are drawn transparent.\nIn the following worksheet image, transparency has not been applied. The cells with no fill colors are drawn white.\n   Output without transparency: the cell background is white        While, in the following worksheet image, transparency has been applied. The cells with no fill colors are transparent.       Output with transparency enabled        The following sample code generates a transparent image from an Excel worksheet.    \\\nAttachments: non-transparent-image.PNG (image/png) transparent-image.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"61d0f6fbdbcda64b13a1903a35822b4a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/create+transparent+image+of+excel+worksheet/","title":"Create Transparent Image of Excel Worksheet"},{"content":"Aspose.Cells exports frame scripts and document properties while converting a workbook into HTML. The 8.6.0 version of Aspose.Cells for .NET introduces an option which allows you optionally disable exporting frame scripts and doctment properties. Please use the HtmlSaveOptions.ExportFrameScriptsAndProperties property to disable the export.\nDisable exporting frame scripts and document properties\nThe following sample code allows you to disable exporting frame scripts and document properties. Once you convert a workbook into HTML, the output file will not contain any frame scripts and document properties.\n\\\n","date":-62135596800,"description":"","objectID":"95e633836d5eb1327848f93dc5d3c127","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/disable+exporting+frame+scripts+and+document+properties/","title":"Disable Exporting Frame Scripts and Document Properties"},{"content":"Aspose.Cells provides a useful HtmlSaveOptions.PresentationPreference property for developers who need to render better layout when saving a Microsoft Excel file to HTML or MHT format. The default value of the property is false. We recommend setting this property to true to get a more attractive presentation of Excel reports.\nPlease see the sample code below that demonstrates how to render an HTML file from Excel report with presentation preference on.\n\\\n","date":-62135596800,"description":"","objectID":"1a5ec22384a39f8c488d4d11fc6cfdcb","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/excel+to+html+-+use+presentationpreference+option+for+better+layout/","title":"Excel to HTML - Use PresentationPreference Option for Better Layout"},{"content":"By default, when chart is export to svg format, viewBox attribute is not included in its xml. However, Aspose.Cells provides ImageOrPrintOptions.SVGFitToViewPort property which when set to true exports the chart to svg with viewBox attribute.\nExport Chart to SVG with viewBox attribute\nThe following sample code exports the chart to svg format with viewBox attribute.\n\\\nIf you open the chart\u0026amp;rsquo;s svg in notepad, you will find the viewBox attribute similar to this.\n\u0026amp;lt;svg xmlns=\u0026amp;quot;http://www.w3.org/2000/svg\u0026amp;rdquo;\nxmlns:xlink=\u0026amp;quot;http://www.w3.org/1999/xlink\u0026amp;rdquo;\nwidth=\u0026amp;quot;100%\u0026amp;rdquo; height=\u0026amp;quot;100%\u0026amp;rdquo;\nviewBox=\u0026amp;quot;0 0 480 288\u0026amp;quot;\u0026amp;gt;\n","date":-62135596800,"description":"","objectID":"a769d88b23e205afe001af6698f052d4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/export+chart+to+svg+with+viewbox+attribute/","title":"Export Chart to SVG with viewBox attribute"},{"content":"You can use Aspose.Cells to export your worksheet or chart into image with desired width and height. It provides ImageOrPrintOptions.SetDesiredSize() method to set the desired width and height of the exported image. The width and height are specified in unit of pixels.\nExport Worksheet into Image with Desired Width and Height\nThe following code exports the worksheet into image with 400x400 size.\n\\\n","date":-62135596800,"description":"","objectID":"98d59ff68605871a8cd84cd24f9f1c09","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/export+worksheet+or+chart+into+image+with+desired+width+and+height/","title":"Export Worksheet or Chart into Image with Desired Width and Height"},{"content":"Microsoft Excel users can add images to spreadsheets. With Aspose.Cells, it\u0026amp;rsquo;s possible to read images from Microsoft Excel files and save them to a local drive. This article shows how.\nThe sample code below shows how to extract images from an Excel file and save them.\n\\\n","date":-62135596800,"description":"","objectID":"2a187808792f77ef9ccf62fb27656558","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/extract+images+from+worksheets+using+imageorprintoptions/","title":"Extract Images from Worksheets using ImageOrPrintOptions"},{"content":"Sometimes, you need to find cells with a particular style applied. You can use Aspose.Cells to find all cells with a common style. Aspose.Cells provides the FindOptions.Style property which you can use to specify the style to search cells for.\nThe code in this example finds all cells that have the same style as that of cell A1. After the code has been executed, all the cells that have the same style as A1 contain the text \u0026amp;ldquo;Found\u0026amp;rdquo;.\n\\\nAttachments: cells-with-styles.png (image/png) cells-found-with-style.png (image/png) cells-found-with-style.png (image/png) cells-with-styles.png (image/png)\n","date":-62135596800,"description":"","objectID":"6ac5153e31c858e95dfdca6c998234f6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/find+cells+with+specific+style/","title":"Find Cells with Specific Style"},{"content":"Sometimes you want to generate a PDF file that fits all a worksheet\u0026amp;rsquo;s columns onto one page. The PdfSaveOptions.AllColumnsInOnePagePerSheet property provides this feature in a very easy-to-use manner. Complex calculations such as the height and width of the output PDF are handled internally and are based on the data in the worksheet.\nResources\nBelow are the input spreadsheet used in the example and output PDF generated for reference.\n Excel File (Input) PDF File (Output)  Fit Worksheet Columns on Single PDF Page\nPdfSaveOptions.AllColumnsInOnePagePerSheet ensures that all columns in a worksheet are rendered to a single PDF page, although rows may expand to several pages depending on the data in worksheet.\nThe sample code below shows how to use PdfSaveOptions.AllColumnsInOnePagePerSheet property to render a large worksheet of 100 columns.\n\\\nWhen a given worksheet has many columns, the rendered PDF file may show the content in a very small size. It is still readable when scaled up in a viewing application such as Acrobat Reader.\nIf your spreadsheet contains formulas, it is best to call Workbook.CalculateFormula() just before rendering the spreadsheet to PDF format. Doing so will ensure that the formula dependent values are recalculated, and the correct values are rendered in the PDF.\nAttachments: Sample-AllColumnsInOnePagePerSheet.xlsx (image/png) Output-AllColumnsInOnePagePerSheet.pdf (image/png)\n","date":-62135596800,"description":"","objectID":"2d4d8765ed94402bdb402678ba5fa371","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/fit+all+worksheet+columns+on+single+pdf+page/","title":"Fit All Worksheet Columns on Single PDF Page"},{"content":"It can be useful to generate thumbnails from worksheets. A thumbnail is a small image that can be pasted into a Word document or a PowerPoint presentation to give a preview of what\u0026amp;rsquo;s on the worksheet. It can be added to a webpage with a link to download the original document and has a host of other uses.\nAspose.Cells for .NET allows you to output worksheets to image files so making a thumbnail is easy. The sample code below shows you, how to output worksheets to image files.\n\\\n","date":-62135596800,"description":"","objectID":"6bc47259b0a645ca4615d35114f34e77","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/generate+thumbnail+of+the+worksheet/","title":"Generate Thumbnail of the Worksheet"},{"content":"Sometimes, when rendering a Microsoft Excel file to PDF, Aspose.Cells substitutes fonts. Aspose.Cells provides a feature that lets developers know what particular font has been substituted by firing a warning. This is a useful feature that can help you identify why an Aspose.Cells rendered PDF looks different from the original Microsoft Excel file so you can take appropriate actions. For example, installing the missing fonts so that rendering results look the same.\nTo get warnings for font substitution when rendering Excel files to PDF, implement the IWarningCallback interface and set the PdfSaveOptions.WarningCallback property with your implemented interface.\nThe screenshot below shows a source Excel file that we will use in the following code. It has some text in the cells A6 and A7 in fonts that are not rendered fine by Microsoft Excel.\n   Not all fonts are rendered correctly        Aspose.Cells will substitute the fonts in the cells A6 and A7 with suitable fonts as shown below.       Substituted fonts        Download Source File and Output PDF    You can download the source Excel file and the output PDF from the following links\n source.xlsx output.pdf  Code\nThe following code implements the IWarningCallback and set the PdfSaveOptions.WarningCallback property with the implemented interface. Now, whenever any font will be substituted in any cell, Aspose.Cells will fire a warning inside the WarningCallback.Warning() method.\n\\\nOutput\nAfter converting the source Excel file to PDF, the warnings are output to the debug console like this:\nWARNING INFO: Font substitution: Font [ Athene Logos; Regular ] has been substituted in Cell [ A6 ] in Sheet [ Sheet1 ].\nWARNING INFO: Font substitution: Font [ B Traffic; Regular ] has been substituted in Cell [ A7 ] in Sheet [ Sheet1 ].\nIf your spreadsheet contains formulas, it is best to call Workbook.CalculateFormula method just before rendering the spreadsheet to PDF format. Doing so will ensure that the formula dependent values …","date":-62135596800,"description":"","objectID":"24593eaa54cb98a2583fcbc0445d037e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/get+warnings+for+font+substitution+while+rendering+excel+file/","title":"Get Warnings for Font Substitution while Rendering Excel File"},{"content":"Sometimes, you want to ignore hidden columns while exporting worksheet data to data table. You can achieve it using Aspose.Cells by setting the ExportTableOptions.PlotVisibleColumns true. By default, its value is false, so you need to set it true to ignore the hidden columns.\nIgnore Hidden Columns while Exporting Worksheet Data to Data Table\nThe following sample code explains the usage of ExportTableOptions.PlotVisibleColumns property in ignoring the hidden columns while exporting the worksheet entire data to data table.\n\\\n","date":-62135596800,"description":"","objectID":"91ccf380de54f6694100d2169d25cfd9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/ignore+hidden+columns+while+exporting+worksheet+data+to+data+table/","title":"Ignore Hidden Columns while Exporting Worksheet Data to Data Table"},{"content":"Sometimes, you want to print a range of pages to an output PDF file. Aspose.Cells has the ability to set a limit on how many pages are generated when converting an Excel spreadsheet to the PDF file format.\nLimiting the Number of Pages Generated\nThe following example shows how to render a range of pages (3 and 4) in a Microsoft Excel file to PDF.\n\\\nIf the spreadsheet contains formulas, it is best to call Workbook.CalculateFormula() just before rendering it to PDF. Doing ensures that formula dependent values are recalculated, and the correct values are rendered in the output file.\n","date":-62135596800,"description":"","objectID":"2d9f0ba8e0b6cb7a1c772164b8291439","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/limit+the+number+of+pages+generated+-+excel+to+pdf+conversion/","title":"Limit the Number of Pages Generated - Excel to PDF Conversion"},{"content":"Sometimes, developers need to configure page setup and print settings to control the printing process. Page setup and print settings offer various options and are fully supported in Aspose.Cells.\nThis article shows how to create a console application in Visual Studio.Net, and apply page setup and printing options to a worksheet with a few simple lines of code using the Aspose.Cells API.\n   Contents Summary\n1 Working with Page and Print Settings 1.1 Using Aspose.Cells to set Page Setup Options\n1.2 Setting Print options\n ||      Working with Page and Print Settings      For this example, we created a workbook in Microsoft Excel and use Aspose.Cells to set page setup and print options.\nUsing Aspose.Cells to set Page Setup Options\nFirst create a simple worksheet in Microsoft Excel. Then apply page setup options to it. Executing the code changes the Page Setup options as in the screenshot below.\n   Output file.          Create a worksheet with some data in Microsoft Excel:  Open a new workbook in Microsoft Excel. Add some data.   Set page setup options: Apply page setup options to the file. Below is a screenshot of the default options, before the new options are applied.     Default page setup options.          Download and install Aspose.Cells:  Download Aspose.Cells for .Net. Install it on your development computer. All Aspose components, when installed, work in evaluation mode. The evaluation mode has no time limit and it only injects watermarks into produced documents.   Create a project:  Start Visual Studio. Net. Create a new console application. This example will show a C# console application, but you can use VB.NET too.   Add references:  This example uses Aspose.Cells so add a reference to that component to the project. For example: …\\Program Files\\Aspose\\Aspose.Cells\\Bin\\Net1.0\\Aspose.Cells.dll   Write the application that invokes the API:  \\\n\\\nSetting Print options\nPage setup settings also provide several print options (also called sheet options) that allow …","date":-62135596800,"description":"","objectID":"74ce2a1fe81dac28d4078cfd754c1f77","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/page+setup+and+printing+options/","title":"Page Setup and Printing Options"},{"content":"You can save Excel workbooks to HTML. However, if the workbook contains hidden worksheets, Aspose.Cells by default exports the hidden worksheet contents to the HTML output (_files) directory which contains files such as worksheets, images, tabstrip.htm, stylesheet.css etc. Sometimes, exporting the hidden worksheets content this way isn\u0026amp;rsquo;t appropriate. For example, if the hidden worksheet contains images that should not be exported to the _files directory.\nAspose.Cells provides the HtmlSaveOptions.ExportHiddenWorksheet property. By default, it is set to true and hidden worksheets are exported to HTML. If you set it false, Aspose.Cells will not export hidden worksheet contents.\n\\\n","date":-62135596800,"description":"","objectID":"abfa53ace5fa3443b8bf473875c1830d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/prevent+exporting+hidden+worksheet+contents+on+saving+to+html/","title":"Prevent Exporting Hidden Worksheet Contents on Saving to HTML"},{"content":"Microsoft Excel allows you to print comments while printing or saving to PDF format with the following options\n None At end of sheet As displayed on sheet  Aspose.Cells provide the PrintCommentsType enum to support the same feature. The PrintCommentsType enum has the following members\n PrintNoComments PrintInPlace PrintSheetEnd  Print Comments while saving to PDF\nThe following sample code illustrates how to use PrintCommentsType to print comments while saving to PDF.\n\\\n","date":-62135596800,"description":"","objectID":"a6c97cfdd6c5ac3adf37112b91bbb4a6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/print+comments+while+saving+to+pdf/","title":"Print Comments while saving to PDF"},{"content":"Microsoft Excel allows you to print range of pages of workbook or worksheet. The following screenshot shows the Microsoft Excel interface to specify the range of pages.\nAspose.Cells provides the WorkbookRender.ToPrinter(string PrinterName, int PrintPageIndex, int PrintPageCount) and SheetRender.ToPrinter(string PrinterName, int PrintPageIndex, int PrintPageCount) methods for this purpose.\nMicrosoft Excel Interface to specify the Range of Pages to Print\nThe following sample code illustrates the use of WorkbookRender.ToPrinter(string PrinterName, int PrintPageIndex, int PrintPageCount) and SheetRender.ToPrinter(string PrinterName, int PrintPageIndex, int PrintPageCount) methods. It prints the pages 2-5 of the workbook and worksheet.\n\\\nAttachments: range-of-pages.png (image/png)\n","date":-62135596800,"description":"","objectID":"fec49c7fe1916cb22651072d597e6bf4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/printing+range+of+pages+using+sheetrender+and+workbookrender/","title":"Printing Range of Pages using SheetRender and WorkbookRender"},{"content":"After creating a worksheet, you often want to print a hard copy of it. This article explains how to print spreadsheets with Aspose.Cells.\n   Contents Summary\n1 Introduction 1.1 Print Using SheetRender\n1.2 Print Using WorkbookRender\n ||      Introduction      Microsoft Excel assumes that you want to print the entire worksheet area unless you specify a selection. To print using Aspose.Cells, first import the Aspose.Cells.Rendering namespace to the program. It has several useful classes, for example, SheetRender and WorkbookRender.\nPrint Using SheetRender\nThe Aspose.Cells.Rendering.SheetRender class represents a worksheet and has the ToPrinter method which can print a worksheet. The following sample code shows how to print a worksheet.\n\\\nPrint Using WorkbookRender\nTo print a whole workbook, iterate through the sheets and print them, or use the WorkbookRender class.\n\\\nAspose.Cells also provides overloads for the WorkbookRender.ToPrinter() and SheetRender.ToPrinter() methods, so it\u0026amp;rsquo;s possible to set the print job name while printing Excel spreadsheets. By default, all print jobs are created with the name \u0026amp;ldquo;Document\u0026amp;rdquo;.\nAttachments: Printing Workbooks-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"09d0beecca2737674a4c967c2de19eda","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/printing+workbooks/","title":"Printing Workbooks"},{"content":"When working with large Microsoft Excel files (for example a workbook that has many sheets, each with 50 columns and 300 or more rows of data), you might want the PDF output to show one page per worksheet, regardless of the size of the worksheet. This would mean that each page is likely to have a radically different page size. This can be achieved by using Aspose.Cells for .NET.\nPlease see the following sample code that converts an Excel file with multiple worksheets to PDF.\n\\\nIf hte OnePagePerSheet option is set to true, all the sheet content will be rendered to one PDF page. The paper size of PageSetup would be invalid, and the other settings of PageSetup will still take effect.\nIf your spreadsheet contains formulas, it is best to call Workbook.CalculateFormula() just before rendering the spreadsheet to PDF. This ensures that the formula dependent values are recalculated, and the correct values are rendered in the PDF.\n","date":-62135596800,"description":"","objectID":"eea9f1691d109ce286df8582234bdf85","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/render+one+pdf+page+per+excel+worksheet+-+excel+to+pdf+conversion/","title":"Render One Pdf Page Per Excel Worksheet - Excel to Pdf Conversion"},{"content":"Normal Unicode characters are 2-bytes long while Unicode Supplementary characters are 4-bytes long. Aspose.Cells now supports rendering of these 4-bytes Unicode characters.\nIn the Unicode Character Standard, Supplementary Characters are the characters assigned code points from U+10000 to U+10FFFF. In other words, these are the Unicode characters greater than U+FFFF.\n In UTF-8 these characters are each 4 bytes long. In UTF-16 these characters require 2 surrogates (16-bit units).     Contents Summary\n1 Render Unicode Supplementary characters in output Pdf by Aspose.Cells 1.1 Programming Sample\n ||      Render Unicode Supplementary characters in output Pdf by Aspose.Cells      The following screenshot shows how Aspose.Cells rendered the source excel file into the output pdf. As you can see all three Unicode Supplementary characters have been rendered exactly same as done by Microsoft Excel.\nProgramming Sample\nYou can use this sample code to convert source excel file into output pdf.\n\\\nAttachments: unicode-supplementary-characters.png (image/png) unicode-supplementary-characters.xlsx (application/vnd.openxmlformats-officedocument.spre) output.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"dfe367070ed5d711309a85613e4ff02b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/render+unicode+supplementary+characters+in+output+pdf+by+aspose.cells/","title":"Render Unicode Supplementary characters in output Pdf by Aspose.Cells"},{"content":"Aspose.Cells can now render worksheet to graphic context. Graphic context can be anything like image file, screen or printer etc. Please use one of the following two methods to render worksheet to graphic context.\n SheetRender.ToImage(int pageIndex, Graphics g, float x, float y) SheetRender.ToImage(int pageIndex, Graphics g, float x, float y, float width, float height)  Render Worksheet to Graphic Context\nThe following code illustrates how to use Aspose.Cells to render worksheet to graphic context. Once you will execute a code, it will print the entire worksheet and fill the leftover empty space with blue color in graphics context and save the image as **OutputImage_out_.png** file. You can use any source excel file to try this code. Please also read the comments inside the code for better understanding.\n\\\n\\\n\\\n","date":-62135596800,"description":"","objectID":"03f088f55d8fc0883d27aeae08f2c4f9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/render+worksheet+to+graphic+context/","title":"Render Worksheet to Graphic Context"},{"content":"While working with big Microsoft Excel files with lots of images, you might need to compress images that have been added to reduce the output PDF file size and improve the overall conversion performance. Aspose.Cells supports resampling added images to reduce the output PDF file size and improve the performance somewhat.\nExample\nPlease see the following sample code that describes how to perform the task using the Aspose.Cells API. The example converts a Microsoft Excel file to a PDF file while compressing the images in the file.\n\\\nUsing the the SetImageResample option minimizes the size of the output PDF but it may affect the image quality a bit.\nIf your spreadsheet contains formulas, it is best to call Workbook.CalculateFormula() just before rendering the spreadsheet to PDF format. Doing so will ensure that the formula dependent values are recalculated, and the correct values are rendered in the PDF.\n","date":-62135596800,"description":"","objectID":"0398cda9492227cd8b4e008de754989e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/resampling+added+images+-+excel+to+pdf+conversion/","title":"Resampling Added Images - Excel to PDF Conversion"},{"content":"Aspose.Cells supports converting XLS files (that contain images, charts, etc.) to PDF documents. Aspose.Cells for .NET can work independently to convert a spreadsheet to PDF and you do not need to use Aspose.PDF for .NET for the conversion. The conversion does not require the software to create or use any temporary files as the whole process can be done in memory.\nSave Each Worksheet to a Different PDF File\nIf you need to save each worksheet in your template Excel file to generate different PDF files, you can achieve this easily. You may try to hide sheets in the file and make one sheet visible at a time to render to PDF.\nIf your spreadsheet contains formulas, it is best to call Workbook.CalculateFormula() just before rendering the spreadsheet to PDF format. Doing so will ensure that the formula dependent values are recalculated, and the correct values are rendered in the PDF.\n","date":-62135596800,"description":"","objectID":"ab8a75df692a2e19596df197871b04f7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/save+each+worksheet+to+a+different+pdf+file/","title":"Save Each Worksheet to a Different PDF File"},{"content":"By default, Aspose.Cells saves Excel into PDF with Standard size. However you can also save it with Minimum size using the PdfSaveOptions.OptimizationType property. It accepts the following values\n PdfOptimizationType.Standard PdfOptimizationType.MinimumSize  Save Excel into PDF with Standard or Minimum Size using Aspose.Cells\nThe following sample code shows how you can save Excel into PDF with Standard or Minimum size using PdfSaveOptions.OptimizationType property.\n\\\nAttachments: standard-or-minimum-size.png (image/png)\n","date":-62135596800,"description":"","objectID":"eef3f7b1735572f68468a64487d2d17d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/save+excel+into+pdf+with+standard+or+minimum+size/","title":"Save Excel into PDF with Standard or Minimum Size"},{"content":"Sometimes, developers need to work with encrypted PDF files. For example, they need to secure documents with user and owner passwords so not just anyone can open them, or want to restrict whether the document content can be printed or extracted.\nThis article explains how to pass in PDF security options when saving spreadsheets to PDF.\nAspose.Cells provides the Aspose.Cells.Rendering.PdfSecurity namespace for working with security. The sample code below describes how to secure PDFs with Aspose.Cells.\n\\\nIf the spreadsheet contains formulas, it is best to call Workbook.CalculateFormula() just before rendering it to PDF. This ensures that formula dependent values are recalculated and the correct values are rendered in the PDF.\n","date":-62135596800,"description":"","objectID":"90558928d497e8591961fa631f0f9c0c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/secure+pdf+documents/","title":"Secure PDF Documents"},{"content":"Aspose.Cells allows you to set default font while rendering spreadsheet to HTML. Please use the HtmlSaveOptions.DefaultFontName for this purpose. This property is useful when there are some cells in spreadsheet that has invalid or non-existing fonts. Then those cells will be rendered in a font specified with HtmlSaveOptions.DefaultFontName property.\nSet Default Font while rendering spreadsheet to HTML\nThe following sample code creates a workbook and adds some text in cell B4 of first worksheet and sets its font to some unknown/non-existing font. Then it saves the workbook in HTML by setting different default font names like Courier New, Arial, Times New Roman etc.\nThe screenshot shows the effect of setting different default font names via HtmlSaveOptions.DefaultFontName property.\nThe code generates the output HTML file with Courier New, the output HTML with Arial and the output HTML file with Times New Roman.\n\\\nAttachments: effect-of-setting-different-default-fonts.png (image/png) sample.xlsx (application/unknown) out_courier_new.htm (text/html) out_times_new_roman.htm (text/html) out_arial.htm (text/html)\n","date":-62135596800,"description":"","objectID":"d7a6b357cff49e672b453b81dc9e8eed","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/set+default+font+while+rendering+spreadsheet+to+html/","title":"Set Default Font while rendering spreadsheet to HTML"},{"content":"Please use the ImageOrPrintOptions.DefaultFont property to set the default font while rendering spreadsheet to images. This property will only be effective when the default font of workbook could not render your characters. The default font specified with ImageOrPrintOptions.DefaultFont property is used for all those cells which have invalid or non-existent fonts.\nSet Default Font while rendering spreadsheet to images\nThe following sample code creates a workbook, adds some text in cell A4 of first worksheet and sets its font to invalid or non-existent font. Then, it takes two images of the worksheet. The first image is taken by setting the ImageOrPrintOptions.DefaultFont property to Courier New and the second image is taken by setting the ImageOrPrintOptions.DefaultFont property to Times New Roman.\nThis is the output image after setting the ImageOrPrintOptions.DefaultFont property to Courier New.\nThis is the output image after setting the ImageOrPrintOptions.DefaultFont property to Times New Roman.\n\\\nAttachments: out_courier_new.png (image/png) out_times_new_roman.png (image/png) out_courier_new.png (image/png) out_times_new_roman.png (image/png)\n","date":-62135596800,"description":"","objectID":"18e94c9b91d15f6b6560d101d0435aba","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/set+default+font+while+rendering+spreadsheet+to+images/","title":"Set Default Font while rendering spreadsheet to images"},{"content":"You can specify Job or Document Name while printing your workbook or worksheet using the WorkbookRender or SheetRender objects. Aspose.Cells provides the WorkbookRender.ToPrinter(printerName, jobName) and SheetRender.ToPrinter(printerName, jobName) methods which you can use to specify Job Name while printing your workbook or worksheet\nSpecify Job or Document Name while printing with Aspose.Cells\nThe sample code loads the source Excel file and then sends it to printer by specifying the job or document name using the WorkbookRender.ToPrinter(printerName, jobName) and SheetRender.ToPrinter(printerName, jobName) methods.\nSample Code\n\\\nAttachments: Job-Name-while-printing-with-Aspose.Cells.png (image/png)\n","date":-62135596800,"description":"","objectID":"9d8f5964812728d92d370b1eca0cc33d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/specify+job+or+document+name+while+printing+with+aspose.cells/","title":"Specify Job or Document Name while printing with Aspose.Cells"},{"content":"Sometimes, you need to present worksheet images in applications or web pages. For example, you might need to insert images into a Word document, a PDF file, a PowerPoint presentation or some other document. Basically, you want to render a worksheet as an image so that it can be pasted into other applications. Aspose.Cells allows you to convert Microsoft Excel worksheets to images.\nRemove Whitespace around Data\nThe Aspose.Cells.Rendering.SheetRender API converts a worksheet to an image file with any specified attributes, for example, image format, paginated sheets, etc. Several image formats are supported, including BMP, GIF, JPG, TIFF, and EMF.\nWhen you use the sheet-to-image feature, the output image has whitespace, that is, a border, around it by default. You can remove this by setting the top, left, bottom and right page setup margins for the source worksheet to 0 and specify Aspose.Cells.Rendering.ImageOrPrintOptions attributes accordingly.\nBelow example code removes the whitespace around the data in the output image.\n\\\nAttachments: Worksheet to Image - Remove white space around data-001.png (image/png) Worksheet to Image - Remove white space around data-002.png (image/png) Worksheet to Image - Remove white space around data 002.jpg (image/png) Worksheet to Image - Remove white space around data 001.jpg (image/png)\n","date":-62135596800,"description":"","objectID":"cdefb2d161038a0a25a38dca949c2da7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/worksheet+to+image+-+remove+whitespace+around+data/","title":"Worksheet to Image - Remove Whitespace around Data"},{"content":"Sometimes you want to specify the pixel format when rendering a worksheet to image format. By default, Aspose.Cells uses 32 bits per pixel. Aspose.Cells allows you to customize the pixel format (bit depth) using options for the rendered image.\nPlease see the sample code below that demonstrates how to set the desired pixel format while rendering images of the sheets.\n\\\n","date":-62135596800,"description":"","objectID":"1b0c673ca9c5eae8aa3293efd0a5324f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/worksheet+to+image+-+set+pixel+format+for+the+rendered+image/","title":"Worksheet to Image - Set Pixel Format for the Rendered Image"},{"content":"Articles in this section\nAttachments: Convert an Excel Chart to Image-001.png (image/png) Convert an Excel Chart to Image-002.png (image/png) Convert an Excel Chart to Image-003.png (image/png) Convert an Excel Chart to Image-004.png (image/png) Convert an Excel Chart to Image-005.png (image/png) Convert an XLS File to PDF Format-001.png (image/png) Convert an XLS File to PDF Format-002.png (image/png) Convert an XLS File to PDF Format-003.png (image/png) Convert an XLS File to PDF Format-004.png (image/png) Convert an XLS File to PDF Format-005.png (image/png) Convert an XLS File to PDF Format-006.png (image/png) Convert an XLS File to PDF Format-007.png (image/png) Convert an XLS File to PDF Format-008.png (image/png) Convert an XLS File to PDF Format-009.png (image/png) Worksheet to Image - Remove white space around data-001.png (image/png) Worksheet to Image - Remove white space around data-002.png (image/png) Worksheet to Image - Remove white space around data 002.jpg (image/png) Worksheet to Image - Remove white space around data 001.jpg (image/png) Utilize Page Setup and Printing Options-001.png (image/png) Utilize Page Setup and Printing Options-002.png (image/png) Utilize Page Setup and Printing Options-003.png (image/png) Utilize Page Setup and Printing Options-004.png (image/png) Utilize Page Setup and Printing Options-005.png (image/png) Utilize Page Setup and Printing Options-006.png (image/png) Printing Workbooks-001.png (image/png) Converting Worksheet to Image and Worksheet to Image by Page-001.png (image/png) Converting Worksheet to Image and Worksheet to Image by Page-002.png (image/png) Converting Worksheet to Image and Worksheet to Image by Page-003.png (image/png) Converting Worksheet to Image and Worksheet to Image by Page-004.png (image/png) Converting Worksheet to Image and Worksheet to Image by Page-005.png (image/png) Converting Worksheet to Image and Worksheet to Image by Page-006.png (image/png) Converting Worksheet to Image and Worksheet …","date":-62135596800,"description":"","objectID":"62b349cb82fb15d7d08f328970e4a93c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/renderingandprinting/","title":"Rendering and Printing"},{"content":"Aspose.Cells allows you to access and update the portions of the rich text of the cell. For this purpose, you can use Cell.GetCharacters() and Cell.SetCharacters() methods. These methods will return and accept the array of FontSetting objects which you can use to access and update various properties of font like font name, font color, boldness, etc.\n   Contents Summary\n1 Access and Update the Portions of Rich Text of Cell 1.1 Console Output\n ||      Access and Update the Portions of Rich Text of Cell      The following code demonstrates the usage of Cell.GetCharacters() and Cell.SetCharacters() method using the source excel file which you can download from the provided link. The source excel file has a rich text in the cell A1. It has 3 portions and each portion has a different font. The following code snippet accesses these portions and updates the first portion with a new font name. Finally, it saves the workbook as output excel file. When you will open it, you will find the font of the first portion of the text has changed to \u0026amp;ldquo;Arial\u0026amp;rdquo;.\n\\\nConsole Output\nHere is the console output of the above sample code using the source excel file.\nBefore updating the font settings\u0026amp;hellip;.\nCentury\nCourier New\nVerdana\nAfter updating the font settings\u0026amp;hellip;.\nArial\nCourier New\nVerdana\nAttachments: source.xlsx (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"0e57e669211f3b4a7af6b5c1918ea986","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/access+and+update+the+portions+of+rich+text+of+cell/","title":"Access and Update the Portions of Rich Text of Cell"},{"content":"Aspose.Cells provides the functionality to apply superscript (text above the baseline) and subscript (text below the baseline) effects to text.\n   Contents Summary\n1 Working with Superscript and Subscript 1.1 Applying Superscript\n1.2 Applying Subscript\n ||      Working with Superscript and Subscript      Apply the superscript effect by setting the Style.Font object\u0026amp;rsquo;s IsSuperscript property to true. To apply subscript, set the Style.Font object\u0026amp;rsquo;s IsSubscript property to true.\nThe following code examples show how to apply super and subscript to text.\nApplying Superscript\n\\\nApplying Subscript\n\\\n","date":-62135596800,"description":"","objectID":"f21fdc7ccae2f6af0d90e2f0dfcab20c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/apply+superscript+and+subscript+effects+on+fonts/","title":"Apply Superscript and Subscript Effects on Fonts"},{"content":"This article will explain how to apply Subtotal to data and changing the direction of Outline Summary Rows below Detail.\nYou can apply Subtotal to data using Worksheet.Cells.Subtotal() method. It takes the following parameters.\n CellArea - The range to apply subtotal on GroupBy - The field to group by, as a zero-based integer offset Function - The subtotal function. TotalList - An array of zero-based field offsets, indicating the fields to which the subtotals are added. Replace - Indicates whether replace the current subtotals PageBreaks - Indicates whether add page break between groups SummaryBelowData - Indicates whether add summary below data.  Also, you can control the direction of Outline Summary rows below detail as shown in the following screenshot using Worksheet.Outline.SummaryRowBelow property. You can open this setting in Microsoft Excel using Data \u0026amp;gt; Outline \u0026amp;gt; Settings\nExample\nThe following screenshot shows the source Excel file used in the sample code below which contains some data in columns A and B.\nThe following screenshot shows the output Excel file generated by the sample code. As you can see, subtotal has been applied to range A2:B11 and the direction of the outline is summary rows below detail.\nHere is the sample code to achieve the output as shown above.\n\\\nAttachments: direction-summary-rows-below-detail.png (image/png) source-excel-file.png (image/png) output-excel-file.png (image/png)\n","date":-62135596800,"description":"","objectID":"49ba4a366fe044dff8643873cd1a2088","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/applying+subtotal+and+changing+direction+of+outline+summary+rows+below+detail/","title":"Applying Subtotal and Changing Direction of Outline Summary Rows below Detail"},{"content":"Microsoft Excel allows users to add comments to cells to add additional information and highlight data. Developers may need to customize the comment to specify alignment settings and text direction. Aspose.Cells provides APIs to accomplish the task.\nAspose.Cells provides a Shape.TextDirection property to set text direction for a comment. The following sample code demonstrates the use of Shape.TextDirection property to set text direction for a comment.\n\\\nAttachments: changecommenttextdirection1.png (image/png)\n","date":-62135596800,"description":"","objectID":"d914ecbb3ef895d79064b9c19097d858","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/change+text+direction+of+the+comment/","title":"Change Text Direction of the Comment"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Check Custom Number Format when setting Style.Custom property\n3 Sample Code\n ||      Possible Usage Scenarios      If you assign invalid custom number format to Style.Custom property, then Aspose.Cells will not throw any exception. But if you want that Aspose.Cells should check if the assigned custom number format is valid or not, then please set the Workbook.Settings.CheckCustomNumberFormat property to true.\nCheck Custom Number Format when setting Style.Custom property\nThe following sample code assigns an invalid custom number format to Style.Custom property. Since, we have already set Workbook.Settings.CheckCustomNumberFormat property to true, therefore it throws exception e.g. Invalid number format. Please read the comments inside the code for more help.\nSample Code\n","date":-62135596800,"description":"","objectID":"3313141083bcccda207a61e33bc9b952","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/check+custom+number+format+when+setting+style.custom+property/","title":"Check Custom Number Format when Setting Style.Custom Property"},{"content":"Sometimes, you want to convert numeric data entered as text to numbers. You can enter numbers as text in Microsoft Excel by putting an apostrophe before a number, for example \u0026amp;lsquo;12345. Excel then treats the number as a string. Aspose.Cells allows you to convert strings to numbers.\nAspose.Cells provides the Cells.ConvertStringToNumericValue() method which can be used to convert all string or text numeric data into numbers.\nThe following screenshot shows string numbers in cells A1:A17. String numbers are aligned to the left.\n   Input file: numbers entered as text strings        These string numbers have been converted to numbers using Cells.ConvertStringToNumericValue() in the following screenshot. As you can see, they are now right-aligned.       Output file: the strings have been converted to numbers        The following sample code illustrates how to convert all string numeric data to actual numbers in all worksheets.    \\\nAttachments: Convert-String-To-Number-001.PNG (image/png) Convert-String-To-Number-002.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"c80d2d4f6e328fa84577b0505065afb0","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/convert+text+numeric+data+to+number/","title":"Convert Text Numeric Data to Number"},{"content":"Aspose.Cells supports showing bullets with HTML code. This article will explain how to display bullets by setting cell value using HTML. We will use Cell.HtmlString property to set the cell value with our HTML.\nThe following code uses the HTML code to set the cell value. Once, you will run this code, you will get the output as shown in the image below.\n\\\nOutput\nThe following screenshot shows the output of the above sample code.\nAttachments: Displaying-Bullets-with-HTML.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"f5d24fc27d26b12c96c786d626e47e8c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/display+bullets+by+setting+cell+value+using+html/","title":"Display Bullets by setting Cell Value using HTML"},{"content":"Aspose.Cells for .NET 4.4.2 introduced two new methods for formatting cells: Cell.GetStyle and Cell.SetStyle. This article examines the Cell.GetStyle/SetStyle approach Vs the Cell.Style approach to help you judge which technique best suits you.\n   Contents Summary\n1 Formatting Cells 1.1 Using GetStyle()\n1.2 Using SetStyle()\n2 Conclusion\n ||      Formatting Cells      There are two ways to format a cell, illustrated below.\nUsing GetStyle()\nWith following piece of code, a Style object is initiated for each cell when formatting it. If ta lot of cells are being formatted, a large amount of memory is consumed because the Style object is a large object. These Style objects won\u0026amp;rsquo;t be freed until the Workbook.Save method is called.\n\\\nC#\ncell.GetStyle().Font.IsBold = true;\n\\\nUsing SetStyle()\nThe first approach is easy and straight-forward so why did we add the second approach?\nWe added the second approach to optimize memory usage. After using the Cell.GetStyle method to retrieve a Style object, modify it and use the Cell.SetStyle method to set the it back to this cell. This Style object won\u0026amp;rsquo;t be preserved and .NET GC collect it when it\u0026amp;rsquo;s not referenced.\nWhen calling the Cell.SetStyle method, the Style object isn\u0026amp;rsquo;t saved for each cell. Instead, we compare this Style object to an internal Style object pool to see if it can be reused. Only Style objects that differ from the existing ones are kept for each Workbook object. This means that there are only several hundred Style objects for each Excel file instead of thousands. For each cell, only an index to the Style object pool is preserved.\n\\\nC#\nStyle style = cell.GetStyle();\nstyle.Font.IsBold = true;\ncell.SetStyle(style);\n\\\nSince the Cell.GetStyle/SetStyle approach uses much less memory and is performance efficient we have eliminated the older Cell.Style property that consumed a lot of unnecessary memory with the release of Aspose.Cells 7.1.x.\nConclusion\nThe new approach saves a large amount of memory …","date":-62135596800,"description":"","objectID":"8394110d6e32b3bda8e1e64908e53d50","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/evaluating+cell.getstyle+and+setstyle+methods+against+cell.style+property/","title":"Evaluating Cell.GetStyle and SetStyle Methods against Cell.Style Property"},{"content":"Aspose.Cells allows the users to extract Theme related data from Excel file. For example, you can extract Theme Name applied to workbook and Theme Color applied to cell or borders of the cell, etc.\nYou can apply Theme to your workbook using Microsoft Excel via Page Layout \u0026amp;gt; Themes command.\nThe following sample code extracts the Theme name applied to source workbook and then it extracts the Theme color applied to cell A1 and Theme color applied to the bottom border of the cell.\n\\\n","date":-62135596800,"description":"","objectID":"051607a5731ebaa88b299d2a8ba04864","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/extract+theme+data+from+excel+file/","title":"Extract Theme Data from Excel File"},{"content":"This article shows how to:\n Use styles to quickly format data. Format cells in rows and columns. Use borders and colors to emphasize data. Apply number formats to emphasize data. Use fonts and attributes to highlight data. Format data in a named range. Change data alignment and orientation. Set row height and column width.  The example project performs all of these tasks and provides developers with a detailed description of how to create a workbook, add data into and apply formatting using Aspose.Cells.\n   Contents Summary\n1 Data Formatting 1.1 Process\n ||      Data Formatting      Formatting is used to distinguish between different types of information and to display data clearly.\nA format represents a style and is defined as a set of characteristics, such as fonts and font sizes, number formats, cell borders, cell shading, indentation, alignment and text orientation. Borders provide further ways to highlight information. A border is a line drawn around a cell or a group of cells.\nNumber formats also make data more meaningful. By applying different number formats, you can change the appearance of numbers without changing the number behind the appearance.\nAspose.Cells provides lets you draw borders around cells and ranges easily. It also lets you apply fonts and shade cells. The component is efficient enough that you can format a complete row or column, set alignments, wrap and rotate text in cells. Aspose.Cells further supports all number formats supported by Microsoft Excel.\nThis article shows how to create a console application in Visual Studio.Net that generates an annual sales report. The workbook is created from scratch, then data is inserted and the worksheet is formatted. We show how to create a simple console application which creates an Excel workbook (you can also use a template file), insert sales data into the first worksheet, format the data and save an Excel file.\nProcess\nBelow are the steps involved how to create a spreadsheet and format different …","date":-62135596800,"description":"","objectID":"757c33b462d6c6bce7fefd1e06d9afd3","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/format+worksheet+cells+in+a+workbook/","title":"Format Worksheet Cells in a Workbook"},{"content":"Microsoft Excel allows users to add comments to cells to add additional information and highlight data. Developers may need to customize the comment to specify alignment settings, text direction Font Color, etc. Aspose.Cells provides APIs to accomplish the task.\nAspose.Cells provides a Shape.TextBody property to the font color of the comment. The following sample code demonstrates the use of Shape.TextBody property to set text direction for a comment.\n\\\nThe output file generated by the above code is attached for your reference.\nAttachments: GraphicBackground.ods (application/vnd.oasis.opendocument.spreadsheet) ThreadedCommentsView.jpg (image/jpeg) ColoredBackground.ods (application/vnd.oasis.opendocument.spreadsheet) AddWebExtension_Out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AddThreadedComments_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) EditThreadedComment.jpg (image/jpeg) EditThreadedComments.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) ThreadedCommentsSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) DeleteThreadedComment.jpg (image/jpeg) ThreadedCommentsInExcel2016.jpg (image/jpeg) ThreadedCommentsInExcel20162.jpg (image/jpeg) ThreadedCommentsSample_Out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AddThreadedComment2.jpg (image/jpeg) AddThreadedComment1.jpg (image/jpeg) outputChangeCommentFontColor.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"1147df28710620e6f487e4f53236a44a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/how+to+change+the+comment+font+color/","title":"How to change the Comment Font Color"},{"content":"Microsoft Excel supports two date systems: 1900 date system (the default date system implemented in Excel for Windows) and 1904 date system. The 1904 date system is normally used to provide compatibility with Macintosh Excel files and is the default system if you are using Excel for Macintosh. You can set the 1904 date system for Excel files using Aspose.Cells.\nTo implement 1904 date system in Microsoft Excel (for example Microsoft Excel 2003):\n From the Tools menu, select Options, and select the Calculation tab. Select the 1904 date system option. Click OK.     Selecting 1904 date system in Microsoft Excel        See the following sample code on how to achieve this using Aspose.Cells APIs.    \\\nAttachments: Implement 1904 Date System-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"036ca68313e7087c2dc416460c035c59","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/implement+1904+date+system/","title":"Implement 1904 Date System"},{"content":"To ensure that text in a cell can be read, explicit line breaks and text wrapping can be applied. Text wrapping turns one line into several in a cell, which explicit line breaks put in breaks exactly where you want them.\n   Contents Summary\n1 To Wrap Text in a Cell\n2 To Use Explicit Line Breaks\n ||      To Wrap Text in a Cell      To wrap text in a cell, use the Aspose.Cells.Style.IsTextWrapped property.\n\\\nTo Use Explicit Line Breaks You can use ‘\\n’ in C# and ‘ vbLf’ in VB.NET to insert explicit line breaks in a cell.\n\\\n","date":-62135596800,"description":"","objectID":"d7fb8de9a65bf70a1e36694a1c5eae77","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/line+breaks+and+text+wrapping/","title":"Line Breaks and Text Wrapping"},{"content":"To apply the same formatting options to cells, create a new formatting style object. A formatting style object is a combination of formatting characteristics, such as font, font size, indentation, number, border, patterns etc., named and stored as a set. When applied, all of the formatting in that style are applied.\nYou can also use an existing style, save it with the workbook and use to format information with the same attributes.\nWhen cells aren\u0026amp;rsquo;t explicitly formatted, the Normal style (the workbook\u0026amp;rsquo;s default style) is applied. Microsoft Excel predefines several styles in addition to the Normal style including Comma, Currency, and Percent.\nAspose.Cells allows modifying any of these styles or any other style that you define with your desired attributes.\n   Contents Summary\n1 Using Microsoft Excel\n2 Using Aspose.Cells 2.1 Creating and Modifying a Style\n2.2 Modifying an Existing Style\n ||      Using Microsoft Excel      To update a style in Microsoft Excel 97-2003:\n On the Format menu, click Style. Select the style you want to modify from the Style name list. Click Modify. Select the style options that you want using the tabs in the Format Cells dialog. Click OK. Under Style includes, specify the style features you want. Click OK to save the style and apply it to the selected range.  Using Aspose.Cells\nThe following examples demonstrate how to use Style.Update method.\nCreating and Modifying a Style\nThis example creates a Style object, applies it to a range of cells and modifies the Style object. The modifications are automatically applied to the cell and the range the style was applied to.\n\\\nModifying an Existing Style\nThis example uses a simple template Excel file in which a style called Percent has already been applied to a range. The example:\n gets the style, creates a style object and modifies the style formatting.  The modifications are automatically applied to the range the style was applied to.\n\\\n","date":-62135596800,"description":"","objectID":"fa1f44779ba513a3a803b9656ad16f44","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/modify+an+existing+style/","title":"Modify an Existing Style"},{"content":"Aspose.Cells is now able to render the custom date format pattern like g, ge.mm.dd and similar. Please check the attached source excel file and the converted pdf by Aspose.Cells for your reference.\nThe following sample code converts the source excel file which contains date values with custom format patterns like g and ge.mm.dd into output pdf.\n\\\nAttachments: DateFormat.xlsx (image/png) DateFormat.xlsx.out.pdf (image/png)\n","date":-62135596800,"description":"","objectID":"9b9776d8ff5711775d7da4def9af602b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/render+custom+date+format+pattern+g+and+ge+mm+dd/","title":"Render Custom Date Format Pattern g and ge mm dd"},{"content":"Reusing style objects can save memory and make a program faster.\nTo apply some formatting to a large range of cells in a worksheet:\n Create a style object. Specify the attributes. Apply the style to the cells in the range.  \\\nBecause the Cell.GetStyle/Cell.SetStyle approach uses a lot less memory, and is efficient, the older Cell.Style property which consumed a lot of unnecessary memory, was removed with the release of Aspose.Cells 7.1.0.\n","date":-62135596800,"description":"","objectID":"11f961301073cbf7a2c065153ce80d3b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/reusing+style+objects/","title":"Reusing Style Objects"},{"content":"In Microsoft Excel, you can specify the Custom Decimal and Thousands Separators instead of using System Separators from the Advanced Excel Options as shown in the screenshot below.\nAspose.Cells provides the WorkbookSettings.NumberDecimalSeparator and WorkbookSettings.NumberGroupSeparator properties to set the custom separators for formatting/parsing numbers.\n   Contents Summary\n1 Specifying Custom Separators using Microsoft Excel\n2 Specifying Custom Separators using Aspose.Cells 2.1 Sample Code\n ||      Specifying Custom Separators using Microsoft Excel      The following screenshot shows the Advanced Excel Options and highlights the section to specify the Custom Separators.\nSpecifying Custom Separators using Aspose.Cells\nThe following sample code illustrates how to specify the Custom Separators using Aspose.Cells API. It specifies the Custom Number Decimal and Group Separators as dot and space respectively.\nSample Code\nAttachments: specify-custom-separator-in-excel.png (image/png) output-pdf.png (image/png)\n","date":-62135596800,"description":"","objectID":"b85355e193ff43586c0734920625b31e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/specify+custom+number+decimal+and+group+separators+for+workbook/","title":"Specify Custom Number Decimal and Group Separators for Workbook"},{"content":"Aspose.Cells provides a vast collection of re-usable styles to format a cell in spreadsheet document. We can use built-in styles in our workbook and also create custom styles.\nHow to use Built-in Styles\nThe method Workbook.CreateBuiltinStyle and class BuiltinStyleType, make it convenient to create re-usable styles. Here is a list of all possible built-in styles:\n TWENTY_PERCENT_ACCENT_1 TWENTY_PERCENT_ACCENT_2 TWENTY_PERCENT_ACCENT_3 TWENTY_PERCENT_ACCENT_4 TWENTY_PERCENT_ACCENT_5 TWENTY_PERCENT_ACCENT_6 FORTY_PERCENT_ACCENT_1 FORTY_PERCENT_ACCENT_2 FORTY_PERCENT_ACCENT_3 FORTY_PERCENT_ACCENT_4 FORTY_PERCENT_ACCENT_5 FORTY_PERCENT_ACCENT_6 SIXTY_PERCENT_ACCENT_1 SIXTY_PERCENT_ACCENT_2 SIXTY_PERCENT_ACCENT_3 SIXTY_PERCENT_ACCENT_4 SIXTY_PERCENT_ACCENT_5 SIXTY_PERCENT_ACCENT_6 ACCENT_1 ACCENT_2 ACCENT_3 ACCENT_4 ACCENT_5 ACCENT_6 BAD CALCULATION CHECK_CELL COMMA COMMA_1 CURRENCY CURRENCY_1 EXPLANATORY_TEXT GOOD HEADER_1 HEADER_2 HEADER_3 HEADER_4 HYPERLINK FOLLOWED_HYPERLINK INPUT LINKED_CELL NEUTRAL NORMAL NOTE OUTPUT PERCENT TITLE TOTAL WARNING_TEXT ROW_LEVEL COLUMN_LEVEL  \\\nAttachments: builtin-styles.png (image/png)\n","date":-62135596800,"description":"","objectID":"7157ba9aa5293595c55b58c63767fe03","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/using+built-in+styles/","title":"Using Built-in Styles"},{"content":"Articles in this section\nAttachments: Format Worksheet Cells in a Workbook-001.png (image/png) Format Worksheet Cells in a Workbook-002.png (image/png) Implement 1904 Date System-001.png (image/png) Convert-String-To-Number-001.PNG (image/png) Convert-String-To-Number-002.PNG (image/png) direction-summary-rows-below-detail.png (image/png) source-excel-file.png (image/png) output-excel-file.png (image/png) specify-custom-separator-in-excel.png (image/png) output-pdf.png (image/png) Displaying-Bullets-with-HTML.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"e0f5d3b595184852bf9ba95dfa107527","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/stylinganddataformatting/","title":"Styling and Data Formatting"},{"content":"Aspose.Cells supports the calculation of IFNA Excel function. IFNA function returns the value you specify if the formula returns the #N/A error value; otherwise returns the result of the formula.\nCalculating IFNA function using Aspose.Cells\nThe following sample code illustrates the calculation of IFNA function by Aspose.Cells.\n\\\nConsole Output\nHere is the console output of the above sample code.\nNot found\nOrange\n","date":-62135596800,"description":"","objectID":"81cb9728da52bf35296d422770bd31fe","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/calculating+ifna+function+using+aspose.cells/","title":"Calculating IFNA function using Aspose.Cells"},{"content":"You can create Data Table in Microsoft Excel using Data \u0026amp;gt; What-If Analysis \u0026amp;gt; Data Table\u0026amp;hellip;. Aspose.Cells now allows you to calculate the array formula of a data table. Please use Workbook.CalculateFormula() as normal for calculating any type of formulas.\nIn the following sample code, we used the source excel file. If you change the value of cell B1 to 100, the values of the Data Table which are filled with Yellow color will become 120 as shown in the following images. The sample code generates the output PDF.\nHere is the sample code used to generate the output PDF from the source excel file. Please read the comments for more information.\n\\\nAttachments: Array-formula-before-calculation.png (image/png) DataTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.pdf (application/kswps) Array-formula-after-calculation.png (image/png)\n","date":-62135596800,"description":"","objectID":"a4ccb85190cd9bf45ea5d883a04f59ce","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/calculation+of+array+formula+of+data+tables/","title":"Calculation of Array Formula of Data Tables"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Decrease the Calculation Time of Cell.Calculate() method\n3 Console Output\n ||      Possible Usage Scenarios      Normally, we recommend users to call Workbook.CalculateFormula() method once and then get the calculated values of the individual cells. But sometimes, users do not want to calculate entire workbook. They just want to calculate a single cell. Aspose.Cells provides CalculationOptions.Recursive property which you can set to **false **and it will decrease the calculation time of individual cell significantly. Because when the recursive property is set to true, then all the dependents of cells are recalculated on each call. But when the recursive property is false, then dependent cells are calculated only once and are not calculated again on subsequent calls.\nDecrease the Calculation Time of Cell.Calculate() method\nThe following sample code illustrates the usage of CalculationOptions.Recursive property. Please execute this code with the given sample excel file and check its console output. You will find that setting the recursive property to **false **has decreased the calculation time significantly. Please also read the comments for a better understanding of this property.\n\\\nConsole Output\nThis is the console output of the above sample code when executed with the given sample excel file on our machine. Please note, your output may differ but the elapsed time after setting the recursive property to **false **will always be less than setting it to true.\n\\\nRecursive True: 96 seconds\nRecursive False: 42 seconds\nAttachments: sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"e731ecdd0d0c9103885530b437cb05fe","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/decrease+the+calculation+time+of+cell.calculate+method/","title":"Decrease the Calculation Time of Cell.Calculate method"},{"content":"   Contents Summary\n1 Direct calculation of custom function without writing it in a worksheet 1.1 Programming Sample\n1.2 Console Output\n1.3 Related Article\n ||      Direct calculation of custom function without writing it in a worksheet      This topic explains how you can directly calculate your custom functions without first writing them in a worksheet. Please use the Worksheet.CalculateFormula(string formula, CalculationOptions opts) method for this purpose.\nPlease see the following sample code that illustrates the usage of this method. We have used a custom function named MyCompany.CustomFunction() and we calculate its value as \u0026amp;ldquo;Aspose.Cells.\u0026amp;rdquo; by ourselves and then this value is automatically concatenated with the value of cell A1 which is \u0026amp;ldquo;Welcome to \u0026amp;quot; by the calculation engine and the final calculated value returns as \u0026amp;ldquo;Welcome to Aspose.Cells.\u0026amp;quot;\u0026amp;quot;. As you can see in a code that we have not written our custom function anywhere in a worksheet and it is calculated directly by our own custom logic.\nProgramming Sample\n\\\nConsole Output\nBelow is the console output of the above sample code.\nCalculated Value: Welcome to Aspose.Cells.\nRelated Article\nImplement Custom Calculation Engine to extend the Default Calculation Engine of Aspose.Cells\n","date":-62135596800,"description":"","objectID":"4bd471317e572d7811aa7c57117eaaf0","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/direct+calculation+of+custom+function+without+writing+it+in+a+worksheet/","title":"Direct calculation of custom function without writing it in a worksheet"},{"content":"   Contents Summary\n1 Implement Custom Calculation Engine 1.1 Programming Sample\n1.2 Console Output\n1.3 Related Article\n ||      Implement Custom Calculation Engine      Aspose.Cells has a powerful calculation engine that can calculate almost all of the Microsoft Excel formulas. Despite this, it also allows you to extend the default calculation engine which provides you greater power and flexibility.\nThe following property and classes are used in implementing this feature.\n CalculationOptions.CustomEngine AbstractCalculationEngine CalculationData  The following code implements the Custom Calculation Engine. It implements the interface AbstractCalculationEngine which has a Calculate(CalculationData data) method. This method is called against all of your formulas. Inside this method, we capture the Sum formula and increases its value by 30. So if the Aspose.Cells calculated value is 20, then our custom engine will make it 50 by adding 30.\nProgramming Sample\n\\\nConsole Output\nHere is the console output of the above sample code.\nWithout Custom Engine Value of A1: 20\nWith Custom Engine Value of A1: 50\nRelated Article\nDirect calculation of custom function without writing it in a worksheet\n","date":-62135596800,"description":"","objectID":"ad805519f91f7a05351c36f1794226f0","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/implement+custom+calculation+engine+to+extend+the+default+calculation+engine+of+aspose.cells/","title":"Implement Custom Calculation Engine to extend the Default Calculation Engine of Aspose.Cells"},{"content":"Aspose.Cells provides ICustomFunction interface which is used to implement user defined or custom functions that are not supported by Microsoft Excel as built-in functions.\nMostly when you implement ICustomFunction interface method, you need to return a single cell value. But sometimes, you need to return a range of values. This article will explain how to return range of values from ICustomFunction.\nThe following code implements ICustomFunction and returns the range of values via its method. Please check the output excel file and pdf generated with the code for your reference.\nCreate a class with function CalculateCustomFunction. This class implements ICustomFunction\n\\\nNow use above function into your program\n\\\nAttachments: output.pdf (image/png) output.xlsx (image/png)\n","date":-62135596800,"description":"","objectID":"6a95da3ded3973c8c0a402b3015a28bd","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/returning+a+range+of+values+using+icustomfunction/","title":"Returning a Range of Values using ICustomFunction"},{"content":"Sometimes, it is necessary to include links to external files in formulas, for example, to evaluate a cell or range value against them. Aspose.Cells provides this feature and this document explains how to use it.\nThe sample code below shows how to include external files in formulas.\n\\\n","date":-62135596800,"description":"","objectID":"b9a92f3ff1fe856ae2b7d4e584bf81d7","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/set+external+links+in+formulas/","title":"Set External Links in Formulas"},{"content":"Microsoft Excel allows you to set the formula calculation mode, that is, the way formulas are calculated. There are three possible values:\n Automatic - recalculate whenever something is changed, and every time a workbook is opened. Automatic except for data tables - recalculate whenever something is changed, but leaving out data tables. Manual - recalculate only when the user explicitly requests it by pressing F9 or CTRL+ALT+F9, or when the workbook is saved.  To set the formula calculation mode in Microsoft Excel:\n Select Formulas and then Calculation Options. Select one of the options.  Aspose.Cells also allows you to set the Formula Calculation Mode using Workbook.Settings.CalcMode mode property. You can assign it the CalcModeType enumeration which has one of the following values:\n CalcModeType.Automatic CalcModeType.AutomaticExceptTable CalcModeType.Manual  \\\nAttachments: Formula-Calculation-Mode.png (image/png)\n","date":-62135596800,"description":"","objectID":"c19d6850759e45b310fb07d8cbd5403a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/setting+formula+calculation+mode+of+workbook/","title":"Setting Formula Calculation Mode of Workbook"},{"content":"If you want to add a function in worksheet which will do some calculations. This article explains how to achieve this task using Aspose.Cells.\nSetting Shared Formula using Aspose.Cells\nSuppose you have a worksheet filled with data in the format that looks like the following sample worksheet.\n   Input file with one column or data        You want to add a function in B2 that will calculate the sales tax for the first row of data. The tax is 9%. The formula that calculates the sales tax is: \u0026amp;ldquo;=A2*0.09\u0026amp;rdquo;. This article explains how to apply this formula with Aspose.Cells.    Aspose.Cells lets you specify a formula using the Cell.Formula property. There are two options for adding formulas to the other cells (B3, B4, B5, and so on) in the column.\nEither do what you did for the first cell, effectively setting the formula for each cell, updating the cell reference accordingly (A30.09, A40.09, A5*0.09 and so on). This requires the cell references for each row to be updated. It also requires Aspose.Cells to parse each formula individually, which can be time-consuming for large spreadsheets and complex formulas. It also adds extra lines of codes although loops can cut them down somewhat.\nAnother approach is to use a shared formula. With a shared formula, the formulas are automatically updated for the cell references in each row so that the tax would be calculated properly. The Cell.SetSharedFormula method is more efficient than the first method.\nThe following example demonstrates how to use it.\n\\\nAttachments: Setting Shared Formula 1.PNG (image/png) Setting Shared Formula 2.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"d7b10bac5f98b36d2795e1cba0f0dd1c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/setting+shared+formula/","title":"Setting Shared Formula"},{"content":"FormulaText is an Excel 2013 and later function. It is not supported by previous versions like Excel 2010 or 2007 etc. As its name suggests, it prints the text of the formula which is present in a given cell. This article will show you how to make use of this function using Aspose.Cells.\nThe following sample code shows the usage of FormulaText with Aspose.Cells. The code first writes a formula in cell A1 and then prints the text of the formula using FormulaText in cell A2.\n\\\nConsole Output\nHere is the console output of the above sample code.\n=SUM(B1:B10)\n","date":-62135596800,"description":"","objectID":"626ba29db876c77a4f6ce81129097b4c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/using+formulatext+function+in+aspose.cells/","title":"Using FormulaText function in Aspose.Cells"},{"content":"This article provides a detailed understanding of how to use the ICustomFunction feature to implement custom functions with Aspose.Cells APIs.\nThe ICustomFunction interface allows to add custom formula calculation functions to extend the Aspose.Cells\u0026amp;rsquo; core calculation engine in order to meet certain requirements. This feature is useful to define custom (user defined) functions in a template file or in code where the custom function can be implemented and evaluated using Aspose.Cells APIs like any other default Microsoft Excel function.\nCreating and Evaluating a User-defined Function\nThis article demonstrates the implementation of ICustomFunction interface to write a custom function and use it in the spreadsheet to get the results. We will define a custom function by name MyFunc which will accepts 2 parameters with following details.\n 1st parameter refers to a single cell 2nd parameter refers to a range of cells  The custom function will add all the values from the cell range specified as 2nd parameter and divide the result with value in the 1st parameter.\nHere is how we have implemented the CalculateCustomFunction method.\n\\\nHere is how to use the newly defined function in a spreadsheet\n\\\nOverview\nThe Aspose.Cells APIs just put the ReferredArea object into the \u0026amp;ldquo;paramsList\u0026amp;rdquo; when the corresponding parameter is a reference or its calculated result is reference. If you need the reference itself then you can use the ReferredArea directly. If you need to get value of a single cell from the reference corresponding with the formula\u0026amp;rsquo;s position, you can use ReferredArea.GetValue(rowOffset, int colOffset) method. If you need cell values array for the whole area then you can use ReferredArea.GetValues method.\nAs the Aspose.Cells APIs give the ReferredArea in \u0026amp;ldquo;paramsList\u0026amp;rdquo;, the ReferredAreaCollection in \u0026amp;ldquo;contextObjects\u0026amp;rdquo; will not be needed anymore (in old versions it was not able to give one-to-one map to the parameters of the custom …","date":-62135596800,"description":"","objectID":"8977b510831dbfcd2bec22e42aa7b670","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/using+icustomfunction+feature/","title":"Using ICustomFunction Feature"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"7669e93eeccb30284eaca8a6557c4a9d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithcalculationengine/","title":"Working with Calculation Engine"},{"content":"Sometimes your Html contains numbers like 1234567890123456 which are longer than 15 digits and when you import your HTML to excel file, these numbers convert to exponential notation like 1.23457E+15. If you want, your number should be imported as it is and not converted to exponential notation, then please use HTMLLoadOptions.KeepPrecision property and set it true while loading your HTML.\nThe following sample code explains the usage of HTMLLoadOptions.KeepPrecision property. The API will import the number as it is without converting it to exponential notation.\n\\\n","date":-62135596800,"description":"","objectID":"b910c2d08b1ebcb0fbb046f94682deb9","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/avoid+exponential+notation+of+large+numbers+while+importing+from+html/","title":"Avoid exponential notation of large numbers while importing from Html"},{"content":"Please use HTMLLoadOptions.DeleteRedundantSpaces property and set it true to delete all the redundant spaces coming after the line break tag. By default, this property is false and redundant spaces are preserved in the output excel files.\n   Contents Summary\n1 Effect of setting the HTMLLoadOptions.DeleteRedundantSpaces property to false and true\n2 Delete redundant spaces after line break while importing Html 2.1 Programming Sample\n ||      Effect of setting the HTMLLoadOptions.DeleteRedundantSpaces property to false and true      The following screenshot shows the effect of setting this property to false and true.\nDelete redundant spaces after line break while importing Html\nProgramming Sample\nThe following sample code shows the usage of the HTMLLoadOptions.DeleteRedundantSpaces property. Please set it true or false to get the output as shown in the above screenshot.\n\\\nAttachments: redundant-spaces.png (image/png)\n","date":-62135596800,"description":"","objectID":"dd055e65e7ce5bd3fe70014145425e1b","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/delete+redundant+spaces+after+line+break+while+importing+html/","title":"Delete redundant spaces after line break while importing Html"},{"content":"Aspose.Cells now supports expanding text from right to left while exporting Excel file to HTML. This feature has been implemented since the v8.9.0.0. Now if your source excel file contains any text which expands from right to left, then Aspose.Cells will export it to HTML correctly.\nExpanding text from right to left while exporting Excel file to HTML\nThe following sample code converts the sample excel file into HTML. This screenshot shows how the sample excel looks like in Microsoft Excel 2013.\nThis screenshot shows the output HTML generated with older version.\nThis screenshot shows the output HTML generated with newer version.\nAs you can see in the screenshots, the newer version expands the right-aligned text to left correctly just like Microsoft Excel.\n\\\nAttachments: sample.xlsx (application/unknown) source-excel-file-that-will-be-converted-to-html.png (image/png) older-version-output-html.png (image/png) newer-version-output-html.png (image/png) output-8.8.3.0.html (text/html) output-8.9.0.0.html (text/html)\n","date":-62135596800,"description":"","objectID":"2379d3724b6a1f51b58ed9667f7f5bdf","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/expanding+text+from+right+to+left+while+exporting+excel+file+to+html/","title":"Expanding text from right to left while exporting Excel file to HTML"},{"content":"You can export DataBar, ColorScale and IconSet Conditional Formatting while converting your Excel file into HTML. This feature is partially supported by Microsoft Excel but Aspose.Cells supports it fully.\n   Contents Summary\n1 Export DataBar, ColorScale and IconSet Conditional Formatting while Excel to HTML Conversion 1.1 Sample Code\n ||      Export DataBar, ColorScale and IconSet Conditional Formatting while Excel to HTML Conversion      The following screenshot shows the sample excel file with DataBar, ColorScale and IconSet Conditional Formatting. You can download the sample excel file from the given link.\nThe following screenshot shows the Aspose.Cells output HTML file showing DataBar, ColorScale and IconSet Conditional Formatting. As you can see, it looks exactly like sample excel file.\nSample Code\nThe following sample code converts the sample excel file into HTML which is just a normal Excel to HTML conversion.\n\\\nAttachments: Conditional-formatting-in-sample-excel-file.png (image/png) Conditional-formatting-in-output-html.png (image/png) sample.xlsx (application/vnd.openxmlformats-officedocument.spre)\n","date":-62135596800,"description":"","objectID":"2149f93d5a5ab83bad48abefb7feb78c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/export+databar%2c+colorscale+and+iconset+conditional+formatting+while+excel+to+html+conversion/","title":"Export DataBar, ColorScale and IconSet Conditional Formatting while Excel to HTML Conversion"},{"content":"If you want to export your Excel file into HTML with GridLines, then please use the HtmlSaveOptions.ExportGridLines property and set it true.\nExport Excel to HTML with GridLines\nThe following sample code creates a workbook and fills its worksheet with some values and then saves it in HTML format after setting the HtmlSaveOptions.ExportGridLines to true.\n\\\nAttachments: output-html-with-gridlines.png (image/png)\n","date":-62135596800,"description":"","objectID":"98065e0535c8698acf10f7cf77cf0b9c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/export+excel+to+html+with+gridlines/","title":"Export Excel to HTML with GridLines"},{"content":"This article explains how to implement IStreamProvider interface for setting the HtmlSaveOptions.StreamProvider property. By implementing this interface, you will be able to save the created resources during HTML generation to your specific locations or memory streams.\nThis is the main code showing the usage of HtmlSaveOptions.StreamProvider property\n\\\n\\\nHere is the code for *ExportStreamProvider *class which implements IStreamProvider interface used inside the above code.\n\\\n","date":-62135596800,"description":"","objectID":"8f11902ad1126dfc2d70243a905c1a6d","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/implementing+istreamprovider+for+htmlsaveoptions.streamprovider/","title":"Implementing IStreamProvider for HtmlSaveOptions.StreamProvider"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Provide exported worksheet HTML file path via IFilePathProvider interface\n3 Sample Code\n ||      Possible Usage Scenarios      Suppose, you have an excel file with multiples sheets and you want to export each sheet to individual HTML file. If any of your sheets have links to other sheets, then those links will be broken in the exported HTML. To deal with this problem, Aspose.Cells provides IFilePathProvider interface which you can implement to fix the broken links.\nProvide exported worksheet HTML file path via IFilePathProvider interface\nPlease download the sample excel file used in the following code and its exported HTML files. All these files are inside the Temp directory. You should extract it on C: drive. Then it will become C:\\Temp directory. Then you will open the Sheet1.html file in the browser and click the two links inside it. These links refer to these two exported HTML worksheets which are inside the C:\\Temp\\OtherSheets directory.\nfile:///C:/Temp/OtherSheets/Sheet2.html#RANGE!A1\nfile:///C:/Temp/OtherSheets/Sheet3.html#RANGE!A1\nThe following screenshot shows how the C:\\Temp\\Sheet1.html and its links look like\nThe following screenshot shows the HTML source. As you can see that the links are now referring to C:\\Temp\\OtherSheets directory. This was achieved using the IFilePathProvider interface.\nSample Code\nPlease note C:\\Temp directory is just for illustration purpose. You can use any directory of your choice and place sample excel file inside there and execute the provided sample code. It will then create OtherSheets sub-directory inside your directory and export second and third worksheets HTML inside it. Please change the dirPath variable inside the provided code and refer it to the directory of your choice before execution.\nThe sample code will only work when you will set Aspose.Cells license. If you will try to run the code without setting the license, it will go into an infinite loop. Therefore, we have …","date":-62135596800,"description":"","objectID":"73ac855924719dea974bdd188d8c7592","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/provide+exported+worksheet+html+file+path+via+ifilepathprovider+interface/","title":"Provide exported worksheet html file path via IFilePathProvider interface"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Render Gradient Fill for the WordArt while converting spreadsheets to HTML\n3 Sample Code\n ||      Possible Usage Scenarios      Before Aspose.Cells 17.1, Aspose.Cells did not render gradient fill of the word art when the Excel file was converted to HTML format. Since the release of Aspose.Cells 17.1, word art gradient fill is supported. The following screenshot compares the effect on the gradient fill by converting the excel file using Aspose.Cells 17.1 and the older version.\nRender Gradient Fill for the WordArt while converting spreadsheets to HTML\nThe following sample code converts the source excel file into output HTML format. The source excel file contains a word art object with gradient fill as shown in the above screenshot.\nSample Code\nAttachments: output-html-of-gradient-fill.zip (application/zip) Gradient-Fill-for-the-WordArt-in-HTML.png (image/png) sourceGradientFill.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"42ea2d8e95f3e22547990e481bf32a05","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/render+gradient+fill+for+the+wordart+while+converting+spreadsheets+to+html/","title":"Render Gradient Fill for the WordArt while Converting Spreadsheets to HTML"},{"content":"Normally, the layout of div tags are ignored while loading HTML into an excel workbook object. However, if you want the layout of div tags are not ignored, then please set the HTMLLoadOptions.SupportDivTag property to true. The default value of this property is false.\nThe following sample code illustrates the usage of HTMLLoadOptions.SupportDivTag property. Please download the Aspose Logo used inside the input HTML and the output excel file generated by the code.\n\\\nAttachments: ASpose_logo_100x100.png (image/png) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f2d34f037970bf2f368e790c7fdcc4c4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/support+the+layout+of+div+tags+while+loading+html+to+excel+workbook/","title":"Support the layout of DIV tags while loading HTML to excel workbook"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"a1ec6f81eb88d2a29c1c48657b52bfcf","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithhtmlformat/","title":"Working with HTML Format"},{"content":"This explains how to import anonymous or custom objects into SmartMarkers.\nSometimes, you need to include custom objects as a data source to the SmartMarkers. Aspose.Cells makes it possible to use custom objects as the data source.\nPlease see the following sample code which shows how to add custom objects as a data source for SmartMarkers.\n\\\n","date":-62135596800,"description":"","objectID":"0eb431e862d5b63ccb3be84175118f73","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithsmartmarkers/adding+anonymous+or+custom+object+into+smartmarkers/","title":"Adding Anonymous or Custom Object into SmartMarkers"},{"content":"Aspose.Cells APIs provide the WorkbookDesigner class to work with Smart Markers where the formatting \u0026amp;amp; formulas are placed in the designer spreadsheets and then processed with WorkbookDesigner class to fill up the data according to specified Smart Markers. Sometimes, it may be required to get the notifications about the cell reference or the particular Smart Marker being processed. This can be achieved using the WorkbookDesigner.CallBack property and ISmartMarkerCallBack interface exposed with the release of Aspose.Cells for .NET 8.6.2.\nThe following piece of code demonstrates the usage of ISmartMarkerCallBack interface to define a new class that handles the call back for WorkbookDesigner.Process method.\n\\\n\\\nRest of the process includes loading designer spreadsheet containing the Smart Markers with WorkbookDesigner and process it by setting the data source. In order to keep the example simple, we have used a predefined designer spreadsheet containing only two Smart Markers as shown in the below snapshot where the data source is being created dynamically to merge the data according to the specified Smart Markers.\n       Attachments: SmartMarker-ExcelView.png (image/png)\n","date":-62135596800,"description":"","objectID":"d6d320edb1d2019ae955bc2306ab1184","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithsmartmarkers/getting+notifications+while+merging+data+with+smart+markers/","title":"Getting Notifications while Merging Data with Smart Markers"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"106898ee8ce61ed27fc01b4e3dcf7c2f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgeneral/workingwithsmartmarkers/","title":"Working with Smart Markers"},{"content":"Articles in this section\nAttachments: Using a Common Button to Submit Grid Data-001.png (image/png) Using a Common Button to Submit Grid Data-002.png (image/png) Using a Common Button to Submit Grid Data-003.png (image/png) Using a Common Button to Submit Grid Data-004.png (image/png) showformulas1.png (image/png) showformulas2.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-001.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-002.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-003.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-004.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-005.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-006.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-007.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-008.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-009.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-010.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-011.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-012.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-013.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-014.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-001.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-002.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-003.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-004.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-005.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-006.png (image/png) …","date":-62135596800,"description":"","objectID":"c5c1d64b3f9508b400e389331bdd362e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/","title":"Aspose.Cells Grid Controls"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Binding a Worksheet to DataSet\n3 Sample Code\n4 Output Screenshot\n ||      Possible Usage Scenarios      Aspose.Cells.GridWeb provides an easy API that can be used to dynamically bind a DataSet to Worksheet.\nBinding a Worksheet to DataSet\nThe following sample code explains how to bind a Worksheet to a DataSet at runtime.\nSample Code\n// Implementing Page_Load event handler\npublic partial class GridBind : System.Web.UI.Page\n{\nprotected void Page_Load(object sender, EventArgs e)\n{\nif (Page.IsPostBack == false \u0026amp;amp;\u0026amp;amp; this.GridWeb1.IsPostBack == false)\n{\n// Create Product Data Table\nDataTable prodTbl = new DataTable(\u0026amp;ldquo;Products\u0026amp;rdquo;);\nprodTbl.Columns.Add(\u0026amp;ldquo;ProductID\u0026amp;rdquo;);\nprodTbl.Columns.Add(\u0026amp;ldquo;ProductName\u0026amp;rdquo;);\nprodTbl.Columns.Add(\u0026amp;ldquo;ProductPrice\u0026amp;rdquo;);\n// Add products inside the data table\nprodTbl.Rows.Add(1, \u0026amp;ldquo;Grape Juice\u0026amp;rdquo;, \u0026amp;ldquo;$30.00\u0026amp;rdquo;);\nprodTbl.Rows.Add(3, \u0026amp;ldquo;Mineral Water\u0026amp;rdquo;, \u0026amp;ldquo;$25.00\u0026amp;rdquo;);\nprodTbl.Rows.Add(6, \u0026amp;ldquo;Olive Oil\u0026amp;rdquo;, \u0026amp;ldquo;$50.00\u0026amp;rdquo;);\nprodTbl.Rows.Add(4, \u0026amp;ldquo;Chocolate\u0026amp;rdquo;, \u0026amp;ldquo;$10.00\u0026amp;rdquo;);\nprodTbl.Rows.Add(7, \u0026amp;ldquo;Oranges\u0026amp;rdquo;, \u0026amp;ldquo;$28.00\u0026amp;rdquo;);\n// Create a DataSet and put both table in it.\nDataSet set = new DataSet();\nset.Tables.Add(prodTbl);\n// Accessing a desired worksheet\nGridWorksheet sheet = GridWeb1.WorkSheets[0];\n// Specifying Data Source for the worksheet\nsheet.DataSource = set;\n// Specifying Products tables as the DataMember\nsheet.DataMember = \u0026amp;ldquo;Products\u0026amp;rdquo;;\n// Creating data bound columns automatically\nsheet.CreateAutoGenratedColumns();\n// Binding worksheet with DataSet\nsheet.DataBind();\n}\n}\n}\nOutput Screenshot\nThe following screenshot shows the GridWeb after the execution of the above sample code.\nAttachments: Binding-Worksheet-to-a-DataSet-At-Run-Time-using-GridWeb.png (image/png)\n","date":-62135596800,"description":"","objectID":"05697abfae67af8926b19d5afd68fb89","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/binding+worksheet+to+a+dataset+at+runtime+using+gridweb/","title":"Binding Worksheet to a DataSet at Runtime using GridWeb"},{"content":"This article discusses an easy approach to binding worksheets to database tables in GUI mode using a special tool supplied with Aspose.Cells.GridWeb, the Worksheets Designer.\nBinding a Worksheet with Database Using Worksheets Designer\nStep 1: Creating a Sample Database\n First, we create the sample database that will be used in this article. We\u0026amp;rsquo;re using Microsoft Access to create a database that contains a table called Products. It\u0026amp;rsquo;s schema is shown below. **Design information of Products table ** A few dummy records are added to the Products table. Records in the Products table  Step 2: Designing Sample Application\nAn ASP.NET web application is created and designed in Visual Studio.NET as shown below. Designed sample application\nStep 3: Connecting with Database Using Server Explorer\nIt\u0026amp;rsquo;s time to connect to the database. We can do it easily using the Server Explorer in Visual Studio.NET.\n  Select Data Connection in Server Explorer and right-click.\n  Select Add Connection from the menu. Selecting the Add Connection option\nThe Data Link Properties dialog is displayed. The Data Link Properties dialog\nUsing this dialog, you can connect to any database. By default, it allows you to connect to an SQL Server database. For this example, we need to connect with a Microsoft Access database.\n  Click the Provider tab.\n  Select Microsoft Jet 4.0 OLE DB Provider from the OLE DB Provider(s) list.\n  Click Next. **Clicking Next after selecting an OLE DB provider ** The Connection tab page is opened.\n  Select the Microsoft Access database file (in our case, db.mdb) and click OK. Clicking OK button after selecting database file\n  After clicking OK, a database connection to the Microsoft Access database will be created in the Server Explorer. Double-click the connection to see all tables, views and stored procedures in the database.\nStep 4: Creating Database Connection Objects Graphically\n  Browse the tables in the database using the Server Explorer. There\u0026amp;rsquo;s only …","date":-62135596800,"description":"","objectID":"5c1464f956dad6bd57b3962d9bbad3d1","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/binding+worksheet+to+a+dataset+using+gridwebs+worksheets+designer/","title":"Binding Worksheet to a DataSet using GridWebs Worksheets Designer"},{"content":"This article discusses an easiest approach to bind worksheets with database tables in Visual Studio.Net 2005 using a special tool supplied with Aspose.Cells.GridWeb named as Worksheets Designer . This article would definitely make you feel that how easier it is to use data binding feature in Aspose.Cells.GridWeb with the help of Worksheets Designer .\n***Binding a Worksheet with Database Using Worksheets Designer in VS.Net 2005 ***\nThe purpose of this article is to let all developers learn how you can create a data binding application in VS.Net 2005 and understand the use \u0026amp;amp; role of Worksheets Designer editor. The best way to learn and understand anything is through examples. So, in this article, it would also be best for us to create a sample application for demonstrating the use of Worksheets Designer in binding worksheets with database. Let\u0026amp;rsquo;s create an application step by step.\n***Step 1: Creating a Sample Database ***\nFirst of all we will create a sample database that will be used in this article. We have used MS Access to create a sample database containing Products table whose schema is shown below:\n\\\nFigure: Design information of Products table\nFew dummy records are added to the Products table as shown below in the figure:\n\\\nFigure: Records in Products table\n***Step 2: Designing Sample Application ***\nAn ASP.NET Web Application is created and designed in Visual Studio.NET 2005 as shown in the figures below. These screen shots are usefull for those developers who are not much familiar using Aspose.Cells.GridWeb in Visual Studio.Net 2005.\nFirst start VS.Net 2005.\n\\\nFigure: Starting VS.Net 2005\nCreate a new Web Site from the File|New|Web Site\u0026amp;hellip; Menu.\n\\\nFigure: Creating a new WebSite\nAfter clicking File|New|Web Site\u0026amp;hellip; menu option, New Web Site dialog is shown. Click the Browse button in it.\n\\\nFigure: New Web Site Dialog\nAfter clicking the Browse button, choose the location folder in the local IIS. You may create a new folder and make it as …","date":-62135596800,"description":"","objectID":"26557d71dca51d742f3c29c386a67240","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/binding+a+worksheet+with+database+using+worksheets+designer+in+vs.net+2005/","title":"Binding a Worksheet with Database Using Worksheets Designer in VS.Net 2005"},{"content":"Data binding is a powerful and user-friendly GridWeb feature. Data stored in database tables is fetched to a DataSet and filled with data\nrepresenting the data tables. Using the data binding feature, you can create a hierarchical view (a master-child view) of interlinked data and\ndisplay it in the control to make it more elegant.\nThis topic discusses creating a hierarchical view sheet. Some of the rows in the sheet have child views. When a user clicks the row\u0026amp;rsquo;s Expand\nbutton , the child view table of that row is expanded down. This feature is very helpful for building a hierarchical view report.\nA table with a hierarchical view\nCreate Relations for DataTables\nFor example, you use ADO.Net API and extract data from the database tables. To create hierarchical view sheet, you must design a DataSet\nobject based on some tables and create a relationship between them first. Use the VS.NET\u0026amp;rsquo;s DataSet Designer to create the relationship. In\nthis example, there are three DataTables: Customers, Orders, Order Details. The sheet shows all the customer information by default. When\nthe user expands a customer, the grid shows all the orders that customer has placed. When the user expands an order, the grid shows the details\nof that order. The data is hieracical: order details are listed under orders, and orders are listed under customers.\nFOr this to work, the following to relationships must be established between the data tables:\n  Create a foreign key on DataTable Orders, the key field is CustomerID\n  Create a foreingn key on DataTable Order Details, the key field is OrderID.\nThe DataSet Designer now looks like this:\n  Bind Worksheet\nNow use the Worksheets Designer to set the DataSource and DataMember for the worksheet, and configure the data field binding columns.\nThe control automatically adds a + icon for each row that corresponds to a record whose binding object (generally a DataRowView object) has\nchild views. When the + icon is clicked, the record expands to show …","date":-62135596800,"description":"","objectID":"2ea1b2f053d6d4b3d7fea19dd30636ea","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/creating+hierarchical+view+sheet/","title":"Creating Hierarchical View Sheet"},{"content":"Data Binding is an exciting feature offered by the Microsoft .NET Framework. We know that the DataGrid control offered by Microsoft supports data binding, which means that a DataGrid can be bound to any Data Source (using DataSet, DataTable and DataView objects). This feature has made developers\u0026amp;rsquo; lives a lot easier. Based on the same concept, Aspose.Cells.GridDesktop also supports data binding, which allows developers to bind worksheets to any data source.This article explores the feature.\n   Contents Summary\n1 Creating a Sample Database\n2 Create a Sample Application\n3 Adding Namespace and Declaring Global Variables\n4 Filling DataSet with Data from Database\n5 Binding Worksheet with DataSet\n6 Setting Column Headers of Worksheet\n7 Customizing the Width and Styles of Columns\n8 Adding Rows\n9 Deleting Rows\n10 Saving Changes to Database\n ||      Creating a Sample Database       Create a sample database to use with the example. We used Microsoft Access to create a sample database with a Products table (schema below). Three dummy records are added to the Products table. **Records in Products table **  Create a Sample Application\nNow create a simple desktop application in Visual Studio and do the following.\n Drag the \u0026amp;ldquo;GridControl\u0026amp;rdquo; Control from toolbox and drop it on the form. Drop four buttons from toolbox on the bottom of the form and set their text property as Bind Woksheet, Add Row, Delete Row and Update to Database respectively.  Adding Namespace and Declaring Global Variables\nBecause this example uses a Microsoft Access database, add the System.Data.OleDb namespace at the top of the code.\n\\\nYou can now use the classes packaged under this namespace.\n Declare global variables.  \\\nFilling DataSet with Data from Database\nNow connect to the sample database to fetch and fill data into a DataSet object.\n Use the OleDbDataAdapter object to connect with our sample database and fill a DataSet with data fetched from Products table in the database, as shown in the …","date":-62135596800,"description":"","objectID":"65bdb9f6005e6716e25c7aa0ba7ad451","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/implementing+griddesktops+data+binding+feature+in+worksheets/","title":"Implementing GridDesktops Data Binding Feature in Worksheets"},{"content":"When you bind a worksheet to a dataset with the\nWorksheets Designer in the IDE, a worksheet tag will be created in the APSX\nfile. It may look like this:\nXML\n\u0026amp;lt;acw:Worksheet DataMember=\u0026amp;quot;Products\u0026amp;rdquo; BindStartRow=\u0026amp;quot;2\u0026amp;rdquo; Name=\u0026amp;quot;Products\u0026amp;rdquo;\nEnableCreateBindColumnHeader=\u0026amp;quot;True\u0026amp;rdquo; DataSource=\u0026#39;\u0026amp;lt;%# dataSet11 %\u0026amp;gt;\u0026#39;\u0026amp;gt;\n\\\nWhen you call GridWeb1.DataBind() or WebWorksheet.DataBind(), the worksheet will be filled with the data in dataSet11.\nSometimes you may want to rebind the worksheet:\nC#]\nprivate void Button1_Click(object sender, System.EventArgs e)\n{\nGridWeb1.WebWorksheets[0].Cells.Clear();\n// Load data to the dataSet11.\nLoadData(dataSet11);\nGridWeb1.WebWorksheets[0].DataBind();\n}\n\\\nVB\nPrivate Sub Button1_Click(ByVal sender As System.Object, ByVal e As\nSystem.EventArgs) Handles Button1.Click\nGridWeb1.WebWorksheets(0).Cells.Clear()\n\u0026#39; Load data to the dataSet11.\nLoadData(dataSet11)\nGridWeb1.WebWorksheets(0).DataBind()\nEnd Sub\n\\\nThe worksheet will always bind to dataSet11 even if you change the worksheet.DataSource property at runtime. This is because the sheet alway uses the DataSource binding information in the worksheet\u0026amp;rsquo;s tag in the ASPX file. To bind the sheet to another datasource at runtime, remove the datasource binding information in the worksheet tag in the ASPC file. Edit the tag to this:\nXML\n\u0026amp;lt;acw:Worksheet BindStartRow=\u0026amp;quot;2\u0026amp;rdquo; Name=\u0026amp;quot;Products\u0026amp;rdquo;\nEnableCreateBindColumnHeader=\u0026amp;quot;True\u0026amp;quot;\u0026amp;gt;\n\\\nSpecify the worksheet.DataSource and worksheet.DataMember properties before calling the DataBind method.\n","date":-62135596800,"description":"","objectID":"aa62f0d6ccad25a0bc19b49ff14957a6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/rebind+worksheet+gridweb/","title":"Rebind Worksheet GridWeb"},{"content":"With Aspose.Cells, there are various ways to create a dropdown list: ValidationType.DropDownList, List and FreeList all offer this feature. The control supports a value/text pair in dropdown lists, lists and freelists. Use the Validation.ValueList.Add method to add a new value/text pair into the list.\nIn the code below, \u0026amp;ldquo;1\u0026amp;rdquo; is the value of the list item, and \u0026amp;ldquo;1:test\u0026amp;rdquo; is the list item\u0026amp;rsquo;s displayed text.\nC#\n// Adds to a bindcolumn\nGridWeb1.WebWorksheets[0].BindColumns[\u0026amp;ldquo;CategoryID\u0026amp;rdquo;].Validation.ValueList.Add(\u0026amp;ldquo;1,1:test\u0026amp;rdquo;);\n// Adds to a validation cell\nGridWeb1.WebWorksheets[1].Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].Validation.ValueList.Add(\u0026amp;ldquo;1,1:test\u0026amp;rdquo;);\n\\\nVB\n\u0026#39; Adds to a bindcolumn\nGridWeb1.WebWorksheets(0).BindColumns(\u0026amp;ldquo;CategoryID\u0026amp;rdquo;).Validation.ValueList.Add(\u0026amp;ldquo;1,1:test\u0026amp;rdquo;)\n\u0026#39; Adds to a validation cell\nGridWeb1.WebWorksheets(1).Cells(\u0026amp;ldquo;A1\u0026amp;rdquo;).Validation.ValueList.Add(\u0026amp;ldquo;1,1:test\u0026amp;rdquo;)\n\\\nUse the LoadValueList method to load list items from a dataview object:\nC#\nGridWeb1.WebWorksheets[0].BindColumns[\u0026amp;ldquo;CategoryID\u0026amp;rdquo;].Validation.LoadValueList(dataSet31.Categories.DefaultView, \u0026amp;ldquo;CategoryID\u0026amp;rdquo;, \u0026amp;ldquo;CategoryName\u0026amp;rdquo;, true);\n\\\nVB\nGridWeb1.WebWorksheets(0).BindColumns(\u0026amp;ldquo;CategoryID\u0026amp;rdquo;).Validation.LoadValueList(dataSet31.Categories.DefaultView, \u0026amp;ldquo;CategoryID\u0026amp;rdquo;, \u0026amp;ldquo;CategoryName\u0026amp;rdquo;, True)\n\\\n","date":-62135596800,"description":"","objectID":"38bb8a12db6eabc4ad1b74e38d38e72f","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/using+the+dropdownlist%2c+list%2c+freelist+cell+with+gridweb/","title":"Using the DropDownList, List, FreeList Cell with GridWeb"},{"content":"Articles in this section\nAttachments: Implementing GridDesktops Data Binding Feature in Worksheets-001.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-002.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-003.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-004.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-005.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-006.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-007.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-008.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-009.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-010.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-011.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-012.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-013.png (image/png) Implementing GridDesktops Data Binding Feature in Worksheets-014.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-001.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-002.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-003.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-004.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-005.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-006.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-007.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-008.png (image/png) Binding Worksheet to a DataSet using GridWebs Worksheets Designer-009.png (image/png) Binding Worksheet to a DataSet using GridWebs …","date":-62135596800,"description":"","objectID":"fe4f951ef751fae047938e7c79a5d3f6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/databinding/","title":"Data Binding"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Calculate Custom Functions in GridWeb 2.1 Sample Code\n ||      \\      Possible Usage Scenarios\nAspose.Cells.GridWeb supports the calculation of custom functions with the GridWeb.CustomCalculationEngine property. This property takes the instance of GridAbstractCalculationEngine interface. Please implement GridAbstractCalculationEngine interface and calculate your custom functions with your own logic.\nCalculate Custom Functions in GridWeb\nThe following sample code adds a custom function named MYTESTFUNC() in cell B3. Then we calculate the value of this function by implementing the GridAbstractCalculationEngine interface. We calculate MYTESTFUNC() in such a way that it multiplies its parameter with 2 and returns the result. So if its parameter is 9, it will return 2*9 = 18.\nSample Code\n\\\nAttachments: gridweb-custom-calculation.png (image/png) Calculate Custom Functions in GridWeb-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"f3cfe6a07381e60d2aeee25b5e6fab5e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/calculate+custom+functions+in+gridweb/","title":"Calculate Custom Functions in GridWeb"},{"content":"If you want to enable copy and paste rows in GridDesktop within the control or between control and excel, then please set the GridDesktop.ClipboardCopyPaste property to true. You can set this property in design time or in code. The default value of this property is false. Currently, it can only copy and paste cell values and it will not copy any other setting of the cell like format, border style and so on.\nSetting GridDesktop.ClipboardCopyPaste property in Design Mode and Run Time\nThe following sample code sets GridDesktop.ClipboardCopyPaste property in Run Time.\n\\\nAttachments: clipboard-copy-paste.png (image/png)\n","date":-62135596800,"description":"","objectID":"334fdab78bafcd498a58f2e637d409ca","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/copy+and+paste+rows+in+griddesktop+within+the+control+and+between+the+control+and+excel/","title":"Copy and Paste Rows in GridDesktop within the Control and between the Control and Excel"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Enter Cell Data of GridWeb Worksheet in Percentage Format 2.1 Sample Code\n ||      \\      Possible Usage Scenarios\nGridWeb now supports users to enter cell data in percentage format like 3% and the data in the cell will automatically be formatted as 3.00%. However, you will have to set the cell style to Percentage Format which is either GridTableItemStyle.NumberType a 9 or 10. The number 9 will format 3% as 3% but the number 10 will format 3% as 3.00%.\nIf you have not set the cell style to Percentage Format, then input data 3% will display as 0.03.\nEnter Cell Data of GridWeb Worksheet in Percentage Format\nThe following sample code sets the cell A1 GridTableItemStyle.NumberType as 10, therefore the input data 3% automatically be formatted as 3.00% as shown in the screenshot.\nSample Code\n\\\nAttachments: Enter Cell Data of GridWeb Worksheet in Percentage Format-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"ad3a33e8b3219fefee4f53aa0782fa90","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/enter+cell+data+of+gridweb+worksheet+in+percentage+format/","title":"Enter Cell Data of GridWeb Worksheet in Percentage Format"},{"content":"When creating a Workbook with large data sets, or reading a big Microsoft Excel file, it will surely take more time and resources to do that. The total memory the process will take is always a concern. There are measures which can be adopted to cope with the challenge. Aspose.Cells.GridWeb provides some relevant options and APIs to lower, reduce and optimize memory usage. Also, it can help the process work more efficiently and run faster. For a worksheet that contains large cells data, you may load the dataset asynchronously that can improve the overall performance for user\u0026amp;rsquo;s experience.\nUse the GridWeb.EnableAsync option to optimize memory and performance for cells data. When building a large data set for cells. When you set the option to true, the data loading will be based on current visible Windows area only. In short, when you scroll in the worksheet\u0026amp;rsquo;s cells data in GridWeb, it will load new Windows data based on the current scroll position only.\nThe following example shows how to enable GridWeb\u0026amp;rsquo;s async mode.\n\\\n","date":-62135596800,"description":"","objectID":"33bb09ba3599ff51214d9eeaa3ad752c","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/loading+gridweb+data+in+async+mode/","title":"Loading GridWeb Data in Async Mode"},{"content":"When GridWeb session mode is ViewState, it stores its temporary session files inside the Application Base Directory. Sometimes, it is not OK to store temporary session files there because Application Base Directory might not have write permissions on it. In such cases, GridWeb throws such an exception\n[UnauthorizedAccessException: Access to\nthe path \u0026amp;lsquo;D:\\inetpub\\wwwroot\\AsposeExcelTest\\gwb_tempGridWeb1\u0026amp;rsquo; is denied.]\nThe solution to above problem is to give write access to Application Base Directory or change the GridWeb temporary session files path having write access using the GridWeb.SessionStorePath property. This path should be relative to Application Base Directory.\nSpecify the path where GridWeb stores temporary session files\nThe following sample code specifies the path where GridWeb stores temporary session files.\n\\\n","date":-62135596800,"description":"","objectID":"55e8f0dcf11cf8aa4b50afa429fc09c4","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/specify+the+path+where+gridweb+stores+temporary+session+files/","title":"Specify the path where GridWeb stores temporary session files"},{"content":"Sometimes, you need to find an easy way for the cells containing formulas. You need to have an approach to quickly read through all formulas to check for errors. This can help you to trace the data being used in a formula.\nAspose.Cells.GridWeb provides the feature what is called Show Formulas in Microsoft Excel.\nUsing Show Formulas Feature\nAll you need to use a shortcut \u0026amp;ldquo;CTRL + ~\u0026amp;rdquo; to display all the formulas in the worksheet.\nFor example, we load a template file into the GridWeb which has formulas in the C column, here is the code we simply used to load the file.\n\\\n\\\nThe file is loaded into the GridWeb and we can see a sheet with all the values in the picture below.\nAfter pressing CTRL + ~, all formulas are displayed.\nAttachments: Using Show Formulas Feature of GridWeb-001.png (image/png) Using Show Formulas Feature of GridWeb-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"d57350f953dc916de8607688d312a87a","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/using+show+formulas+feature+of+gridweb/","title":"Using Show Formulas Feature of GridWeb"},{"content":"Sometimes you might want to use your own icons (images) instead of Aspose.Cells.GridWeb control\u0026amp;rsquo;s default icons. This article explains how to do this.\nThe control’s default icons are located in the URL path \u0026amp;ldquo;/acw_client/\u0026amp;quot;. The file path can be: \u0026amp;ldquo;C:\\Program Files\\Aspose\\Aspose.Cells for .NET\\acw_client\u0026amp;rdquo; by default. You find files like submit.gif, save.gif etc. in that folder. If you want to replace these images with your own, add a config section to the web.config file of your web application.\nXML\n\r\r\\\nYou may have noticed that this configuration only affects the control images path and doesn\u0026amp;rsquo;t affect the control’s client-scripts path. For example, if you run your page with the GridWeb control and check the source file in the browser, you may find that the acw_client _path property of the grid’s DIV element still says: “/yourApp/webform1.aspx/”. In some cases, you may need to redefine the client-script path. To force the control to use the redefined image path as the client-script path, add another config setting in the appSettings section:\nXML\n\\\nThis config will only take effect with the licensed control.\n","date":-62135596800,"description":"","objectID":"461581cadca6065dcb23eb7f7f3e99e6","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/using+your+own+icons+instead+of+the+gridweb+default+icons/","title":"Using Your Own Icons Instead of the GridWeb Default Icons"},{"content":"Aspose.Cells.GridWeb provides some built-in command buttons like Submit and Save. Use these buttons to perform related tasks.\nThis article shows how to submit data to a server not just by clicking GridWeb\u0026amp;rsquo;s built-in Save command button, but by clicking a common ASP.NET Button (Web Control). The purpose of this article is to show the flexibility of Aspose.Cells.GridWeb. Moreover, this article also uses special functions exposed by Aspose.Cells.GridWeb to be used in the client side script.\n   Contents Summary\n1 Submitting Grid Data Using an ASP.NET Button 1.1 1. Creating a Test Application\n1.2 2. Adding Code to Page_Load Event 1.2.1 Code Example\n1.3 3. Running the Application\n2 Conclusion\n |     Submitting Grid Data Using an ASP.NET Button     Aspose.Cells.GridWeb provides three built-in buttons (Submit, Save and Undo). After editing in GridWeb, a user may click the Submit or Save button in the Tab Bar to let GridWeb submit data to the server. If the user clicks a Sheet Tab, the GridWeb control performs the same task as that of the built-in command buttons. Aspose.Cells.GridWeb also supports adding this functionality to a common ASP.NET Button control, but you need to add some extra code to the application.\n1. Creating a Test Application\nOpen your Visual Studio.NET IDE and create a new ASP.NET Web Application project. Once the application is created, a default WebForm1.aspx page will be added to your project. Drag \u0026amp;amp; drop GridWeb control from your Toolbox to Web Form . If you can\u0026amp;rsquo;t find GridWeb control in your Toolbox then refer to this page: Integrate Aspose.Cells Grid Controls with Visual Studio.NET to learn more about it.After the GridWeb control is added to your Web Form, also add a Button web control from Toolbox to your Web Form.\n2. Adding Code to Page_Load Event\nNow, it\u0026amp;rsquo;s time to add some code to Page_Load event of the Web Form. You can double click on the Web Form in design view and VS.NET IDE will automatically take you to the Page_Load …","date":-62135596800,"description":"","objectID":"cee722a25ee8df6b5730bd7b8b7e82cf","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/using+a+common+button+to+submit+grid+data/","title":"Using a Common Button to Submit Grid Data"},{"content":"You can use the following client side functions to select a range or to get the selected range in a GridWeb using JavaScript.\n getSelectRange() setSelectRange() clearSelections()  getSelectRange() returns the last selected range. setSelectRange() selects the given range. clearSelections() clears all selection excluding current active cell.\nUsing client side functions to select a range or to get the selected range in a GridWeb using JavaScript\nThe following code explains the usage of these functions.\n\\\n","date":-62135596800,"description":"","objectID":"0aca7c8397e3b17b935a3644904b5b1e","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/using+client+side+functions+to+select+range+or+get+the+selected+range+in+gridweb/","title":"Using client side functions to select range or get the selected range in GridWeb"},{"content":"Articles in this section\nAttachments: Using a Common Button to Submit Grid Data-001.png (image/png) Using a Common Button to Submit Grid Data-002.png (image/png) Using a Common Button to Submit Grid Data-003.png (image/png) Using a Common Button to Submit Grid Data-004.png (image/png) showformulas1.png (image/png) showformulas2.png (image/png)\n","date":-62135596800,"description":"","objectID":"15aefb052a875f642bd7875662f64a59","permalink":"https://roywangt.github.io/cellsnet/developerguide/technicalarticles/asposecellsgridcontrols/general/","title":"General"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add Custom XML Parts and Select them by ID\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Custom XML Parts are the XML data that is stored inside the Microsoft Excel documents and are used by the applications that deal with them. There is no direct way of adding them using Microsoft Excel UI at the moment. However, you can add them programmatically in various ways e.g. using VSTO, using Aspose.Cells etc. Please use Workbook.CustomXmlParts.Add() method if you want to add Custom XML Part using Aspose.Cells API. You can also set its ID, using the CustomXmlPart.ID property. Similarly, if you want to select Custom XML Part by ID, you can use Workbook.CustomXmlParts.SelectByID() method.\nAdd Custom XML Parts and Select them by ID\nThe following sample code first adds four Custom XML Parts using Workbook.CustomXmlParts.Add() method. It then sets their IDs using CustomXmlPart.ID property. Finally, it finds or selects one of the added Custom XML Part using Workbook.CustomXmlParts.SelectByID() method. Please also see the console output of the code given below for reference.\nSample Code\nConsole Output\nFound: CustomXmlPart ID Sport\n","date":-62135596800,"description":"","objectID":"6b0cbf0f7bd2548a619acb6aebd6de08","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/add+custom+xml+parts+and+select+them+by+id/","title":"Add Custom XML Parts and Select them by ID"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add Digital Signature to an already signed Excel file\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells provides the Workbook.AddDigitalSignature(DigitalSignatureCollection digitalSignatureCollection) method that you can use to add digital signature to an already signed Excel file. Please note while adding a digital signature to an already signed Excel document, if the original document is Aspose.Cells generated document, it works well. But if the original document is generated by other engines (e.g. Microsoft Excel etc.), Aspose.Cells cannot keep the file same after loading and re-saving it, this will make the original signature to be invalid.\nAdd Digital Signature to an already signed Excel file\nThe following sample code demonstrated how to make use of Workbook.AddDigitalSignature(DigitalSignatureCollection digitalSignatureCollection) method to add digital signature to already signed Excel file. Please check the sample Excel file used in this code. This file is already digitally signed. Please check the output Excel file generated by the code. We have used the demo certificate named AsposeDemo.pfx in this code which has a password aspose. The screenshot shows the effect of the sample code on the sample Excel file after execution.\nSample Code\nAttachments: AsposeDemo.pfx (application/x-pkcs12) sampleDigitallySignedByCells.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputDigitallySignedByCells.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Add-Digital-Signature-to-an-already-signed-Excel-file.png (image/png)\n","date":-62135596800,"description":"","objectID":"e0d67ea76ade503f0f1083683d8db31f","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/add+digital+signature+to+an+already+signed+excel+file/","title":"Add Digital Signature to an already signed Excel file"},{"content":"A digital signature provides assurance that a workbook file is valid and no one has altered it. You can create a personal digital signature by using the Microsoft Selfcert.exe or any other tool, or you can purchase a digital signature. After you create a digital signature, you must attach it to your workbook. Attaching a digital signature is similar to sealing an envelope. If an envelope arrives sealed, you have some level of assurance that no one has tampered with its contents.\nIntroduction\nUse the Digital Signature dialog to attach a digital signature. The Digital Signature dialog lists valid certificates. You can use the Digital Signature dialog to view certificates and to select the one you want to use. If a workbook has a digital signature, the name of the signature appears in the Certificate Name field. If you click the Remove button in the Digital Signature dialog, Microsoft Excel removes the digital signature as well.\nAspose.Cells provides the Aspose.Cells.DigitalSignatures namespace to perform the job (assign and validate digital signatures). The namespace has some useful features for adding and validating digital signatures.\nPlease see the following sample code that describes how you can perform the task using the Aspose.Cells for .NET API.\n\\\nAttachments: Assign and Validate Digital Signatures-001.png (image/png) Assign and Validate Digital Signatures-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"538d46bbe98232543fceae6a27fa806c","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/assign+and+validate+digital+signatures/","title":"Assign and Validate Digital Signatures"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create Shared Workbook with Aspose.Cells\n3 Sample Code\n |     Possible Usage Scenarios     Microsoft Excel allows you to share the workbook as shown in the following screenshot. When you share the workbook, then more than one user can edit the workbook on the network. Aspose.Cells enables you to create a shared workbook with Workbook.Settings.Shared property. Create Shared Workbook with Aspose.Cells\nThe following sample code creates a shared workbook by setting Workbook.Settings.Shared property as true. When you will open the output Excel file in Microsoft Excel, you will see **Shared **with the output workbook name as shown in this screenshot.\n\\\nSample Code\nAttachments: outputSharedWorkbook.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Shared-Workbook-in-Microsoft-Excel.png (image/png) Share-Workbook-Using-Microsoft-Excel.png (image/png)\n","date":-62135596800,"description":"","objectID":"30f01f236283d499a0252279c2c6eca7","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/create+shared+workbook+with+aspose.cells/","title":"Create Shared Workbook with Aspose.Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Filter Defined Names while loading Workbook\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to filter or remove defined names present inside the workbook. Please use LoadDataFilterOptions.DefinedNames to load defined names and use ~LoadDataFilterOptions.DefinedNames to remove them while loading the workbook. Please note, if you will remove defined names, then formulas inside the workbook may break up. Filter Defined Names while loading Workbook\nThe following sample code loads the sample Excel file which has a formula in cell C1 containing the defined names i.e. =SUM(MyName1, MyName2). Since we are using ~LoadDataFilterOptions.DefinedNames to remove the defined names while loading the workbook, the formula in cell C1 in output Excel file breaks up and you see #NAME? instead. Please see the following screenshot that shows the effect of the code on the sample Excel file.\nSample Code\nAttachments: LoadDataFilterOptions-DefinedNames.png (image/png) sampleFilterDefinedNames.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputFilterDefinedNames.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"d957fd84c9554a6832b5fc5d2332de82","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/filter+defined+names+while+loading+workbook/","title":"Filter Defined Names while loading Workbook"},{"content":"   Contents Summary\n1 Get OData Connection Information 1.1 Sample Code\n1.2 Console Output\n |     Get OData Connection Information     There might be cases where developers need to extract OData information from the excel file. Aspose.Cells provides the Workbook.DataMashup property which returns the DataMashup information present in the Excel file. This information is represented by the DataMashup class. The DataMashup class provides the PowerQueryFormulas property that returns the PowerQueryFormulaCollction collection. From the PowerQueryFormulaCollction, you can get access to PowerQueryFormula and PowerQueryFormulaItem.\nThe following code snippet demonstrates the use of these classes to retrieve the OData information.\nThe Source file used in the following code snippet is attached for your reference.\nSource File\nSample Code\nConsole Output\nConnection Name: Orders\nName: Source\nValue: OData.Feed(\u0026amp;ldquo;https://services.odata.org/V3/Northwind/Northwind.svc/\u0026amp;quot;, null, [Implementation=\u0026amp;quot;2.0\u0026amp;rdquo;])\nName: Orders_table\nValue: Source{[Name=\u0026amp;quot;Orders\u0026amp;rdquo;,Signature=\u0026amp;quot;table\u0026amp;rdquo;]}[Data]\nAttachments: WorkingWithContentTypeProperties.jpg (image/jpeg) WorkingWithContentTypeProperties_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) ODataSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"b261a4f2adf7af7701cee5566eaaadbf","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/how+to+get+odata+connection+information/","title":"How to get OData Connection Information"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Password Protect or Unprotect the Shared Workbook\n3 Sample Code\n |     Possible Usage Scenarios     You can protect or unprotect the shared workbook with Microsoft Excel as shown in the following screenshot. Aspose.Cells also supports this feature with the Workbook.ProtectSharedWorkbook() and Workbook.UnprotectSharedWorkbook() methods.\nPassword Protect or Unprotect the Shared Workbook\nThe following sample code creates a workbook and protects it while enabling sharing and saves it as output Excel file. The screenshot shows that when you try to unprotect it, Microsoft Excel prompts you to enter the password to unprotect it.\nSample Code\nAttachments: Protected-Shared-Workbook-created-by-Aspose.Cells-using-ProtectSharedWorkbook()-method..png (image/png) outputProtectSharedWorkbook.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Protect-Shared-Workbook-MS-Excel.png (image/png)\n","date":-62135596800,"description":"","objectID":"d0c88ed740a136553bf3e8396cb2817a","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/password+protect+or+unprotect+the+shared+workbook/","title":"Password Protect or Unprotect the Shared Workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Read and Write External Connection of XLS/XLSB file\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Aspose.Cells already supports read and write external connection of XLSX file but now, it also supports this feature for XLSB and XLS file. However, the code is the same for all types of formats.\nRead and Write External Connection of XLS/XLSB file\nThe following sample code loads the sample XLSB file (XLS can also be loaded) and reads its first External Connection which is actually a Microsoft Access DB Connection. It then modifies the DBConnection.Name property and saves it as output XLS/XLSB file. The screenshot shows the effect of code on sample XLSB file and output XLSB file after its execution. Please also see the console output of the sample code given below for a reference.\nSample Code\nThe following code shall work for both XLSB and XLS files by loading and saving files with the appropriate extension.\nConsole Output\nConnection Name: Cust\nCommand: Customer\nConnection Info: Provider=Microsoft.ACE.OLEDB.12.0;Password=\u0026amp;rdquo;\u0026amp;quot;;User ID=Admin;Data Source=C:\\TempSha\\Cust.accdb;Mode=Share Deny Write;Extended Properties=\u0026amp;rdquo;\u0026amp;quot;;Jet OLEDB:System database=\u0026amp;rdquo;\u0026amp;quot;;Jet OLEDB:Registry Path=\u0026amp;rdquo;\u0026amp;quot;;Jet OLEDB:Database Password=\u0026amp;rdquo;\u0026amp;quot;;Jet OLEDB:Engine Type=6;Jet OLEDB:Database Locking Mode=0;Jet OLEDB:Global Partial Bulk Ops=2;Jet OLEDB:Global Bulk Transactions=1;Jet OLEDB:New Database Password=\u0026amp;rdquo;\u0026amp;quot;;Jet OLEDB:Create System Database=False;Jet OLEDB:Encrypt Database=False;Jet OLEDB:Don\u0026amp;rsquo;t Copy Locale on Compact=False;Jet OLEDB:Compact Without Replica Repair=False;Jet OLEDB:SFP=False;Jet OLEDB:Support Complex Data=False;Jet OLEDB:Bypass UserInfo Validation=False;Jet OLEDB:Limited DB Caching=False;Jet OLEDB:Bypass ChoiceField Validation=False\nAttachments: Connection-Name-has-been-modified-inside-the-XLSB-file.png (image/png) sampleExternalConnection_XLSB.xlsb …","date":-62135596800,"description":"","objectID":"1e3bb3b5152be0b0382714e17d83c076","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/read+and+write+external+connection+of+xls+and+xlsb+files/","title":"Read and Write External Connection of XLS and XLSB files"},{"content":"   Contents Summary\n1 Replace text in a workbook using Regular Expression 1.1 Sample Code\n |     Replace text in a workbook using Regular Expression     Aspose.Cells provides the feature to replace text in a workbook using a regular expression. For this, the API provides RegexKey property of the ReplaceOptions class. Setting the RegexKey to true indicates that the searched key will be a regular expression.\nThe following code snippet demonstrates the use of the RegexKey property by using the sample excel file. The output file generated by the following code snippet is attached for reference.\nSample Code\nAttachments: Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SampleRegexReplace.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) RegexReplace_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"3d4fa2e4edce6ba4771c9d44a429e9fc","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/replace+text+in+a+workbook+using+regular+expression/","title":"Replace text in a workbook using Regular Expression"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Stop conversion or loading using InterruptMonitor when it is taking too long\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to stop the conversion of Workbook to various formats like PDF, HTML etc. using the InterruptMonitor object when it is taking too long. The conversion process is often both CPU and Memory intensive and it is often useful to halt it when resources are limited. You can use InterruptMonitor both for stopping conversion as well as to stop loading huge workbook. Please use Workbook.InterruptMonitor property for stopping conversion and LoadOptions.InterruptMonitor property for loading huge workbook. Stop conversion or loading using InterruptMonitor when it is taking too long\nThe following sample code explains the usage of InterruptMonitor object. The code converts quite a large Excel file to PDF. It will take several seconds (i.e. more than 30 seconds) to get it converted because of these lines of code.\n//Access cell J1000000 and add some text inside it.\nCell cell = ws.Cells[\u0026amp;ldquo;J1000000\u0026amp;rdquo;];\ncell.PutValue(\u0026amp;ldquo;This is text.\u0026amp;quot;);\nAs you see J1000000 is quite a farther cell in XLSX file. However, the WaitForWhileAndThenInterrupt() method interrupts the conversion after 10 seconds and program ends/terminates. Please use the following code to execute the sample code.\nnew StopConversionOrLoadingUsingInterruptMonitor().TestRun();\nSample Code\n","date":-62135596800,"description":"","objectID":"edaedd5fbe1baeaafc6cdadf0028b0cc","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/stop+conversion+or+loading+using+interruptmonitor+when+it+is+taking+too+long/","title":"Stop conversion or loading using InterruptMonitor when it is taking too long"},{"content":"   Contents Summary\n1 Support for XAdES Signature 1.1 Sample Code\n |     Support for XAdES Signature     Aspose.Cells provides supports signing workbooks with XAdES Signature. For this, the API provides DigitalSignature class and XAdESType enumeration.\nThe following code snippet demonstrates the use of the DigitalSignature class to sign the source workbook.\nSample Code\nAttachments: RegexReplace_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SampleRegexReplace.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sourceFile.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"6edf5429e3d5291f834fd36af4dc4fc8","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/support+for+xades+signature/","title":"Support for XAdES Signature"},{"content":"   Contents Summary\n1 Usage Scenario\n2 Updating Power Query Formula Item 2.1 Sample Code\n |     Usage Scenario     There might be cases where the data source files are moved and the excel file is unable to locate the file. In such cases, Aspose.Cells API provides the option to update the Power Query Formula item by using the PowerQueryFormulaItem class to update the location of the source file.\nUpdating Power Query Formula Item\nAspose.Cells API provides the ability to update Power Query Formula Items. The following code snippet demonstrates updating the data source file location in the excel file by using the PowerQueryFormulaItem.Value property. The source and output files attached for your reference.\n Source File 1 Source File 2 Output File  Sample Code\nAttachments: WebExtensionsSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AddWebExtension_Out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SamplePowerQueryFormula.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SamplePowerQueryFormulaSource.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SamplePowerQueryFormula_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"b6f9cfd2dfa9f17cf96262ebd51e0763","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/update+power+query+formula+item/","title":"Update Power Query Formula Item"},{"content":"   Contents Summary\n1 Web Extensions - Office Add-ins\n2 Add Web Extension 2.1 Sample Code\n3 Access Web Extension Information 3.1 Sample Code\n3.2 Console Output\n |     Web Extensions - Office Add-ins     Web Extensions extend Office applications and interact with the content in Office documents. Web Extensions add additional functionality to Office client to improve the user experience and productivity.\nAspose.Cells also provides the ability to work with Web Extensions.\nAdd Web Extension\nYou may add Web Extensions(Office Add-ins) in Excel by clicking the Insert tab and then clicking the Store/Get Add-ins link. In the Add-ins box, browse for the add-in you want and add it.\nAspose.Cells also provides the feature to add Web Extensions by using the WebExtension and WebExtensionTaskPane classes. The following code sample demonstrates the use of WebExtension and WebExtensionTaskPane classes to add a web extension to Excel file. Please see the output Excel file generated by the code for reference.\nSample Code\nAccess Web Extension Information\nAspose.Cells provides the ability to access the information of Web Extensions in Excel file. The following code sample demonstrates how to access web extension information by loading the sample Excel file. Please see the console output generated by the code for reference.\nSample Code\nConsole Output\nWidth: 350\nIsVisible: True\nIsLocked: False\nDockState: right\nStoreName: en-US\nStoreType: OMEX\nWebExtension.Id: 95D7ECE8-1355-492B-B6BF-27D25D0B0EEF\nAttachments: AddWebExtension_Out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) WebExtensionsSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"c1e1d85bd7055945c5643754cd5521bc","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/web+extensions+-+office+add-ins/","title":"Web Extensions - Office Add-ins"},{"content":"   Contents Summary\n1 Usage Scenario\n2 Workbook and Worksheet Print Preview 2.1 Sample Code\n2.2 Console Output\n |     Usage Scenario     There may be cases where Excel files with millions of pages need to be converted to PDF or images. Processing such files will consume a lot of time and resources. In such cases, the Workbook and Worksheet Print Preview feature might prove to be useful. Before converting such files, the user can check the total number of pages and then decide whether the file is to be converted or not. This article focuses on using the WorkbookPrintingPreview and SheetPrintingPreview classes to find out the total number of pages.\nWorkbook and Worksheet Print Preview\nAspose.Cells provides the print preview feature. For this, the API provides WorkbookPrintingPreview and SheetPrintingPreview classes. To create the print preview of the whole workbook, create an instance of the WorkbookPrintingPreview class by passing Workbook and ImageOrPrintOptions objects to the constructor. The WorkbookPrintingPreview class provides an EvaluatedPageCount method which returns the number of pages in the generated preview. Similar to WorkbookPrintingPreview class, the SheetPrintingPreview class is used to generate a print preview for a specific worksheet. To create the print preview of a worksheet, create an instance of the SheetPrintingPreview class by passing Worksheet and ImageOrPrintOptions objects to the constructor. The SheetPrintingPreview class also provides an EvaluatedPageCount method which returns the number of pages in the generated preview.\nThe following code snippet demonstrates the use of both WorkbookPrintingPreview and SheetPrintingPreview classes by using the sample excel file.\nSample Code\nThe following is the output generated by executing the above code.\nConsole Output\nWorkbook page count: 1 Worksheet page count: 1\nAttachments: Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f536a303d8e681836593c6963a786843","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/workbook+and+worksheet+print+preview/","title":"Workbook and Worksheet Print Preview"},{"content":"   Contents Summary\n1 Working with ContentTypeProperties 1.1 Sample Code\n |     Working with ContentTypeProperties     Aspose.Cells provides Workbook.ContentTypeProperties.Add method to add custom ContentTypeProperties to an excel file. You may also make the property optional by setting the ContentTypeProperty.IsNillable property to true. The following code snippet demonstrates adding optional custom ContentTypeProperties to an excel file. The following image shows both properties that were added by the sample code.\nThe output file generated by the sample code is attached for reference.\nOutput File\nSample Code\nAttachments: Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) WorkingWithContentTypeProperties_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) WorkingWithContentTypeProperties.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"6439dd955a2b70c0672e4c183fc9bae2","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/working+with+contenttypeproperties/","title":"Working with ContentTypeProperties"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"f1b7c1ea6ef5a3fa6d3702ccd5dbdf85","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbook/","title":"Workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Control External Resources using WorkbookSetting.StreamProvider\n3 Sample Code\n |     Possible Usage Scenarios     Sometimes, your Excel file contains external resources e.g. linked images etc. Aspose.Cells allows you to control these external resources using Workbook.Settings.StreamProvider which takes the implementation of IStreamProvider interface. Whenever you will try to render your worksheet containing external resources e.g. linked images, the methods of IStreamProvider interface will be invoked which will enable you to take appropriate actions for your external resources.\nControl External Resources using WorkbookSetting.StreamProvider\nThe following sample code explains the usage of Workbook.Settings.StreamProvider. It loads the sample Excel file containing a linked image. The code replaces the linked image with Aspose Logo and renders the entire sheet into a single image using SheetRender class. The following screenshot shows the sample Excel file and its rendered output image for a reference. As you can see, the broken linked image is replaced with Aspose Logo.\nSample Code\nAttachments: sampleLogo_WorkbookSetting_StreamProvider.png (image/png) Control-External-Resources-using-WorkbookSetting.StreamProvider.png (image/png) sampleControlExternalResourcesUsingWorkbookSettingStreamProvider.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputControlExternalResourcesUsingWorkbookSettingStreamProvider.png (image/png)\n","date":-62135596800,"description":"","objectID":"a27a4e21a214a81734b8ab98720df875","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/control+external+resources+using+workbooksetting.streamprovider/","title":"Control External Resources using WorkbookSetting.StreamProvider"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find Maximum Rows and Columns supported by XLS and XLSX formats\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     There are different number of rows and columns supported by Excel formats. For example, XLS supports 65536 rows and 256 columns while XLSX supports 1048576 rows and 16384 columns. If you want to know how many rows and columns are supported by given format, you can use Workbook.Settings.MaxRow and Workbook.Settings.MaxColumn properties.\nFind Maximum Rows and Columns supported by XLS and XLSX formats\nThe following sample code creates workbook first in XLS and then in XLSX format. After creation, it prints the values of Workbook.Settings.MaxRow and Workbook.Settings.MaxColumn properties. Please see the console output of the code given below for your reference.\nSample Code\nConsole Output\nMaximum Rows and Columns supported by XLS format.\nMaximum Rows: 65536\nMaximum Columns: 256\nMaximum Rows and Columns supported by XLSX format.\nMaximum Rows: 1048576\nMaximum Columns: 16384\n","date":-62135596800,"description":"","objectID":"65cbffb0c4fe90fba9016059a5b3e011","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/find+maximum+rows+and+columns+supported+by+xls+and+xlsx+formats/","title":"Find Maximum Rows and Columns supported by XLS and XLSX formats"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Implement Cell.FormulaLocal similar to Excel VBA Range.FormulaLocal\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Microsoft Excel Formulas may have different names in different locales or regions or languages. For example, **SUM **function is called **SUMME **in German. Aspose.Cells cannot work with non-English function names. In Microsoft Excel VBA, there is Range.FormulaLocal property that returns the name of the function as per its language or region. Aspose.Cells also provides Cell.FormulaLocal property for this purpose. However, this property will only work when you will implement GlobalizationSettings.GetLocalFunctionName(string standardName) method. Implement Cell.FormulaLocal similar to Excel VBA Range.FormulaLocal\nThe following sample code explains how to implement GlobalizationSettings.GetLocalFunctionName(string standardName) method. The method returns the local name of the standard function. If the standard function name is SUM, it returns UserFormulaLocal_SUM. You can change the code as per your needs and return the correct local function names e.g. **SUM **is **SUMME **in German and TEXT is **ТЕКСТ **in Russian. Please also see the console output of the sample code given below for a reference.\nSample Code\nConsole Output\nFormula Local: =UserFormulaLocal_SUM(A1:A2)\nFormula Local: =UserFormulaLocal_AVERAGE(B1:B2,B5)\n","date":-62135596800,"description":"","objectID":"95132a4dfdb740e11b9f8debb1475e30","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/implement+cell.formulalocal+similar+to+excel+vba+range.formulalocal/","title":"Implement Cell.FormulaLocal similar to Excel VBA Range.FormulaLocal"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Implement Errors and Boolean Value in Russian or Any Other Language\n3 Sample Code\n |     Possible Usage Scenarios     If you are using Microsoft Excel in Russian Locale or Language or any other Locale or Language, it will display Errors and Boolean values according to that Locale or Language. You can achieve a similar behavior using Aspose.Cells by using the Workbook.Settings.GlobalizationSettings property. You will have to override the following methods of GlobalizationSettings class.\n GlobalizationSettings.GetErrorValueString() GlobalizationSettings.GetBooleanValueString()  Implement Errors and Boolean Value in Russian or Any Other Language\nThe following sample code illustrates how to implement Errors and Boolean Value in Russian or Any Other Language. Please check the Sample Excel File used in this code and its Output PDF. The screenshot shows the difference between Sample Excel File and the Output PDF for a reference.\nSample Code\nAttachments: sampleRussianGlobalization.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Implement-Errors-and-Boolean-Value-in-Russian-or-Any-Other-Language.png (image/png) outputRussianGlobalization.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"40e5c68f975d74bb1eebf7251fbe7647","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/implement+errors+and+boolean+value+in+russian+or+any+other+language/","title":"Implement Errors and Boolean Value in Russian or Any Other Language"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Implement Subtotal or Grand Total labels in other languages\n ||      Possible Usage Scenarios      Sometimes, you want to show subtotal and grand total labels in non-English languages like Chinese, Japanese, Arabic, Hindi etc. Aspose.Cells allows you to do this using the GlobalizationSettings class and Workbook.GlobalizationSettings property. Please see this article on how to make use of GlobalizationSettings class\n Using GlobalizationSettings Class for Custom Subtotal Labels and Other Label of Pie Chart  Implement Subtotal or Grand Total labels in other languages\nThe following sample code loads the sample excel file and implements subtotal and grand total names in the Chinese language. Please check the output Excel file generated by this code for your reference. We first create a class of GlobalizationSettings and then use it in our code.\n\\\nNow use above created class in the code like below:\n\\\nAttachments: sample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"3ddbdd7a2ac7e6491f832229cd271380","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/implement+subtotal+or+grand+total+labels+in+other+languages/","title":"Implement Subtotal or Grand Total labels in other languages"},{"content":"English formulae are written into named region. This Excel file can be opened in an environment where system is configured to German Locale however the English formula shall be translated to German language. Following example demonstrates this feature, however it requires Excel to be installed in German language and system locale shall be set to German as well.\nSample file for testing this feature can be downloaded from the following link:\nsampleNamedRangeTest.xlsm\nAttachments: sampleNamedRangeTest.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"47ca33dc706390f804548ff98a332013","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/support+for+german+locale+in+named+range+formulae/","title":"Support for German Locale in Named Range Formulae"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Introduction to GlobalizationSettings Class 2.1 Custom Labels for Subtotals\n2.2 Custom Text for Other Label of Pie Chart\n ||      Possible Usage Scenarios      Aspose.Cells APIs have exposed the GlobalizationSettings class in order to deal with the scenarios where the user wishes to use custom labels for Subtotals in a spreadsheet. Moreover, the GlobalizationSettings class can also be used to modify the Other label for the Pie chart while rendering worksheet or chart.\nIntroduction to GlobalizationSettings Class\nThe GlobalizationSettings class currently offers the following 3 methods which can be overridden in a custom class to get desired labels for the Subtotals or to render custom text for the Other label of a Pie chart.\n GlobalizationSettings.GetTotalName: Gets the total name of the function. GlobalizationSettings.GetGrandTotalName: Gets the grand total name of the function. GlobalizationSettings.GetOtherName: Gets the name of \u0026amp;ldquo;Other\u0026amp;rdquo; labels for Pie charts.  Custom Labels for Subtotals\nThe GlobalizationSettings class can be used to customize the Subtotal labels by overriding the GlobalizationSettings.GetTotalName \u0026amp;amp; GlobalizationSettings.GetGrandTotalName methods as demonstrated ahead.\nIn order to inject custom labels, it is required to assign the WorkbookSettings.GlobalizationSettings property to an instance of the **CustomSettings **class defined above before adding the Subtotals to the worksheet.\n\\\nThe GlobalizationSettings class only works for adding new Subtotals. If a spreadsheet already contains Subtotals, their labels cannot be modified.\nCustom Text for Other Label of Pie Chart\nThe GlobalizationSettings class offers GetOtherName method which is useful to give the \u0026amp;ldquo;Other\u0026amp;rdquo; label of Pie charts a custom value. The following snippet defines a custom class and overrides the GetOtherName method to get a custom label based on the system\u0026amp;rsquo;s culture identifier.\n\\\nThe following snippet …","date":-62135596800,"description":"","objectID":"42466f5a6d1d89248a9f6aa9ab4a3aa5","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/using+globalizationsettings+class+for+custom+subtotal+labels+and+other+label+of+pie+chart/","title":"Using GlobalizationSettings Class for Custom Subtotal Labels and Other Label of Pie Chart"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"86a27fbb3343699649809cae0011a1eb","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbooksettings/","title":"Workbook Settings"},{"content":"Sometimes, you need to add or register the library reference to the VBA project through code. You can do it using Aspose.Cells VbaProject.References.AddRegisteredReference() method.\n   Contents Summary\n1 Add a library reference to VBA project in Microsoft Excel\n2 Add a library reference to the VBA project in a workbook using Aspose.Cells\n ||      Add a library reference to VBA project in Microsoft Excel      In Microsoft Excel, you can add a library reference to the VBA project by clicking the Tools \u0026amp;gt; References\u0026amp;hellip; manually.\nAdd a library reference to the VBA project in a workbook using Aspose.Cells\nThe following sample code adds or registers two library references to the VBA project of the workbook using VbaProject.References.AddRegisteredReference() method.\n\\\nAttachments: VBA-project-reference.png (image/png)\n","date":-62135596800,"description":"","objectID":"01a7f2a6f1e949cbc59dd1029d41abb2","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/add+a+library+reference+to+vba+project+in+workbook/","title":"Add a library reference to VBA project in workbook"},{"content":"Aspose.Cells allows you to add a new VBA Module and Macro Code using Aspose.Cells. Please use the Workbook.VbaProject.Modules.Add() method to add the new VBA Module inside the workbook\nThe following sample code creates a new workbook and adds a new VBA Module and Macro Code and saves the output in the XLSM format. Once, you will open the output XLSM file in Microsoft Excel and click the Developer \u0026amp;gt; Visual Basic menu commands, you will see a module named \u0026amp;ldquo;TestModule\u0026amp;rdquo; and inside it, you will see the following macro code.\nSub ShowMessage()\nMsgBox \u0026amp;ldquo;Welcome to Aspose!\u0026amp;rdquo;\nEnd Sub\nHere is the sample code to generate the output XLSM file with VBA Module and Macro Code.\n\\\n","date":-62135596800,"description":"","objectID":"aaf9daa099f5dc33d6812d5a6cee3bd7","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/adding+vba+module+and+code+using+aspose.cells/","title":"Adding VBA Module and Code using Aspose.Cells"},{"content":"Aspose.Cells allows you to assign a Macro Code to a Form Control like a Button. Please use the Shape.MarcoName property to assign a new Macro Code to a Form Control inside the workbook.\nThe following sample code creates a new workbook, assign a Macro Code to a Form Buttom and saves the output in the XLSM format. Once, you will open the output XLSM file in Microsoft Excel you will see the following macro code.\nSub ShowMessage()\nMsgBox \u0026amp;ldquo;Welcome to Aspose!\u0026amp;rdquo;\nEnd Sub\nHere is the sample code to generate the output XLSM file with Macro Code.\n\\\n","date":-62135596800,"description":"","objectID":"adb76c63ef15933e34852a6aa184d9df","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/assign+macro+to+form+control/","title":"Assign Macro to Form Control"},{"content":"Aspose.Cells allows you to check if the digital signature of the VBA code is valid using the Workbook.VbaProject.IsValidSigned property. It will return true if the signature is valid otherwise it will return false. The digital signature of the VBA code becomes invalid when you change the VBA code.\nThe following code demonstrates the usage of this property using the sample excel file which you can download from the provided link. The same excel file has a valid signature but when we modify its VBA code and save the workbook and then recheck, we find its signature has become invalid.\n\\\nAttachments: sampleVBAProjectSigned.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"a7168ab04644740914b970b53b438cef","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check+if+digital+signature+of+vba+code+is+valid/","title":"Check if Digital Signature of VBA Code is Valid"},{"content":"Aspose.Cells allows the user to check if the VBA code project is signed or not. Please use the Workbook.VbaProject.IsSigned property to check if the VBA code project is signed or not.\nThe following code explains how to check if the VBA code is signed or not using the Workbook.VbaProject.IsSigned property. You can use any of your excel files to test this code. For testing purposes, you can use this excel file used in the code.\n\\\nConsole Output\nBelow is the console output of the above code using the sample excel file provided by the link.\nIs VBA Code Project Signed: True\nAttachments: sampleVBAProjectSigned.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"19a7b7052603999a59caf5f7860f58b1","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check+if+vba+code+is+signed/","title":"Check if VBA Code is Signed"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n3 Console Output\n ||      Possible Usage Scenarios      Aspose.Cells allows you to check if VBA (Visual Basic for Applications) Project of Excel file is protected and locked for viewing. For this, the API provides the VbaProject.IslockedForViewing property. If it is locked for viewing, then the VbaProject.IslockedForViewing property returns true.\nSample Code\nThe following sample code loads the sample Excel file and checks if VBA (Visual Basic for Applications) Project of Excel file is protected and locked for viewing. Please also see its Console Output for a reference.\nConsole Output\nThis is the console output of the above sample code when executed with the provided sample Excel file.\nIs VBA Project Locked for Viewing: True\nAttachments: sampleCheckifVBAProjectisProtected.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"b2a8234f7dce96e3938cd87beeab4b75","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check+if+vba+project+is+protected+and+locked+for+viewing/","title":"Check if VBA Project is Protected and Locked for Viewing"},{"content":"You can check if your VBA project is signed or not using Microsoft Excel via Tools \u0026amp;gt; Digital Signatures\u0026amp;hellip; menu command. Similarly, you can check it programmatically using Aspose.Cells Workbook.VbaProject.IsSigned property.\nThe following code loads the workbook and checks if its VBA project is signed using Workbook.VbaProject.IsSigned property. The property will return true if the project is signed otherwise it will return false.\n\\\n","date":-62135596800,"description":"","objectID":"a12cc4bb24ee98babbf924063f108f2a","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/check+if+vba+project+in+a+workbook+is+signed/","title":"Check if VBA project in a Workbook is Signed"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Copy VBA Macro UserForm DesignerStorage from Template to Target Workbook\n3 Sample Code\n |     Possible Usage Scenarios     Aspose.Cells allows you to copy a VBA project from one Excel file into another Excel file. VBA project consists of various types of modules i.e. Document, Procedural, Designer, etc. All modules can be copied with simple code but for the Designer module, there is some extra data called Designer Storage that needs to be accessed or copied. The following two methods deal with Designer Storage.\n VbaModuleCollection.GetDesignerStorage() VbaModuleCollection.AddDesignerStorage()  Copy VBA Macro UserForm DesignerStorage from Template to Target Workbook\nPlease see the following sample code. It copies the VBA project from the template Excel file into an empty workbook and saves it as the output Excel file. If you open the VBA project inside the template Excel file, you will see a User Form as shown below. The User Form consists of Designer Storage, so it will be copied using VbaModuleCollection.GetDesignerStorage() and VbaModuleCollection.AddDesignerStorage() methods.\nThe following screenshot shows the output Excel file and its contents which were copied from the template Excel file. When you click on the Button 1, it opens up the VBA User Form which itself has a command button that shows a message box on clicking.\nSample Code\nAttachments: Target Workbook after copying VBA-Macro-UserForm-DesignerStorage from Template Workbook.png (image/png) Besides other Modules - Template Workbook also contains UserForm-DesignerStorage.png (image/png) sampleDesignerForm.xlsm (application/vnd.ms-excel.sheet.macroenabled.12) outputDesignerForm.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"463ae89d7c07efcdafa9a8ed78378645","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/copy+vba+macro+userform+designerstorage+from+template+to+target+workbook/","title":"Copy VBA Macro UserForm DesignerStorage from Template to Target Workbook"},{"content":"You can digitally sign your VBA code project using Aspose.Cells with its Workbook.VbaProject.Sign() method. Please follow these steps to check if your excel file is digitally signed with a certificate.\n Click Visual Basic from the Developer tab to open Visual Basic for Applications IDE Click Tools \u0026amp;gt; Digital Signatures\u0026amp;hellip; of Visual Basic for Applications IDE  and it will show the Digital Signature Form showing if the document is digitally signed with a certificate or not.\nThe following sample code illustrates how to make use of Workbook.VbaProject.Sign() method. Here are the input and output files of the sample code. You can use any excel file and any certificate to test this code.\n Source Excel file used in the sample code. Sample pfx file to create Digital Signature. Please install it on your computer to run this code. Its password is 1234. Output Excel file generated by the sample code.  \\\nAttachments: Book1.xlsm (application/vnd.ms-excel.sheet.macroenabled.12) Book1.xlsm.out.xlsm (application/vnd.ms-excel.sheet.macroenabled.12) SampleCert.pfx (application/octet-stream) output-signed-certificate.png (image/png)\n","date":-62135596800,"description":"","objectID":"d9c84cfaf18dbe8a46912b84cdead919","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/digitally+sign+a+vba+code+project+with+certificate/","title":"Digitally Sign a VBA Code Project with Certificate"},{"content":"Aspose.Cells allows you to export VBA Digital Certificate to stream such as file or memory stream. You can access the raw data of the VBA digital certificate using the Workbook.VbaProject.CertRawData property.\nPlease see the following sample code that saves the raw data of the VBA Certificate into a file. You can download the sample excel file used in this code from the provided link.\n\\\nAttachments: sampleVBAProjectSigned.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"087378f51defe3d91a4489d1b06defe7","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/export+vba+certificate+to+file+or+stream/","title":"Export VBA Certificate to File or Stream"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n ||      Possible Usage Scenarios      Some .xlsm/.xslb files have an extremely large amount of macros (or very, very long macros). Aspose.Cells will unconditionally load this (meta) data when opening such workbooks. You may require to control this though LoadDataFilterOptions when you really only need to extract sheet names for a large number of workbooks thus skipping over such unneeded content. This filter is provided by introducing a new option, LoadDataFilterOptions.VBA.\nSample Code\nThe following sample code loads a workbook such that only VBA is filtered. A sample file for testing this feature can be downloaded from the following link:\nsampleMacroEnabledWorkbook.xlsm\nAttachments: sampleMacroEnabledWorkbook.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"593d333498e3ad9f94a42ba143348f81","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/filter+vba+project+while+loading+a+workbook/","title":"Filter VBA Project while loading a workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n3 Console Output\n ||      Possible Usage Scenarios      You can find if the VBA (Visual Basic Applications) Project of your Excel file is protected or not with Aspose.Cells using VbaProject.IsProtected property.\nSample Code\nThe following sample code creates a workbook and then checks if its VBA project is protected or not. Then it protects the VBA project and again checks if its VBA project is protected or not. Please see its console output for a reference. Before protection, VbaProject.IsProtected returns **false **but after protection, it returns true.\nConsole Output\nThis is the console output of the above sample code for a reference.\nIsProtected - Before Protecting VBA Project: False\nIsProtected - After Protecting VBA Project: True\n","date":-62135596800,"description":"","objectID":"cba90715d1df374a77411e8da6ce2e0f","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/find+out+if+vba+project+is+protected/","title":"Find out if VBA Project is Protected"},{"content":"You can modify VBA or Macro Code using Aspose.Cells. Aspose.Cells has added the following namespace and classes to read and modify the VBA project in the Excel file.\n Aspose.Cells.Vba VbaProject VbaModuleCollection VbaModule  This article will show you how to change the VBA or Macro Code inside the source Excel file using Aspose.Cells.\nThe following sample code loads the source Excel file which has a following VBA or Macro code inside it\nSub Button1_Click()\nMsgBox \u0026amp;ldquo;This is test message.\u0026amp;rdquo;\nEnd Sub\nAfter the execution of Aspose.Cells sample code, the VBA or Macro code will be modified like this\nSub Button1_Click()\nMsgBox \u0026amp;ldquo;This is Aspose.Cells message.\u0026amp;rdquo;\nEnd Sub\nYou can download the source Excel file and the output Excel file from the given links.\n\\\nAttachments: sample.xlsm (image/png) output.xlsm (image/png)\n","date":-62135596800,"description":"","objectID":"151f6eb1b0546be722fc5db79bd47d47","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/modifying+vba+or+macro+code+using+aspose.cells/","title":"Modifying VBA or Macro Code using Aspose.Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n ||      Possible Usage Scenarios      You can password protect the VBA (Visual Basic for Applications) Project of workbook with Aspose.Cells using VbaProject.Protect() method.\nSample Code\nThe following sample code loads the sample Excel file, accesses its VBA Project and protects it with a password. Finally it saves it as the output Excel file.\nAttachments: samplePasswordProtectVBAProject.xlsm (application/vnd.ms-excel.sheet.macroenabled.12) outputPasswordProtectVBAProject.xlsm (application/vnd.ms-excel.sheet.macroenabled.12)\n","date":-62135596800,"description":"","objectID":"175d1e2d1e1f6f9b1d0adfed0e0a817c","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/password+protect+the+vba+project+of+excel+workbook/","title":"Password Protect the VBA Project of Excel Workbook"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"2ff1400c35d91d24217abdd514c2fe91","permalink":"https://roywangt.github.io/cellsnet/developerguide/workbookvbaproject/","title":"Workbook VBA Project"},{"content":"Sometimes, you do need a number of worksheets with common formatting and data. For example, if you work with quarterly budgets, you might want to create a workbook with sheets that contain the same column headings, row headings, and formulas. There is a way to do this: by creating one sheet and then copying it.\nAspose.Cells supports copying and moving worksheets within or between workbooks. Worksheet, complete with data, formatting, tables, matrices, charts, images and other objects, are copied with the highest degree of precision.\n   Contents Summary\n1 Moving or Copying Sheets using Microsoft Excel 1.1 Copy Worksheets within a Workbook with Aspose.Cells\n1.2 Copy Worksheets between Workbooks\n1.3 Move Worksheets within Workbook\n ||      Moving or Copying Sheets using Microsoft Excel      Following are the steps involved for copying and moving worksheets within or between workbooks in Microsoft Excel.\n To move or copy sheets to another workbook, open the workbook that will receive the sheets. Switch to the workbook that contains the sheets you want to move or copy, and then select the sheets. On the Edit menu, click Move or Copy Sheet. In the To book dialog, click the workbook to receive the sheets. To move or copy the selected sheets to a new workbook, click New Book. In the Before sheet box, click the sheet before which you want to insert the moved or copied sheets. To copy the sheets instead of moving them, select the Create a copy checkbox.  Copy Worksheets within a Workbook with Aspose.Cells\nAspose.Cells provides an overloaded method, Aspose.Cells.WorksheetCollection.AddCopy(), that is used to add a worksheet to the collection and copy data from an existing worksheet. One version of the method takes the index of the source worksheet as a parameter. The other version takes the name of the source worksheet.\nThe following example shows how to copy an existing worksheet within a workbook.\n\\\nCopy Worksheets between Workbooks\nAspose.Cells provides a method, …","date":-62135596800,"description":"","objectID":"1d39a44cf6d47ed1ed6c98d351d1590e","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/copying+and+moving+worksheets/","title":"Copying and Moving Worksheets"},{"content":"   Contents Summary\n1 Count number of cells in the Worksheet\n |     Count number of cells in the Worksheet     You may count the number of cells in the worksheet by using the Cells.Count or Cells.CountLarge properties as shown in the code example given below.\nAttachments: Get-SheetId-field-of-Excel-worksheet.png (image/png) outputSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"c23f965e7a3a174cbd9dc38dc48af262","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/count+number+of+cells+in+the+worksheet/","title":"Count number of cells in the Worksheet"},{"content":"   Contents Summary\n1 Cut and Paste Cells\n |     Cut and Paste Cells     Aspose.Cells provides you with the ability to cut and paste cells within a worksheet by using the InsertCutCells method of the Cells collection. The InsertCutCells accepts the following parameters.\n Range: The range of cells to be cut. Row Index: The index of the row to insert cells. Column Index: The index of the column to insert cells. ShiftType: The shift direction of the columns.  The following example shows how to cut and paste cells within a worksheet. \\\n","date":-62135596800,"description":"","objectID":"05c1eb4386a177250300af883d55d331","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/cut+and+paste+cells/","title":"Cut and Paste Cells"},{"content":"   Contents Summary\n1 Detect Hyperlink Type\n |     Detect Hyperlink Type     An Excel file can have different types of hyperlinks like external, cell reference, file path, etc. Aspose.Cells supports the feature to detect the type of hyperlink. The types of hyperlinks are represented by the TargetModeType Enumeration. The TargetModeType Enumeration has the following members.\n External: External link FilePath: Local and full path to files\\folders. Email: Email CellReference: Link to cell or named range.  To check the type of hyperlink, the Hyperlink class provides a LinkType property with a return type of TargetModeType. The following code snippet demonstrates the use of the LinkType property by using this source excel file.\nThe following is the output generated by the code snippet given above.\nLinkTypes.xlsx: FilePath C:\\Windows\\System32\\cmd.exe: FilePath C:\\Program Files\\Common Files: FilePath \u0026amp;lsquo;Test Sheet\u0026amp;rsquo;!B2: CellReference FullPathExample: CellReference https://products.aspose.com/cells: External mailto:test@test.com?subject=TestLink: Email\nAttachments: LinkTypes.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"4967e92486ae74d06c49cb4696826a3f","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/detect+hyperlink+type/","title":"Detect Hyperlink Type"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find if the Worksheet is Dialog Sheet\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Dialog Sheet is an old format of sheet that contains a dialog box. Such sheet could be inserted by an older version of Microsoft Excel e.g. 2003 as shown in this screenshot. It can also be inserted with VBA in newer versions e.g. Microsoft Excel 2016.\nYou can find if the sheet is a dialog sheet or some other type of sheet with Worksheet.Type property provided by Aspose.Cells. If it returns enumeration value SheetType.Dialog, then it means, you are dealing with dialog sheet.\nFind if the Worksheet is Dialog Sheet\nThe following sample code loads the sample Excel file that contains a dialog sheet. It checks the Worksheet.Type property compares it with SheetType.Dialog and then prints the message. Please see the console output of the sample code given below for more help.\nSample Code\nConsole Output\nWorksheet is a Dialog Sheet.\nAttachments: sampleFindIfWorksheetIsDialogSheet.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Dialog Sheet.png (image/png)\n","date":-62135596800,"description":"","objectID":"e151d9e31e1c7946347987ec23302bc3","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/find+if+the+worksheet+is+dialog+sheet/","title":"Find if the Worksheet is Dialog Sheet"},{"content":"   Contents Summary\n1 Get Cell Validation in ODS Files 1.1 Sample Code\n |     Get Cell Validation in ODS Files     With Aspose.Cells, you can get the validation applied to a cell in ODS files. For this, the API provides the GetValidation method of the Cell class.\nThe following code sample demonstrates the use of the GetValidation method by loading the source ODS file and reading the validation of the cell A9.\nSample Code\nAttachments: GraphicBackground.ods (application/vnd.oasis.opendocument.spreadsheet) ColoredBackground.ods (application/vnd.oasis.opendocument.spreadsheet) ThreadedCommentsView.jpg (image/jpeg) AddWebExtension_Out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) AddThreadedComments_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) EditThreadedComment.jpg (image/jpeg) ThreadedCommentsSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) EditThreadedComments.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) DeleteThreadedComment.jpg (image/jpeg) ThreadedCommentsInExcel2016.jpg (image/jpeg) ThreadedCommentsSample_Out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) ThreadedCommentsInExcel20162.jpg (image/jpeg) AddThreadedComment1.jpg (image/jpeg) AddThreadedComment2.jpg (image/jpeg) SampleBook1.ods (application/vnd.oasis.opendocument.spreadsheet)\n","date":-62135596800,"description":"","objectID":"26db2b104357ec3c30913866d6d70846","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/get+cell+validation+in+ods+files/","title":"Get Cell Validation in ODS Files"},{"content":"   Contents Summary\n1 Get Hyperlinks in Range\n |     Get Hyperlinks in Range     The Range class provides a Hyperlinks property which returns all the hyperlinks in the selected range. You may also delete the Hyperlink by calling the Hyperlink.Delete method.\nAttachments: outputSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Get-SheetId-field-of-Excel-worksheet.png (image/png)\n","date":-62135596800,"description":"","objectID":"6b0919c4e0847d800b9bbedbdf5e1f62","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/get+hyperlinks+in+range/","title":"Get Hyperlinks in Range"},{"content":"   Contents Summary\n1 Get Range with External Links\n2 Sample Code\n |     Get Range with External Links     A lot of times Excel files access data from other Excel files using external links. Aspose.Cells provides the option to retrieve these external links by using the Name.GetReferredAreas method. The Name.GetReferredAreas method returns an array of type ReferredArea. The ReferredArea class provides an ExternalFileName property which returns the name of the external file. The ReferredArea class exposes the following members.\n EndColumn: The end column of the area EndRow: The end row of the area ExternalFileName: Get the external file name if this is an external reference IsArea: Indicates whether this is an area IsExternalLink: Indicates whether this is an external link SheetName: Indicates which sheet this reference is in StartColumn: The start column of the area StartRow: The start row of the area  The sample code given below demonstrates the use of Name.GetReferredAreas method to get Ranges with external links.\nSample Code\n","date":-62135596800,"description":"","objectID":"9dd7dd3613a8a8ecaf7eca4d2b7776d0","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/get+range+with+external+links/","title":"Get Range with External Links"},{"content":"   Contents Summary\n1 Get worksheet unique id\n ||      Get worksheet unique id      Aspose.Cells provides the ability to get the unique id of a worksheet by using the Worksheet.UniqueId property. The following code snippet demonstrates the use of the Worksheet.UniqueId property to print the unique id of a worksheet. The following code snippet uses this sample excel file.\n\\\nAttachments: SheetRenderSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Book1.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"9abf93aa4f6b8fe25f709926733fa5fe","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/get+worksheet+unique+id/","title":"Get worksheet unique id"},{"content":"Developers can easily create and manage worksheets in Microsoft Excel files programmatically using Aspose.Cells\u0026amp;rsquo; flexible API. This topic describes approaches for adding and removing worksheets in Microsoft Excel files.\n   Contents Summary\n1 Adding Worksheets to a New Excel File\n2 Adding Worksheets to a Designer Spreadsheet\n3 Accessing Worksheets using Sheet Name\n4 Removing Worksheets using Sheet Name\n5 Removing Worksheets using Sheet Index\n |     Aspose.Cells provides a class, Workbook that represents an Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.     A worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing worksheets.\nAdding Worksheets to a New Excel File\nTo create a new Excel file programmatically:\n Create an object of the Workbook class. Call the Add method of the WorksheetCollection class. An empty worksheet is added to the Excel file automatically. It can be referenced by passing the sheet index of the new worksheet to the Worksheets collection. Obtain a worksheet reference. Perform work on the worksheets. Save the new Excel file with new worksheets by calling the Workbook class\u0026amp;rsquo; Save method.  \\\nAdding Worksheets to a Designer Spreadsheet\nThe process of adding worksheets to a designer spreadsheet is the same as that of adding a new worksheet, except that the Excel file already exists so should be opened before worksheets are added. A designer spreadsheet can be opened by the Workbook class.\n\\\nAccessing Worksheets using Sheet Name\nAccess any worksheet by specifying its name or index.\n\\\nRemoving Worksheets using Sheet Name\nTo remove worksheets from a file, call the RemoveAt method of WorksheetCollection class. Pass the sheet name to the RemoveAt method to remove a specific worksheet.\n\\\nRemoving Worksheets using Sheet Index\nRemoving worksheets by name works well when the name of the worksheet is known. …","date":-62135596800,"description":"","objectID":"8d2f0366fa0232caeed74a571908fde3","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/manage+worksheets/","title":"Manage Worksheets"},{"content":"According to the definition, a page break is a place in a flow of text where one page ends and the next begins. Microsoft Excel lets users add page breaks into any selected cell of a worksheet.\nThe location of the cell where the page break is added, the page is ended and the rest of the data after the page break is printed on the next page while printing. In simple words, page breaks divide your worksheet into multiple pages according to your specifications. You can also add page breaks to your worksheets at runtime using Aspose.Cells. Aspose.Cells allows developers to add two kinds of page breaks:\n Horizontal page break Vertical page break  In the rest of the discussion, we will describe how can you add horizontal or vertical page breaks into your worksheets using Aspose.Cells.\n   Contents Summary\n1 Page Breaks 1.1 Adding Page Breaks\n1.2 Clearing All Page Breaks\n1.3 Removing Specific Page Break\n2 Important to know\n ||      Page Breaks      Aspose.Cells provides a Workbook class that represents an Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods used to manage a worksheet.\nTo add the page breaks, use the Worksheet class\u0026amp;rsquo; HorizontalPageBreaks and VerticalPageBreaks properties.\nThe HorizontalPageBreaks and VerticalPageBreaks properties are collections that may contain several page breaks. Each collection contains several methods for managing horizontal and vertical page breaks.\nAdding Page Breaks\nTo add a page break in a worksheet, insert vertical and horizontal page breaks at the specified cell by calling the HorizontalPageBreakCollection.Add() and VerticalPageBreakCollection.Add() methods. Each Add method takes the name of the cell where the break should be added.\n\\\nIn page break preview or print preview modes, you can see how these page breaks work.\nClearing All Page …","date":-62135596800,"description":"","objectID":"b1b1ba346d794527d4df5423c198bd87","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/managing+page+breaks/","title":"Managing Page Breaks"},{"content":"   Contents Summary\n1 Print multiple copies of a worksheet\n ||      Print multiple copies of a worksheet      Aspose.Cells provides the ability to print multiple copies of a worksheet by using the SheetRender.ToPrinter(PrintSettings PrinterSettings) method. The following code snippet demonstrates the use of SheetRender.ToPrinter(PrintSettings PrinterSettings) method to print multiple copies of a worksheet. The following code snippet uses this sample excel file.\n\\\nAttachments: SheetRenderSample.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"2277038568a109ca459982c86832acd5","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/print+multiple+copies+of+a+worksheet/","title":"Print multiple copies of a worksheet"},{"content":"   Contents Summary\n1 Threaded Comments 1.1 Add Threaded Comments 1.1.1 Add Threaded comment with Excel\n1.1.2 Add Threaded Comment using Aspose.Cells 1.1.2.1 Sample Code\n1.2 Read Threaded Comments 1.2.1 Read Threaded comments with Excel\n1.2.2 Read Threaded comments using Aspose.Cells 1.2.2.1 Sample Code\n1.2.2.2 Console Output\n1.2.3 Read Created Time of threaded comments 1.2.3.1 Sample Code\n1.2.3.2 Console Output\n1.3 Edit Threaded Comments 1.3.1 Edit Threaded comment with Excel\n1.3.2 Edit Threaded comment using Aspose.Cells 1.3.2.1 Sample Code\n1.4 Remove Threaded Comments 1.4.1 Remove Threaded comments with Excel\n1.4.2 Remove Threaded comments using Aspose.Cells 1.4.2.1 Sample Code\n |     Threaded Comments     MS Excel 365 provides a feature to add threaded comments. These comments work as conversations and can be used for discussions. The comments now come with a Reply box that allows for threaded conversations. The old comments are called Notes in Excel 365. The screenshot below shows how threaded comments are displayed when opened in Excel.\nThreaded comments are shown like this in older versions of Excel. The following images have been taken by opening the sample file in Excel 2016.\n\\\n\\\nAspose.Cells also provides the feature to manage threaded comments. Add Threaded Comments\nAdd Threaded comment with Excel\nTo add threaded comments in Excel 365, follow the following steps.\n  Method 1\n Click the Review Tab Click the **New Comment **button This will open a dialogue to enter comments in the active cell.    Method 2\n Right click on the cell where you want to insert the comment. Click the New Comment option. This will open a dialogue to enter comments in the active cell.    Add Threaded Comment using Aspose.Cells\nAspose.Cells provides Comments.AddThreadedComment method to add threaded comments.The Comments.AddThreadedComment method accepts the following three parameters.\n Cell Name: The name of the cell where the comment will be inserted. Comment Text: The text of the …","date":-62135596800,"description":"","objectID":"7293e4e03f59b357362ba0d08a0802be","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/threaded+comments/","title":"Threaded Comments"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Update Days Preserving History of Revision Logs in Shared Workbook\n3 Sample Code\n |     Possible Usage Scenarios     When you share a workbook, you get an option saying Keep change history for N days as shown in the following screenshot. You can update the number of days for preserving history using Aspose.Cells with WorksheetCollection.RevisionLogs.DaysPreservingHistory property.\nUpdate Days Preserving History of Revision Logs in Shared Workbook\nThe following sample code creates an empty workbook, then shares it and updates the revision logs days preserving history to 7 days which is normally 30 days. Please see the output Excel file generated by the code for a reference.\nSample Code\nAttachments: Output-Shared-DaysPreservingHistory.png (image/png) outputShared_DaysPreservingHistory.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"995ca336a5de160ebce09dcadc1a63a4","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/update+days+preserving+history+of+revision+logs+in+shared+workbook/","title":"Update Days Preserving History of Revision Logs in Shared Workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Utilize Sheet.SheetId property of OpenXml using Aspose.Cells\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Sheet.SheetId property is found inside the DocumentFormat.OpenXml.Spreadsheet namespace and is part of OpenXml. You can see this property and its value inside workbook.xml as shown in the following screenshot. Aspose.Cells provides the equivalent property as Worksheet.TabId.\nUtilize Sheet.SheetId property of OpenXml using Aspose.Cells\nThe following sample code loads the sample Excel file, reads its Sheet or Tab Id, then assigns it new Tab Id and saves it as output Excel file. Please also see the console output of the code given below for a reference.\nSample Code\nConsole Output\nSheet or Tab Id: 1297\nAttachments: Get-SheetId-field-of-Excel-worksheet.png (image/png) sampleSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputSheetId.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"241a52f8f06d0cb36cc7eff1f55db0c1","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/utilize+sheet.sheetid+property+of+openxml+using+aspose.cells/","title":"Utilize Sheet.SheetId property of OpenXml using Aspose.Cells"},{"content":"   Contents Summary\n1 Background in ODS Files 1.1 Read Background Information from OSD file 1.1.1 Sample Code\n1.1.2 Console Output\n1.2 Add Colored Background to ODS file 1.2.1 Sample Code\n1.3 Add Graphic Background to ODS file 1.3.1 Sample Code\n |     Background in ODS Files     Background can be added to sheets in ODS files. The background can either be a colored background or graphic background. The background is not visible when the file is open but if the file is printed as PDF, the background is visible in the generated PDF. The background is also visible in the print preview dialogue.\nAspose.Cells provides the ability to read the background information and add the background in ODS files.\nRead Background Information from OSD file\nAspose.Cells provides the OdsPageBackground class to manage background in ODS Files. The following code sample demonstrates the use of OdsPageBackground class by loading the source ODS file and reading the background information. Please see the Console Output generated by the code for reference.\nSample Code\nConsole Output\nBackground Type: Graphic\nBackgorund Position: CenterCenter\nAdd Colored Background to ODS file\nAspose.Cells provides the OdsPageBackground class to manage background in ODS Files. The following code sample demonstrates the use of OdsPageBackground.Color property to add a color background to the ODS file. Please see the output ODS file generated by the code for reference.\nSample Code\nAdd Graphic Background to ODS file\nAspose.Cells provides the OdsPageBackground class to manage background in ODS Files. The following code sample demonstrates the use of OdsPageBackground.GraphicData property to add graphic background to the ODS file. Please see the output ODS file generated by the code for reference.\nSample Code\nAttachments: AddThreadedComment2.jpg (image/jpeg) AddThreadedComment1.jpg (image/jpeg) ThreadedCommentsInExcel20162.jpg (image/jpeg) ThreadedCommentsSample_Out.xlsx …","date":-62135596800,"description":"","objectID":"325ef28fc63e5f2124689d36c16d3629","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/working+with+background+in+ods+files/","title":"Working with Background in ODS Files"},{"content":"   Contents Summary\n1 Page Break Preview 1.1 Controlling View Modes 1.1.1 Enabling Normal View\n1.1.2 Enabling Page Break Preview\n2 Zoom Factor 2.1 Using Microsoft Excel\n2.2 Aspose.Cells \u0026amp;amp; Zoom Factor\n3 Freeze Panes 3.1 Using Microsoft Excel\n3.2 Aspose.Cells \u0026amp;amp; Freeze Panes\n4 Split Panes 4.1 Applying and Removing Split Panes 4.1.1 Splitting Panes\n4.1.2 Removing Panes\n |     Page Break Preview     All worksheets can be viewed in two modes:\n Normal view. Page break preview.  Normal view is a worksheet\u0026amp;rsquo;s default view. Page break preview is an editing view that displays a worksheet as it will print. Page break preview shows what data will go on each page so you can adjust the print area and page breaks. Using Aspose.Cells developers can enable normal view or page break preview modes.\nControlling View Modes\nAspose.Cells provides a Workbook class that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing worksheets. To enable normal or page break preview modes, use the Worksheet class IsPageBreakPreview property. IsPageBreakPreview is a Boolean property, which means that it can only store a true or a false value.\nEnabling Normal View\nSet a worksheet to normal view by setting the Worksheet class IsPageBreakPreview property to false.\nEnabling Page Break Preview\nSet any worksheet to page break preview by setting the Worksheet class IsPageBreakPreview property to true. Doing so switches the worksheet from normal view to page break preview.\nA complete example is given below that demonstrates how to use the IsPageBreakPreview property to enable page break preview mode for the first worksheet of an Excel file.\nThe book1.xls file is opened by creating an instance of the Workbook class. The view is switched to page break preview for the first worksheet …","date":-62135596800,"description":"","objectID":"c92c36d867b0901e7e1b625529e89850","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/worksheet+views/","title":"Worksheet Views"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"125955119def15d014f16f55fc7a4dc1","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/","title":"Worksheets"},{"content":"Aspose.Cells supports hiding and showing Gridlines of the worksheet which are visible by default. It also provides controlling visibility of Row Column Headers of the worksheet.\n   Contents Summary\n1 Show and Hide Gridlines 1.1 Controlling the Visibility of the Gridlines 1.1.1 Making Gridlines Visible\n1.1.2 Hiding Gridlines\n2 Show and Hide Row Column Headers 2.1 Controlling the Visibility of the Worksheets 2.1.1 Making Row/Column Headers Visible\n2.1.2 Hiding Row/Column Headers\n ||      Show and Hide Gridlines      All Excel worksheets have gridlines by default. They help delineate cells so that it is easy to enter data into particular cells. Gridlines enable us to view a worksheet as a collection of cells, where each cell is easily identifiable.\nControlling the Visibility of the Gridlines\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows developers to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing a worksheet. To control the visibility of gridlines, use the Worksheet class IsGridlinesVisible property. IsGridlinesVisible is a Boolean property, which means that it can only store a true or false value.\nMaking Gridlines Visible\nMake the gridlines visible by setting the Worksheet class IsGridlinesVisible property to true.\nHiding Gridlines\nHide gridlines by setting the Worksheet class IsGridlinesVisible property to false.\nA complete example is given below that demonstrates the use of the IsGridlinesVisible property by opening an excel file(book1.xls), hiding the gridlines on the first worksheet and saving the modified file as output.xls.\n\\\nShow and Hide Row Column Headers\nAll worksheets in an Excel file are composed of cells that are arranged in rows and columns. All rows and columns have unique values that are used to identify them and to identify …","date":-62135596800,"description":"","objectID":"04a6babb8521b91a5c0a82be1425b501","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/displayfeatures/show+and+hide+gridlines+and+row+column+headers/","title":"Show and Hide Gridlines and Row Column Headers"},{"content":"Aspose.Cells provides ways to control the visibility of Rows, Column and Scroll Bars of a worksheet.\n   Contents Summary\n1 Show and Hide Rows and Columns 1.1 Show Rows and Columns\n1.2 Hide Rows and Columns\n1.3 Hide Multiple Rows and Columns\n2 Show and Hide Scroll Bars 2.1 Controlling the Visibility of Scroll Bars 2.1.1 Making Scroll Bars Visible\n2.1.2 Hiding Scroll Bars\n ||      Show and Hide Rows and Columns      Aspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows developers to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cells collection that represents all cells in the worksheet. The Cells collection provides several methods for managing rows or columns in a worksheet. A few of these are discussed below.\nShow Rows and Columns\nDevelopers can show any hidden row or column by calling the UnhideRow and UnhideColumn methods of the Cells collection respectively. Both methods take two parameters:\n Row or column index - the index of a row or column that is used to show the specific row or column. Row height or column width - the row height or column width assigned to the row or column after unhiding.  \\\nWhile making a hidden column visible, if you need to restore it to previously assigned width or to its original width, please unhide the column with a negative width. For example: worksheet.Cells.UnhideColumn(5, -1)\nHide Rows and Columns\nDevelopers can hide a row or column by calling the HideRow and HideColumn methods of the Cells collection respectively. Both methods take the row and column index as a parameter to hide the specific row or column.\n\\\nIt is also possible to hide a row or column by setting the row height or column width to 0 respectively.\nHide Multiple Rows and Columns\nDevelopers can hide multiple rows or columns at once by calling the HideRows and HideColumns methods of the Cells …","date":-62135596800,"description":"","objectID":"b3098f54ea2199b40c8346a33cd0e955","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/displayfeatures/show+and+hide+rows+columns+and+scroll+bars/","title":"Show and Hide Rows Columns and Scroll Bars"},{"content":"Aspose.Cells allows the user to show and hide elements of a workbook including worksheets and tabs.\n   Contents Summary\n1 Show and Hide a Worksheet 1.1 Making a Worksheet Visible\n1.2 Hiding a Worksheet\n2 Show and Hide Tabs 2.1 Making Tabs Visible\n2.2 Hiding Tabs\n2.3 Controlling the Tab Bar Width\n |     Show and Hide a Worksheet     An Excel file can have one or more than one worksheets. Whenever we create an Excel file, we add worksheets to the Excel file in which we work. Each worksheet in an Excel file is independent from the other worksheet by having its own data and formatting settings etc. Sometimes, developers may require to make few worksheets hidden and others visible in the Excel file for their own interest. So, Aspose.Cells allows developers to control the visibility of the worksheets in their Excel files.\nAspose.Cells provides a class, Workbook, that represents an Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods to manage worksheets. To control a worksheet\u0026amp;rsquo;s visibility, use the IsVisible property of the Worksheet class. IsVisible is a Boolean property, which means that it can only store a true or false value.\nMaking a Worksheet Visible\nMake a worksheet visible by setting the Worksheet class\u0026amp;rsquo; IsVisible property to true\nHiding a Worksheet\nHide a worksheet by setting the Worksheet class\u0026amp;rsquo; IsVisible property to false.\n\\\nShow and Hide Tabs\nIf you closely look at the bottom of a Microsoft Excel file, you will see a number of controls. These include:\n Sheet tabs. Tab scrolling buttons.  Sheet tabs represent the worksheets in the Excel file. Click any tab to switch to that worksheet. The more worksheets in the workbook, the more sheet tabs there are. If the Excel file has a good number of worksheets you need buttons to navigate through them. So, Microsoft …","date":-62135596800,"description":"","objectID":"ca0e7a8d9e1abe7e0329b4e7bc0358ed","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/displayfeatures/show+and+hide+worksheets+and+tabs/","title":"Show and Hide Worksheets and Tabs"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"29fc661e825d7cef8a884b2d21354727","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/displayfeatures/","title":"Display Features"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Copy Page Setup Settings from Source Worksheet into Destination Worksheet\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     When you add a new sheet to a workbook, it contains the default Page Setup settings. There may be times when you need to transfer the settings (PageSetup) from one worksheet to another worksheet. This document explains how to copy Page Setup settings from one worksheet to another using Aspose.Cells APIs.\nCopy Page Setup Settings from Source Worksheet into Destination Worksheet\nThe following sample code illustrates how to copy Page Setup settings from one worksheet to another using PageSetup.Copy() method. Please see the following sample code and its console output for a reference.\nSample Code\nConsole Output\nBefore Paper Size: PaperA3ExtraTransverse\nBefore Paper Size: PaperLetter\nAfter Paper Size: PaperA3ExtraTransverse\nAfter Paper Size: PaperA3ExtraTransverse\n","date":-62135596800,"description":"","objectID":"8a3fe28f72793b64fff259131ec2d4b6","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/copy+page+setup+settings+from+source+worksheet+into+destination+worksheet/","title":"Copy Page Setup Settings from Source Worksheet into Destination Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Determine if Paper Size of Worksheet is Automatic\n3 Sample Code\n4 Console Output\n |     Possible Usage Scenarios     Most of the time, the paper size of the worksheet is automatic. When it is automatic, it is often set as Letter. Sometimes the user sets the paper size of the worksheet as per their requirements. In this case, the paper size is not automatic. You can find if the worksheet paper size is automatic or not using the Worksheet.PageSetup.IsAutomaticPaperSize property.\nDetermine if Paper Size of Worksheet is Automatic\nThe sample code given below loads the following two Excel files\n samplePageSetupIsAutomaticPaperSize-False.xlsx samplePageSetupIsAutomaticPaperSize-True.xlsx  and find if the paper size of their first worksheet is automatic or not. In Microsoft Excel, you can check if the paper size is automatic or not via the Page Setup window as shown in this screenshot.\nSample Code\nConsole Output\nHere is the console output of the above sample code when executed with the given sample Excel files.\nFirst Worksheet of First Workbook - IsAutomaticPaperSize: False\nFirst Worksheet of Second Workbook - IsAutomaticPaperSize: True\nAttachments: samplePageSetupIsAutomaticPaperSize-False.xlsx (application/unknown) Determine-if-Paper-Size-of-Worksheet-is-Automatic.png (image/png) samplePageSetupIsAutomaticPaperSize-True.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"212f0da577c0d9b07d66a0f6e1deb136","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/determine+if+paper+size+of+worksheet+is+automatic/","title":"Determine if Paper Size of Worksheet is Automatic"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Get Paper Width and Height of Page Setup of Worksheet\n3 Sample Code\n4 Console Output\n ||      Possible Usage Scenarios      Sometimes, you need to know the width and height of paper size as it has been set in page setup of the worksheet. Please use the PageSetup.PaperWidth and PageSetup.PaperHeight properties for this purpose.\nGet Paper Width and Height of Page Setup of Worksheet\nThe following sample code explains the usage of PageSetup.PaperWidth and PageSetup.PaperHeight properties. It first changes the paper size to *A2 *and then finds the width and height of the paper, then it changes it to A3, A4, *Letter *and finds the width and height of paper respectively.\nSample Code\nConsole Output\nHere is the console output of the above sample code.\nPaperA2: 16.54x23.39\nPaperA3: 11.69x16.54\nPaperA4: 8.27x11.69\nPaperLetter: 8.5x11\n","date":-62135596800,"description":"","objectID":"4da4eec5d2cd7b4abd08b397c457247a","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/get+paper+width+and+height+of+page+setup+of+worksheet/","title":"Get Paper Width and Height of Page Setup of Worksheet"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Implement Custom Paper Size of Worksheet for Rendering\n3 Screenshot\n4 Sample Code\n |     Possible Usage Scenarios     There is no direct option available to create custom paper sizes in MS Excel, however, you can set custom paper size of your desired worksheets when rendering Excel file to PDF file format. This document explains how to set a custom paper size of a worksheet using Aspose.Cells APIs.\nImplement Custom Paper Size of Worksheet for Rendering\nAspose.Cells allows you to implement your desired paper size of the worksheet. You may use the CustomPaperSize method of the PageSetup class to specify a custom page size. The following sample code illustrates how to specify a custom paper size for the first worksheet in the workbook. Please also see the output PDF generated with the following code for a reference.\nScreenshot\nSample Code\nAttachments: Implement-Custom-Paper-Size-of-Worksheet-for-Rendering.png.png (image/png) outputCustomPaperSize.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"43a25eea5dd4c41fae015e215814e63a","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/implement+custom+paper+size+of+worksheet+for+rendering/","title":"Implement Custom Paper Size of Worksheet for Rendering"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Remove Existing PrinterSettings of Worksheets in Excel file\n3 Screenshot\n4 Sample Code\n5 Console Output\n |     Possible Usage Scenarios     Sometimes developers want to prevent Excel from including .bin files of printer settings in the saved XLSX files. Printer settings files are located under “[file \u0026amp;ldquo;root\u0026amp;rdquo;]\\xl\\printerSettings”. This document explains how to remove existing printer settings using Aspose.Cells APIs.\nRemove Existing PrinterSettings of Worksheets in Excel file\nAspose.Cells allows you to remove existing printer settings specified for different sheets in the Excel file. The following sample code illustrates how to remove existing printer settings for all the worksheets in the workbook. Please see its sample Excel file, output Excel file, console output as well as the screenshot for a reference.\nScreenshot\nSample Code\nConsole Output\nPrinterSettings of this worksheet exist.\nSheet Name: Sheet1\nPaper Size: PaperLegal\nPrinter settings of this worksheet are now removed by setting it null.\nPrinterSettings of this worksheet exist.\nSheet Name: Sheet2\nPaper Size: PaperEnvelopeB5\nPrinter settings of this worksheet are now removed by setting it null.\nPrinterSettings of this worksheet exist.\nSheet Name: Sheet3\nPaper Size: PaperA6\nPrinter settings of this worksheet are now removed by setting it null.\nPrinterSettings of this worksheet exist.\nSheet Name: Sheet4\nPaper Size: PaperA3\nPrinter settings of this worksheet are now removed by setting it null.\nAttachments: PrinterSettings-Of-Worksheets.png (image/png) sampleRemoveExistingPrinterSettingsOfWorksheets.xlsx (application/unknown) outputRemoveExistingPrinterSettingsOfWorksheets.xlsx (application/unknown)\n","date":-62135596800,"description":"","objectID":"3c995d1dd74048e1db2a78e4b27df169","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/remove+existing+printersettings+of+worksheets+in+excel+file/","title":"Remove Existing PrinterSettings of Worksheets in Excel file"},{"content":"Headers and footers are the lines of text displayed below the top margin or above the bottom margin respectively. It\u0026amp;rsquo;s possible to add headers and footers to the worksheets also. Headers and footers can be used to display useful information like page number, author name, topic name, or date and time. Headers and footers are managed using the page setup settings.\n   Contents Summary\n1 Setting Headers and Footers 1.1 Script Commands\n1.2 Set Headers and Footers\n1.3 Insert an Image into a Header or Footer\n ||      Setting Headers and Footers      Aspose.Cells allows you to add headers and footers to worksheets at runtime but we recommend setting headers and footers manually in a pre-designed file for printing. You can use Microsoft Excel as a GUI tool to set headers and footers to save effort and development time. Aspose.Cells can import the file and save the settings.\nTo add headers and footers at runtime, Aspose.Cells provides special API calls and script commands to format headers and footers.\nScript Commands\nScript commands are special commands that allow you to set header and footer formatting.\n   Script Commands Description     \u0026amp;amp;P The current page number   \u0026amp;amp;G A picture   \u0026amp;amp;N The total number of pages   \u0026amp;amp;D The current date   \u0026amp;amp;T The current time   \u0026amp;amp;A The worksheet name   \u0026amp;amp;F The file name without its path   \u0026amp;amp;\u0026amp;ldquo;\u0026amp;rdquo; Represents a font name. For example: \u0026amp;amp;\u0026amp;ldquo;Arial\u0026amp;rdquo;   \u0026amp;amp;\u0026amp;ldquo;, \u0026amp;rdquo; Represents font name with style. For example: \u0026amp;amp;\u0026amp;ldquo;Arial,Bold\u0026amp;rdquo;   \u0026amp;amp; Represents font size. For example: “\u0026amp;amp;14abc”. But, if this command is followed by a plain number to be printed in the header, this should be separated with a space character from the font size. For example: “\u0026amp;amp;14 123”.   Set Headers and Footers     The PageSetup class provides two methods, SetHeader and SetFooter, used to add a header and footer to a worksheet. These methods take only two parameters:\n Section – the section where the header …","date":-62135596800,"description":"","objectID":"e57b45e2c50a4f96eb1f1da0aa77cbf3","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/setting+headers+and+footers/","title":"Setting Headers and Footers"},{"content":"Aspose.Cells fully supports Microsoft Excel\u0026amp;rsquo;s page setup options. Developers may need to configure page setup settings for worksheets to control the printing process. This topic discusses how to use Aspose.Cells to configure page margins.\n   Contents Summary\n1 Setting Margins 1.1 Page Margins\n1.2 Center on Page\n1.3 Header and Footer Margins\n ||      Setting Margins      Aspose.Cells provides a class, Workbook, that represents an Excel file. The Workbook class contains the Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class.\nThe Worksheet class provides the PageSetup property used to set the page setup options for a worksheet. The PageSetup attribute is an object of the PageSetup class that enables developers to set different page layout options for a printed worksheet. The PageSetup class provides various properties and methods used to set page setup options.\nPage Margins\nSet page margins (left, right, top, bottom) using PageSetup class members. A few of the methods are listed below which are used to specify page margins:\n LeftMargin RightMargin TopMargin BottomMargin  \\\nCenter on Page\nIt is possible to center something on a page horizontally and vertically. For this, there are some useful members of the PageSetup class, CenterHorizontally and CenterVertically.\n\\\nHeader and Footer Margins\nSet header and footer margins with the PageSetup class members such as HeaderMargin and FooterMargin.\n\\\n","date":-62135596800,"description":"","objectID":"71cd46a15fe19395473f2e9883882f94","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/setting+margins/","title":"Setting Margins"},{"content":"Sometimes, it is necessary to configure page setup settings for worksheets to control printing. These page setup settings offer various options.\n   Contents Summary\n1 Setting Page Options 1.1 Page Orientation\n1.2 Scaling Factor\n1.3 FitToPages Options\n1.4 Paper Size\n1.5 Print Quality\n1.6 First Page Number\n ||      Setting Page Options      Page setup options are fully supported in Aspose.Cells. This article explains how to set page options with Aspose.Cells and shows code samples for setting:\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class.\nThe Worksheet class provides the PageSetup property that is used to set the page setup options of the worksheet. In fact, this PageSetup property is an object of the PageSetup class used to set different page layout options for a printed worksheet. The PageSetup class provides various properties used to set page setup options. Some of these properties are discussed below.\nPage Orientation\nPage orientation can be set to portrait or landscape using the PageSetup class\u0026amp;rsquo; Orientation property. The Orientation property accepts one of the pre-defined values in the PageOrientationType enumeration, listed below.\n   Page Orientation Types Description     Landscape Landscape orientation   Portrait Portrait orientation   Scaling Factor     It is possible to reduce or enlarge a worksheet\u0026amp;rsquo;s size by adjusting the scaling factor with the PageSetup.Zoom property.\n\\\nFitToPages Options\nTo fit the contents of the worksheet to a specific number of pages, use the PageSetup class\u0026amp;rsquo; FitToPagesTall and FitToPagesWide properties. These properties are also used to scale worksheets.\nYou can either choose the FitToPagesTall/FitToPagesWide or the Zoom property but not both at the same time.\nPaper Size\nSet the paper size that the worksheets will be printed …","date":-62135596800,"description":"","objectID":"1dbae572b8b513c5c7f6114ad84f6317","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/setting+page+options/","title":"Setting Page Options"},{"content":"Microsoft Excel\u0026amp;rsquo;s page setup settings provide several print options (also referred to as sheet options) that allow users to control how worksheet pages are printed.\n   Contents Summary\n1 Setting Print Options 1.1 Set Print Area\n1.2 Set Print Titles\n1.3 Set Other Print Options\n1.4 Set Page Order\n ||      Setting Print Options      These print options allow users to:\n Select a specific print area on a worksheet. Print titles. Print gridlines. Print row/column headings. Achieve draft quality. Print comments. Print cell errors. Define page ordering.  Aspose.Cells supports all the print options offered by Microsoft Excel and developers can easily configure these options for worksheets using the properties offered by the PageSetup class. How these properties are used is discussed below in more detail.\nSet Print Area\nBy default, the print area incorporates all areas of the worksheet that contain data. Developers can establish a specific print area of the worksheet.\nTo select a specific print area, use the PageSetup class\u0026amp;rsquo; PrintArea property. Assign a cell range that defines the print area to this property.\n\\\nSet Print Titles\nAspose.Cells allows you to designate row and column headers to repeat on all pages of a printed worksheet. To do so, use the PageSetup class\u0026amp;rsquo; PrintTitleColumns and PrintTitleRows properties.\nThe rows or columns that will be repeated are defined by passing their row or column numbers. For example, rows are defined as $1:$2 and columns are defined as $A:$B.\n\\\nSet Other Print Options\nThe PageSetup class also provides several other properties to set general print options as follows:\n PrintGridlines: a Boolean property that defines whether to print gridlines or not print. PrintHeadings: a Boolean property that defines whether to print row and column headings or not. BlackAndWhite: a Boolean property that defines whether to print the worksheet in black and white mode or not. PrintComments: defines whether to display the print comments on …","date":-62135596800,"description":"","objectID":"7f6b9baacccc4c2fc6b41569fb3e7a6a","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/setting+print+options/","title":"Setting Print Options"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"3d1a1a411995470e9ba639a832ca937c","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/pagesetupfeatures/","title":"Page Setup Features"},{"content":"Since the release of Excel 2002 or XP, Microsoft has added many advanced protection settings.\n   Contents Summary\n1 Introduction 1.1 Advanced Protection Settings Using Excel XP and Later Versions\n1.2 Advanced Protection Settings Using Aspose.Cells\n1.3 Cell Locking Issue\n ||      Introduction      These protection settings restrict or allow users to:\n Delete rows or columns. Edit contents, objects or scenarios. Format cells, rows or columns. Insert rows, columns or hyperlinks. Select locked or unlocked cells. Use pivot tables and much more.  Aspose.Cells supports all the advanced protection settings offered by Excel XP or later versions.\nAdvanced Protection Settings Using Excel XP and Later Versions\nTo view the protection settings available in Excel XP:\n From the Tools menu, select Protection followed by Protect Sheet. A dialog will be displayed.  To view the protection settings available in Excel 2016\n From the File menu, select Protect Workbook followed by Protect Current Sheet. Select the Protect Sheet in the Review menu.  Following the steps mention above will show a dialog where you can allow or restrict worksheets features or apply a password to the worksheet.\nAdvanced Protection Settings Using Aspose.Cells\nAspose.Cells supports all of the advanced protection settings.\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class.\nThe Worksheet class provides the Protection property that is used to apply these advanced protection settings. The Protection property is in fact an object of the Protection class that encapsulates several Boolean properties for disabling or enabling restrictions.\nBelow is a small example application. It opens an Excel file and uses most of the advanced protection settings supported by Excel XP and later versions.\n\\\nPlease don\u0026amp;rsquo;t call the Worksheet …","date":-62135596800,"description":"","objectID":"c64e5b638b08b7ec51e3dbcff14b24d4","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/securityfeatures/advanced+protection+settings+since+excel+xp/","title":"Advanced Protection Settings since Excel XP"},{"content":"When a worksheet is protected, the actions a user can take are restricted. For example, they cannot input data, insert or delete rows or columns etc.\n   Contents Summary\n1 Protect Worksheets 1.1 Introduction\n1.2 Protect a Worksheet\n1.3 Protect a few Cells in the Worksheet Using Microsoft Excel\n1.4 Protect a few Cells in the Worksheet Using Aspose Cells\n1.5 Protect a Row in the Worksheet\n1.6 Protect a Column in the Worksheet\n1.7 Allow Users to Edit Ranges\n |     Protect Worksheets     Introduction\nThe general protection options in Microsoft Excel are:\n Contents Objects Scenarios  Protected worksheets don\u0026amp;rsquo;t hide or protect sensitive data, so it\u0026amp;rsquo;s different from file encryption. Generally, worksheet protection is suitable for presentation purposes. It prevents the end user from modifying data, content, and formatting in the worksheet.\nProtect a Worksheet\nAspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file. A worksheet is represented by the Worksheet class.\nThe Worksheet class provides the Protect method that is used to apply protection on the worksheet. Protect method accepts the following parameters:\n Protection Type, the type of protection to apply on the worksheet. Protection type is applied with the help of the ProtectionType enumeration. New Password, the new password used to protect the worksheet. Old Password, the old password, if the worksheet is already password protected. If the worksheet is not already protected then just pass null.  The ProtectionType enumeration contains the following pre-defined protections types:\n   Protection Types Description     All The user cannot modify anything on this worksheet   Contents The user cannot enter data in this worksheet   Objects The user cannot modify drawing objects   Scenarios The user cannot modify saved scenarios   Structure The user cannot modify the structure …","date":-62135596800,"description":"","objectID":"5b8cbd044e9bec99a83982830367d979","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/securityfeatures/protecting+worksheets/","title":"Protecting Worksheets"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Specify Author while Write Protecting Workbook\n3 Sample Code\n |     Possible Usage Scenarios     You can specify author name while write protecting your workbook using Aspose.Cells API. Please use Workbook.Settings.WriteProtection.Author property for this purpose.\nSpecify Author while Write Protecting Workbook\nThe following sample code explains the usage of Workbook.Settings.WriteProtection.Author property. The code creates an empty workbook, write protects it with a password, specifies the author name and saves it as output Excel file. The following screenshot illustrates the effect of the sample code on the output Excel file for your reference.\nSample Code\nAttachments: outputSpecifyAuthorWhileWriteProtectingWorkbook.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Specify-Author-while-Write-Protecting-Workbook.png (image/png)\n","date":-62135596800,"description":"","objectID":"1dabf3995009c5b6114e39c3b6b06150","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/securityfeatures/specify+author+while+write+protecting+workbook/","title":"Specify Author while Write Protecting Workbook"},{"content":"If a developer needs to remove protection from a protected worksheet at runtime so that some changes can be made to the file? This can easily be done with Aspose.Cells.\n   Contents Summary\n1 Unprotect a Worksheet 1.1 Using Microsoft Excel\n1.2 Unprotecting a Simply Protected Worksheet Using Aspose.Cells\n1.3 Unprotecting a Password Protected Worksheet Using Aspose.Cells\n |     Unprotect a Worksheet     Using Microsoft Excel\nTo remove protection from a worksheet:\nFrom the Tools menu, select Protection followed by Unprotect Sheet. Protection will be removed unless the worksheet is password protected. In this case, a dialog prompts for the password. Enter the password and worksheet will be unprotected then.\nUnprotecting a Simply Protected Worksheet Using Aspose.Cells\nA worksheet can be unprotected by calling the Worksheet class\u0026amp;rsquo; Unprotect method. A simply protected worksheet is one which is not protected with a password. Such worksheets can be unprotected by calling the Unprotect method without passing a parameter.\n\\\nUnprotecting a Password Protected Worksheet Using Aspose.Cells\nA password protected worksheet is one that is protected with a password. Such worksheets can be unprotected by calling an overloaded version of the Unprotect method that takes the password as a parameter.\n\\\n","date":-62135596800,"description":"","objectID":"a6870aa8c1f75a2ee2334e8258ff4312","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/securityfeatures/unprotect+a+worksheet/","title":"Unprotect a Worksheet"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"a59b71f7e1711e8bb638fa2436b2c2f3","permalink":"https://roywangt.github.io/cellsnet/developerguide/worksheets/securityfeatures/","title":"Security Features"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Add XML Map inside the Workbook using XmlMapCollection.Add method\n ||      Possible Usage Scenarios      Aspose.Cells provides XmlMapCollection.Add() method which you can use to import your XML Map inside the workbook.\nAdd XML Map inside the Workbook using XmlMapCollection.Add method\nThe following sample code adds XML Map inside the workbook using the XmlMapCollection.Add() method and saves it as output excel file. The screenshot shows the XML Map that has been imported from the sample.xml inside the output excel file.\n\\\nAttachments: sample.xml (text/xml) output.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) add-xml-map-inside-the-workbook.png (image/png)\n","date":-62135596800,"description":"","objectID":"801255a0f4cf6ee455d720ead72235c0","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/add+xml+map+inside+the+workbook+using+xmlmapcollection.add+method/","title":"Add XML Map inside the Workbook using XmlMapCollection.Add method"},{"content":"Export XML Data linked to XML Map inside the Workbook\nPlease use the Workbook.ExportXml() method to export XML data linked to your XML Maps inside your workbook. The following sample code exports XML data of all XML Maps from the workbook one by one. Please check the sample excel file used in this code and the exported XML data of the first XML Map.\n\\\nAttachments: sample.xlsx (application/unknown) root_Map.xml (text/xml)\n","date":-62135596800,"description":"","objectID":"c6bbccd6b24200271552101ec43ec957","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/export+xml+data+linked+to+xml+map+inside+the+workbook/","title":"Export XML Data linked to XML Map inside the Workbook"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Sample Code\n3 Console Output\n |     Possible Usage Scenarios     You can find the Root Element Name of Xml Map using Aspose.Cells with XmlMap.RootElementName property. The following screenshot shows the root element name of the XML Map in Microsoft Excel.\nSample Code\nThe following sample code loads the sample Excel file and accesses the first XML Map and prints its XmlMap.RootElementName property. Please see the console output of the sample code given below.\nConsole Output\nRoot Element Name Of Xml Map: MiscData\nAttachments: Root-Element-Name-Of-Xml-Map.png (image/png) sampleRootElementNameOfXmlMap.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"a27ac62c2d73ba49bfd125aedb08fe23","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/find+the+root+element+name+of+xml+map/","title":"Find the Root Element Name of XML Map"},{"content":"Aspose.Cells allows you to import the XML map inside the workbook using the Workbook.ImportXml() method. You can import XML Map using the Microsoft Excel with the following steps\n Select Developer tab Click Import in the XML section and follow the required steps.  You will need to provide your XML data to complete the import. Here is a sample XML data that you can use for testing.\n   Contents Summary\n1 Import XML Map using Microsoft Excel\n2 Import XML Map using Aspose.Cells\n ||      Import XML Map using Microsoft Excel      The following screenshot shows how to import XML Map using Microsoft Excel.\n        Import XML Map using Aspose.Cells    The following sample code shows how to make use of the Workbook.ImportXml(). It generates the output excel file as shown in this screenshot.\n       Attachments: sampleXML.txt (text/plain) import-xml-using-excel.png (image/png) output-excel-file-xml-map.png (image/png) output.xlsx (application/unknown) sampleXML.xml (application/x-upload-data)\n","date":-62135596800,"description":"","objectID":"f9f82cf221f05b797a59016647555cbb","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/import+xml+map+inside+a+workbook+using+aspose.cells/","title":"Import XML Map inside a Workbook using Aspose.Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Link Cells to Xml Map Elements\n ||      Possible Usage Scenarios      You can link your cells to XML Map elements using Aspose.Cells. Please use the Cells.LinkToXmlMap() method for this purpose.\nLink Cells to Xml Map Elements\nThe following sample code loads the source excel file which contains XML Map and then links cells A1, B2, C3, D4, E5, and F6 to XML Map elements FIELD1, FIELD2, FIELD4, FIELD5, FIELD7, and FIELD8 respectively and then saves the workbook in output excel file.\nIf you open the output excel file and click the Developer \u0026amp;gt; Source button, you will see the cells are linked with XML Map elements and they will also be highlighted by Microsoft Excel as shown in this image.\n\\\nAttachments: link-cells-to-xml-map-elements.png (image/png) output.xlsx (application/xlsx) sample.xlsx (application/xlsx) output.xlsx (application/xlsx)\n","date":-62135596800,"description":"","objectID":"d4efb75d3367e8537966da94f2ab622c","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/link+cells+to+xml+map+elements/","title":"Link Cells to XML Map Elements"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Query Cell Areas Mapped to XML Map Path using Worksheet.XmlMapQuery method 2.1 Sample Code\n2.2 Console Output\n3 Get XML path from List Object/Table\n |     Possible Usage Scenarios     You can query cell areas mapped to the XML map path with Aspose.Cells using the Worksheet.XmlMapQuery() method. If the path exists, it will return the list of cell areas related to that path inside XML map. The first parameter of the Worksheet.XmlMapQuery() method specifies the XML element path and the second parameter specifies an XML map you want to query.\nQuery Cell Areas Mapped to XML Map Path using Worksheet.XmlMapQuery method\nThe following screenshot shows the Microsoft Excel displaying XML Map inside the sample Excel file used in the code. The code queries the XML map two times and prints the list of cell areas returned by the Worksheet.XmlMapQuery() method on the console as shown below.\nSample Code\nConsole Output\nQuery Xml Map from Path - /MiscData\nAspose.Cells.CellArea(A1:A8)[0,0,7,0]\nAspose.Cells.CellArea(B1:B8)[0,1,7,1]\nAspose.Cells.CellArea(C1:C8)[0,2,7,2]\nAspose.Cells.CellArea(D1:D8)[0,3,7,3]\nAspose.Cells.CellArea(E1:E8)[0,4,7,4]\nQuery Xml Map from Path - /MiscData/row/Color\nAspose.Cells.CellArea(D1:D8)[0,3,7,3]\nGet XML path from List Object/Table\nXML data can be imported to worksheets. Sometimes XML path is required from the ListObjects of the worksheet. This feature is available in Excel by using an expression like Sheet1.ListObjects(1).XmlMap.DataBinding. The same feature is available in Aspose.Cells by calling ListObject.XmlMap.DataBinding.Url. The following example demonstrates this feature. Template file and other source files can be downloaded from the following links:\n XML Data.xlsx Country List.xml Food List.xml  \\\nAttachments: sampleXmlMapQuery.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) Sample-Excel-File-For-Xml-Map-Query.png (image/png) XML Data.xlsx …","date":-62135596800,"description":"","objectID":"e9d112401208d1a03fba9b4a0d523425","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/query+cell+areas+mapped+to+xml+map+path+using+worksheet.xmlmapquery+method/","title":"Query Cell Areas Mapped to XML Map Path using Worksheet.XmlMapQuery method"},{"content":"Articles in this section\n\\\n","date":-62135596800,"description":"","objectID":"5f6cfd5556e75c54ecfa658e442bd710","permalink":"https://roywangt.github.io/cellsnet/developerguide/xmlmaps/","title":"Xml Maps"},{"content":"This comparison table attempts to provide an overview of How Aspose.Cells component is compared to other solutions available . It does not attempt to cover all features or all available products.\n   Feature Essential ExcelRW ComponentOne XLS for .NET SoftArtisans ExcelWriter Aspose.Cells     File Formats ||||      Native Excel File Format Yes Yes Yes Yes   CSV Format |||Yes      Tab Delimted Text Format |||Yes      SpreadsheetML Format |||Yes      Convert Workbook to Pdf format |||Yes      Convert Workbook to HTML file |||Yes      Open File and Save to a Stream Yes Yes Yes Yes   Send Output to the Client Browser Yes |Yes Yes    Encrypt Excel Files Yes ||Yes     Manipulate Spreadsheet Content ||||      Import Data from a DataTable Yes |Yes Yes    Export Data to a DataTable Yes ||Yes     Import Data from a DataView |||Yes      Import Data from an Array ||Yes Yes     Import Data from DataGrid |||Yes      Add a Copy of Existing Worksheet (all contents including Images, Charts etc.) Yes ||Yes     Move Worksheets |||Yes      Import Images \u0026amp;amp; Charts ||Yes Yes     Create Images \u0026amp;amp; Charts using API Yes |Yes Yes    Set Gradient Background for Charts using API |||Yes      Create Comments using API Yes |Yes Yes    Create Auto-Filters using API Yes ||Yes     Data Validation Yes |Yes Yes    Data Sorting |||Yes      Merge / Unmerge Cells Yes ||Yes     Group / UnGroup Rows and Columns Yes ||Yes     Create Page Breaks using API Yes Yes |Yes    Number Formats Yes Yes Yes Yes   Format Cells ( set background and foreground colors, apply borders around cells, adjust data alignment and set fonts with attributes ) Yes Yes Yes Yes   Import Formulae from Designer Spreadsheet Yes |Yes Yes    Set Complex Formulae through API Yes |Yes Yes    Support Advanced Conditional Formatting Yes |Yes Yes    Freeze / Unfreeze Panes Yes |Yes Yes    Create Hyperlinks Yes Yes Yes Yes   Advanced Features ||||      Smart Markers / Data Markers ||Yes Yes     Document Properties Settings Yes |Yes Yes …","date":-62135596800,"description":"","objectID":"eb570c742fefda84439ac0c0d9228993","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/comparison+with+other+solutions/","title":"Comparison with Other Solutions"},{"content":"Generally, all Aspose .NET components require Full Trust permissions set. The reason is that Aspose for .NET components need to access registry settings, system files other than virtual directory for certain operations like parsing fonts etc. Moreover, Aspose for .NET components (including Aspose.Cells for .NET) are based on core .NET system classes that also require Full Trust permissions set in many cases.\n   Contents Summary\n1 Partial Trust / Medium Trust Challenge\n2 Use Aspose.Cells for .NET on Medium Trust Permissions Set\n ||      Partial Trust / Medium Trust Challenge      Internet Service Providers hosting multiple applications from different companies mostly enforce a Medium Trust security level. Moreover, sometimes you need to host multiple applications on a shared server, such as in an ISP or other scenarios, you have to use the Medium trust level to constrain the applications. The ASP.NET Medium trust level provides a constrained execution environment that is suitable for isolating multiple applications hosted on ISP servers. In case of .NET 2.0, such a security level may set the following constraints which could affect the ability of Aspose.Cells for .NET to perform properly, for example:\n RegistryPermission is not available. This means you cannot access the registry, which is required to enumerate installed fonts when rendering spreadsheets or other documents. FileIOPermission is restricted. This means you can only access files in your application\u0026amp;rsquo;s virtual directory hierarchy. This potentially means fonts cannot be read during export.  Use Aspose.Cells for .NET on Medium Trust Permissions Set\nYou may follow some recommendations to run Aspose.Cells for .NET on Medium Trust level or shared server environment:\n To set license file in your code, it\u0026amp;rsquo;s better you should call the License.SetLicense(Stream) method instead after obtaining the license file into streams. The fonts\u0026amp;rsquo; directory (which could be accessed with permission) must be set. …","date":-62135596800,"description":"","objectID":"1708cf958e75530d995707cc795178f5","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/declaration/","title":"Declaration"},{"content":"Aspose.Cells component offers only one edition type for both .NET and Java versions, some features are summarized in the following table.\n   Contents Summary\n1 Edition Types 1.1 Aspose.Cells.GridDesktop and Aspose.Cells.GridWeb Features Availability\n       Edition Types         **Features ** **Aspose.Cells **     General |   Written Completely in C# Yes   .NET Environment required Yes   Platforms Supported |   Desktop applications Yes   Web applications Yes   Documentation |   Microsoft Help 2 Yes   Html Help Yes   Fully Featured Demos |   Visual Basic.NET Yes   C# Yes   Working Examples |   Visual Basic.NET Yes   C# Yes   Excel Creation |   Using Designer Spreadsheet Yes   Using API Yes   Smart Marker Yes   File Formats Supported |   Excel 97 Yes   Excel 2000 Yes   Excel XP Yes   Excel 2003 Yes   Excel 2007, 2010, 2013 XLSX Yes   Excel 2007, 2010, 2013 XLSM Yes   Excel 2007, 2010, 2013 XLTM Yes   Excel 2007, 2010, 2013 XLTX Yes   Pdf Yes   CSV Yes   Tab Delimited Text Yes   SpreadsheetML Yes   HTML Yes   ODS Yes   XPS Yes   Aspose.Pdf.xml format (that can be used by Aspose.Pdf to create PDF files) Yes   Spreadsheet Content |   Cell Data Yes   Formula Yes   Hyperlinks Yes   Data Validations Yes   Apply Formatting |   Cell Formatting Yes   Conditional Formatting Yes   Apply Formulae \u0026amp;amp; Functions |   Using Designer Spreadsheet Yes   Using API Yes   Create \u0026amp;amp; Access Named Ranges |   Using Designer Spreadsheet Yes   Using API Yes   Configure Page Setup Options |   Using Designer Spreadsheet Yes   Using API Yes   Document Properties |   Using Designer Spreadsheet Yes   Using API Yes   Managing Rows \u0026amp;amp; Columns |   Insertion \u0026amp;amp; Deletion Yes   Hiding \u0026amp;amp; Unhiding Yes   Grouping \u0026amp;amp; Ungrouping Yes   Worksheet Protection |   Using Designer Spreadsheet Yes   Using API Yes   Workbook Encryption |   Open Encrypted File Yes   Auto-Filtering of Data |   Using Designer Spreadsheet Yes   Using API Yes   Drawing Objects |   Pictures Yes   Standard Charts Yes   Custom …","date":-62135596800,"description":"","objectID":"152f5df730336a55bbdd3916847cda39","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/edition+types/","title":"Edition Types"},{"content":"   Contents Summary\n1 Software Requirements\n2 Download from GitHub\n3 Aspose.Cells Examples\n4 Aspose.Cells.GridDesktop Examples\n5 Aspose.Cells.GridWeb Examples\n ||      Software Requirements      Please make sure you meet the following requirements before downloading and running the examples.\n Visual Studio 2015 or higher NuGet Package Manager installed in Visual Studio. It is mostly already installed in Visual Studio 2015. For details on how to install NuGet package manager please check: Installing NuGet client tools Go to Tools-\u0026amp;gt;Options-\u0026amp;gt;NuGet Package Manager-\u0026amp;gt;Package Sources and make sure that the option nuget.org is checked Example project uses NuGet Automatic Package Restore feature therefore you should have an active internet connection. If you do not have an active internet connection on the machine where examples are to be executed please check Installation and manually add reference to Aspose.Cells.dll in the example project.  Download from GitHub\nAll examples of Aspose.Cells for .NET are hosted on GitHub.\nAspose.Cells Examples\n You can either clone the repository using your favorite GitHub client or download the ZIP file from here. Extract the contents of ZIP file to any folder on your computer. All the examples are located in the Examples folder. There is a Visual Studio solution file for C# Examples i.e. Aspose.Cells.Examples.CSharp.sln. The project is created and maintained in Visual Studio 2015. Open the solution file in Visual Studio and build the project. On first run, the dependencies will automatically be downloaded via NuGet. You may also download the DLLs separately from here. Data folder at the root folder of Examples contains input files which CSharp examples used. It is mandatory that you download the Data folder along with the examples project. Open RunExamples.cs, all the examples are called from here. Uncomment the examples you want to run from within the project.  Aspose.Cells.GridDesktop Examples\n Aspose.Cells.GridDesktop examples …","date":-62135596800,"description":"","objectID":"0b69cd9c523bb12d936874034a24ff5b","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/how+to+run+the+examples/","title":"How to Run the Examples"},{"content":"You can easily download an evaluation version of Aspose.Cells from its download page @ NuGet repos. The evaluation version provides absolutely the same capabilities as the licensed version of the component. Furthermore, evaluation version simply becomes licensed when you purchase a license and add a couple of lines of code to apply the license.\n   Contents Summary\n1 Evaluation Version Limitations\n2 Applying a License in Aspose.Cells Component 2.1 Applying a License from Disk or Stream\n2.2 Applying Metered License\n2.3 Using an Embedded Resource\n3 Setting License in Aspose.Cells Grid Controls 3.1 Applying a License from Disk or Stream\n3.2 Applying a License as an Embedded Resource\n4 Applying a License in Aspose.Cells.GridDesktop for a WinForm Application\n5 Notes on Applying a License in Aspose.Cells.GridWeb\n ||      Evaluation Version Limitations      Evaluation version of Aspose.Cells product (without a license specified) provides full product functionality, but it is limited to open 100 files in one program and an extra worksheet with evaluation watermark.\nThe limitations are shown below:\n Number of Opened Files (Aspose.Cells) When running your program, you can only open 100 Excel files using Aspose.Cells library. If your application exceeds this number, an exception will be thrown. Config file settings (Aspose.Cells.GridWeb) You can\u0026amp;rsquo;t re-specify the script path by adding the following lines of code into the configuration section (e.g in the web.config file). The acw_client is a folder that contains files and Aspose.Cells.GridWeb uses this folder to manage its internal configuration, it has scripts files, image files and other files to specify GridWeb\u0026amp;rsquo;s behavior and set other operations. The config file is used to prevent the control from using the embedded client resources (images, scripts, etc.) which is useful in some cases / scenarios. Moreover, this configuration settings in the web.config file will only take effect with the LICENSED version of the …","date":-62135596800,"description":"","objectID":"2cc758c566904d4710700b9a1e214b9d","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/licensing/","title":"Licensing"},{"content":"Welcome to the Aspose.Cells for .NET documentation\nAspose.Cells for .NET provides the most flexible group of components that enable .NET applications to create and manage Excel spreadsheets without requiring Microsoft Excel to be installed on the server. Aspose.Cells for .NET also does not rely on the Office Interop libraries for any of its features so it is completely independent and robust set of APIs.\nAspose.Cells is one of the leading component that deals with all Excel spreadsheet formats. Unlike similar products from other vendors, Aspose.Cells not only supports spreadsheet generation and other basic file formatting features but it also supports a number of advanced features. These advanced features make it much more convenient for the developers to manipulate spreadsheet contents, cells formatting, files protection and so on. Aspose.Cells also allows importing data onto the worksheets from different data sources, adding common and complex Mathematical, DateTime, Financial, Text formulas, supports manipulation of charts, pictures, comments, drawing objects and controls.\nAspose.Cells for .NET provides a complete Grid solution for the customers; it has two GUI based .NET controls as follows:\n Aspose.Cells.GridDesktop which supports desktop applications Aspose.Cells.GridWeb which supports web applications  Both of these controls provide almost similar set of features but yet on different platforms (Desktop vs Web). Using Aspose.Cells Grid controls, developers can import from and export to Excel spreadsheet formats. Any kind of user who is familiar with Microsoft Excel, can control the look and feel of the grid. Aspose.Cells offers rich set of features such as controlling the design and layout of the grid, managing multiple worksheets, managing cells, rows and columns of a worksheet, creating and calculating formulas and so on.\n   Contents Summary\n1 Product Description\n2 Technical Support\n ||      Product Description      Aspose.Cells for .NET (written in managed …","date":-62135596800,"description":"","objectID":"9386d534914e0d499542831b2ed2fc18","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/product+overview/","title":"Product Overview"},{"content":"   Contents Summary\n1 Supported File Formats\n ||      Supported File Formats         Format Description Load Save     XLS Excel 95/5.0 - 2003 Workbook.     XLSX Office Open XML SpreadsheetML Workbook or template file, with or without macros.     XLSB Excel Binary Workbook.     XLSM Excel Macro-Enabled Workbook.     XLT Excel 97 - Excel 2003 Template.     XLTX Excel Template.     XLTM Excel Macro-Enabled Template.     XLAM An Excel Macro-Enabled Add-In file that\u0026amp;rsquo;s used to add new functions to Excel. |    CSV CSV (Comma Separated Value) file.     TSV TSV (Tab-separated values) file.     TabDelimited Tab-delimited text file, same with TSV file.     TXT Delimited plain text file.     HTML HTML format.     MHTML MHTML file.     ODS ODS (OpenDocument Spreadsheet).     SpreadsheetML Excel 2003 XML file.     Numbers The document is created by Apple\u0026amp;rsquo;s \u0026amp;ldquo;Numbers\u0026amp;rdquo; application which forms part of Apple\u0026amp;rsquo;s iWork office suite, a set of applications which run on the Mac OS X and iOS operating systems.     DIF Data Interchange Format. |    PDF Adobe Portable Document Format. |    XPS XML Paper Specification Format. |    SVG Scalable Vector Graphics Format. |    TIFF Tagged Image File Format |    PNG Portable Network Graphics Format |    BMP Bitmap Image Format |    EMF Enhanced metafile Format |    JPEG JPEG is a type of image format that is saved using the method of lossy compression. |    GIF Graphical Interchange Format |    MARKDOWN Represents a markdown document. |    SXC An XML based format used by OpenOffice and StarOffice     FODS This is an Open Document format stored as flat XML.      ","date":-62135596800,"description":"","objectID":"8ce96adcaccc3935c0bdd61a7c075407","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/supported+file+formats/","title":"Supported File Formats"},{"content":"Why are Aspose components a much better option than Microsoft Office Automation?*\n   Contents Summary\n1 Introduction 1.1 Security\n1.2 Stability\n1.3 Scalability/Speed\n1.4 Price\n1.5 Features\n2 Conclusion\n       Introduction      There are two questions that we hear most often here at Aspose:\n **Do your products require Microsoft Office to be installed in order for them to run? **The simple answer is no. Aspose components are totally independent and are not affiliated with, nor authorized, sponsored, or otherwise approved by Microsoft Corporation. **Why should we use Aspose products rather than utilizing Microsoft Office automation? **The shortest answer we could give is that there are many reasons, with the main one being that Microsoft themselves strongly recommends against Office automation from software solutions: Considerations for server-side Automation of Office.  There are several reasons why Aspose components are a better alternative to automation. Some of the key reasons are:\n Security Stability Scalability/Speed Price Features  The key points are described below. Also, be sure to visit the links at the end of this section.\nSecurity\nThe following is a direct quote from the above-referenced Microsoft article:\n\u0026amp;ldquo;Office Applications were never intended for use server-side, and therefore do not take into consideration the security problems that are faced by distributed components. Office does not authenticate incoming requests, and does not protect you from unintentionally running macros, or starting another server that might run macros, from your server-side code. Do not open files that are uploaded to the server from an anonymous Web! Based on the security settings that were last set, the server can run macros under an Administrator or System context with full privileges and compromise your network! In addition, Office uses many client-side components (such as Simple MAPI, WinInet, and MSDAIPP) that can cache client authentication information in order to …","date":-62135596800,"description":"","objectID":"dcc1f6a3180c35c982fa91d94ea16363","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/why+not+automation/","title":"Why Not Automation"},{"content":"We sometimes hear this question:\n. Why should we use Aspose products rather than the free Open XML SDK?\nThis question is easy to answer: features and functionality.\nWhat is Open XML SDK?\nAccording to the MSDN Library, the Open XML SDK is defined as:\n\u0026amp;ldquo;The Open XML SDK 2.0 simplifies the task of manipulating Open XML packages and the underlying Open XML schema elements within a package. The Open XML SDK 2.0 encapsulates many common tasks that developers perform on Open XML packages, so that you can perform complex operations with just a few lines of code.\u0026amp;rdquo;\nOOXML documents are essentially zipped XML files and Open XML SDK is a collection of classes that allows you to work with the content of OOXML documents in a strongly-typed way. That is instead of unzipping a file to extract XML, loading that XML into a DOM tree and working with XML elements and attributes directly, Open XML SDK provides classes to do that.\nWhat is Aspose.Cells?\nAspose.Cells is a class library that allows applications to perform the following spreadsheet processing tasks:\n High-quality conversions between all popular Microsoft Excel formats, including conversion to PDF, HTML, TIFF, and printing. Programming with a workbook object model. Ability to build documents from fragments, from one or multiple documents, while automatically merging data by stylistic formatting, charts, and graphics. High-level functions, such as import data from different data sources including Array, ArrayList, DataTable / ResultSet. Robust Formula Calculation Engine that supports almost all of the standard and advanced Microsoft Excel Functions.  Compare Open XML SDK and Aspose.Cells\nThe following table compares the Open XML SDK and Aspose.Cells features.\n   Feature or Feature Category Open XML SDK Aspose.Cells     Supported Excel or other formats XLSX XLS, CSV, SpreadsheetML 2003, XLSX, HTML, Tab Delimited, ODS, Plain Text (TXT), PDF, XPS   Convert between Excel formats No Yes   High-level programming with a …","date":-62135596800,"description":"","objectID":"25a319a78ae9df6cbae36edb5d35aa51","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/why+not+open+xml+sdk/","title":"Why Not Open XML SDK"},{"content":"Getting Started\nCollapse all\nExpand all Collapse all\nAttachments: Product Overview-001.png (image/png) aspose.Cells-Java_logo.png (image/png) aspose.cells-for-.net.jpg (image/png) aspose.cells-for-NET.png (image/png) aspose-Cells-for-net.png (image/png) Licensing-001.png (image/png) Licensing-002.png (image/png) Licensing-003.png (image/png) Licensing-004.png (image/png) Licensing-005.png (image/png) Licensing-006.png (image/png) SpreadsheetML (XLSX, XML)-001.png (image/png) SpreadsheetML (XLSX, XML)-002.png (image/png) OpenDocument (ODS)-001.png (image/png) XML Paper Specification (XPS)-001.png (image/png) XML Paper Specification (XPS)-002.png (image/png) XML Paper Specification (XPS)-003.png (image/png) Adobe Portable Document Format (PDF)-001.png (image/png) Adobe Portable Document Format (PDF)-002.PNG (image/png) Adobe Portable Document Format (PDF)-003.PNG (image/png) HyperText Markup Language Format (HTML)-001.PNG (image/png) HyperText Markup Language Format (HTML)-002.PNG (image/png) Right90 Sales Forecasting-001.png (image/png) Blue Inkt Business Solutions Providers-001.png (image/png) Ohal Report Canvas Component-001.png (image/png) Referencing Aspose.Cells component from a .NET project-001.png (image/png) Extension Manager Dialog.jpg (image/png) Extension Manager.jpg (image/png) Package Installed.jpg (image/png) Package Manager Menu.jpg (image/png) Update Aspose.Cells.jpg (image/png) Solution Manage Packages.jpg (image/png) Solution Manage Packages (1).jpg (image/png) Solution Explorer.jpg (image/png) Package Manager1.jpg (image/png) License Agreement.jpg (image/png) Install Aspose.Words GUI.jpg (image/png) Downloading Dialog.jpg (image/png) Package Manager Console.jpg (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-001.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-002.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-003.png (image/png) Integrate Aspose.Cells Grid Controls …","date":-62135596800,"description":"","objectID":"91696a69a1848c06f0f78c16f2e2a841","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/","title":"Getting Started"},{"content":"   Contents Summary\n1 Aspose.Cells.GridDesktop – Desktop Grid Control 1.1 Import/Export Features\n1.2 Worksheet Features\n1.3 Row \u0026amp;amp; Column Features\n1.4 Cell Features\n1.5 Formatting Features\n1.6 Utility Features\n1.7 Security Features\n1.8 Advance Features\n1.9 Supported Microsoft Excel Versions\n1.10 Platforms Supported\n       Aspose.Cells.GridDesktop – Desktop Grid Control      Import/Export Features\n Import content from Excel spreadsheets. Import data directly from a DataTable object. Export content to Excel spreadsheets.  Worksheet Features\n Add, insert or remove worksheets. Rename worksheets. Sort worksheet data.  Row \u0026amp;amp; Column Features\n Add, insert or remove rows and columns. Hide or show rows and columns. Freeze or unfreeze rows and columns.  Cell Features\n Supports number format settings. Control the text alignment. Manage the border settings. Control the font settings. Merge or split cells.  Formatting Features\n Control the behavior, look and feel of the grid. Apply a focused cell\u0026amp;rsquo;s style and font to other cells using the Format Painter. Manipulate data and cell styles easily.  Utility Features\n Add or remove cell comments. Insert or remove pictures. Add or remove hyperlinks. Add or remove validation rules. Add or remove controls (like CheckBox, ComboBox etc.) in cells. Keyboard navigation of cells.  Security Features\n Protect your cells by locking or hiding them.  Advance Features\n Supports creating and calculating formulas. Perform your desired actions under different grid events.  Supported Microsoft Excel Versions\n Microsoft Excel 97 Microsoft Excel 2000 Microsoft Excel XP Microsoft Excel 2003 Microsoft Excel 2007 Microsoft Excel 2010 Microsoft Excel 2013  Platforms Supported\n Windows Forms  ","date":-62135596800,"description":"","objectID":"b7d75791621412a3a2ceeb8c4cd066fd","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/aspose.cells.griddesktop+-+desktop+grid+control/","title":"Aspose.Cells.GridDesktop - Desktop Grid Control"},{"content":"   Contents Summary\n1 Aspose.Cells.GridWeb – Web Grid Control 1.1 Import/Export Features\n1.2 Worksheet Features\n1.3 Row \u0026amp;amp; Column Features\n1.4 Cell Features\n1.5 Formatting Features\n1.6 Utility Features\n1.7 Advance Features\n1.8 Browsers Supported\n1.9 Microsoft Excel Supported\n1.10 Platforms Supported\n ||      Aspose.Cells.GridWeb – Web Grid Control      Import/Export Features\n Import from and export to Excel spreadsheets. Import and export data directly from and to DataView or DataTable objects.  Worksheet Features\n Add/remove worksheets. Supports both horizontal \u0026amp;amp; vertical sorting of worksheet data. Supports worksheet pagination. Create spreadsheets from scratch.  Row \u0026amp;amp; Column Features\n Add, insert and remove rows and columns in a worksheet. Hide and show rows and columns. Freeze and unfreeze rows \u0026amp;amp; columns. Customize the headers of rows \u0026amp;amp; columns.  Cell Features\n Edit multiple cells on the client side with a single post back to the server side. Supports number, date, and time format settings. Supports custom format settings Control text alignment. Manage borders. Control the font settings. Merge or split cells  Formatting Features\n Create web-based interactive grid applications that look and feel like desktop spreadsheet applications. Supports client-side cell formatting. Provides both built-in and customizable visual styles.  Utility Features\n Supports drop-down list and regular expressions validations. Add and remove comments. Insert and remove pictures. Add and remove hyperlinks. Keyboard navigation.  Advance Features\n Supports creating and calculating formulas on web pages. Provides 80+ pre-defined functions related to math, text and data, date and time, and logic. Supports creating dynamic pivot tables. Perform actions under different grid events. Use Aspose.Cells.GridWeb control in session-less mode. Submit grid data with a single click.  Browsers Supported\n Microsoft Internet Explorer Mozilla FireFox Opera Google Chrome Microsoft Edge …","date":-62135596800,"description":"","objectID":"7569527f8f2ccdc8c1be089579d93580","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/aspose.cells.gridweb+-+web+grid+control/","title":"Aspose.Cells.GridWeb - Web Grid Control"},{"content":"The tables below summarize Aspose.Cells for .NET features and provide links to detailed feature descriptions.\n   Contents Summary\n1 Supported Platforms\n2 File Formats and Conversions\n3 Rendering and Printing\n4 Spreadsheet Content Features\n5 Spreadsheet Formatting Features\n6 PageSetup Features\n ||      Supported Platforms      Aspose.Cells for .NET product covers most of the popular development environments and deployment platforms.    Feature Description     .NET Framework Use Aspose.Cells for .NET to build ASP.NET, Web Services, WinForms or any other type of application for any .NET Framework versions 2.0 or later including Client Profile versions. Full support for 32-bit and 64-bit.   .NET Standard 2.0 The \u0026amp;lsquo;netStandard\u0026amp;rsquo; folder contains assembly to use with framework that implement .NET Standard 2.0 such as .NET Core 2.0.   Xamarin.Android Use Aspose.Cells for .NET in your native Android applications.   Xamarin.iOS Use Aspose.Cells for .NET in your native iOS applications.   COM Can be a lifesaver if you have to develop using pre- .NET technologies.   Mono You can use Aspose.Cells for .NET to build applications with Mono.   Windows Azure Aspose.Cells for .NET also runs on Windows Azure.   File Formats and Conversions     Many customers worldwide rely on the thorough document import and export features provided by Aspose.Cells for .NET.\n   Feature Description .NET **.NET Standard 2.0 **     High-quality conversions Quickly and reliably convert between several popular document formats.     Microsoft Excel workbook (XLS) The fastest and most complete XLS format implementation you can find.     SpreadsheetML (XLSX, XML) Aspose.Cells supports OOXML, Flat OPC and also Excel 2003 XML. Moreover, the component supports all the major Excel 2007, 2010 and 2013 file formats for example XLSX, XLTX, XLSM, XLTM etc.     Comma Separated Value (CSV) Comprehensive support of the CSV format to interact with a variety of applications.     TSV Load and save documents in the …","date":-62135596800,"description":"","objectID":"6ed7b79eef588e9425d9f3f474dd82bc","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/feature+overview/","title":"Feature Overview"},{"content":"   Contents Summary\n1 Aspose.Cells – Microsoft Excel Spreadsheet Management Library 1.1 Document Features\n1.2 Worksheet Features 1.2.1 Display Options\n1.2.2 Worksheet Protection\n1.2.3 Page Setup Options\n1.2.4 Page Breaks\n1.3 Rows \u0026amp;amp; Columns Features\n1.4 Data Management Features\n1.5 Formatting Features\n1.6 Charting \u0026amp;amp; Graphics Features\n1.7 Advanced Features\n1.8 Supported Platforms\n ||      Aspose.Cells – Microsoft Excel Spreadsheet Management Library      Document Features\n Open plain or encrypted Microsft Excel files (Excel97 - Excel2007/2010/2013) from different sources. Save Excel files (Excel 97 - Excel2007/2010/2013) in different formats (XLS, XLSX/XLSM, XLTX, XLTM, XLSB, CSV, SpreadsheetML, Tab Delimited, TSV, HTML etc.) Convert Excel file to PDF document. Convert Excel spreadsheet to XPS document. Convert to Tagged Image File Format (TIFF). Read and Write OpenDocument Spreadsheet (ODS) format. Modify the document properties of Excel files.  Worksheet Features\nDisplay Options\n Hide or show a worksheet. Display or hide tabs, scroll bars, gridlines \u0026amp;amp; row and column headers. Preview page breaks. Set zoom level for the worksheet. Make selected data remain visible while scrolling using freeze panes.  Worksheet Protection\n Protect contents, objects and scenarios of a worksheet.  Page Setup Options\n Set page orientation, scaling, paper size, print quality etc. Set page margins like top, left, right, bottom etc. Set headers and footers. Set print area, print title etc.  Page Breaks\n Insert horizontal and vertical page breaks at a specified cell.  Rows \u0026amp;amp; Columns Features\n Adjust row height. Adjust column Width as required. Auto size the width and height of cells according to their contents. Insert or delete rows and columns. Hide or show rows and columns. Group or ungroup rows and columns.  Data Management Features\n Access any cell in the worksheet. Add data to desired cells at runtime. Import data into worksheets from different data sources. Retrieve data …","date":-62135596800,"description":"","objectID":"1d525a2a5f524fc6be3ae67e1b7bab8a","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/microsoft+excel+spreadsheet+management+library/","title":"Microsoft Excel Spreadsheet Management Library"},{"content":"Articles in this section\nAttachments: SpreadsheetML (XLSX, XML)-001.png (image/png) SpreadsheetML (XLSX, XML)-002.png (image/png) OpenDocument (ODS)-001.png (image/png) XML Paper Specification (XPS)-001.png (image/png) XML Paper Specification (XPS)-002.png (image/png) XML Paper Specification (XPS)-003.png (image/png) Adobe Portable Document Format (PDF)-001.png (image/png) Adobe Portable Document Format (PDF)-002.PNG (image/png) Adobe Portable Document Format (PDF)-003.PNG (image/png) HyperText Markup Language Format (HTML)-001.PNG (image/png) HyperText Markup Language Format (HTML)-002.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"e51de0861a31c622c8421bf133b15da2","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/","title":"Aspose.Cells Features"},{"content":"   Contents Summary\n1 Latest Version of Aspose.Cells for iOS via Xamarin may not Work with Old Xamarin.iOS Version\n2 Aspose.Cells for iOS via Xamarin Limitations\n3 Public API (namespace) differences\n |     Latest Version of Aspose.Cells for iOS via Xamarin may not Work with Old Xamarin.iOS Version     Please note that Aspose.Cells for iOS via Xamarin is always built by using the latest stable versions of Xamarin and Xamarin.iOS platforms. If you face any problems when using Aspose.Cells for iOS via Xamarin in your Xamarin.Android application, please make sure you have the latest Xamarin and Xamarin.iOS versions installed. Sometimes Aspose.Cells for iOS via Xamarin is built by using the latest Xamarin (Xamarin.iOS) version which does not work with older versions of Xamarin.\nAspose.Cells for iOS via Xamarin Limitations\n Inserting images - Not Supported. Creating charts - Not Supported. Setting gradient background - Not Supported. Adding comments to cells - Not Supported. Implementing data validations - Not Supported. Creating custom page breaks - Not Supported. Implementing Smart Markers - Not Supported. Protecting/unprotecting Worksheets - Not Supported. Specifying advanced protection options introduced in Excel XP and later versions - Not Supported. Inserting form controls and other drawing shapes/objects - Not Supported. Creating pivot tables and pivot charts - Not Supported. Preserving or removing an Add-in, VBA, macros - Not Supported. Implementing transpose options - Not Supported. Creating custom charts - Not Supported. Adding, preserving or extracting OLE objects from the spreadsheets - Not Supported. Implementing Microsoft Excel 2010 spark lines - Not Supported. Encrypting files - Not Supported.  Public API (namespace) differences\nIn Aspose.Cells for iOS via Xamarin, Aspose.Cells.Drawing namespace is used instead of System.Drawing in .NET API. The list of affected objects are as follows:\n Aspose.Cells.Drawing.Color Aspose.Cells.Drawing.ColorConverter …","date":-62135596800,"description":"","objectID":"e9a6eea1ece4e24eaeebd4ec7b472b91","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/asposecellsforiosviaxamarinfeatures/aspose.cells+for+ios+via+xamarin+limitations+and+api+differences/","title":"Aspose.Cells for iOS via Xamarin Limitations and API Differences"},{"content":"   Contents Summary\n1 Aspose.Cells for iOS via Xamarin Features Overview 1.1 File Formats and Conversions\n1.2 Spreadsheet Content Features\n1.3 Spreadsheet Formatting Features\n1.4 PageSetup Features\n |     Aspose.Cells for iOS via Xamarin Features Overview     This section provides a comparison of availability of features between Aspose.Cells for .NET and Aspose.Cells for iOS via Xamarin.\nFile Formats and Conversions\nMany customers worldwide rely on the thorough document import and export features provided by Aspose.Cells.\n   Feature Description .NET Xamarin.iOS     High-Quality Conversions Quickly and reliably, convert between several popular document formats.     Microsoft Excel Workbook (XLS) The fastest and most complete XLS format implementation you can find.     SpreadsheetML (XLSX, XML) Aspose.Cells supports OOXML, Flat OPC and also Excel 2003 XML. Moreover, the component supports all major Excel 2007, 2010 and 2013 file formats e.g XLSX, XLTX, XLSM, XLTM etc.     Comma Separated Value (CSV) Comprehensive support of the CSV format to interact with a variety of applications.     HTML Save as HTML is available.     OpenDocument (ODS) Aspose.Cells can load and save documents in the OpenDocument Spreadsheet (.ods) format.     Adobe Portable Document Format (PDF) Convert any Spreadsheet to PDF with high fidelity.     Tab Delimited Load and save documents in the tab delimited file format.     Plain Text (TXT) Easily extract text by saving in plain text format.     Spreadsheet Content Features       Aspose.Cells provides a rich object model that consists of over 100 public classes/interfaces, which allow you to programmatically generate, combine, modify, parse or otherwise examine loaded spreadsheets. Some key features are given in the below table.\n   Feature .NET Xamarin.iOS     Import/export data from an Array, ArrayList, ResultSet etc.     Add a copy of existing worksheet (all contents including images, charts, other objects etc.)  (Images and charts are not …","date":-62135596800,"description":"","objectID":"c506af8667d1712f5d9d27e244d768e9","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/asposecellsforiosviaxamarinfeatures/","title":"Aspose.Cells for iOS via Xamarin Features"},{"content":"Any document loaded into Aspose.Cells can be converted to PDF that conforms to the PDF 1.5 or PDF/A-1b specification. Aspose.Cells goes to great lengths to faithfully convert Microsoft Excel documents to PDF. Most of the time the look of the final PDF document will be indistinguishable from the original Microsoft Excel document.\nPDF in Aspose.Cells\nThe Aspose solution thoroughly supports the following document features when converting to PDF:\n Cell Data and Text Formatting Charts and Pivot Tables Headers/Footers Conditional Formatting Borders, Border Colors Images, Textboxes and Drawing Shapes Bookmarks Hyperlinks Merged Cells, Page Breaks, Print Titles  You can also see the detailed specification about how Aspose.Cells converts a document to PDF.\nAttachments: Adobe Portable Document Format (PDF)-001.png (image/png) Adobe Portable Document Format (PDF)-002.PNG (image/png) Adobe Portable Document Format (PDF)-003.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"34c9e51e4cc531da49e21ebc764f7bfa","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/fileformatsandconversions/adobe+portable+document+format+-+pdf/","title":"Adobe Portable Document Format - PDF"},{"content":"Aspose.Cells can be used to save your Excel workbooks into HTML format. The exported HTML workbooks are Microsoft Excel oriented i.e they are similar as exported by Microsoft Excel. You can also create workbooks from HTML but this HTML should be Excel oriented.\n   Contents Summary\n1 HTML in Aspose.Cells 1.1 Loading HTML inside the Workbook object\n1.2 Saving Excel file into HTML\n ||      HTML in Aspose.Cells      The Aspose solution thoroughly supports the following document features when converting to HTML:\n Cell Data and Text Formatting Charts and Pivot Tables Headers/Footers Borders, Border Colors Images, Textboxes and Drawing Shapes Hyperlinks  Loading HTML inside the Workbook object\nPlease see the subsection Opening HTML Files in this article that explains how to load HTML inside the Workbook object.\n Opening Files  Saving Excel file into HTML\nPlease see the following documentation article that explains how to convert/save your workbooks/spreadsheets into HTML format.\n Converting Excel Files to HTML  Attachments: HyperText Markup Language Format (HTML)-001.PNG (image/png) HyperText Markup Language Format (HTML)-002.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"e365636ffec96406e302e88dda78338f","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/fileformatsandconversions/hypertext+markup+language+format+-+html/","title":"HyperText Markup Language Format - HTML"},{"content":"   Contents Summary\n1 About OpenDocument\n2 ODS in Aspose.Cells\n ||      About OpenDocument      The OpenDocument format (ODF) is a free and open file format for electronic office documents originally developed by Sun for the Open Office suite. OpenDocument Spreadsheet (ODS) is the file format for Excel documents. OpenDocument is currently an OASIS and ISO standard.\nODS in Aspose.Cells\nAspose.Cells supports loading OpenDocument 1.1 and 1.2 documents. Aspose.Cells saves documents in the OpenDocument 1.1 format. You can also see the detailed specification about what OpenDocument features are supported.\n**A sample ODS document generated by Aspose.Cells and opened in OpenOffice Calc **\nAttachments: OpenDocument (ODS)-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"ecfa8c067efa3403c09bc5f312f6ee2a","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/fileformatsandconversions/opendocument+-+ods/","title":"OpenDocument - ODS"},{"content":"   Contents Summary\n1 About SpreadsheetML\n2 SpreadsheetML in Aspose.Cells 2.1 OOXML is Open, Why Use Aspose.Cells?\n2.2 A fragment of an Office Open XML Document\n ||      About SpreadsheetML      SpreadsheetML is a name for a family of XML-based formats for spreadsheet documents. There are several versions of SpreadsheetML:\n SpreadsheetML version 2003 was introduced in Microsoft Word 2003. SpreadsheetML was a significant step by Microsoft towards making the document format open. Office Open XML (OOXML) is the new XML-based format introduced in Microsoft Office 2007 applications. Office Open XML is a container format for several specialized XML-based markup languages. SpreadsheetML version 2007 is the markup language used by Microsoft Office Excel 2007 to store its documents. Microsoft Excel 2010 stores documents in the SpreadsheetML version 2010 as defined in the updated OOXML standard.  SpreadsheetML in Aspose.Cells\nThere are three \u0026amp;ldquo;versions\u0026amp;rdquo; of SpreadsheetML available:\n   SpreadsheetML “Version” Applicable Standard/Specification Supported in Aspose.Cells for .NET     Microsoft Excel 2003 Microsoft Excel 2003 XML Yes   Microsoft Excel 2007 OOXML ECMA-376 Yes   Microsoft Excel 2010 OOXML ISO/IEC DIS 29500 Yes   Microsoft Excel 2013 OOXML ISO/IEC DIS 29500 Yes   OOXML SpreadsheetML documents most often come as XLSX files, which are ZIP packages. In addition to XLSX. Aspose.Cells provides extensive support for loading, saving and converting SpreadsheetML documents. Such all-embracing implementation is possible because Aspose.Cells was designed with the structure of Microsoft Excel documents in mind (and SpreadsheetML is known to mimic the internal representation of Microsoft Excel documents).      OOXML is Open, Why Use Aspose.Cells?\nIt is true that Office Open XML technology makes it possible to build document processing and generating applications using just the XML classes without relying on third-party libraries such as Aspose.Cells. However, we …","date":-62135596800,"description":"","objectID":"ceb5bcf0674dbd81dd984f30019a4efd","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/fileformatsandconversions/spreadsheetml+-+xlsx%2c+xml/","title":"SpreadsheetML - XLSX, XML"},{"content":"   Contents Summary\n1 About XPS\n2 XPS in Aspose.Cells\n ||      About XPS          The XML Paper Specification is a page description language and a fixed-document format originally developed by Microsoft. Like PDF, XPS is a fixed-layout document format designed to preserve document fidelity and provide device-independent document appearance.     XPS in Aspose.Cells     Any document loaded into Aspose.Cells can be converted to XPS. Aspose.Cells uses the same high-fidelity page layout and rendering engine to produce output in all its supported fixed-layout formats e.g PDF, XPS etc.\nIt is worthwhile to note that Aspose.Cells generates XPS directly (including sub-setting of TrueType fonts), without relying on the Windows Presentation Foundation classes found in the .NET Framework 3.5, this allows Aspose.Cells to produce XPS on machines that run .NET of earlier versions or on completely different platforms.\nAttachments: XML Paper Specification (XPS)-001.png (image/png) XML Paper Specification (XPS)-002.png (image/png) XML Paper Specification (XPS)-003.png (image/png)\n","date":-62135596800,"description":"","objectID":"44bbfec25bed3430aa36fe02d677df5f","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/fileformatsandconversions/xml+paper+specification+-+xps/","title":"XML Paper Specification - XPS"},{"content":"Articles in this section\nAttachments: SpreadsheetML (XLSX, XML)-001.png (image/png) SpreadsheetML (XLSX, XML)-002.png (image/png) OpenDocument (ODS)-001.png (image/png) XML Paper Specification (XPS)-001.png (image/png) XML Paper Specification (XPS)-002.png (image/png) XML Paper Specification (XPS)-003.png (image/png) Adobe Portable Document Format (PDF)-001.png (image/png) Adobe Portable Document Format (PDF)-002.PNG (image/png) Adobe Portable Document Format (PDF)-003.PNG (image/png) HyperText Markup Language Format (HTML)-001.PNG (image/png) HyperText Markup Language Format (HTML)-002.PNG (image/png)\n","date":-62135596800,"description":"","objectID":"93ac6a57c7fbe2cb780af97198e9e7da","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/fileformatsandconversions/","title":"File Formats and Conversions"},{"content":"Aspose.Cells saves documents according to the OASIS ODF 1.1 standard. The following table provides implementation details.\n   Category Subcategory Supported Comment     Formatting Row Heights/Column Widths Yes Appearance should be similar.   Formatting Cell Yes |   Hyperlinks |Yes There might be some issues with Hyperlink styles.    Formatting Cell styles Yes |   Print Print Ranges Yes |   Print Repeat Rows/Columns Planned |   Print Page breaks Planned |   Print Header/Footer Partially Supported When you save the file in .ods format and open it again in Microsoft Excel, Image, First Page or Odd/Even options are not supported.   Formulas |Yes |    Formulas Names Partially Supported When you save the file in .ods format and open it again in Microsoft Excel, Local Names, Named expressions, and names to discontinuous ranges are not supported.   Cell Comments |Yes |    Group \u0026amp;amp; Outline |Yes |    Settings Window Settings Planned |   Settings Sheet/Book settings Planned |   Protection Sheet Protection Planned When you save the file in .ods format and open it again in Microsoft Excel, protection without a password is supported. However, files with a password-protected sheet(s) cannot be saved or opened.   Protection Information Rights Management (IRM) N/A Files with IRM turned on cannot be saved.   Protection Encryption N/A Files with this type of protection cannot be saved.   Data Validation |Yes |    Conditional formatting |Yes |    External Data |Planned |    Tables |Planned |    PivotTable |Planned |    Shared Workbooks |Planned |    Charts |Planned When you save the file in .ods format and open it again in Microsoft Excel, some data labels are not supported.    Drawing |Planned |    OLE Objects |Planned |     ","date":-62135596800,"description":"","objectID":"8931c05f4b4307f054cad919738a9a3c","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/whatdocumentfeaturesaresupported/save+in+the+ods+-+opendocument+spreadsheet+format/","title":"Save in the ODS - OpenDocument Spreadsheet Format"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"bce1c48437727a7b931375a740c8c6a3","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsfeatures/whatdocumentfeaturesaresupported/","title":"What Document Features are Supported"},{"content":"Visual Studio.NET developers can easily drag controls from the Toolbox onto a Windows or Web form. Aspose.Cells Grid suite can be downloaded with an MSI installer, or as a set of DLLs package. This articles explains what to do to make sure that Aspose.Cells.Grid controls can be used in Visual Studio.NET when its installed using the DLLs instead of the installer.\nIntegrate Aspose.Cells Grid Controls with Visual Studio.NET\nTo integrate Aspose.Cells Grid controls with Visual Studio.NET:\n Open the Toolbox. Select the General tab (or any other tab you want to add controls to). Right-click the General tab. On Visual Studio.NET 2003: Select Add/Remove Items from the menu. On Visual Studio.NET 2005, select Choose Items from the menu. The Customize Toolbox dialog will be appeared (This process is is more or less the same for newer VS.NET IDEs (e.g VS.NET 2013/2015 or later)). Click Browse and locate the Aspose.Cells.GridDesktop.dll and Aspose.Cells.GridWeb.dll files. Select the DLLs and then click Open. The Customize Toolbox dialog will now contain controls from Aspose.Cells Grid Suite. The newly added controls will be highlighted by the dialog. Click OK to add the controls to your Visual Studio.NET Toolbox.  the Aspose.Cells Grid Controls will have been added to the Toolbox\u0026amp;rsquo;s General tab. Only the GridWeb control is not active. This is because we are working on a Windows Forms application. GridWeb is only available when you are working on Web Forms whereas GridDesktop can be used with Windows forms only.\nAttachments: Integrate Aspose.Cells Grid Controls with Visual Studio.NET-001.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-002.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-003.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-004.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-005.png (image/png)\n","date":-62135596800,"description":"","objectID":"4e4d500ca87b7bcb6241b4b56b4245f9","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsgridsuiteandvsnet/integrate+aspose.cells+grid+controls+with+visual+studio.net/","title":"Integrate Aspose.Cells Grid Controls with Visual Studio.NET"},{"content":"Articles in this section\nAttachments: Integrate Aspose.Cells Grid Controls with Visual Studio.NET-001.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-002.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-003.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-004.png (image/png) Integrate Aspose.Cells Grid Controls with Visual Studio.NET-005.png (image/png)\n","date":-62135596800,"description":"","objectID":"2f2252cf8ec8b329826d587bffb04b8d","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/asposecellsgridsuiteandvsnet/","title":"Aspose.Cells Grid Suite and VS.NET"},{"content":"   Contents Summary\n1 Install Aspose.Cells for .NET through NuGet 1.1 Install Aspose.Cells using Package Manager GUI\n1.2 Install Aspose.Cells using the Package Manager Console\n2 Referencing Aspose.Cells from a .NET Project 2.1 Referencing the component from a VS.NET 2010 Client Profile project\n3 Referencing Aspose.Cells Grid Controls from a .NET project\n4 Uninstalling Aspose.Cells for .NET\n ||      \\      Install Aspose.Cells for .NET through NuGet\nNuGet is the easiest way to download and install Aspose APIs for .NET. Open Microsoft Visual Studio and NuGet package manager. Search \u0026amp;ldquo;aspose\u0026amp;rdquo; to find the desired Aspose API. Click on \u0026amp;ldquo;Install\u0026amp;rdquo;, the selected API will be downloaded and referenced in your project.\nInstall Aspose.Cells using Package Manager GUI\nFollow these steps to reference the Aspose.Cells component using package manager GUI:\n Open your solution/project in Visual Studio. Click Tools -\u0026amp;gt; Library Package Manager -\u0026amp;gt; Manage NuGet Packages from Solution. You can also easily access the same option by through the Solution Explorer. Right-click the solution or project and select Manage NuGet Packages from context menu. Select Online from the left hand menu and type “Aspose.Cells” in the search text box to find the Aspose.Cells .NET package. Click the Install button next to the Aspose.Cells for .NET entry to install the latest version into your project.  Install Aspose.Cells using the Package Manager Console\nYou can follow the steps below to reference the Aspose.Cells component using the package manager console:\n Open your solution/project in Visual Studio. Select Tools -\u0026amp;gt; Library Package Manager -\u0026amp;gt; Package Manager Console from the menu to open package manager console.  Type the command “Install-Package Aspose.Cells” and press enter to install latest full release into your application. Alternatively you can add the \u0026amp;ldquo;-prerelease\u0026amp;rdquo; suffix to the command in order to specify that the latest release including hot fixes is …","date":-62135596800,"description":"","objectID":"edcd4673e13099dccd9900efbafa2bda","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/installationanddeployment/installation/","title":"Installation"},{"content":"The Aspose.Cells for .NET components do not require Microsoft Excel to be installed either on the client or on the server side.\n   Contents Summary\n1 Supported Operating Systems 1.1 Windows\n1.2 Linux\n1.3 Mac\n2 .NET Framework versions supported 2.1 .NET Frameworks\n2.2 Mono Framework\n3 Development Environments\n4 Aspose.Cells Grid Suite System Requirements 4.1 Aspose.Cells.GridDesktop 4.1.1 .NET Framework\n4.1.2 Development Tools\n4.1.3 Operating System\n4.2 Aspose.Cells.GridWeb 4.2.1 .NET Framework\n4.2.2 Development Tools\n4.2.3 Internet Information Server (IIS)\n4.2.4 Browsers\n4.2.5 Operating System\n ||      Supported Operating Systems      Windows\n Microsoft Windows 2000 ( x64, x86) Microsoft Windows XP ( x64, x86) Microsoft Windows Server 2003 ( x64, x86) Microsoft Windows Server 2008 ( x64, x86) Microsoft Windows Server 2012 ( x64, x86) Microsoft Windows Vista ( x64, x86) Microsoft Windows 7 ( x64, x86) Microsoft Windows 8 ( x64, x86) Microsoft Windows 10 ( x64, x86) Windows Azure  Linux\n Linux (Ubuntu, openSUSE, CentOS and others)  Mac\n Mac OS X etc.  .NET Framework versions supported\nAspose.Cells for .NET supports .NET and Mono frameworks as follows:\n.NET Frameworks\n .NET Framework 2.0 .NET Framework 3.0 .NET Framework 3.5 .NET Framework 4.0 .NET Framework 4.5 .NET Framework 4.5.1 .NET Framework 4.5.2 .NET Framework 4.6 .NET Framework 4.6.1 .NET Framework 4.6.2 .NET Framework 4.7.1 .NET Framework 4.7.2 .NET Standard 2.0 (.NET Core 2.0/2.1).  Mono Framework\n Mono 1.2 or newer.  Development Environments\nYou can use Aspose.Cells for .NET to develop applications in any development environment that targets the .NET platform, but the following environments are explicitly supported:\n Microsoft Visual Studio 2005 Microsoft Visual Studio 2008 Microsoft Visual Studio 2010 Microsoft Visual Studio 2012 Microsoft Visual Studio 2013 Microsoft Visual Studio 2015 Microsoft Visual Studio 2017 Microsoft Visual Studio 2019  To use Aspose.Cells, the machine doesn\u0026amp;rsquo;t need to have …","date":-62135596800,"description":"","objectID":"a4c7f7afccd75c13bfec224de1db36e0","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/installationanddeployment/system+requirements/","title":"System Requirements"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"e2f3b10900c9efcb07182db8d603d623","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/installationanddeployment/","title":"Installation and Deployment"},{"content":"Aspose.Cells is a pure .NET component that can simplify your deployment process by using XCOPY deployment. To install Aspose.Cells, you can simply copy the component assembly (Aspose.Cells.dll) into a directory for your application: the application can start using it right away. This is possible because of the self-describing nature of .NET components. This type of deployment has also zero-impact on the installation process.\nDeployment\nAspose.Cells supports both 32-bit and 64-bit environments. When you install Aspose.Cells for .NET component using Aspose.Cells MSI installer, different DLLs are added to different folders in the Aspose.Cells ${installation_Path} folder(s). See the description in the table what folder contains the assemblies you need to use with a particular version of the .NET Framework.\n   Folder Description     net2.0 Contains assemblies to use with .NET Framework 2.0, 3.0, 3.5, 4.0 and Mono. These are the assemblies that you should normally use for both 32-bit and 64-bit environments.   net2.0_AuthenticodeSigned Same as above, but the assemblies are digitally signed with Authenticode. Signed assemblies may load slower than without Authenticode   net3.5_ClientProfile Contains assemblies to use with .NET Framework 3.5 or 4.0 Client Profile.   net3.5_ClientProfile_AuthenticodeSigned Same as above, but the assemblies are digitally signed with Authenticode. Signed assemblies may load slower than without Authenticode.   net3.5 Contains assemblies to use with .NET Framework 3.5 or 4.0.   net3.5_AuthenticodeSigned Same as above, but the assemblies are digitally signed with Authenticode. Signed assemblies may load slower than without Authenticode.   net4.0 Contains assemblies to use with .NET Framework 4.0 and 4.5.   In VS.NET (for example 2005, 2008, 2010, 2012 etc.) projects, when adding a reference to Aspose.Cells, the Add Reference dialog refers to Aspose.Cells.dll files in the net2.0 or net3.5 folder(s) respectively. (For further reference, read …","date":-62135596800,"description":"","objectID":"2840a365ff18838a78a02593a14b39dd","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/installationanddeployment/deployment/using+aspose.cells+on+32-bit+and+64-bit+platforms/","title":"Using Aspose.Cells on 32-bit and 64-bit Platforms"},{"content":"Articles in this section\n","date":-62135596800,"description":"","objectID":"81cd01cb6dea01df5d29dec59dc49fc5","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/installationanddeployment/deployment/","title":"Deployment"},{"content":"   Contents Summary\n1 Issue 1.1 Issue Summary\n1.2 Symptom\n1.3 Causes\n1.4 Solution\n       Issue      I am having a strange problem with a spreadsheet I\u0026amp;rsquo;ve created with your control. It opens and edits just fine in Excel, but when I try to perform a Save or Save As, I get a \u0026amp;ldquo;Document Not Saved\u0026amp;rdquo; msgbox.\nIssue Summary\nThis is an Excel bug: http://support.microsoft.com/default.aspx?scid=kb;en-us;121942\u0026amp;amp;Product=xlw97\n\u0026amp;ldquo;Document Not Saved\u0026amp;rdquo; Saving File Created from Template\nArticle ID : 121942\nLast Review : August 15, 2005\nRevision : 1.3\nThis article was previously published under Q121942\nSymptom\nWhen you attempt to save a workbook, you may receive the following error message: \u0026amp;ldquo;Document Not Saved\u0026amp;rdquo;\nCauses\nThis problem may occur when the following conditions are true:\n The workbook was created from a template that contained an embedded object. You have inserted a worksheet into your workbook from a template. The template contains an embedded object.  Solution\nTo save your work, you must first delete the embedded objects in your workbook.\n","date":-62135596800,"description":"","objectID":"c9760cb5fade81c1c9c7ce8d48539b04","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/document+not+saved+issue/","title":"Document Not Saved Issue"},{"content":"   Contents Summary\n1 HTTP Compression problem 1.1 Explanation\n1.2 Exceptions\n1.3 Solutions\n |     HTTP Compression problem     Some users report that if they configure HTTP Compression in IIS, they find errors while sending generated files to client browsers.\nExplanation\nWe use \u0026amp;ldquo;Content-disposition\u0026amp;rdquo;, \u0026amp;ldquo;inline; filename=test.xls\u0026amp;rdquo; header to force the browser to open the file and \u0026amp;ldquo;Content-disposition\u0026amp;rdquo;, \u0026amp;ldquo;attachment; filename=test.xls\u0026amp;rdquo; header to force the browser to open the Save As dialog and use Microsoft Excel to open the file. However, there are some exceptions that do exist.\nExceptions\nYou can use the following code to verify that it is NOT a bug of Aspose.\nSolutions\nYou can use one of the following workarounds to solve this problem:\n Move those specified ASP.NET files (which contain code calling Aspose.Cells) to another folder, which is not compressed. Disable HTTP Compression for dynamic content. Save the generated file in your server and provide a link to your users.  If you do wish to use HTTP Compression, please always use OpenInExcel option instead of OpenInBrowser option when you know you\u0026amp;rsquo;ve enabled IIS compression.\n","date":-62135596800,"description":"","objectID":"f82de714474f2066c6883360b71c5069","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/http+compression/","title":"HTTP Compression"},{"content":"   Contents Summary\n1 HTTPS/SSL Problem 1.1 Explanation\n1.2 Solution\n |     HTTPS/SSL Problem     Some users reported that they had problems to download Excel files generated with Aspose.Cells. When the save dialog opens, the file name contains the name of the aspx page instead of the excel file, and the File Type is blank.\nExplanation\nWe changed HTTP response headers to solve the problem with HTTP compression. This may cause problem while sending files to client browser through HTTPS/SSL.\nSolution\n\\\n","date":-62135596800,"description":"","objectID":"0860766dfd5c5263e6d1c1784482f2a7","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/https+ssl+issue/","title":"HTTPS SSL Issue"},{"content":"   Contents Summary\n1 Symptom 1.1 A Scenario\n1.2 Solution\n1.3 Confirmation\n1.4 References\n       Symptom      Sometimes, the users get frustrated for their license files do not work any longer when they move / publish their web project(s) to a new server. They feel upset as their license files were working properly on their previous (old) server but now they get an extra Evaluation Copyright Warning watermark Worksheet (whenever they generate reports using the component) on the new server environment.\nA Scenario\n\u0026amp;ldquo;We have been using Aspose.Cells on our ASP.NET web project to generate/manipulate Excel reports, we got a valid license that we are using. Some days ago, we moved the website to a new server; there were no upgrades or changes whatsoever, we have made sure and simply moved each and every file to the new server, including the Aspose.Cells.dll and related .lic file(s). Now when we try to generate Excel reports in the new server environment, we get an Evaluation Copyright Warning watermark sheet on our reports. We did try downloading and installing a new license file from My Orders section of the site, but it did not fix the problem at all. FYI, we implement the license by placing the Aspose.Cells.lic file in the site\u0026amp;rsquo;s bin folder along with the Aspose.Cells.dll component file, which, as I have mentioned, worked with no problem on the old server.\u0026amp;rdquo;\nSolution\nAspose has a clean and reliable licensing mechanism. Generally, the issue should be related to deployment problem. If a license file works fine (on a server), it should work equally fine on other servers / environments too. Normally the users utilize Application_Start or Session_Start events etc. in the global.asax file to place the licensing code there. So, it is quite possible that the Application_Start / Session_Start event(s) isn\u0026amp;rsquo;t fired to process the licensing code on their new location(s). It is to be noted here, Aspose.Cells will always throw an exception if the component …","date":-62135596800,"description":"","objectID":"874269c293fc6e076f4bb36a08334450","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/license+file+not+working+anymore/","title":"License File Not Working Anymore"},{"content":"   Contents Summary\n1 Symptom 1.1 Screenshot of Error\n1.2 Solution\n1.3 References\n       Symptom      \u0026amp;ldquo;Using Aspose.Cells version, I get this error when I use the Save method when trying to save workbook to Response object. I find this code snippet documented in the online documentation.\u0026amp;rdquo;\nScreenshot of Error\nSolution\nPlease use .NET 2.0 compiled version of the product as it works fine on VS.NET 2008/2010. Actually we provide separate dll\u0026amp;rsquo;s for different environments, project types and systems etc. For reference, please check:http://www.aspose.com/docs/display/cellsnet/Using+Aspose.Cells+on+32-bit+and+64-bit+Platforms\nAspose.Cells for .NET is compatible and works fine with all the .NET framework versions i.e. 2.x, 3.x, 4.x etc. for any type of project e.g Asp.NET/Winforms, Web project, Windows/Web Service, console application or other projects etc. We provide different dlls for different .NET framework versions. For more information, read the readme.txt file in the \u0026amp;ldquo;\\Bin\u0026amp;rdquo; folder at your installation directory. But, this readme.txt file is present.\nWhen you use our product in a a web application, please use the Aspose.Cells.dll from the NET 2.0 folder in the \u0026amp;ldquo;/bin\u0026amp;rdquo; directory. For your information, the dll in .NET 3.5 Client Profile directory is used only for the console application with Net frame client profile as the target framework of VS.NET. Please check your project, it is possible that your project is referencing to this dll.\nReferences\nhttp://www.aspose.com/community/forums/thread/340654.aspx\nAttachments: No overload for method Save takes 4 arguments-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"140c1c8a431871973f481566f137c3f8","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/no+overload+for+method+save+takes+4+arguments/","title":"No overload for method Save takes 4 arguments"},{"content":"   Contents Summary\n1 Symptom 1.1 Solution\n ||      Symptom      \u0026amp;ldquo;I tried to open the generated excel file from the \u0026amp;ldquo;Open\u0026amp;rdquo; button of the IE. The excel has been generated by reading an excel template. While I am clicking the Open button it is opening and at the same time it is popping up an error message saying \u0026amp;ldquo;Cannot open Pivot Table Source file\u0026amp;hellip;..\u0026amp;quot;.\nBut when I am saving the generated excel file using the \u0026amp;ldquo;Save\u0026amp;rdquo; button and opening it from the file from the saved path it is opening properly without any error. \u0026amp;quot;\nSolution\nAspose.Cells sets the pivot data format and forces MS Excel to create pivot table report and other calculation tasks based on the data source when the workbook opens into MS Excel. So one should use SaveType.OpenInBrowser rather than using SaveType.OpenInExcel. One of the many reason is when you use OpenInExcel option while saving the output generated file into MS Excel at runtime using \u0026amp;ldquo;Open\u0026amp;rdquo; button of the download dialog box, MS Excel could not parse the Workbook data to generate pivot table report. This is caused by the filename problem, It is the routine of IE as it appends something like \u0026amp;ldquo;[1]\u0026amp;rdquo; to make it as \u0026amp;ldquo;fileName\u0026amp;quot;+ \u0026amp;ldquo;[1]\u0026amp;ldquo;+ \u0026amp;ldquo;.xls\u0026amp;rdquo; to the original name and thus nothing to do with Aspose.Cells. (i.e\u0026amp;hellip;. it always adds \u0026amp;ldquo;[1]\u0026amp;rdquo; to make \u0026amp;ldquo;fileName\u0026amp;quot;+ \u0026amp;ldquo;[1]\u0026amp;ldquo;+ \u0026amp;ldquo;.xls\u0026amp;rdquo; and not like fileName.xls). In short, if a file contains pivot table, it cannot be opened using OpenInExcel SaveType option and this will apply for both i.e., if you create the file from scrach or using any template file for source data to create pivot table report. So, you should use OpenInBrowser SaveType option if the file has pivot table data in it to create pivot table report.\nYou should change your code and update to SaveType.OpenInBrowser if you are using Workbook.Save() method\nOr edit your code to use \u0026amp;ldquo;inline\u0026amp;rdquo; …","date":-62135596800,"description":"","objectID":"35c8301ea4ff591be56078f89a01f4ed","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/pivot+table+issue/","title":"Pivot Table Issue"},{"content":"   Contents Summary\n1 Security Exception Problem 1.1 Explanation\n1.2 Solution\n       Security Exception Problem      Some users may receive \u0026amp;ldquo;Security Exception\u0026amp;rdquo; error while trying to use Aspose.Cells. This problem is generally happened in a web application.\nExplanation\nAspose.Cells has to call some Win32 GDI APIs to provide some important features. If the web server has a strict trust level, this security exception may be thrown.\nSolution\nPlease try to create a new permission set to give Aspose.Cells.dll security permission with \u0026amp;ldquo;Allow calls to unmanaged assemblies\u0026amp;rdquo; enabled.\n","date":-62135596800,"description":"","objectID":"e1225b2a03b74221ef626db9219ceaba","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/security+exception+issue/","title":"Security Exception Issue"},{"content":"Articles in this section\nAttachments: No overload for method Save takes 4 arguments-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"974346eae88f8cbb6ccbcf5007191475","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/knownissues/","title":"Known Issues"},{"content":"This topic collects a few technical reviews of Aspose.Cells conducted by IT professionals.\n   Contents Summary\n1 Steve C. Orr\n2 David McAmis\n ||      Steve C. Orr      Steve C. Orr is a Microsoft Certified Solution Developer (MCSD) and a Microsoft MVP in ASP.NET. He\u0026amp;rsquo;s been developing software solutions for leading companies in the Seattle area for more than a decade. When he\u0026amp;rsquo;s not busy designing software systems or writing about it, he can be found at local user groups and assisting in the ASP.NET newsgroup as both contributor and advisor. Steve is also a frequent author and contributor to asp.netPRO magazine.\nReview Published: Aspose.Excel\nDavid McAmis\nDavid McAmis is the Technical Editor at Builder AU. He currently lives and works in Sydney, Australia, where he enjoys being the \u0026amp;ldquo;token American\u0026amp;rdquo; and chasing kangaroos and wallabies for fun. David has written a number of books and more than 100 articles that have appeared in magazines and journals.\nReview Published: First Look: Aspose.Excel\n","date":-62135596800,"description":"","objectID":"68b2295bc84680285dc09860d00eca33","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/industry+reviews/","title":"Industry Reviews"},{"content":"For testimonials from Aspose.Cells customers, please check:\nAspose.Cells Forums Testimonials \n","date":-62135596800,"description":"","objectID":"1a0900ffa14ca08b08b253b5abd233e8","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/testimonials/","title":"Testimonials"},{"content":"Articles in this section\nAttachments: Right90 Sales Forecasting-001.png (image/png) Blue Inkt Business Solutions Providers-001.png (image/png) Ohal Report Canvas Component-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"39d4384737503b8c2f1ff8ee597a41fd","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/","title":"Success Stories"},{"content":"   Contents Summary\n1 Product Background\n2 Requirements Scenario\n3 Solution Implementation\n4 Conclusion\n       **Product Background **      Blue Inkt is a Dutch company that develops web based software that can be applied to almost every business station and fitting any level of company\u0026amp;rsquo;s day-to-day business world wide. We provide a number of web based software applications, but the core business for us is TeleManager, Leadmanager and upcoming MarketingManager.\nRequirements Scenario\nA few of our customers that use our software asked frequently for a solution for making export from LeadManager to Microsoft Excel. They use it to make an export by using the print screen button but the way it worked now wasn\u0026amp;rsquo;t efficient enough so we needed a solution for this issue. Another option was that we made an export from the database but this cost too much time because the data also contained a lot of data you did not need.\n**Solution Implementation **\nWe started looking for the right solution to solve this problem. After a few clicks on the website Google we saw that Aspose has a solution we needed. We tried the 30 days promo and were really excited about it. We build an extra button in our applications to make exports to Excel.\nThe result of this test was very good. If you have, for example 100 requests for an export that each takes 10 minutes. You don\u0026amp;rsquo;t have to be an expert to realize this really was the solution we needed.\n**Conclusion **\nNow we have solved the issue that was causing our clients too much time. The usability of our products is higher.\nAttachments: Blue Inkt Business Solutions Providers-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"61cd06c6e6779a7c40659f36ba051985","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/casestudies/blue+inkt+business+solutions+providers/","title":"Blue Inkt Business Solutions Providers"},{"content":"www.ohal-group.com\nUse of Aspose.Cells in Report Canvas Component\nRobert Chilvers, 17th March 2008\n   Contents Summary\n1 Product Background\n2 Requirements Scenario\n3 Solution Implementation\n4 Benefits\n5 Future Implementation\n6 Conclusion\n       Product Background      The Report Canvas Component allows the user to create visual reports based on a pre-loaded dataset. The user can add different components to their canvas including pictures, text boxes, charts and tables, they then specify the data and how it should be aggregated. The user can then rearrange and resize the objects to fit their page. The user can specify color palettes and save off templates for future use. Aspose.Cells is used to export all the objects on the canvas to Excel with the correct data. The component is written with VB.Net in Visual Studio 2008.\nRequirements Scenario\nWe selected Aspose.Cells because of its almost complete Microsoft Excel export capabilities. Most importantly for us is the ability to export charts and tables especially in Microsoft Excel 2007 – these were lacking in other 3rd party components.\nSolution Implementation\nEach object on the report canvas has a function which is passed an instance of the Aspose.Cells worksheet and adds itself to the worksheet. When the user requests an export the workbook and worksheets are initialized and each object on the report canvas has this function called.\nBenefits\nAspose.Cells allowed us to build up the Excel workbook entirely independently of Excel and then save the workbook in the format selected by the user. This saved hours of debugging the interaction when using the Excel interop and implementing different routines for saving to varying versions of Excel.\nFuture Implementation\nWe are likely to use Aspose.Cells for all loading and saving of Excel files. This will include loading data templates and exporting results.\nConclusion\nAs yet, we have had no problems using the Aspose.Cells components and the component should save us development …","date":-62135596800,"description":"","objectID":"86b2dde262a8a9e5015708bf2ff943c3","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/casestudies/ohal+report+canvas+component/","title":"Ohal Report Canvas Component"},{"content":"   Contents Summary\n1 Product Background\n2 Requirements Scenario\n3 Solution Implementation\n4 Benefits\n5 Conclusion\n       Product Background          Right90 Sales Forecasting helps manufacturing companies see and manage changes to their sales forecasts. Right90 is intuitive enough for anyone to use, and provides actionable insight to help managers stay alert to changes, be confident of their number and reduce potential risks. Right90 delivers rapid results through a flexible, on-demand platform that accelerates sales adoption and business value, while minimizing risk and IT infrastructure.     Requirements Scenario     Many sales teams in manufacturing companies are very comfortable using Excel to capture forecasts, and have defined processes using Excel as their forecast data collection tool. While Right90 provides a simple yet powerful web interface for updating, rolling up and managing changes to forecasts, we also wanted to provide a way for our manufacturing customers to easily extract their forecast information into Excel. In addition we also needed to be able to track their changes in that workbook and allow them to easily submit those changes back into our system for aggregated processing, rollup and analysis. As an on-demand enterprise forecasting solution, Right90\u0026amp;rsquo;s top priorities for Excel integration were performance and reliability.\nSolution Implementation\nWe compared several Excel file generation products and chose to implement our solution using Aspose.Cells. The decision to use Aspose.Cells was made easy by their concise collection of code examples, documentation and their responsive customer support. We run Aspose.Cells behind a set of web services in a high availability high transaction web application.\nBenefits\nWe use the following Aspose.Cells features to create rich UI Excel worksheets:\n Cell Formatting Auto Filters Conditional Formatting Cell Comments Inserting Objects (images) Hyperlinks  Conclusion\nThe Aspose.Cells component allowed us …","date":-62135596800,"description":"","objectID":"80bb7c03441366ba1cf333cfdd5e5699","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/casestudies/right90+sales+forecasting/","title":"Right90 Sales Forecasting"},{"content":"Articles in this section\nAttachments: Right90 Sales Forecasting-001.png (image/png) Blue Inkt Business Solutions Providers-001.png (image/png) Ohal Report Canvas Component-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"acb1fd5c2c5c9f6c841391b2bbe37e4a","permalink":"https://roywangt.github.io/cellsnet/gettingstarted/successstories/casestudies/","title":"Case Studies"},{"content":"Plugins\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"ee3b608d0d5d3b3112565f26ce72e977","permalink":"https://roywangt.github.io/cellsnet/plugins/","title":"Plugins"},{"content":"Contents Summary\n What is OpenXML? Aspose.Cells for .Net Aspose.Cells for OpenXML  Introduction System Requirements and Supported Platforms  System Requirements Supported Operating Systems .NET Framework versions supported   Downloading Installing Support, Extend and Contribute  Support Extend and Contribute Source Code How to configure the source code     Sample Code Examples  What is OpenXML?\nOpenXML SDK is a .NET SDK from Microsoft in order to process Microsoft Office 2007 and above file formats. These file formats are basically zipped packages and the Open XML SDK for Office simplifies the task of manipulating Open XML packages and the underlying Open XML schema elements within a package. The classes in the Open XML SDK encapsulate many common tasks that developers perform on Open XML packages, so that you can perform complex operations with lines of code.\nOnce you have installed the Open XML SDK 2.5, open your existing project or application in Visual Studio, or create a new project or application. Then, in your project or application, add references to the following components:\n DocumentFormat.OpenXml WindowsBase  Aspose.Cells for .Net\nAspose.Cells for .NET provides the most flexible group of components that enable .NET Application to create and manage Excel Spreadsheets without requiring Microsoft Excel to be installed on the server. Aspose.Cells is one of the leading components for all types of Excel formats manipulation. Unlike similar products from other vendors, Aspose.Cells not only supports spreadsheet generation and other basic file formatting features, but also supports a number of advanced features. These advanced features make it much more convenient for the developers to manipulate spreadsheet contents, cells formatting and files protection. Aspose.Cells also allows importing data into spreadsheets from different data sources, adding common and complex Mathematical, DateTime, Financial, Text Formulas / Functions, supports manipulation of charts, …","date":-62135596800,"description":"","objectID":"6fc641013b2ac9c843c498964f87da48","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/","title":"Aspose.Cells for OpenXML"},{"content":"OpenXML Excel\nFollowing are the namespaces we need to use in code:\nusing DocumentFormat.OpenXml;\nusing DocumentFormat.OpenXml.Packaging;\nusing DocumentFormat.OpenXml.Spreadsheet;\nBelow is the code:\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Calculate the sum of a range of cells.xlsx\u0026amp;rdquo;;\nstring worksheetName = \u0026amp;ldquo;Sheet1\u0026amp;rdquo;;\nstring firstCellName = \u0026amp;ldquo;A1\u0026amp;rdquo;;\nstring lastCellName = \u0026amp;ldquo;A3\u0026amp;rdquo;;\nstring resultCell = \u0026amp;ldquo;A4\u0026amp;rdquo;;\nCalculateSumOfCellRange(FileName, worksheetName, firstCellName, lastCellName, resultCell);\nprivate static void CalculateSumOfCellRange(string docName, string worksheetName, string firstCellName, string lastCellName, string resultCell)\n{\n// Open the document for editing.\nusing (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))\n{\nIEnumerable sheets = document.WorkbookPart.Workbook.Descendants().Where(s =\u0026amp;gt; s.Name == worksheetName);\nif (sheets.Count() == 0)\n{\n// The specified worksheet does not exist.\nreturn;\n}\nWorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);\nWorksheet worksheet = worksheetPart.Worksheet;\n// Get the row number and column name for the first and last cells in the range.\nuint firstRowNum = GetRowIndex(firstCellName);\nuint lastRowNum = GetRowIndex(lastCellName);\nstring firstColumn = GetColumnName(firstCellName);\nstring lastColumn = GetColumnName(lastCellName);\ndouble sum = 0;\n// Iterate through the cells within the range and add their values to the sum.\nforeach (Row row in worksheet.Descendants().Where(r =\u0026amp;gt; r.RowIndex.Value \u0026amp;gt;= firstRowNum \u0026amp;amp;\u0026amp;amp; r.RowIndex.Value \u0026amp;lt;= lastRowNum))\n{\nforeach (Cell cell in row)\n{\nstring columnName = GetColumnName(cell.CellReference.Value);\nif (CompareColumn(columnName, firstColumn) \u0026amp;gt;= 0 \u0026amp;amp;\u0026amp;amp; CompareColumn(columnName, lastColumn) \u0026amp;lt;= 0)\n{\nsum += double.Parse(cell.CellValue.Text);\n}\n}\n}\n// Get the SharedStringTablePart and add the result to …","date":-62135596800,"description":"","objectID":"389ce185e1d61e0ad86f4aac627e0760","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/calculate+the+sum+of+a+range+of+cells/","title":"Calculate the sum of a range of cells"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Create a spreadsheet document.xlsx\u0026amp;rdquo;;\nCreateSpreadsheetWorkbook(FileName);\nprivate static void CreateSpreadsheetWorkbook(string filepath)\n{\n// Create a spreadsheet document by supplying the filepath.\n// By default, AutoSave = true, Editable = true, and Type = xlsx.\nSpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.\nCreate(filepath, SpreadsheetDocumentType.Workbook);\n// Add a WorkbookPart to the document.\nWorkbookPart workbookpart = spreadsheetDocument.AddWorkbookPart();\nworkbookpart.Workbook = new Workbook();\n// Add a WorksheetPart to the WorkbookPart.\nWorksheetPart worksheetPart = workbookpart.AddNewPart();\nworksheetPart.Worksheet = new Worksheet(new SheetData());\n// Add Sheets to the Workbook.\nSheets sheets = spreadsheetDocument.WorkbookPart.Workbook.\nAppendChild(new Sheets());\n// Append a new worksheet and associate it with the workbook.\nSheet sheet = new Sheet()\n{\nId = spreadsheetDocument.WorkbookPart.\nGetIdOfPart(worksheetPart),\nSheetId = 1,\nName = \u0026amp;ldquo;mySheet\u0026amp;rdquo;\n};\nsheets.Append(sheet);\nworkbookpart.Workbook.Save();\n// Close the document.\nspreadsheetDocument.Close();\n}\n}\nAspose.Cells\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Create a spreadsheet document.xlsx\u0026amp;rdquo;;\nCreateSpreadsheetWorkbook(FileName);\nprivate static void CreateSpreadsheetWorkbook(string filepath)\n{\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Excel object\nWorksheet worksheet = workbook.Worksheets.Add(\u0026amp;ldquo;MySheet\u0026amp;rdquo;);\n//Saving the Excel file\nworkbook.Save(filepath);\n}\nDownload Sample Code\n CodePlex GitHub [Sourceforge](https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells Vs OpenXML/Create a spreadsheet document (Aspose.Cells).zip/download) [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Create a spreadsheet …","date":-62135596800,"description":"","objectID":"f9fcc1b047a92185492560a17705703e","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/create+a+spreadsheet+document/","title":"Create a spreadsheet document"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Delete text from a cell.xlsx\u0026amp;rdquo;;\nstring sheetName = \u0026amp;ldquo;Sheet1\u0026amp;rdquo;;\nstring colName = \u0026amp;ldquo;B\u0026amp;rdquo;;\nuint rowIndex = 2;\nDeleteTextFromCell(FileName, sheetName, colName, rowIndex);\n// Given a document, a worksheet name, a column name, and a one-based row index,\n// deletes the text from the cell at the specified column and row on the specified worksheet.\npublic static void DeleteTextFromCell(string docName, string sheetName, string colName, uint rowIndex)\n{\n// Open the document for editing.\nusing (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))\n{\nIEnumerable sheets = document.WorkbookPart.Workbook.GetFirstChild().Elements().Where(s =\u0026amp;gt; s.Name == sheetName);\nif (sheets.Count() == 0)\n{\n// The specified worksheet does not exist.\nreturn;\n}\nstring relationshipId = sheets.First().Id.Value;\nWorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(relationshipId);\n// Get the cell at the specified column and row.\nCell cell = GetSpreadsheetCell(worksheetPart.Worksheet, colName, rowIndex);\nif (cell == null)\n{\n// The specified cell does not exist.\nreturn;\n}\ncell.Remove();\nworksheetPart.Worksheet.Save();\n}\n}\n// Given a worksheet, a column name, and a row index, gets the cell at the specified column and row.\nprivate static Cell GetSpreadsheetCell(Worksheet worksheet, string columnName, uint rowIndex)\n{\nIEnumerable rows = worksheet.GetFirstChild().Elements().Where(r =\u0026amp;gt; r.RowIndex == rowIndex);\nif (rows.Count() == 0)\n{\n// A cell does not exist at the specified row.\nreturn null;\n}\nIEnumerable cells = rows.First().Elements().Where(c =\u0026amp;gt; string.Compare(c.CellReference.Value, columnName + rowIndex, true) == 0);\nif (cells.Count() == 0)\n{\n// A cell does not exist at the specified column, in the specified row.\nreturn null;\n}\nreturn cells.First();\n}\n// Given a shared string ID and a SpreadsheetDocument, verifies that other …","date":-62135596800,"description":"","objectID":"da4ee555f2ab147ac012fe75793d2603","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/delete+text+from+a+cell/","title":"Delete text from a cell"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Get a column heading.xlsx\u0026amp;rdquo;;\nstring worksheetName = \u0026amp;ldquo;Sheet1\u0026amp;rdquo;;\nstring cellName = \u0026amp;ldquo;B3\u0026amp;rdquo;;\nstring s1 = GetColumnHeading(FileName, worksheetName, cellName);\n// Given a document name, a worksheet name, and a cell name, gets the column of the cell and returns\n// the content of the first cell in that column.\npublic static string GetColumnHeading(string docName, string worksheetName, string cellName)\n{\n// Open the document as read-only.\nusing (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, false))\n{\nIEnumerable sheets = document.WorkbookPart.Workbook.Descendants().Where(s =\u0026amp;gt; s.Name == worksheetName);\nif (sheets.Count() == 0)\n{\n// The specified worksheet does not exist.\nreturn null;\n}\nWorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);\n// Get the column name for the specified cell.\nstring columnName = GetColumnName(cellName);\n// Get the cells in the specified column and order them by row.\nIEnumerable cells = worksheetPart.Worksheet.Descendants().Where(c =\u0026amp;gt; string.Compare(GetColumnName(c.CellReference.Value), columnName, true) == 0)\n.OrderBy(r =\u0026amp;gt; GetRowIndex(r.CellReference));\nif (cells.Count() == 0)\n{\n// The specified column does not exist.\nreturn null;\n}\n// Get the first cell in the column.\nCell headCell = cells.First();\n// If the content of the first cell is stored as a shared string, get the text of the first cell\n// from the SharedStringTablePart and return it. Otherwise, return the string value of the cell.\nif (headCell.DataType != null \u0026amp;amp;\u0026amp;amp; headCell.DataType.Value == CellValues.SharedString)\n{\nSharedStringTablePart shareStringPart = document.WorkbookPart.GetPartsOfType().First();\nSharedStringItem[] items = shareStringPart.SharedStringTable.Elements().ToArray();\nreturn items[int.Parse(headCell.CellValue.Text)].InnerText;\n}\nelse\n{\nreturn headCell.CellValue.Text;\n} …","date":-62135596800,"description":"","objectID":"0659ec3b5c3eeefd9f7caa91f7f97e5b","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/get+a+column+heading/","title":"Get a column heading"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Get worksheet information.xlsx\u0026amp;rdquo;;\nGetSheetInfo(FileName);\nConsole.ReadKey();\n}\npublic static void GetSheetInfo(string fileName)\n{\n// Open file as read-only.\nusing (SpreadsheetDocument mySpreadsheet = SpreadsheetDocument.Open(fileName, false))\n{\nS sheets = mySpreadsheet.WorkbookPart.Workbook.Sheets;\n// For each sheet, display the sheet information.\nforeach (E sheet in sheets)\n{\nforeach (A attr in sheet.GetAttributes())\n{\nConsole.WriteLine(\u0026amp;quot;{0}: {1}\u0026amp;quot;, attr.LocalName, attr.Value);\n}\n}\n}\nAspose.Cells\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Get worksheet information.xlsx\u0026amp;rdquo;;\nGetSheetInfo(FileName);\nConsole.ReadKey();\n}\nprivate static void GetSheetInfo(string fileName)\n{\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(fileName);\n//Loop through all Sheets in the workbook\nforeach (Worksheet Sheet in workbook.Worksheets)\n{\n//Get Name and Index of Sheet\nConsole.WriteLine(\u0026amp;ldquo;Sheet Name: {0}\u0026amp;quot;, Sheet.Name);\nConsole.WriteLine(\u0026amp;ldquo;Sheet Index: {0}\u0026amp;quot;, Sheet.Index);\n//Loop through all custom properties\nforeach (CustomProperty Property in Sheet.CustomProperties)\n{\nConsole.WriteLine(\u0026amp;quot;{0}: {1}\u0026amp;quot;, Property.Name, Property.Value);\n}\n}\nDownload Sample Code\n CodePlex GitHub [Sourceforge](https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells Vs OpenXML/Get worksheet information (Aspose.Cells).zip/download) [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Get worksheet information (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"8d2d9f5a2751322360767aeac6db78de","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/get+worksheet+information/","title":"Get worksheet information"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Insert a chart.xlsx\u0026amp;rdquo;;\nstring worksheetName = \u0026amp;ldquo;Sheet1\u0026amp;rdquo;;\nstring title = \u0026amp;ldquo;New Chart\u0026amp;rdquo;;\nDictionary\u0026amp;lt;string, int\u0026amp;gt; data = new Dictionary\u0026amp;lt;string, int\u0026amp;gt;();\ndata.Add(\u0026amp;ldquo;abc\u0026amp;rdquo;, 1);\nInsertChartInSpreadsheet(FileName, worksheetName, title, data);\n// Given a document name, a worksheet name, a chart title, and a Dictionary collection of text keys\n// and corresponding integer data, creates a column chart with the text as the series and the integers as the values.\nprivate static void InsertChartInSpreadsheet(string docName, string worksheetName, string title,\nDictionary\u0026amp;lt;string, int\u0026amp;gt; data)\n{\n// Open the document for editing.\nusing (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))\n{\nIEnumerable sheets = document.WorkbookPart.Workbook.Descendants().\nWhere(s =\u0026amp;gt; s.Name == worksheetName);\nif (sheets.Count() == 0)\n{\n// The specified worksheet does not exist.\nreturn;\n}\nWorksheetPart worksheetPart = (WorksheetPart)document.WorkbookPart.GetPartById(sheets.First().Id);\n// Add a new drawing to the worksheet.\nDrawingsPart drawingsPart = worksheetPart.AddNewPart();\nworksheetPart.Worksheet.Append(new DocumentFormat.OpenXml.Spreadsheet.Drawing() { Id = worksheetPart.GetIdOfPart(drawingsPart) });\nworksheetPart.Worksheet.Save();\n// Add a new chart and set the chart language to English-US.\nChartPart chartPart = drawingsPart.AddNewPart();\nchartPart.ChartSpace = new ChartSpace();\nchartPart.ChartSpace.Append(new EditingLanguage() { Val = new StringValue(\u0026amp;ldquo;en-US\u0026amp;rdquo;) });\nDocumentFormat.OpenXml.Drawing.Charts.Chart chart = chartPart.ChartSpace.AppendChild\u0026amp;lt;DocumentFormat.OpenXml.Drawing.Charts.Chart\u0026amp;gt;(\nnew DocumentFormat.OpenXml.Drawing.Charts.Chart());\n// Create a new clustered column chart.\nPlotArea plotArea = chart.AppendChild(new PlotArea());\nLayout layout = plotArea.AppendChild(new Layout());\nBarChart …","date":-62135596800,"description":"","objectID":"97e64f446c07a4786165419f700720e7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/insert+a+chart/","title":"Insert a chart"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Insert a new worksheet.xlsx\u0026amp;rdquo;;\nInsertWorksheet(FileName);\n}\nprivate static void InsertWorksheet(string docName)\n{\n// Open the document for editing.\nusing (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(docName, true))\n{\n// Add a blank WorksheetPart.\nWorksheetPart newWorksheetPart = spreadSheet.WorkbookPart.AddNewPart();\nnewWorksheetPart.Worksheet = new Worksheet(new SheetData());\nSheets sheets = spreadSheet.WorkbookPart.Workbook.GetFirstChild();\nstring relationshipId = spreadSheet.WorkbookPart.GetIdOfPart(newWorksheetPart);\n// Get a unique ID for the new worksheet.\nuint sheetId = 1;\nif (sheets.Elements().Count() \u0026amp;gt; 0)\n{\nsheetId = sheets.Elements().Select(s =\u0026amp;gt; s.SheetId.Value).Max() + 1;\n}\n// Give the new worksheet a name.\nstring sheetName = \u0026amp;ldquo;Sheet\u0026amp;rdquo; + sheetId;\n// Append the new worksheet and associate it with the workbook.\nSheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId, Name = sheetName };\nsheets.Append(sheet);\n}\n}\nAspose.Cells\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Insert a new worksheet.xlsx\u0026amp;rdquo;;\nInsertWorksheet(FileName);\nprivate static void InsertWorksheet(string docName)\n{\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(docName);\n//Adding a new worksheet to the Excel object\nint SheetIndex = workbook.Worksheets.Add();\n//Saving the Excel file\nworkbook.Save(docName);\n}\nDownload Sample Code\n CodePlex GitHub [Sourceforge](https://sourceforge.net/projects/asposeopenxml/files/Aspose.Cells Vs OpenXML/Insert a new worksheet (Aspose.Cells).zip/download) [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Insert a new worksheet (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"851c5b1d767a436398db61b5de26a67e","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/insert+a+new+worksheet/","title":"Insert a new worksheet"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Insert text into a cell.xlsx\u0026amp;rdquo;;\nInsertText(FileName, \u0026amp;ldquo;Inserted Text\u0026amp;rdquo;);\n// Given a document name and text,\n// inserts a new work sheet and writes the text to cell \u0026amp;ldquo;A1\u0026amp;rdquo; of the new worksheet.\npublic static void InsertText(string docName, string text)\n{\n// Open the document for editing.\nusing (SpreadsheetDocument spreadSheet = SpreadsheetDocument.Open(docName, true))\n{\n// Get the SharedStringTablePart. If it does not exist, create a new one.\nSharedStringTablePart shareStringPart;\nif (spreadSheet.WorkbookPart.GetPartsOfType().Count() \u0026amp;gt; 0)\n{\nshareStringPart = spreadSheet.WorkbookPart.GetPartsOfType().First();\n}\nelse\n{\nshareStringPart = spreadSheet.WorkbookPart.AddNewPart();\n}\n// Insert the text into the SharedStringTablePart.\nint index = InsertSharedStringItem(text, shareStringPart);\n// Insert a new worksheet.\nWorksheetPart worksheetPart = InsertWorksheet(spreadSheet.WorkbookPart);\n// Insert cell A1 into the new worksheet.\nCell cell = InsertCellInWorksheet(\u0026amp;ldquo;A\u0026amp;rdquo;, 1, worksheetPart);\n// Set the value of cell A1.\ncell.CellValue = new CellValue(index.ToString());\ncell.DataType = new EnumValue(CellValues.SharedString);\n// Save the new worksheet.\nworksheetPart.Worksheet.Save();\n}\n}\n// Given text and a SharedStringTablePart, creates a SharedStringItem with the specified text\n// and inserts it into the SharedStringTablePart. If the item already exists, returns its index.\nprivate static int InsertSharedStringItem(string text, SharedStringTablePart shareStringPart)\n{\n// If the part does not contain a SharedStringTable, create one.\nif (shareStringPart.SharedStringTable == null)\n{\nshareStringPart.SharedStringTable = new SharedStringTable();\n}\nint i = 0;\n// Iterate through all the items in the SharedStringTable. If the text already exists, return its index.\nforeach (SharedStringItem item in shareStringPart.SharedStringTable.Elements())\n{\nif …","date":-62135596800,"description":"","objectID":"ba4f6d4ad5603c1e59cf68ddee21f884","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/insert+text+into+a+cell/","title":"Insert text into a cell"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Merge two adjacent cells.xlsx\u0026amp;rdquo;;\nstring sheetName = \u0026amp;ldquo;Sheet1\u0026amp;rdquo;;\nstring cell1Name = \u0026amp;ldquo;A2\u0026amp;rdquo;;\nstring cell2Name = \u0026amp;ldquo;B2\u0026amp;rdquo;;\nMergeTwoCells(FileName, sheetName, cell1Name, cell2Name);\n// Given a document name, a worksheet name, and the names of two adjacent cells, merges the two cells.\n// When two cells are merged, only the content from one cell is preserved:\n// the upper-left cell for left-to-right languages or the upper-right cell for right-to-left languages.\nprivate static void MergeTwoCells(string docName, string sheetName, string cell1Name, string cell2Name)\n{\n// Open the document for editing.\nusing (SpreadsheetDocument document = SpreadsheetDocument.Open(docName, true))\n{\nWorksheet worksheet = GetWorksheet(document, sheetName);\nif (worksheet == null || string.IsNullOrEmpty(cell1Name) || string.IsNullOrEmpty(cell2Name))\n{\nreturn;\n}\n// Verify if the specified cells exist, and if they do not exist, create them.\nCreateSpreadsheetCellIfNotExist(worksheet, cell1Name);\nCreateSpreadsheetCellIfNotExist(worksheet, cell2Name);\nMergeCells mergeCells;\nif (worksheet.Elements().Count() \u0026amp;gt; 0)\n{\nmergeCells = worksheet.Elements().First();\n}\nelse\n{\nmergeCells = new MergeCells();\n// Insert a MergeCells object into the specified position.\nif (worksheet.Elements().Count() \u0026amp;gt; 0)\n{\nworksheet.InsertAfter(mergeCells, worksheet.Elements().First());\n}\nelse if (worksheet.Elements().Count() \u0026amp;gt; 0)\n{\nworksheet.InsertAfter(mergeCells, worksheet.Elements().First());\n}\nelse if (worksheet.Elements().Count() \u0026amp;gt; 0)\n{\nworksheet.InsertAfter(mergeCells, worksheet.Elements().First());\n}\nelse if (worksheet.Elements().Count() \u0026amp;gt; 0)\n{\nworksheet.InsertAfter(mergeCells, worksheet.Elements().First());\n}\nelse if (worksheet.Elements().Count() \u0026amp;gt; 0)\n{\nworksheet.InsertAfter(mergeCells, worksheet.Elements().First());\n}\nelse if (worksheet.Elements().Count() \u0026amp;gt; 0)\n{ …","date":-62135596800,"description":"","objectID":"c46cf0d001c760411e687cc4be5e91d0","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/merge+two+adjacent+cells/","title":"Merge two adjacent cells"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Open a spreadsheet document for read-only access.xlsx\u0026amp;rdquo;;\nOpenSpreadsheetDocumentReadonly(FileName);\n}\npublic static void OpenSpreadsheetDocumentReadonly(string filepath)\n{\n// Open a SpreadsheetDocument based on a filepath.\nusing (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(filepath, false))\n{\n// Attempt to add a new WorksheetPart.\n// The call to AddNewPart generates an exception because the file is read-only.\nWorksheetPart newWorksheetPart = spreadsheetDocument.WorkbookPart.AddNewPart();\n// The rest of the code will not be called.\n}\n}\nAspose.Cells\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Open a spreadsheet document for read-only access.xlsx\u0026amp;rdquo;;\nOpenSpreadsheetDocumentReadonly(FileName);\npublic static void OpenSpreadsheetDocumentReadonly(string filepath)\n{\n// Open a SpreadsheetDocument based on a filepath.\nWorkbook workbook = new Workbook(filepath);\n}\nDownload Running Code Example\n CodePlex GitHub  Sample Code\n CodePlex [GitHub](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/Aspose.Cells VS OpenXML/Open read-only access)  ","date":-62135596800,"description":"","objectID":"2e484be405fc41a8f2e4c33b2b89ebbe","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/open+a+spreadsheet+document+for+read-only+access/","title":"Open a spreadsheet document for read-only access"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Open a spreadsheet document from a stream.xlsx\u0026amp;rdquo;;\nStream stream = File.Open(FileName, FileMode.Open);\nOpenAndAddToSpreadsheetStream(stream);\nstream.Close();\npublic static void OpenAndAddToSpreadsheetStream(Stream stream)\n{\n// Open a SpreadsheetDocument based on a stream.\nSpreadsheetDocument spreadsheetDocument =\nSpreadsheetDocument.Open(stream, true);\n// Add a new worksheet.\nWorksheetPart newWorksheetPart = spreadsheetDocument.WorkbookPart.AddNewPart();\nnewWorksheetPart.Worksheet = new Worksheet(new SheetData());\nnewWorksheetPart.Worksheet.Save();\nSheets sheets = spreadsheetDocument.WorkbookPart.Workbook.GetFirstChild();\nstring relationshipId = spreadsheetDocument.WorkbookPart.GetIdOfPart(newWorksheetPart);\n// Get a unique ID for the new worksheet.\nuint sheetId = 1;\nif (sheets.Elements().Count() \u0026amp;gt; 0)\n{\nsheetId = sheets.Elements().Select(s =\u0026amp;gt; s.SheetId.Value).Max() + 1;\n}\n// Give the new worksheet a name.\nstring sheetName = \u0026amp;ldquo;Sheet\u0026amp;rdquo; + sheetId;\n// Append the new worksheet and associate it with the workbook.\nSheet sheet = new Sheet() { Id = relationshipId, SheetId = sheetId, Name = sheetName };\nsheets.Append(sheet);\nspreadsheetDocument.WorkbookPart.Workbook.Save();\n// Close the document handle.\nspreadsheetDocument.Close();\n// Caller must close the stream.\n}\nAspose.Cells\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Open a spreadsheet document from a stream.xlsx\u0026amp;rdquo;;\nStream stream = File.Open(FileName, FileMode.Open);\nOpenAndAddToSpreadsheetStream(stream);\nstream.Close();\npublic static void OpenAndAddToSpreadsheetStream(Stream stream)\n{\n//Creating a Workbook object, open the file from a Stream object\n//that contains the content of file and it should support seeking\nWorkbook workbook = new Workbook(stream);\n}\nDownload Running Code Example\n CodePlex GitHub  Sample Code\n CodePlex …","date":-62135596800,"description":"","objectID":"2cd96ab7844d683809b2ced6f0012f44","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/open+a+spreadsheet+document+from+a+stream/","title":"Open a spreadsheet document from a stream"},{"content":"OpenXML Excel\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Retrieve a dictionary of all named ranges.xlsx\u0026amp;rdquo;;\nDictionary\u0026amp;lt;String, String\u0026amp;gt; ranges = GetDefinedNames(FileName);\npublic static Dictionary\u0026amp;lt;String, String\u0026amp;gt; GetDefinedNames(String fileName)\n{\n// Given a workbook name, return a dictionary of defined names.\n// The pairs include the range name and a string representing the range.\nvar returnValue = new Dictionary\u0026amp;lt;String, String\u0026amp;gt;();\n// Open the spreadsheet document for read-only access.\nusing (SpreadsheetDocument document =\nSpreadsheetDocument.Open(fileName, false))\n{\n// Retrieve a reference to the workbook part.\nvar wbPart = document.WorkbookPart;\n// Retrieve a reference to the defined names collection.\nDefinedNames definedNames = wbPart.Workbook.DefinedNames;\n// If there are defined names, add them to the dictionary.\nif (definedNames != null)\n{\nforeach (DefinedName dn in definedNames)\nreturnValue.Add(dn.Name.Value, dn.Text);\n}\n}\nreturn returnValue;\n}\nAspose.Cells\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Retrieve a dictionary of all named ranges.xlsx\u0026amp;rdquo;;\nDictionary\u0026amp;lt;String, String\u0026amp;gt; ranges = GetDefinedNames(FileName);\npublic static Dictionary\u0026amp;lt;String, String\u0026amp;gt; GetDefinedNames(String fileName)\n{\n// Given a workbook name, return a dictionary of defined names.\n// The pairs include the range name and a string representing the range.\nvar returnValue = new Dictionary\u0026amp;lt;String, String\u0026amp;gt;();\n\\\n// Open a SpreadsheetDocument based on a filepath.\nWorkbook workbook = new Workbook(fileName);\n\\\n//Getting all named ranges\nRange[] range = workbook.Worksheets.GetNamedRanges();\n\\\n// If there are items in Ranges, add them to the dictionary.\nif (range != null)\n{\nforeach (Range rn in range)\nreturnValue.Add(rn.Name, rn.Value.ToString());\n}\nreturn returnValue;\n}\nDownload Running Code Example\n CodePlex GitHub  Sample Code\n CodePlex …","date":-62135596800,"description":"","objectID":"8b1294c8738878d7224e8da4dd8fb3f5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/retrieve+a+dictionary+of+all+named+ranges+in+a+spreadsheet+document/","title":"Retrieve a dictionary of all named ranges in a spreadsheet document"},{"content":"OpenXML SDK\nstring FilePath = @\u0026amp;quot;........\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Retrieve the values of cells.xlsx\u0026amp;rdquo;;\n// Retrieve the value in cell A1.\nstring value = GetCellValue(FileName, \u0026amp;ldquo;Sheet1\u0026amp;rdquo;, \u0026amp;ldquo;A1\u0026amp;rdquo;);\nConsole.WriteLine(value);\n// Retrieve the value of a cell, given a file name, sheet name,\n// and address name.\npublic static string GetCellValue(string fileName,\nstring sheetName,\nstring addressName)\n{\nstring value = null;\n// Open the spreadsheet document for read-only access.\nusing (SpreadsheetDocument document =\nSpreadsheetDocument.Open(fileName, false))\n{\n// Retrieve a reference to the workbook part.\nWorkbookPart wbPart = document.WorkbookPart;\n// Find the sheet with the supplied name, and then use that\n// Sheet object to retrieve a reference to the first worksheet.\nSheet theSheet = wbPart.Workbook.Descendants().\nWhere(s =\u0026amp;gt; s.Name == sheetName).FirstOrDefault();\n// Throw an exception if there is no sheet.\nif (theSheet == null)\n{\nthrow new ArgumentException(\u0026amp;ldquo;sheetName\u0026amp;rdquo;);\n}\n// Retrieve a reference to the worksheet part.\nWorksheetPart wsPart =\n(WorksheetPart)(wbPart.GetPartById(theSheet.Id));\n// Use its Worksheet property to get a reference to the cell\n// whose address matches the address you supplied.\nCell theCell = wsPart.Worksheet.Descendants().\nWhere(c =\u0026amp;gt; c.CellReference == addressName).FirstOrDefault();\n// If the cell does not exist, return an empty string.\nif (theCell != null)\n{\nvalue = theCell.InnerText;\n// If the cell represents an integer number, you are done.\n// For dates, this code returns the serialized value that\n// represents the date. The code handles strings and\n// Booleans individually. For shared strings, the code\n// looks up the corresponding value in the shared string\n// table. For Booleans, the code converts the value into\n// the words TRUE or FALSE.\nif (theCell.DataType != null)\n{\nswitch (theCell.DataType.Value)\n{\ncase CellValues.SharedString:\n// For shared strings, look up …","date":-62135596800,"description":"","objectID":"f37aba8445464c78ccc26b36aed390ac","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/retrieve+the+values+of+cells/","title":"Retrieve the values of cells"},{"content":"This section includes the following topics\n Calculate the sum of a range of cells Create a spreadsheet document Delete text from a cell Get a column heading Get worksheet information Insert a chart Insert a new worksheet Insert text into a cell Merge two adjacent cells Open a spreadsheet document for read-only access Open a spreadsheet document from a stream Retrieve a dictionary of all named ranges in a spreadsheet document Retrieve the values of cells  ","date":-62135596800,"description":"","objectID":"4c2678dd4aea2e6df20ee603f236288c","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/codecomparisonforcommonfeatureswithopenxml/","title":"Code Comparison for common features with OpenXML"},{"content":"Formula calculation engine is embedded in Aspose.Cells. It can not only re-calculate the formula imported from the designer file but also supports to calculate the results of formulas added at runtime.\nAdding Formulas \u0026amp;amp; Calculating Results\nAspose.Cells supports most of the formulas or functions that are the part of Microsoft Excel. Developers can use these formulas using API or Designer Spreadsheets. Aspose.Excel supports a huge set of Mathematical, String, Boolean, Date/Time, Statistical, Database, Lookup and Reference formulas.\nUse the Cell class\u0026amp;rsquo; Formula property to add a formula to a cell. When applying a formula to a cell, always begin the string with an equal sign (=) as you do when creating a formula in Microsoft Excel. Use a comma (,) to delimit function parameters.\nTo calclulate the results of the formulas, call the Excel class\u0026amp;rsquo; CalculateFormula method which processes all the formulas embedded in an Excel file. Read the url:list of functions supported by the CalculateFormula method.\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Excel object\nint sheetIndex = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[sheetIndex];\n//Adding a value to \u0026amp;ldquo;A1\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(1);\n//Adding a value to \u0026amp;ldquo;A2\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(2);\n//Adding a value to \u0026amp;ldquo;A3\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A3\u0026amp;rdquo;].PutValue(3);\n//Adding a SUM formula to \u0026amp;ldquo;A4\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A4\u0026amp;rdquo;].Formula = \u0026amp;ldquo;=SUM(A1:A3)\u0026amp;quot;;\n//Calculating the results of formulas\nworkbook.CalculateFormula();\n//Get the calculated value of the cell\nstring value = worksheet.Cells[\u0026amp;ldquo;A4\u0026amp;rdquo;].Value.ToString();\n//Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;Adding Formula.xls\u0026amp;rdquo;);\nCalculating Formulas Once Only\nWhen the user calls …","date":-62135596800,"description":"","objectID":"3c6111eb56f505ab407a6865dabaa4fc","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/calculate+or+recalculate+formulas+dynamically/","title":"Calculate or Recalculate formulas dynamically"},{"content":"Converting Excel to PDF\nPDF files are widely used for exchanging documents between organizations, government sectors and individuals. It is a standard document format and software developers are often asked to find a way to convert Microsoft Excel files into PDF documents. Aspose.Cells supports converting Excel files to PDF and maintains high visual fidelity in the conversion.\nAspose.Cells for .NET supports conversion from spreadsheets to PDF independently of other software. Save an Excel file to PDF using the Workbook class\u0026amp;rsquo; Save method. The Save method provides the SaveFormat.Pdf enum member that converts the native Excel files to PDF format.\nConverting directly from spreadsheet to PDF, instead of using a third-party tool or external API, has several advantages:\n Direct conversion does not require temporary files because the whole process can be done in memory. No XML file is needed so large files can easily be converted. The conversion speed is much faster.  To convert files to PDF:\n Instantiate an object of the Workbook class by calling its empty constructor. You may open/load an existing template file or skip this step if you are creating the workbook from scratch. Do your desired work (input data, apply formatting, set formulas, insert pictures or other drawing objects, and so on) on the spreadsheet using Aspose.Cells\u0026amp;rsquo; APIs. When the spreadsheet code is complete, call the Workbook class\u0026amp;rsquo; Save method to save the spreadsheet. The file format should be PDF so select Pdf (a pre-defined value) from the SaveFormat enumeration to generate the final PDF document.  Workbook workbook = new Workbook(openFileDialog1.FileName);\nworkbook.Save(saveFileDialog1.FileName, SaveFormat.Pdf);\nConverting Excel to MHTML\nMHTML combines normal HTML with external resources (that is, content that is usually linked in, like images, animations, audio and so on) into one file. They are used for emails with the .mht file extension. Aspose.Cells supports reading and writing …","date":-62135596800,"description":"","objectID":"6a88c4b6a1aa90fc08bb385ee1ecaeb5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/convert+between+excel+formats/","title":"Convert between Excel formats"},{"content":"Microsoft Excel (97 - 2007) enables you to encrypt and password protect your spreadsheets. It uses algorithms provided by a cryptographic service provider, or CSP, a set of cryptographic algorithms with different properties. The default CSP is \u0026amp;lsquo;Office 97/2000 Compatible\u0026amp;rsquo; or \u0026amp;lsquo;Weak Encryption (XOR)\u0026#39;. It\u0026amp;rsquo;s important to choose the proper encryption key length. Some CSPs don\u0026amp;rsquo;t support more than 40 or 56 bits. That\u0026amp;rsquo;s considered to be a weak encryption. For strong encryption, a minimum key length of 128 bits is required. Microsoft Windows contains CSPs that offer strong encryption types as well, for example the \u0026amp;lsquo;Microsoft Strong Cryptographic Provider\u0026amp;rsquo;. To give you an idea, 128 bits encryption is what banks use to encrypt the connection with their Internet Banking systems.\nAspose.Cells allows you to encrypt and password protect Microsoft Excel files with your desired encryption type.\nUsing Microsoft Excel\nTo set file encryption settings in Microsoft Excel (here Microsoft Excel 2003):\n  From the Tools menu, select Options. A dialog appears.\n  Select the Security tab.\n  Input a password and click **Advanced Options dialog **\n  Choose the encryption type and confirm the password.\n**Encryption Type dialog **\n  Encryption with Aspose.Cells\nThe following example shows how to encrypt and password protect an excel file using the Aspose.Cells API.\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring srcFileName = FilePath + \u0026amp;ldquo;Encrypting Excel Files.xlsx\u0026amp;rdquo;;\nstring destFileName = FilePath + \u0026amp;ldquo;Result Encrypting Excel Files.xlsx\u0026amp;rdquo;;\n//Open an excel file.\nWorkbook workbook = new Workbook(srcFileName);\n//Specify XOR encryption type.\nworkbook.SetEncryptionOptions(EncryptionType.XOR, 40);\n//Specify Strong Encryption type (RC4,Microsoft Strong Cryptographic Provider).\nworkbook.SetEncryptionOptions(EncryptionType.StrongCryptographicProvider, 128);\n//Password protect the file.\nworkbook.Settings.Password = …","date":-62135596800,"description":"","objectID":"e8435031fe678967066f2e4e30803eb6","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/encrypting+excel+files+using+aspose.cells/","title":"Encrypting Excel Files using Aspose.Cells"},{"content":"Sometimes, you want to convert or save a workbook with multiple worksheets into text format. For text formats (for example TXT, TabDelim, CSV etc.), by default both Microsoft Excel and Aspose.Cells save the contents of the active worksheet only.\nThe following code example explains how to save an entire workbook into text format. Load the source workbook which could be any Microsoft Excel or OpenOffice spreadsheet file (so XLS, XLSX, XLSM, XLSB, ODS and so on) with any number of worksheets.\nWhen the code is executed, it converts the data of all sheets in the workbook to TXT format.\nYou can modify the same example to save your file to CSV. By default, TxtSaveOptions.Separator is comma, so do not specify a separator if saving to CSV format.\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Save Workbook to Text or CSV Format.xlsx\u0026amp;rdquo;;\nstring destFileName = FilePath + \u0026amp;ldquo;Save Workbook to Text or CSV Format.txt\u0026amp;rdquo;;\n//Load your source workbook\nWorkbook workbook = new Workbook(FileName);\n//0-byte array\nbyte[] workbookData = new byte[0];\n//Text save options. You can use any type of separator\nTxtSaveOptions opts = new TxtSaveOptions();\nopts.Separator = \u0026amp;lsquo;\\t\u0026amp;rsquo;;\n//Copy each worksheet data in text format inside workbook data array\nfor (int idx = 0; idx \u0026amp;lt; workbook.Worksheets.Count; idx++)\n{\n//Save the active worksheet into text format\nMemoryStream ms = new MemoryStream();\nworkbook.Worksheets.ActiveSheetIndex = idx;\nworkbook.Save(ms, opts);\n//Save the worksheet data into sheet data array\nms.Position = 0;\nbyte[] sheetData = ms.ToArray();\n//Combine this worksheet data into workbook data array\nbyte[] combinedArray = new byte[workbookData.Length + sheetData.Length];\nArray.Copy(workbookData, 0, combinedArray, 0, workbookData.Length);\nArray.Copy(sheetData, 0, combinedArray, workbookData.Length, sheetData.Length);\nworkbookData = combinedArray;\n}\n//Save entire workbook data into file\nFile.WriteAllBytes(destFileName, …","date":-62135596800,"description":"","objectID":"816b80f0571dff984fb1257a3406e5ba","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/save+workbook+to+text+or+csv+format+using+aspose.cells/","title":"Save Workbook to Text or CSV Format using Aspose.Cells"},{"content":"Sometimes, it is necessary to include links to external files in formulas, for example to evaluate a cell or range value against them. Aspose.Cells provides this feature and this document explains how to use it.\nThe sample code below shows how to include external files in formulas.\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Set External Links in Formula.xlsx\u0026amp;rdquo;;\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Get first Worksheet\nWorksheet sheet = workbook.Worksheets[0];\n//Get Cells collection\nAspose.Cells.Cells cells = sheet.Cells;\n//Set formula with external links\ncells[\u0026amp;ldquo;A1\u0026amp;rdquo;].Formula = \u0026amp;ldquo;=SUM(\u0026#39;[book1.xls]Sheet1\u0026amp;rsquo;!A2, \u0026amp;lsquo;[book1.xls]Sheet1\u0026amp;rsquo;!A4)\u0026amp;quot;;\n//Set formula with external links\ncells[\u0026amp;ldquo;A2\u0026amp;rdquo;].Formula = \u0026amp;ldquo;=\u0026amp;rsquo;[book1.xls]Sheet1\u0026amp;rsquo;!A8\u0026amp;rdquo;;\n//Save the workbook\nworkbook.Save(FileName);\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/OpenXML Missing Features/Set External Links in Formula) Code.MSDN  Download Running Example\n Codeplex Github Code.MSDN  ","date":-62135596800,"description":"","objectID":"c6100f94ffa5aaccc4b9bc5a900e06b8","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/set+external+links+in+formulas+in+aspose.cells/","title":"Set External Links in Formulas in Aspose.Cells"},{"content":"Microsoft Excel allows you to set the formula calculation mode, that is, the way formulas are calculated. There are three possible values:\n Automatic - recalculate whenever something is changed, and every time a workbook is opened. Automatic except for data tables - recalculate whenever something is changed, but leaving out data tables. Manual - recalculate only when the user explicitly requests it by pressing F9 or CTRL+ALT+F9, or when the workbook is saved.  To set the formula calculation mode in Microsoft Excel:\n Select Formulas and then Calculation Options. Select one of the options.  Aspose.Cells also allows you to set the Formula Calculation Mode using Workbook.Settings.CalcMode mode property. You can assign it the CalcModeType enumeration which has one of the following values:\n CalcModeType.Automatic CalcModeType.AutomaticExceptTable CalcModeType.Manual  The following sample code first creates a workbook, then it sets the formula calculation mode to Manual and saves the workbook as output Excel file on disk.\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Setting Formula Calculation Mode.xlsx\u0026amp;rdquo;;\n//Create a workbook\nWorkbook workbook = new Workbook();\n//Set the Formula Calculation Mode to Manual\nworkbook.Settings.CalcMode = CalcModeType.Manual;\n//Save the workbook\nworkbook.Save(FileName, SaveFormat.Xlsx);\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/OpenXML Missing Features/Setting Formula Calculation Mode) Code.MSDN  Download Running Example\n Codeplex Github Code.MSDN  ","date":-62135596800,"description":"","objectID":"64e886cfb4cfc61625570e70118d5b6b","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/setting+formula+calculation+mode+of+workbook+in+aspose.cells/","title":"Setting Formula Calculation Mode of Workbook in Aspose.Cells"},{"content":"Suppose you have a worksheet filled with data.\nYou want to add a function in B2 that will calculate the sales tax for the first row of data. The tax is 9%. The formula that calculates the sales tax is: \u0026amp;ldquo;=A2*0.09\u0026amp;rdquo;. This article explains how to apply this formula with Aspose.Cells.\nAspose.Cells lets you specify a formula using the Cell.Formula property.\nThere are two options for adding formulas to the other cells (B3, B4, B5, and so on) in the column.\nEither do what you did for the first cell, effectively setting the formula for each cell, updating the cell reference accordingly (A30.09, A40.09, A5*0.09 and so on). This requires the cell references for each row to be updated. It also requires Aspose.Cells to parse each formula individually, which can be time consuming for larg spreadsheets and complex formulas. It also adds extra lines of codes although loops can cut them down somewhat.\nAnother approach is to use a shared formula. With a shared formula, the formulas are automatically updated for the cell references in each row so that the tax would be calculated properly. The Cell.SetSharedFormula method is more efficient than the first method.\nThe following example demonstrates how to use it.\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Setting Shared Formula.xlsx\u0026amp;rdquo;;\n//Instantiate a Workbook from existing file\nWorkbook workbook = new Workbook(FileName);\n//Get the cells collection in the first worksheet\nAspose.Cells.Cells cells = workbook.Worksheets[0].Cells;\n//Apply the shared formula in the range i.e.., B2:B14\ncells[\u0026amp;ldquo;B2\u0026amp;rdquo;].SetSharedFormula(\u0026amp;ldquo;=A2*0.09\u0026amp;rdquo;, 13, 1);\n//Save the excel file\nworkbook.Save(FileName, SaveFormat.Xlsx);\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/OpenXML Missing Features/Setting Shared Formula) Code.MSDN  Download Running Example\n Codeplex Github Code.MSDN  ","date":-62135596800,"description":"","objectID":"c321ed6f1a2968132bc2db12a906cf21","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/setting+shared+formula+in+aspose.cells/","title":"Setting Shared Formula in Aspose.Cells"},{"content":"This section includes the following topics\n Calculate or Recalculate formulas dynamically Convert between Excel formats Encrypting Excel Files using Aspose.Cells Generate reports, populate documents with data  Import Export data from document Insert or Delete Rows or Columns Smart Markers feature in Aspose.Cells  Grouping Data in Aspose.Cells Image Markers in Aspose.Cells Using Anonymous Types or Custom Objects in Aspose.Cells Using Nested Objects in Aspose.Cells     High-level programming with a workbook object model  Assemble Spreadsheets Copy fragments and worksheets between Workbooks  Copy Worksheets between Workbooks Copy Worksheets within a Workbook Move Worksheets within Workbook   Find and Replace in Spreadsheet   Managing Charts and Shapes in Aspose.Cells  Add WordArt Watermark to Chart in Aspose.Cells Add WordArt Watermark to Worksheet in Aspose.Cells Copy Shapes between Worksheets in Aspose.Cells Locking WordArt Watermark in Aspose.Cells   Rendering and Printing in Aspose.Cells  Convert charts to images Print spreadsheets Specify image resolution, quality, compression and other options   Save Workbook to Text or CSV Format using Aspose.Cells Set External Links in Formulas in Aspose.Cells Setting Formula Calculation Mode of Workbook in Aspose.Cells Setting Shared Formula in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"7fe88853bff8a8b66349c8c319ed7de9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/","title":"Missing Features in OpenXML"},{"content":"Import data from document\nData is the collection of raw facts and we create spreadsheet documents or reports to present these raw facts in a more meaningful manner. Normally, we add data to spreadsheets by ourselves but sometimes, we need to reuse existing data resources and here comes the need to import data to spreadsheets from different data sources. In this topic, we will discuss some techniques to import data to worksheets from different data sources.\nImporting Data Using Aspose.Cells\nWhen you use Aspose.Cells to open an Excel file, all data in the file is automatically imported but Aspose.Cells also supports to import data from different data sources. A few of these data sources are listed below:\n Array ArrayList DataTable DataColumn DataView DataGrid DataReader GridView  Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. Worksheet class provides a Cells collection.\nCells collection provides very useful methods to import data from different data sources.\nImporting from Array\nDevelopers can import data from an array to their worksheets by calling the ImportArray method of the Cells collection. There are many overloaded versions of the ImportArray method but a typical overload takes the following parameters:\n Array, represents the array object whose contents need to import Row Number, represents the row number of the first cell where the data will be imported Column Number, represents the column number of the first cell where the data will be imported Is Vertical, a boolean value that specifies to import data vertically or horizontally  //Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint i = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = …","date":-62135596800,"description":"","objectID":"20f38c4b19d1ec56c777dd9a88c50ff5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/import+export+data+from+document/","title":"Import Export data from document"},{"content":"Whether we are creating a new worksheet from scratch or we are working on an existing worksheet, we may need to add extra rows or columns into the worksheet to accomodate more data or for some other reason. Inversely, it may also be required to delete rows or columns from specified positions of the worksheet.\nManaging Rows/Columns\nAspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. Worksheet class provides a Cells collection that represents all cells in the worksheet.\nCells collection provides several methods to manage rows or columns in a worksheet, few of these are discussed below in more detail.\nInserting a Row\nDevelopers can insert a row into the worksheet at any location by calling the InsertRow method of the Cells collection. InsertRow method takes the index of the row where the new row will be inserted.\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(MyDir + \u0026amp;ldquo;Row and Column Operation.xls\u0026amp;rdquo;, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook workbook = new Workbook(fstream);\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Inserting a row into the worksheet at 3rd position\nworksheet.Cells.InsertRow(2);\n//Saving the modified Excel file\nworkbook.Save(MyDir + \u0026amp;ldquo;Inserting Row.xls\u0026amp;rdquo;);\n//Closing the file stream to free all resources\nfstream.Close();\nInserting Multiple Rows\nSometimes, developers may need to insert multiple rows into the worksheet. It can be done by calling the InsertRows method of the Cells collection. InsertRows method takes two parameters:\n Row Index, the index of the row from where the new rows will be inserted Number of Rows, total number of rows that need to be inserted  //Creating a file stream …","date":-62135596800,"description":"","objectID":"bec3b4a7092add2de7fbd05f41db7089","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/insert+or+delete+rows+or+columns/","title":"Insert or Delete Rows or Columns"},{"content":"This section includes the following topics\n Import Export data from document Insert or Delete Rows or Columns Smart Markers feature in Aspose.Cells  Grouping Data in Aspose.Cells Image Markers in Aspose.Cells Using Anonymous Types or Custom Objects in Aspose.Cells Using Nested Objects in Aspose.Cells    ","date":-62135596800,"description":"","objectID":"4cd1900abea46b9d70befd99162191b8","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/","title":"Generate reports, populate documents with data"},{"content":"In some Excel reports you might need to break the data into groups to make it easier to read and analyze. One of the primary purposes for breaking data into groups is to run calculations (perform summary operations) on each group of records.\nAspose.Cells smart markers allow you to group your data by field(s) and place summary rows in between data sets or data groups. For example, if grouping data by Customers.CustomerID, you can add a summary record every time the group changes.\nThe example code snippets that follow shows how to group data in an Excel report using smart markers.\nParameters\nFollowing are some of the smart marker parameters used for grouping data. group:normal/merge/repeat\nWe support three types of group that you can choose between.\n normal - The group by field(s) value is not be repeated for the corresponding records in the column; instead they are printed once per data group. merge - The same behavior as for the normal parameter, except that it merges the cells in the group by field(s) for each group set. repeat - The group by field(s) value is repeated for the corresponding records.  If you have multiple parameters, separate them with a commas, but no space: parameterA,parameterB,parameterC\nExample\nThis example shows some of the grouping parameters in action. It uses the Northwind.mdb Microsoft Access database and extract data from the table named \u0026amp;ldquo;Order Details\u0026amp;rdquo;. We create a designer file called SmartMarker_Designer.xls in Microsoft Excel and put smart markers into various cells in worksheets. The markers are processed to fill the worksheets. The data is placed and organized by a group field.\nThe designer file has two worksheets. In the first we put smart markers with grouping parameters as shown in the screenshot below. Three smart markers (with grouping parameters) are placed: \u0026amp;amp;=Order Details.OrderID(group:merge,skip:1), \u0026amp;amp;=Order Details.Quantity(subtotal9:Order Details.OrderID), and \u0026amp;amp;=Order …","date":-62135596800,"description":"","objectID":"0629eeaee264aa2a0fc77dfe747e0ea9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/smartmarkersfeatureinasposecells/grouping+data+in+aspose.cells/","title":"Grouping Data in Aspose.Cells"},{"content":"Aspose.Cells smart markers support image markers too. This section shows you how to insert pictures using smart markers.\nImage Parameters\nSmart marker parameters for managing images.\n Picture:FitToCell - Auto-fit the image to the cell’s row height and column width. Picture:ScaleN - Scale height and width to N percent. Picture:Width:Nin\u0026amp;amp;Height:Nin - Render the image N inches high and N inches wide. You can also sepecify Left and Top positions (in points).  //Get the image data.\nbyte[] imageData = File.ReadAllBytes(\u0026amp;ldquo;Thumbnail.jpg\u0026amp;rdquo;);\n//Create a datatable.\nDataTable t = new DataTable(\u0026amp;ldquo;Table1\u0026amp;rdquo;);\n//Add a column to save pictures.\nDataColumn dc = t.Columns.Add(\u0026amp;ldquo;Picture\u0026amp;rdquo;);\n//Set its data type.\ndc.DataType = typeof(object);\n//Add a new new record to it.\nDataRow row = t.NewRow();\nrow[0] = imageData;\nt.Rows.Add(row);\n//Add another record (having picture) to it.\nimageData = File.ReadAllBytes(\u0026amp;ldquo;Desert.jpg\u0026amp;rdquo;);\nrow = t.NewRow();\nrow[0] = imageData;\nt.Rows.Add(row);\n//Create WorkbookDesigner object.\nWorkbookDesigner designer = new WorkbookDesigner();\n//Open the temple Excel file.\ndesigner.Workbook = new Workbook(\u0026amp;ldquo;ImageSmartBook.xls\u0026amp;rdquo;);\n//Set the datasource.\ndesigner.SetDataSource(t);\n//Process the markers.\ndesigner.Process();\n//Save the Excel file.\ndesigner.Workbook.Save(\u0026amp;ldquo;out_ImageSmartBook.xls\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Image Markers (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"754f27b4171023e2ade5fd1b71568921","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/smartmarkersfeatureinasposecells/image+markers+in+aspose.cells/","title":"Image Markers in Aspose.Cells"},{"content":"Aspose.Cells also supports anonymous types or custom objects in smart markers. In below example Product class is need to be defined before use.\n//Instantiate the workbookdesigner object.\nWorkbookDesigner report = new WorkbookDesigner();\n//Get the first worksheet(default sheet) in the workbook.\nAspose.Cells.Worksheet w = report.Workbook.Worksheets[0];\n//Input some markers to the cells.\nw.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(\u0026amp;ldquo;Test\u0026amp;rdquo;);\nw.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(\u0026amp;quot;\u0026amp;amp;=MyProduct.Name\u0026amp;rdquo;);\nw.Cells[\u0026amp;ldquo;B2\u0026amp;rdquo;].PutValue(\u0026amp;quot;\u0026amp;amp;=MyProduct.Age\u0026amp;rdquo;);\n//Instantiate the list collection based on the custom class.\nIList list = new List();\n//Provide values for the markers using the custom class object.\nlist.Add(new MyProduct(\u0026amp;ldquo;Simon\u0026amp;rdquo;, 30));\nlist.Add(new MyProduct(\u0026amp;ldquo;Johnson\u0026amp;rdquo;, 33));\n//Set the data source.\nreport.SetDataSource(\u0026amp;ldquo;MyProduct\u0026amp;rdquo;, list);\n//Process the markers.\nreport.Process(false);\n//Save the excel file.\nreport.Workbook.Save(\u0026amp;ldquo;Smart Marker Customobjects.xls\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Using Custom Objects (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"94fcf5198b537c458452128b8c76f179","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/smartmarkersfeatureinasposecells/using+anonymous+types+or+custom+objects+in+aspose.cells/","title":"Using Anonymous Types or Custom Objects in Aspose.Cells"},{"content":"Aspose.Cells supports nested objects in smart markers, the nested objects should be simple.Individual class need to be defined by user for below code.\nWe use a simple template file. See the designer spreadsheet that contains some nested smart markers.\n//Initialize WorkbookDesigner object\nWorkbookDesigner designer = new WorkbookDesigner();\n//Load the template file\ndesigner.Workbook = new Workbook(\u0026amp;ldquo;SM_NestedObjects.xlsx\u0026amp;rdquo;);\n//Instantiate the List based on the class\nSystem.Collections.Generic.ICollection list = new System.Collections.Generic.List();\n//Create an object for the Individual class\nIndividual p1 = new Individual(\u0026amp;ldquo;Damian\u0026amp;rdquo;, 30);\n//Create the relevant Wife class for the Individual\np1.Wife = new Wife(\u0026amp;ldquo;Dalya\u0026amp;rdquo;, 28);\n//Create another object for the Individual class\nIndividual p2 = new Individual(\u0026amp;ldquo;Mack\u0026amp;rdquo;, 31);\n//Create the relevant Wife class for the Individual\np2.Wife = new Wife(\u0026amp;ldquo;Maaria\u0026amp;rdquo;, 29);\n//Add the objects to the list\nlist.Add(p1);\nlist.Add(p2);\n//Specify the DataSource\ndesigner.SetDataSource(\u0026amp;ldquo;Individual\u0026amp;rdquo;, list);\n//Process the markers\ndesigner.Process(false);\n//Save the Excel file.\ndesigner.Workbook.Save(\u0026amp;ldquo;out_SM_NestedObjects.xlsx\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Using Nested Object (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"e774af61b8bca5298d55a85cbe148bdf","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/smartmarkersfeatureinasposecells/using+nested+objects+in+aspose.cells/","title":"Using Nested Objects in Aspose.Cells"},{"content":"Smart markers are used to let Aspose.Cells know what information to place in an Microsoft Excel designer spreadsheet. Smart markers allow you to create templates that contain only specific information and formatting.\nDesigner Spreadsheet \u0026amp;amp; Smart Markers\nDesigner spreadsheets are standard Excel files that contain visual formatting, formulas and smart markers. They can contain smart markers that reference one or more data source, such as information from a project and information for related contacts. Smart markers are written into the cells where you want the information.\nAll smart markers start with \u0026amp;amp;=. An example of a data marker is \u0026amp;amp;=Party.FullName. If the data marker results in more than one item, for example, a complete row, then the following rows are moved down automatically to make room for all of the new information. Thus sub-totals and totals can be placed on the row immediately after the data marker to make calculations based on the inserted data. To make calculations on the inserted rows, use dynamic formulas.\nSmart markers consist of the data source and field name parts for most information. Special information may also be passed with variables and variable arrays. Variables always fill only one cell whereas variable arrays may fill several. Only use one data marker per cell. Unused smart markers are removed.\nSmart marker may also contain parameters. Parameters allow you to modify how the information will be laid out. They are appended to the end of smart marker in parenthesis as a comma separated list.\nSmart Marker Options\n \u0026amp;amp;=DataSource.FieldName \u0026amp;amp;=Data Source.Field Name \u0026amp;amp;=$VariableName \u0026amp;amp;=$VariableArray \u0026amp;amp;==DynamicFormula \u0026amp;amp;=\u0026amp;amp;=RepeatDynamicFormula  Parameters\nThe following parameters are allowed:\n noadd - Do not add extra rows to fit data. skip:n - Skip n number of rows for each row of data. ascending:n or descending:n - Sort data in smart markers. If n is 1, then the column is the first key of the sorter. The data …","date":-62135596800,"description":"","objectID":"5ffe7d563f46ae0e95a77610e062201b","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/generatereportspopulatedocumentswithdata/smartmarkersfeatureinasposecells/","title":"Smart Markers feature in Aspose.Cells"},{"content":"This section describes how to:\nCreate a new Excel file from scratch and add worksheet to it.\n Add worksheets to designer spreadsheets. Access worksheets using the sheet name. Remove a worksheet from an Excel file using its sheet name. Remove a worksheet from an Excel file using its sheet index. Aspose.Cells provides a class, Workbook that represents an Excel file. The Workbook class contains a Worksheets collection that allows to access to each worksheet in the Excel file.  A worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing worksheets.\nAdding Worksheets to a New Excel File\nTo create a new Excel file programmatically:\n Create an object of the Workbook class. Call the Add method of the Worksheets collection. An empty worksheet is added to the Excel file * automatically. It can be referenced by passing the sheet index of the new worksheet to the Worksheets collection. Obtain a worksheet reference. Perform work on the worksheets. Save the new Excel file with new worksheets by calling the Workbook class\u0026amp;rsquo; Save method.  //Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint i = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[i];\n//Setting the name of the newly added worksheet\nworksheet.Name = \u0026amp;ldquo;My Worksheet\u0026amp;rdquo;;\n//Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;Adding Worksheet.xls\u0026amp;rdquo;);\nAdding Worksheets to a Designer Spreadsheet\nThe process of adding worksheets to a designer spreadsheet is the same as that of adding a new worksheet, except that the Excel file already exists so should be opened before worksheets are added. A designer spreadsheet can be opened by the Workbook class.\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(\u0026amp;ldquo;book1.xls\u0026amp;rdquo;, …","date":-62135596800,"description":"","objectID":"b4b8d85321ed2d2e3213b8a60c79458b","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/assemble+spreadsheets/","title":"Assemble Spreadsheets"},{"content":"When we click on find button following is the code:\nif (TXBX_Find.Text != \u0026amp;ldquo;\u0026amp;quot;)\n{\nworkbook = new Workbook(FOD_OpenFile.FileName);\nFindOptions Opts = new FindOptions();\nOpts.LookInType = LookInType.Values;\nOpts.LookAtType = LookAtType.Contains;\nstring found = \u0026amp;ldquo;\u0026amp;quot;;\nCell cell = null;\nforeach (Worksheet sheet in workbook.Worksheets)\n{\nfound += Environment.NewLine + \u0026amp;ldquo;Sheet: \u0026amp;quot; + sheet.Name + \u0026amp;ldquo;:\u0026amp;quot;;\ndo\n{\ncell = sheet.Cells.Find(TXBX_Find.Text, cell, Opts);\nif (cell != null)\nfound += cell.Name + \u0026amp;ldquo;,\u0026amp;quot;;\n}\nwhile (cell != null);\n}\nLBL_FindResults.Text = found;\n}\nClicking on Replace button following code is executed:\nif (TXBX_Find.Text != \u0026amp;quot;\u0026amp;rdquo; \u0026amp;amp;\u0026amp;amp; TXBX_Replace.Text!=\u0026amp;rdquo;\u0026amp;quot;)\n{\nworkbook = new Workbook(FOD_OpenFile.FileName);\nFindOptions Opts = new FindOptions();\nOpts.LookInType = LookInType.Values;\nOpts.LookAtType = LookAtType.Contains;\nstring found = \u0026amp;ldquo;\u0026amp;quot;;\nCell cell = null;\nforeach (Worksheet sheet in workbook.Worksheets)\n{\ndo\n{\ncell = sheet.Cells.Find(TXBX_Find.Text, cell, Opts);\nif (cell != null)\n{\nstring celltext = cell.Value.ToString();\ncelltext = celltext.Replace(TXBX_Find.Text, TXBX_Replace.Text);\ncell.PutValue(celltext);\n}\n}\nwhile (cell != null);\n}\nLBL_FindResults.Text = \u0026amp;ldquo;Replaced All Existing Values, Save the file now\u0026amp;rdquo;;\n}\nDownload Sample Code\n Codeplex Github Code.MSDN [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Find and replace (Aspose.Cells).zip)  Attachments: Find and Replace.png (image/png)\n","date":-62135596800,"description":"","objectID":"afa8ad822390184ad6ecb59e046fe1a3","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/find+and+replace+in+spreadsheet/","title":"Find and Replace in Spreadsheet"},{"content":"This section includes the following topics\n Assemble Spreadsheets Copy fragments and worksheets between Workbooks  Copy Worksheets between Workbooks Copy Worksheets within a Workbook Move Worksheets within Workbook   Find and Replace in Spreadsheet  ","date":-62135596800,"description":"","objectID":"7249e1043421b02122085bd69e3df78f","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/","title":"High-level programming with a workbook object model"},{"content":"Aspose.Cells provides a method, Aspose.Cells.Worksheet.Copy() used to copy data and formatting from a source worksheet to another worksheet within or between workbooks. The method takes the source worksheet object as a parameter.\nThe following example shows how to copy a worksheet from one workbook to another workbook.\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Copy Sheet between Workbook.xlsx\u0026amp;rdquo;;\n//Create a new Workbook.\nWorkbook excelWorkbook0 = new Workbook();\n//Get the first worksheet in the book.\nWorksheet ws0 = excelWorkbook0.Worksheets[0];\n//Put some data into header rows (A1:A4)\nfor (int i = 0; i \u0026amp;lt; 5; i++)\n{\nws0.Cells[i, 0].PutValue(string.Format(\u0026amp;ldquo;Header Row {0}\u0026amp;quot;, i));\n}\n//Put some detail data (A5:A999)\nfor (int i = 5; i \u0026amp;lt; 1000; i++)\n{\nws0.Cells[i, 0].PutValue(string.Format(\u0026amp;ldquo;Detail Row {0}\u0026amp;quot;, i));\n}\n//Define a pagesetup object based on the first worksheet.\nPageSetup pagesetup = ws0.PageSetup;\n//The first five rows are repeated in each page\u0026amp;hellip;\n//It can be seen in print preview.\npagesetup.PrintTitleRows = \u0026amp;ldquo;$1:$5\u0026amp;rdquo;;\n//Create another Workbook.\nWorkbook excelWorkbook1 = new Workbook();\n//Get the first worksheet in the book.\nWorksheet ws1 = excelWorkbook1.Worksheets[0];\n//Name the worksheet.\nws1.Name = \u0026amp;ldquo;MySheet\u0026amp;rdquo;;\n//Copy data from the first worksheet of the first workbook into the\n//first worksheet of the second workbook.\nws1.Copy(ws0);\n//Save the excel file.\nexcelWorkbook1.Save(FileName);\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Copy between Workbooks (Aspose.Cells).zip)  The following example shows how to copy a worksheet from one workbook to another workbook.\n//Create a new Workbook.\nWorkbook excelWorkbook0 = new Workbook();\n//Get the first worksheet in the book.\nWorksheet ws0 = excelWorkbook0.Worksheets[0];\n//Put some data into header rows (A1:A4)\nfor (int i = 0; i \u0026amp;lt; 5; i++)\n{ …","date":-62135596800,"description":"","objectID":"875fa5b5660a4960c20144212ba1a922","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/copyfragmentsandworksheetsbetweenworkbooks/copy+worksheets+between+workbooks/","title":"Copy Worksheets between Workbooks"},{"content":"Aspose.Cells provides an overloaded method, Aspose.Cells.WorksheetCollection.AddCopy(), that is used to add a worksheet to the collection and copies data from an existing worksheet. One version of the method takes the index of the source worksheet as a parameter. The other version takes the name of the source worksheet as the parameter.\nThe following example shows how to copy an existing worksheet within a workbook.\n//Create a new Workbook.\n//Open an existing Excel file.\nWorkbook wb = new Workbook(\u0026amp;ldquo;ResultedBook.xls\u0026amp;rdquo;);\n//Create a Worksheets object with reference to\n//the sheets of the Workbook.\nWorksheetCollection sheets = wb.Worksheets;\n//Copy data to a new sheet from an existing\n//sheet within the Workbook.\nsheets.AddCopy(\u0026amp;ldquo;MySheet\u0026amp;rdquo;);\n//Save the Excel file.\nwb.Save(\u0026amp;ldquo;Copy Worksheet.xls\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github Code.MSDN [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Copy Worksheet (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"c230cc81aeff89033fbe95b1555fe792","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/copyfragmentsandworksheetsbetweenworkbooks/copy+worksheets+within+a+workbook/","title":"Copy Worksheets within a Workbook"},{"content":"Aspose.Cells provides a method, Aspose.Cells.Worksheet.MoveTo(), used to move a worksheet to another location in the spreadsheet. The method takes the target worksheet index as a parameter.\nThe following example shows how to move a worksheet to another location within the workbook.\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Move Worksheet.xlsx\u0026amp;rdquo;;\n//Open an existing excel file.\nWorkbook wb = new Workbook(FileName);\n//Create a Worksheets object with reference to\n//the sheets of the Workbook.\nWorksheetCollection sheets = wb.Worksheets;\n//Get the first worksheet.\nWorksheet worksheet = sheets[0];\nstring test = worksheet.Name;\n//Move the first sheet to the third position in the workbook.\nworksheet.MoveTo(2);\n//Save the excel file.\nwb.Save(FileName);\nDownload Sample Code\n Codeplex Github Code.MSDN [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Move Worksheet (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"77c6c7d327fb13cbac9eb7326b421af0","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/copyfragmentsandworksheetsbetweenworkbooks/move+worksheets+within+workbook/","title":"Move Worksheets within Workbook"},{"content":"Sometimes, you do need a number of worksheets with common formatting and data. For example, if you work with quarterly budgets, you might want to create a workbook with sheets that contain the same column headings, row headings, and formulas. There is a way to do this: by creating one sheet and then copying it. Aspose.Cells supports copying and moving worksheets within or between workbooks. Worksheet, complete with data, formatting, tables, matrices, charts, images and other objects, are copied with the highest degree of precision.\nMoving or Copying Sheets using Microsoft Excel\nFollowing are the steps involved for copying and moving worksheets within or between workbooks in Microsoft Excel.\n To move or copy sheets to another workbook, open the workbook that will receive the sheets. Switch to the workbook that contains the sheets you want to move or copy, and then select the sheets. On the Edit menu, click Move or Copy Sheet. In the To book dialog, click the workbook to receive the sheets. To move or copy the selected sheets to a new workbook, click New Book. In the Before sheet box, click the sheet before which you want to insert the moved or copied sheets. To copy the sheets instead of moving them, select the Create a copy check box.  This section includes the following topics\n Copy Worksheets between Workbooks Copy Worksheets within a Workbook Move Worksheets within Workbook  ","date":-62135596800,"description":"","objectID":"c5102c6ba707d54c81847c66d925dba4","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/high-levelprogrammingwithaworkbookobjectmodel/copyfragmentsandworksheetsbetweenworkbooks/","title":"Copy fragments and worksheets between Workbooks"},{"content":"You can use WordArt to add special text effects to spreadsheets. For example, stretch a title, decorate text, make text fit a preset shape, or apply the affected text to a chart’s plot area as a watermark. The WordArt becomes an object that you can move or position in your spreadsheets to add decoration.\nThe following example shows how to add a WordArt shape as a watermark for an existing chart’s plot area. The example uses a template Excel file that already contains the chart.\n**The input file **\nThe output file\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Add WordArt Watermark to Chart.xlsx\u0026amp;rdquo;;\n//Open the existing excel file.\nWorkbook workbook = new Workbook(FileName);\n//Get the chart in the first worksheet.\nAspose.Cells.Charts.Chart chart = workbook.Worksheets[0].Charts[0];\n//Add a WordArt watermark (shape) to the chart\u0026amp;rsquo;s plot area.\nAspose.Cells.Drawing.Shape wordart = chart.Shapes.AddTextEffectInChart(MsoPresetTextEffect.TextEffect2,\n\u0026amp;ldquo;CONFIDENTIAL\u0026amp;rdquo;, \u0026amp;ldquo;Arial Black\u0026amp;rdquo;, 66, false, false, 1200, 500, 2000, 3000);\n//Get the shape\u0026amp;rsquo;s fill format.\nAspose.Cells.Drawing.MsoFillFormat wordArtFormat = wordart.FillFormat;\n//Set the transparency.\nwordArtFormat.Transparency = 0.9;\n//Get the line format and make it invisible.\nAspose.Cells.Drawing.MsoLineFormat lineFormat = wordart.LineFormat;\nlineFormat.IsVisible = false;\n//Save the excel file.\nworkbook.Save(FileName);\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/OpenXML Missing Features/Add WordArt Watermark to Chart) Code.MSDN  Download Running Example\n Codeplex Github Code.MSDN  Attachments: Add WordArt Watermark to Chart-001.png (image/png) Add WordArt Watermark to Chart-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"1807f164a9b91aeaa95ff24f8760be8e","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/managingchartsandshapesinasposecells/add+wordart+watermark+to+chart+in+aspose.cells/","title":"Add WordArt Watermark to Chart in Aspose.Cells"},{"content":"Use WordArt to add special text effects to spreadsheets. For example, stretch a title across the top of the file, decorate text, and make text fit a preset shape, or apply text to an Excel sheet as a background watermark. The WordArt becomes an object that you can move or position in spreadsheets to add decoration.\nThe following example shows how to add a WordArt shape to set a background watermark for a worksheet.\nAfter running the code the output file contains a pale red WordArt watermark.\n**The output file **\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Add WordArt Watermark to Worksheet.xlsx\u0026amp;rdquo;;\n//Instantiate a new Workbook\nWorkbook workbook = new Workbook();\n//Get the first default sheet\nWorksheet sheet = workbook.Worksheets[0];\n//Add Watermark\nAspose.Cells.Drawing.Shape wordart = sheet.Shapes.AddTextEffect(MsoPresetTextEffect.TextEffect1,\n\u0026amp;ldquo;CONFIDENTIAL\u0026amp;rdquo;, \u0026amp;ldquo;Arial Black\u0026amp;rdquo;, 50, false, true\n, 18, 8, 1, 1, 130, 800);\n//Get the fill format of the word art\nMsoFillFormat wordArtFormat = wordart.FillFormat;\n//Set the color\nwordArtFormat.ForeColor = System.Drawing.Color.Red;\n//Set the transparency\nwordArtFormat.Transparency = 0.9;\n//Make the line invisible\nMsoLineFormat lineFormat = wordart.LineFormat;\nlineFormat.IsVisible = false;\n//Save the file\nworkbook.Save(FileName);\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/OpenXML Missing Features/Add WordArt Watermark) Code.MSDN  Download Running Example\n Codeplex Github Code.MSDN  Attachments: Add WordArt Watermark to Worksheet-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"139c38b15ad7b753ab509ceb33fb1abe","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/managingchartsandshapesinasposecells/add+wordart+watermark+to+worksheet+in+aspose.cells/","title":"Add WordArt Watermark to Worksheet in Aspose.Cells"},{"content":"Sometimes, you need to copy elements on a worksheet, for example pictures, charts and other drawing objects, between worksheets. Aspose.Cells supports this feature. Charts, images and other objects can be copied with the highest degree of precision.\nThis article gives you a detailed understanding on how to copy shapes between worksheets. To illustrate, it creates a console application in Visual Studio.Net, copies pictures, charts and other drawing objects between worksheets with using Aspose.Cells.\nBelow is the code for copying a chart from worksheet to another\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Copy Shapes between Worksheets.xlsx\u0026amp;rdquo;;\n//Open the template file\nWorkbook workbook = new Workbook(FileName);\n//Get the Chart from the \u0026amp;ldquo;Chart\u0026amp;rdquo; worksheet.\nAspose.Cells.Charts.Chart source = workbook.Worksheets[\u0026amp;ldquo;Chart\u0026amp;rdquo;].Charts[0];\nAspose.Cells.Drawing.ChartShape cshape = source.ChartObject;\n//Copy the Chart to the Result Worksheet\nworkbook.Worksheets[\u0026amp;ldquo;Result\u0026amp;rdquo;].Shapes.AddCopy(cshape, 20, 0, 2, 0);\n//Save the Worksheet\nworkbook.Save(FileName);\n\\\nNote: For more details about copying multiple shapes you need to visit here\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML Spreadsheets/OpenXML Missing Features/Copy Shapes between Worksheets) Code.MSDN  Download Running Example\n Codeplex Github Code.MSDN  ","date":-62135596800,"description":"","objectID":"d7430ab369e8471ce169fada2726a6a6","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/managingchartsandshapesinasposecells/copy+shapes+between+worksheets+in+aspose.cells/","title":"Copy Shapes between Worksheets in Aspose.Cells"},{"content":"Aspose.Cells APIs allow to add WordArt watermarks on the worksheet in a way that the WordArt becomes an object that you can be moved and positioned on the worksheet. It is also possible to lock the WordArt object for any interaction such as editing, movement \u0026amp;amp; selection. This article explains the usage of Shape.SetLockedProperty method to lock a few aspects of the watermark.\nAspose.Cells APIs allow to lock certain aspects of the watermark so that the user interaction could be limited or completely blocked. The following code snippet demonstrates the usage of Aspose.Cells for .NET API to lock selection, movement, editing and re-sizing of the watermark by creating a spreadsheet from scratch.\nC#\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Locking WordArt Watermark.xlsx\u0026amp;rdquo;;\n//Instantiate a new Workbook\nWorkbook workbook = new Workbook();\n//Get the first default sheet\nWorksheet sheet = workbook.Worksheets[0];\n//Add Watermark\nAspose.Cells.Drawing.Shape wordart = sheet.Shapes.AddTextEffect(MsoPresetTextEffect.TextEffect1,\n\u0026amp;ldquo;CONFIDENTIAL\u0026amp;rdquo;, \u0026amp;ldquo;Arial Black\u0026amp;rdquo;, 50, false, true\n, 18, 8, 1, 1, 130, 800);\n//Lock Shape Aspects\nwordart.IsLocked = true;\nwordart.SetLockedProperty(ShapeLockType.Selection, true);\nwordart.SetLockedProperty(ShapeLockType.ShapeType, true);\nwordart.SetLockedProperty(ShapeLockType.Move, true);\nwordart.SetLockedProperty(ShapeLockType.Resize, true);\nwordart.SetLockedProperty(ShapeLockType.Text, true);\n//Get the fill format of the word art\nMsoFillFormat wordArtFormat = wordart.FillFormat;\n//Set the color\nwordArtFormat.ForeColor = Color.Red;\n//Set the transparency\nwordArtFormat.Transparency = 0.9;\n//Make the line invisible\nMsoLineFormat lineFormat = wordart.LineFormat;\nlineFormat.IsVisible = false;\n//Save the file\nworkbook.Save(FileName);\nDownload Sample Code\n Codeplex [Github](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs OpenXML …","date":-62135596800,"description":"","objectID":"c45fa60552c9bcf34e78fee1b6518dc5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/managingchartsandshapesinasposecells/locking+wordart+watermark+in+aspose.cells/","title":"Locking WordArt Watermark in Aspose.Cells"},{"content":"This section includes the following topics:\n Add WordArt Watermark to Chart in Aspose.Cells Add WordArt Watermark to Worksheet in Aspose.Cells Copy Shapes between Worksheets in Aspose.Cells Locking WordArt Watermark in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"3e566378a6e5d5c71518e5db45ccb178","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/managingchartsandshapesinasposecells/","title":"Managing Charts and Shapes in Aspose.Cells"},{"content":"Charts are visually appealing and make it easy for users to see comparisons, patterns, and trends in data. For instance, rather than having to analyze several columns of worksheet numbers, you can see at a glance whether sales are falling or rising over quarterly periods, or how the actual sales compare to the projected sales.Sometimes, you do need to present the chart in your applications or web pages. You might need to insert it into a Word Document, a PDF file, a Power Point Presentation or in some other scenario. Simply you want the chart should be rendered as an image, so that you may paste it into your applications with ease. A Picture is worthwhile. Frequently, in the course of work, one has to present statistical and graphical information in an easy to understand and an easy to maintain manner.You might try Office Automation but Office automation has its own drawbacks. There are several reasons and issues involved: E.g., Security, Stability, Scalability/Speed, Price, Features etc. In Short, there are many reasons, with the top one being that Microsoft themselves strongly recommends against Office automation from software solutions: Considerations for server-side Automation of Office.There is another option which you can use to convert an Excel Chart to an image using Aspose.Cells.\nConverting Chart To EMF\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Excel object\nint sheetIndex = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by\n//passing its sheet index\nWorksheet worksheet = workbook.Worksheets[sheetIndex];\n//Adding a sample value to \u0026amp;ldquo;A1\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(50);\n//Adding a sample value to \u0026amp;ldquo;A2\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(100);\n//Adding a sample value to \u0026amp;ldquo;A3\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A3\u0026amp;rdquo;].PutValue(150);\n//Adding a sample value to \u0026amp;ldquo;B1\u0026amp;rdquo; cell …","date":-62135596800,"description":"","objectID":"aa322e3b2d9c16db4e841ec651adfdfe","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/renderingandprintinginasposecells/convert+charts+to+images/","title":"Convert charts to images"},{"content":"Page setup settings also provide several Print Options (also referred as Sheet Options ) that allow users to control their printed pages of worksheets. These print options allow users to:\n Select a specific Print Area of the worksheet Print Titles Print Gridlines Print Row/Column Headings Achieve Draft Quality Print Comments Print Cell Errors Define Page Ordering Setting Print/Sheet Options  Aspose.Cells supports all of these print options and developers can easily configure these options for their desired worksheets using the several properties offered by PageSetup class. The usage of these properties of PageSetup class is discussed below in more detail.\nSet Print Area\nBy default, only that print area is selected that incorporates the entire area of the worksheet, which contains data but developers can also establish a specific print area of the worksheet according to their desire.\nTo select a specific print area, developers can use set PrintArea method of the PageSetup class. You can provide the cells range of the print area to this method as argument.\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Obtaining the reference of the PageSetup of the worksheet\nPageSetup pageSetup = workbook.Worksheets[0].PageSetup;\n//Specifying the cells range (from A1 cell to T35 cell) of the print area\npageSetup.PrintArea = \u0026amp;ldquo;A1:T35\u0026amp;rdquo;;\nSet Print Titles\nAspose.Cells allows you to designate row and column headers that you want to have repeated on all pages of your printed worksheet. To do so, developers can use set PrintTitleColumns and setPrintTitleRows methods of the PageSetup class.\nThe rows or columns (to be repeated on all pages of the printed worksheet) are defined by passing their row or column numbers. For example, rows are defined as \\ $1: \\ $2 and columns are defined as \\ $A: \\ $B.\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Obtaining the reference of the PageSetup of the worksheet\nAspose.Cells.PageSetup pageSetup …","date":-62135596800,"description":"","objectID":"cfc5b4725b47d96f0e0170d39394cf18","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/renderingandprintinginasposecells/print+spreadsheets/","title":"Print spreadsheets"},{"content":"string FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Chart to Image with Image Options.tiff\u0026amp;rdquo;;\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Excel object\nint sheetIndex = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by\n//passing its sheet index\nWorksheet worksheet = workbook.Worksheets[sheetIndex];\n//Adding a sample value to \u0026amp;ldquo;A1\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(50);\n//Adding a sample value to \u0026amp;ldquo;A2\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(100);\n//Adding a sample value to \u0026amp;ldquo;A3\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;A3\u0026amp;rdquo;].PutValue(150);\n//Adding a sample value to \u0026amp;ldquo;B1\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;B1\u0026amp;rdquo;].PutValue(4);\n//Adding a sample value to \u0026amp;ldquo;B2\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;B2\u0026amp;rdquo;].PutValue(20);\n//Adding a sample value to \u0026amp;ldquo;B3\u0026amp;rdquo; cell\nworksheet.Cells[\u0026amp;ldquo;B3\u0026amp;rdquo;].PutValue(50);\n//Adding a chart to the worksheet\nint chartIndex = worksheet.Charts.Add(Aspose.Cells.Charts.ChartType.Column, 5, 0, 15, 5);\n//Accessing the instance of the newly added chart\nAspose.Cells.Charts.Chart chart = worksheet.Charts[chartIndex];\n//Adding Series Collection (chart data source) to the chart ranging from \u0026amp;ldquo;A1\u0026amp;rdquo; cell to \u0026amp;ldquo;B3\u0026amp;rdquo;\nchart.NSeries.Add(\u0026amp;ldquo;A1:B3\u0026amp;rdquo;, true);\nImageOrPrintOptions options = new ImageOrPrintOptions();\noptions.HorizontalResolution = 300;\noptions.VerticalResolution = 300;\noptions.TiffCompression = TiffCompression.CompressionLZW;\noptions.IsCellAutoFit = false;\noptions.ImageFormat = System.Drawing.Imaging.ImageFormat.Tiff;\noptions.OnePagePerSheet = true;\n//Converting chart to image.\nchart.ToImage(FileName, options);\nDownload Sample Code\n Codeplex Github Code.MSDN [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Chart to Image with Image Options (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"59d910163c35f5c00657a6927eb67bb3","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/renderingandprintinginasposecells/specify+image+resolution%2c+quality%2c+compression+and+other+options/","title":"Specify image resolution, quality, compression and other options"},{"content":"This section includes the following topics\n Convert charts to images Print spreadsheets Specify image resolution, quality, compression and other options  ","date":-62135596800,"description":"","objectID":"388b8ba80408efa5e87f719e2e5206d2","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsforopenxml/missingfeaturesinopenxml/renderingandprintinginasposecells/","title":"Rendering and Printing in Aspose.Cells"},{"content":"What is Microsoft Dynamics CRM?\nMicrosoft Dynamics CRM is a customer relationship management software package developed by Microsoft. Out of the box, the product focuses mainly on Sales, Marketing, and Service (help desk) sectors, but Microsoft has been marketing Dynamics CRM as an XRM platform and has been encouraging partners to use its proprietary (.NET based) framework to customize it. It is part of the Microsoft Dynamics family of business applications.\nDynamics CRM is a server-client application, which, like Microsoft SharePoint, is primarily an IIS-based web application which also supports extensive web services interfaces. Clients access Dynamics CRM either by using a Browser or by a thick client plug-in to Microsoft Outlook.\nAspose.Cells for .Net\nAspose.Cells for .NET provides the most flexible group of components that enable .NET Application to create and manage Excel Spreadsheets without requiring Microsoft Excel to be installed on the server. Aspose.Cells is one of the leading components for all types of Excel formats manipulation.\nAspose.Cells not only supports spreadsheet generation and other basic file formatting features, but also supports a number of advanced features. These advanced features make it much more convenient for the developers to manipulate spreadsheet contents, cells formatting and files protection. Aspose.Cells also allows importing data into spreadsheets from different data sources, adding common and complex Mathematical, DateTime, Financial, Text Formulas / Functions, supports manipulation of charts, pictures, comments, drawing objects and controls etc.\nAspose.Cells for CRM\nAspose .NET can be used with Dynamics CRM in multiple ways. When you are working with Spreadsheets, either it is spreadsheet generation or processing, you need to look at the Aspose APIs which can deliver quick results with minimum lines of code. Checkout our add-on examples below, these add-on will help you using Aspose in your application.\nThis section includes …","date":-62135596800,"description":"","objectID":"cdfaf4d83464e8083df9dc5a4a6123db","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforcrm/","title":"Aspose.Cells .NET for CRM"},{"content":"You can download the latest source code at:\n CodePlex. [GitHub](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Dynamics CRM/Aspose.Plugins.UpdateImportTool). Code.MSDN.  Export Data from CRM to Excel\nSaveFileDialog fileDialog = new SaveFileDialog();\nfileDialog.DefaultExt = \u0026amp;ldquo;.xlsx\u0026amp;rdquo;;\nfileDialog.FileName = \u0026amp;ldquo;Aspose ImportTool Export.xlsx\u0026amp;rdquo;;\nif (fileDialog.ShowDialog().Value)\n{\nstring FileName = fileDialog.FileName;\nWorkbook workbook = new Workbook();\nworkbook.Worksheets.Add(\u0026amp;ldquo;Aspose Export\u0026amp;rdquo;);\nWorksheet MyWorksheet = workbook.Worksheets[\u0026amp;ldquo;Aspose Export\u0026amp;rdquo;];\nint i = 0;\nforeach (string attrib in SelectedAttributes)\nMyWorksheet.Cells[0, i++].Value = attrib;\nint Row = 1,cell=0;\nforeach (Entity record in Result.Entities)\n{\ncell = 0;\nforeach (string attribute in SelectedAttributes)\n{\nif (record.Contains(attribute))\n{\nMyWorksheet.Cells[Row,cell].Value = record[attribute].ToString();\n}\ncell++;\n}\nRow++;\n}\nworkbook.Save(FileName, SaveFormat.Xlsx);\n}\nImport Data from Excel to CRM\nif (ctrl.CrmConnectionMgr != null \u0026amp;amp;\u0026amp;amp; ctrl.CrmConnectionMgr.CrmSvc != null \u0026amp;amp;\u0026amp;amp; ctrl.CrmConnectionMgr.CrmSvc.IsReady)\n{\nCrmServiceClient svcClient = ctrl.CrmConnectionMgr.CrmSvc;\nif (svcClient.IsReady)\n{\nOpenFileDialog fileDialog = new OpenFileDialog();\nfileDialog.DefaultExt = \u0026amp;ldquo;.xlsx\u0026amp;rdquo;;\nif (fileDialog.ShowDialog().Value)\n{\nstring FileName = fileDialog.FileName;\nWorkbook workbook = new Workbook(FileName);\nWorksheet MyWorksheet = workbook.Worksheets[\u0026amp;ldquo;Aspose Export\u0026amp;rdquo;];\nDataTable dt = MyWorksheet.Cells.ExportDataTable(0, 0, MyWorksheet.Cells.Rows.Count, MyWorksheet.Cells.Columns.Count, true);\nforeach (DataRow dr in dt.Rows)\n{\nEntity CrmRecord = new Entity(SelectedEntity);\nforeach (DataColumn th in dt.Columns)\n{\nCrmRecord.Attributes.Add(th.ColumnName, dr[th.ColumnName].ToString());\n}\nCreateRequest req = new CreateRequest();\nreq.Target = CrmRecord;\nCreateResponse res = …","date":-62135596800,"description":"","objectID":"9511d558829a0fcb632ff2ed570c7a56","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforcrm/updateimporttoolfordynamicscrm/extend+and+contribute+to+crm+update+import+tool/","title":"Extend and Contribute to CRM Update Import Tool"},{"content":"Below are the screenshot steps we need to follow to use the tool:\n To create a connection with CRM, Click Login to CRM and add your CRM organization information Once the connection is established, select Entity and select the list of desired Attributes. Get from CRM: Click here to show the data from CRM in the Grid Export To Excel: Click here to Export the data from CRM to Excel file by providing the file. Get From Excel: Click here and choose a source Excel file, and it will display the data from Excel file in the Grid. Export to CRM: Click here and choose a source Excel file and it will Import the Data from Excel back in CRM in the selected Entity. (Keep Note that the column names in Excel file should match the Schema name in CRM)  Attachments: 1.jpg (image/jpeg) 2.jpg (image/jpeg) 2015-08-12_23-45-29.jpg (image/jpeg)\n","date":-62135596800,"description":"","objectID":"6490f17657b8b8c025a427d5c02d1844","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforcrm/updateimporttoolfordynamicscrm/using+and+configuring+crm+update+import+tool/","title":"Using and Configuring CRM Update Import Tool"},{"content":"Contents Summary\n Introduction System Requirements and Supported Platforms  System Requirements Supported Platforms   Downloading Installing or Uninstalling  Applying License   Using Support Extend and Contribute  Introduction\nThe Aspose Update Import Tool is an open source add-on to be used in Microsoft Dynamic CRM. This add-on is capable of automatically Update and/or Export data from CRM to Aspose.Cells Spreadsheets.We don\u0026amp;rsquo;t need to do anything manually and install this add-on and make our work easier and faster.\nThis add-on provides functionality to automatically Update and/or Export from CRM. One click will Import/Export the record to/from CRM.\nMajor features of this Addon are:\n Establish the connection to desired CRM. Allow user to select desired Entity and Fields. Getting the record from CRM display in grid. Export the record to Aspose.Cells Spreadsheet. Get the record from Aspose.Cells Spreadsheet display in grid. Export the record from grid to CRM.  System Requirements and Supported Platforms\nSystem Requirements\nIn order to install and use Aspose .Net Update Import Tool for Microsoft Dynamics CRM you need to have one of the following CRM version installed\n Microsoft Dynamics CRM 2013. Microsoft Dynamics CRM 2015. Microsoft Dynamics CRM Online.  Please feel free to contact us if you find any issues in installing or using this Add-on.\nSupported Platforms\nThis addon will work with all version of Microsoft Dynamics CRM:\n Microsoft Dynamics CRM 2013. Microsoft Dynamics CRM 2015. Microsoft Dynamics CRM Online.  Downloading\nYou can download Aspose .NET Document Generator for CRM from one of the following locations:\n Codeplex Github Code.MSDN  Installing or Uninstalling\nIt is a custom developed tool and doesn\u0026amp;rsquo;t require any installation or uninstall. You simply need to download the tool and extract it on your drive, and it is ready to use.\nApplying License\nAdd the following code in the form by providing the path to the license file:\nif (LicenseFilePath …","date":-62135596800,"description":"","objectID":"d8cc3079676f17e1029e897b49b4a39f","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforcrm/updateimporttoolfordynamicscrm/","title":"Update Import Tool for Dynamics CRM"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing\n5 Using 5.1 Dynamic Forms Settings\n5.2 Using Dynamic Form (Submit)\n5.3 Export Saved Data\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n     Introduction    Aspose.Cells Dynamic Forms for DNN Module allows users to Generate Dynamic Questionnaire and Surveys, save user input into Excel Spreadsheet and Export the results into Excel, Text, CSV and OpenDocument Spreadsheet using Aspose.Cells. This module demonstrates the powerful spreadsheet building feature provided by Aspose.Cells for .NET.\nModule Features\nThis initial version of the module is enriched with the following features to make the Forms Building and Export process simple and easy to use\n Save Form Field Settings in Excel Save Form’s User Input Data in to Excel Allow to Add new and Update existing Form Fields Allow to Add TextBox, Multiline TextBox, RadioButtons, CheckBox and DropDownList, DropDownList Items type Fields Allow to Add/Update Label for each Fields Allow to Show/Hide Form Fields Auto Fit Columns to contents length and apply Header Column formatting as Bold Text Export Data to Microsoft Excel Documents (.xls, .xlsx and .xlsb) Export Data to Tab delimited text document (*.txt) Export Data to CSV (Comma delimited) (*.csv) Export Data to OpenDocument Spreadsheet (*.ods) Option to select desired output format before exporting. Exported document is automatically sent to browser for downloading.  System Requirements and Supported Platforms\nSystem Requirements\nIn order to setup Aspose.Cells .NET for DNN modules you need to have the following requirements met:\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nSupported Platforms\nAspose.Cells .NET for DNN modules currently support\n DNN …","date":-62135596800,"description":"","objectID":"97aff4869f82ee03d4239873964189af","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfordnn/aspose.cells+forms+for+dnn/","title":"Aspose.Cells Forms for DNN"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing\n5 Using\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n     Introduction    Aspose .NET DNN Data Exporter to Excel Module allows users to export data directly from local or remote database tables, views and by custom query into Microsoft Excel or OpenOffice Spreadsheet. This module demonstrates the powerful spreadsheet building feature provided by Aspose.Cells.\nModule Features\nThis initial version of the module is enriched with the following cool features to make the Export process simple and easy to use\n Allow to connect Local MS SQL Server Database Allow to connect Remote MS SQL Server Database Populate all Tables from connected database Populate all Views from connected database Allow to write Custom Query Auto Fit Columns to contents length. Allow to skip string more than 32k in excel cells (LoadOptions) Apply Header Column formating as Bold Text Allow to use as Data Source (Table, Views, Custom Query) Export Data to Microsoft Excel Documents (.xls, .xlsx and .xlsb) Export Data to Tab delimited text document (*.txt) Export Data to CSV (Comma delimited) (*.csv) Export Data to OpenDocument Spreadsheet (*.ods) Option to select desired output format before exporting. Exported document is automatically sent to browser for downloading.   .\nSystem Requirements and Supported Platforms\nSystem Requirements\nIn order to setup Aspose.Cells .NET for DNN modules you need to have the following requirements met:\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nSupported Platforms\nAspose.Cells .NET for DNN modules currently support\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nDownloading\nYou can …","date":-62135596800,"description":"","objectID":"e6de269d4d92787cb307e2b4a6295629","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfordnn/dnn+database+data+exporter+to+excel/","title":"DNN Database Data Exporter to Excel"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing\n5 Using\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n     Introduction    Aspose .NET Export Users and Roles to Excel Module allows developers to export DNN Users along with their roles into Microsoft Excel or OpenOffice Spreadsheet. This module demonstrates the powerful spreadsheet building feature provided by Aspose.Cells.\nModule Features\nThis initial version of the module is enriched with the following cool features to make the Export process simple and easy to use.\n Export users to Microsoft Excel Documents (.xls, .xlsx and .xlsb) Export users to Tab delimited text document (*.txt) Export users to CSV (Comma delimited) (*.csv) Export users to OpenDocument Spreadsheet (*.ods) Option to select desired output format before exporting. Option to export all or selected users to selected output document format. Exported document is automatically sent to browser for downloading.  System Requirements and Supported Platforms\nSystem Requirements\nIn order to setup Aspose.Cells .NET for DNN modules you need to have the following requirements met:\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nSupported Platforms\nAspose.Cells .NET for DNN modules currently support\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nDownloading\nYou can download Aspose .NET Cells Export Users and Roles to Excel for DNN module from one of the following locations\n CodePlex  DNN Store  Github   Installing\nOnce downloaded, please follow these steps to install the module into your DNN website:\n Log into your site as either Host or another super-user level account. Navigate to the Host menu and select Extensions. Click …","date":-62135596800,"description":"","objectID":"4ba630b7a5ff35134c37d4b711f5be86","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfordnn/dnn+export+users+and+roles+to+excel/","title":"DNN Export Users and Roles to Excel"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing\n5 Using\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n     Introduction    Aspose .NET Import Users from Excel Module allows developers to import bulk users from Excel file. This module demonstrates the powerful spreadsheet feature by Aspose.Cells.\nModule Features\nThis initial version of the module is enriched with the following cool features to make the Import process simple and easy to use:\n Allows you to upload Excel file and automatically filters out existing users. Automatically skips the existing users to avoid any confusion. Generate dynamic passwords for the newly created users. Assigns \u0026amp;ldquo;Registered Users\u0026amp;rdquo; and \u0026amp;ldquo;Subscribers\u0026amp;rdquo; Security roles to newly created users.  System Requirements and Supported Platforms\nSystem Requirements\nIn order to setup Aspose.Cells .NET for DNN modules you need to have the following requirements met:\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nSupported Platforms\nAspose.Cells .NET for DNN modules currently support\n DNN 7.0 +  Please feel free to contact us if you wish to install these modules on other versions of DNN.\nDownloading\nYou can download Aspose .NET Cells Import Users from Excel for DNN module from one of the following locations\n CodePlex  DNN Store  Github   Installing\nOnce downloaded, please follow these steps to install the module into your DNN website:\n Log into your site as either Host or another super-user level account. Navigate to the Host menu and select Extensions. Click Install Extension Wizard. As directed browse to the location of the downloaded zip file, select it then click Open. Click Next, accept the license, continue through the install. When finished click …","date":-62135596800,"description":"","objectID":"1cacd82e9179d7a73671649f87ac12d6","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfordnn/dnn+import+users+from+excel/","title":"DNN Import Users from Excel"},{"content":"This section has the following topics:\n DNN Database Data Exporter to Excel DNN Export Users and Roles to Excel DNN Import Users from Excel Aspose.Cells Forms for DNN  ","date":-62135596800,"description":"","objectID":"2404e979934513a5e58139cb8290da06","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfordnn/","title":"Aspose.Cells .NET for DNN"},{"content":"Project Aspose.Cells for NPOI (HSSF and XSSF) shows how different tasks can be performed using Aspose.Cells .NET APIs in comparison with NPOI. The project also covers the features that are only available in Aspose.Cells APIs but not in NPOI for dealing with Microsoft Excel files or OpenOffice Spreadsheets.\nThis project is helpful for developers who want to compare NPOI with Aspose.Cells OR migrate from NPOI to Aspose.Cells.\nContents Summary\n Getting Started  Introduction  Why Aspose for NPOI (HSSF and XSSF)? What\u0026amp;rsquo;s NPOI What\u0026amp;rsquo;s HSSF and XSSF Aspose.Cells for .NET   System Requirements and Supported Platforms  System Requirements Supported Platforms   Downloading and Installing  Downloading Installing   Using  How to apply Aspose License?   Support, Extend and Contribute  Support Extend and Contribute Source Code How to configure the source code Source code overview     Sample Code Examples  Getting Started\nIntroduction\nWhy Aspose for NPOI (HSSF and XSSF)?\nThe developers looking for file format APIs may need to walk through the features provided by the APIs available on the market. Mostly following factors are considered when choosing an option:\n Features Efforts required to use the API Comparison between libraries to determine which is better  If you are a .NET developer looking to choose a file format API to process files, you may want to compare NPOI with Aspose.\nProject Aspose.Cells for NPOI (HSSF and XSSF) shows how different tasks can be performed using Aspose.Cells .NET APIs in comparison with NPOI. The project also covers the features that are only available in Aspose.Cells APIs but not in NPOI for dealing with word processing documents.\nThis project is helpful for developers who want to compare NPOI with Aspose.Cells OR migrate from NPOI to Aspose.Cells.\nWhat\u0026amp;rsquo;s NPOI\nNPOI is the .NET version of POI Java project at http://poi.apache.org/. POI is an open source project which can help you read/write xls, doc, ppt files.\nRead more at …","date":-62135596800,"description":"","objectID":"e8f027bd1698f0a63cc3c923c4ad42dd","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/","title":"Aspose.Cells .NET for NPOI"},{"content":"This section has the following topics:\n Working with Data in NPOI and Aspose.Cells Working With Formatting Features in NPOI and Aspose.Cells Working with Workbooks in NPOI and Aspose.Cells Working With Worksheets in NPOI and Aspose.Cells  ","date":-62135596800,"description":"","objectID":"a3ab3c6d6bf4aee906773cd98f3c0030","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/","title":"Code Comparison for common features with NPOI"},{"content":"Aspose.Cells - Getting Cell Contents\nCells[0] or Cells[name] method is available to access cells.\nC#\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\nWorksheet sheet1 = workbook.Worksheets[0];\nCells cells = sheet1.Cells;\nRange range = sheet1.Cells.MaxDisplayRange;\nint tcols = range.ColumnCount;\nint trows = range.RowCount;\nfor (int i = 0 ; i \u0026amp;lt; trows; i++)\n{\nfor (int j = 0 ; j \u0026amp;lt; tcols ; j++)\n{\nif (cells[i, j].Type != CellValueType.IsNull)\n{\nConsole.WriteLine(cells[i, j].Name + \u0026amp;quot; - \u0026amp;quot; + cells[i, j].Value);\n}\n}\n}\nNPOI - HSSF XSSF - Getting Cell Contents\nNPOI provides Cell class to access various properties of cells.\nC#\nIWorkbook wb = new XSSFWorkbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\nISheet sheet1 = wb.GetSheetAt(0);\nfor (int index = 0; index \u0026amp;lt;= sheet1.LastRowNum; index++)\n{\nIRow row = sheet1.GetRow(index);\nforeach (ICell cell in row.Cells)\n{\nCellReference cellRef = new CellReference(row.RowNum, cell.ColumnIndex);\nConsole.Write(cellRef.FormatAsString());\nConsole.Write(\u0026amp;rdquo; - \u0026amp;ldquo;);\nswitch (cell.CellType)\n{\ncase CellType.String:\nConsole.Write(cell.StringCellValue);\nbreak;\ncase CellType.Numeric:\nif (DateUtil.IsCellDateFormatted(cell))\nConsole.Write(cell.DateCellValue);\nelse\nConsole.Write(cell.NumericCellValue);\nbreak;\ncase CellType.Boolean:\nConsole.Write(cell.BooleanCellValue);\nbreak;\ncase CellType.Formula:\nConsole.Write(cell.CellFormula);\nbreak;\n}\nConsole.WriteLine();\n}\n}\nDownload Running Code\nDownload Getting Cell Contents form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Data Handling Features.\n","date":-62135596800,"description":"","objectID":"e4758e1e785fbc5decafb140c64d3940","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithdatainnpoiandasposecells/getting+cell+contents/","title":"Getting Cell Contents"},{"content":"Aspose.Cells - Insert Hyperlinks in Worksheet\nAdding a Link to a Cell in the Same File\nIt is possible to add hyperlinks to cells in the same Excel file by calling the Hyperlink collection\u0026amp;rsquo;s Add method. The Add method works for both internal and external hyperlinks.\nC#\nWorkbook workbook = new Workbook(); // Creating a Workbook object\nWorksheet sheet = workbook.Worksheets.Add(\u0026amp;ldquo;Hyperlinks\u0026amp;rdquo;);\nHyperlinkCollection hyperlinks = sheet.Hyperlinks;\nStyle style = new Style();\nstyle.Font.Underline = FontUnderlineType.Single;\nstyle.Font.Color = System.Drawing.Color.Blue;\nsheet.Cells[0, 0].Value = \u0026amp;ldquo;URL Link\u0026amp;rdquo;;\nhyperlinks.Add(0, 0, 1, 1, \u0026amp;ldquo;http://www.aspose.com\u0026amp;rdquo;);\nsheet.Cells[0, 0].SetStyle(style);\n//link to a file in the current directory\nsheet.Cells[1, 0].Value = \u0026amp;ldquo;File Link\u0026amp;rdquo;;\nhyperlinks.Add(1, 0, 1, 1, \u0026amp;ldquo;book1.xls\u0026amp;rdquo;);\nsheet.Cells[1, 0].SetStyle(style);\n//e-mail link\nsheet.Cells[2, 0].Value = \u0026amp;ldquo;Email Link\u0026amp;rdquo;;\nhyperlinks.Add(2, 0, 1, 1, \u0026amp;ldquo;mailto:marketplace@aspose.com?subject=Hyperlinks\u0026amp;rdquo;);\nsheet.Cells[2, 0].SetStyle(style);\n//link to a place in this workbook\nWorksheet sheet2 = workbook.Worksheets.Add(\u0026amp;ldquo;Target ISheet\u0026amp;rdquo;);\nHyperlinkCollection hyperlinks2 = sheet2.Hyperlinks;\nsheet2.Cells[3, 0].Value = \u0026amp;ldquo;Worksheet Link\u0026amp;rdquo;;\nhyperlinks2.Add(3, 0, 1, 1, \u0026amp;ldquo;Target ISheet!A4\u0026amp;rdquo;);\nsheet2.Cells[3, 0].SetStyle(style);\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nAdding a Link to an External File\nIt is possible to add hyperlinks to cells in the same Excel file by calling the Hyperlink collection\u0026amp;rsquo;s Add method. The Add method works for both internal and external hyperlinks. One version of the overloaded method takes the following parameters:\n Cell name,the name of the cell the hyperlink will be added to. Number of rows, the number of rows in this hyperlink range. Number of columns, the number of columns in this hyperlink range. URL, the address of the target cell.  C#\n//Instantiating a …","date":-62135596800,"description":"","objectID":"fdb193249a1757069856dbbf330d2f49","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithdatainnpoiandasposecells/insert+hyperlinks+in+worksheet/","title":"Insert Hyperlinks in Worksheet"},{"content":"Aspose.Cells - New Line in Cells\nTo ensure that text in a cell can be read, explicit line breaks and text wrapping can be applied. Text wrapping turns one line into several in a cell, which explicit line breaks put in breaks exactly where you want them.\nTo wrap text in a cell, use the Aspose.Cells.Style.IsTextWrapped property.\nC#\nWorkbook workbook = new Workbook(); // Creating a Workbook object\nWorksheet sheet = workbook.Worksheets[0];\nsheet.Cells[2,2].Value = \u0026amp;ldquo;Use \\n with word wrap on to create a new line\u0026amp;rdquo;;\n//Get Cell\u0026amp;rsquo;s Style\nStyle style = sheet.Cells[2, 2].GetStyle();\n//Set Text Wrap property to true\nstyle.IsTextWrapped = true;\n//Set Cell\u0026amp;rsquo;s Style\nsheet.Cells[2, 2].SetStyle(style);\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nNPOI - HSSF XSSF - New Line in Cells\nCellStyle.setWrapText should be true for wrapped text.\nC#\nIWorkbook workbook = new XSSFWorkbook();\nISheet sheet = workbook.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\nIRow row = sheet.CreateRow(2);\nICell cell = row.CreateCell(2);\ncell.SetCellValue(\u0026amp;ldquo;Use \\n with word wrap on to create a new line\u0026amp;rdquo;);\n//to enable newlines you need set a cell styles with wrap=true\nICellStyle cs = workbook.CreateCellStyle();\ncs.WrapText = true;\ncell.CellStyle = cs;\nFileStream sw = File.Create(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nworkbook.Write(sw);\nsw.Close();\nDownload Running Code\nDownload New Line in Cells form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Line Breaks and Text Wrapping.\n","date":-62135596800,"description":"","objectID":"27816bc62b11c23fe1b123a661e983c9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithdatainnpoiandasposecells/new+line+in+cells/","title":"New Line in Cells"},{"content":"This section has the following topics:\n Getting Cell Contents Insert Hyperlinks in Worksheet New Line in Cells  ","date":-62135596800,"description":"","objectID":"ebff6492e48ff3523d9265fa7cfa27f4","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithdatainnpoiandasposecells/","title":"Working with Data in NPOI and Aspose.Cells"},{"content":"Aspose.Cells - Working With Borders\nC#\nWorkbook workbook = new Workbook(); // Creating a Workbook object\nworkbook.Worksheets.Add();\nWorksheet worksheet = workbook.Worksheets[0];\n// Style the cell with borders all around.\nStyle style = workbook.CreateStyle();\nstyle.SetBorder(BorderType.BottomBorder, CellBorderType.Thin, Color.Black);\nstyle.SetBorder(BorderType.LeftBorder, CellBorderType.Thin, Color.Green);\nstyle.SetBorder(BorderType.RightBorder, CellBorderType.Thin, Color.Blue);\nstyle.SetBorder(BorderType.TopBorder, CellBorderType.MediumDashed, Color.Black);\nCell cell = worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\ncell.SetStyle(style);\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;, SaveFormat.Xlsx); //Workbooks can be saved in many formats\nNPOI - HSSF XSSF - Working With Borders\nC#\nIWorkbook wb = new XSSFWorkbook();\n// Create a Worksheet\nISheet ws = wb.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\nICellStyle style = wb.CreateCellStyle();\n//Setting the line of the top border\nstyle.BorderTop = BorderStyle.Thick;\nstyle.TopBorderColor = 256;\nstyle.BorderLeft = BorderStyle.Thick;\nstyle.LeftBorderColor = 256;\nstyle.BorderRight = BorderStyle.Thick;\nstyle.RightBorderColor = 256;\nstyle.BorderBottom = BorderStyle.Thick;\nstyle.BottomBorderColor = 256;\nIRow row = ws.CreateRow(0);\nICell cell = row.CreateCell(1);\ncell.CellStyle = style;\nFileStream sw = File.Create(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Working With Borders form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Data Formating Features.\n","date":-62135596800,"description":"","objectID":"63e03dc6972d4fcba6a7faf7282684b3","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithformattingfeaturesinnpoiandasposecells/working+with+borders/","title":"Working With Borders"},{"content":"Aspose.Cells - Working With Colors\nC#\nWorkbook workbook = new Workbook(); // Creating a Workbook object\nworkbook.Worksheets.Add();\nWorksheet worksheet = workbook.Worksheets[0];\n//Accessing cell from the worksheet\nCell cell = worksheet.Cells[\u0026amp;ldquo;B2\u0026amp;rdquo;];\nStyle style = cell.GetStyle();\n//Setting the foreground color to yellow\nstyle.BackgroundColor = Color.Yellow;\n//Setting the background pattern to vertical stripe\nstyle.Pattern = BackgroundType.VerticalStripe;\n//Saving the modified style to the \u0026amp;ldquo;B2\u0026amp;rdquo; cell.\ncell.SetStyle(style);\n// === Setting Foreground ===\n//Adding custom color to the palette at 55th index\nColor color = Color.FromArgb(212, 213, 0);\nworkbook.ChangePalette(color, 55);\n//Accessing cell from the worksheet\ncell = worksheet.Cells[\u0026amp;ldquo;B3\u0026amp;rdquo;];\n//Adding some value to the cell\ncell.PutValue(\u0026amp;ldquo;Hello Aspose!\u0026amp;quot;);\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;, SaveFormat.Xlsx); //Workbooks can be saved in many formats\nNPOI - HSSF XSSF - Working With Colors\nC#\nIWorkbook wb = new XSSFWorkbook();\n// Create a Worksheet\nISheet ws = wb.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\n// Aqua background\nICellStyle style = wb.CreateCellStyle();\nstyle.FillBackgroundColor = IndexedColors.Aqua.Index;\nstyle.FillPattern = FillPattern.BigSpots;\nIRow row = ws.CreateRow(0);\nICell cell = row.CreateCell(1);\ncell.SetCellValue(\u0026amp;ldquo;X\u0026amp;rdquo;);\ncell.CellStyle = style;\n// Orange \u0026amp;ldquo;foreground\u0026amp;rdquo;, foreground being the fill foreground not the font color.\nstyle = wb.CreateCellStyle();\nstyle.FillBackgroundColor = IndexedColors.Orange.Index;\nstyle.FillPattern = FillPattern.SolidForeground;\ncell = row.CreateCell(2);\ncell.SetCellValue(\u0026amp;ldquo;X\u0026amp;rdquo;);\ncell.CellStyle = style;\nFileStream sw = File.Create(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Working With Colors form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Data Formating Features.\n","date":-62135596800,"description":"","objectID":"41c4055346e8414674eb117703ed1205","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithformattingfeaturesinnpoiandasposecells/working+with+colors/","title":"Working With Colors"},{"content":"Aspose.Cells - Working With Fonts\nC#\nWorkbook workbook = new Workbook(); // Creating a Workbook object\nworkbook.Worksheets.Add();\nWorksheet worksheet = workbook.Worksheets[0];\n// Adding some value to cell\nCell cell = worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\ncell.PutValue(\u0026amp;ldquo;This is Aspose test of fonts!\u0026amp;quot;);\n// Setting the font name to \u0026amp;ldquo;Times New Roman\u0026amp;rdquo;\nStyle style = cell.GetStyle();\nFont font = style.Font;\nfont.Name = \u0026amp;ldquo;Courier New\u0026amp;rdquo;;\nfont.Size = 24;\nfont.IsBold = true;\nfont.Underline = FontUnderlineType.Single;\nfont.Color = Color.Blue;\nfont.IsStrikeout = true;\ncell.SetStyle(style);\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;, SaveFormat.Xlsx); //Workbooks can be saved in many formats\nNPOI - HSSF XSSF - Working With Fonts\nC#\nIWorkbook wb = new XSSFWorkbook();\n// Create a Worksheet\nISheet ws = wb.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\n// Create a new font and alter it\nIFont font = wb.CreateFont();\nfont.FontHeightInPoints = 24;\nfont.FontName = \u0026amp;ldquo;Courier New\u0026amp;rdquo;;\nfont.IsItalic = true;\nfont.IsStrikeout = true;\n// Fonts are set into a style so create a new one to use.\nICellStyle style = wb.CreateCellStyle();\nstyle.SetFont(font);\nIRow row = ws.CreateRow(0);\n// Create a cell and put a value in it.\nICell cell = row.CreateCell(1);\ncell.SetCellValue(\u0026amp;ldquo;Thisi s a test of fonts\u0026amp;rdquo;);\ncell.CellStyle = style;\nFileStream sw = File.Create(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Working With Fonts form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Data Formating Features.\n","date":-62135596800,"description":"","objectID":"a659174c97d86b07283fd5f31585ff80","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithformattingfeaturesinnpoiandasposecells/working+with+fonts/","title":"Working With Fonts"},{"content":"This section has the following topics:\n Working With Borders Working With Colors Working With Fonts  ","date":-62135596800,"description":"","objectID":"3840bf2726031bab80fcb1f76f250737","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithformattingfeaturesinnpoiandasposecells/","title":"Working With Formatting Features in NPOI and Aspose.Cells"},{"content":"Aspose.Cells - Add Data in Cells\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. Workbook class contains a WorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides a Cellscollection. Each item in the Cells collection represents an object of the Cell class.\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Accessing the added worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\nint x = 1;\nfor (int i = 1; i \u0026amp;lt;= 15; i++)\n{\nfor (int j = 0; j \u0026amp;lt; 15; j++)\n{\nworksheet.Cells[i, j].Value = x++;\n}\n}\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nNPOI HSSF XSSF - Add Data in Cells\nIn NPOI row.createCell(1).setCellValue can be used to add data in cells.\nC#\nIWorkbook workbook = new XSSFWorkbook();\nISheet sheet1 = workbook.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\nsheet1.CreateRow(0).CreateCell(0).SetCellValue(\u0026amp;ldquo;This is a Sample\u0026amp;rdquo;);\nint x = 1;\nfor (int i = 1; i \u0026amp;lt;= 15; i++)\n{\nIRow row = sheet1.CreateRow(i);\nfor (int j = 0; j \u0026amp;lt; 15; j++)\n{\nrow.CreateCell(j).SetCellValue(x++);\n}\n}\nFileStream sw = File.Create(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nworkbook.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Add Data in Cells form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Adding Data to Cells.\n","date":-62135596800,"description":"","objectID":"5d3d209fff43d31a6102a5736e7377eb","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworkbooksinnpoiandasposecells/add+data+in+cells/","title":"Add Data in Cells"},{"content":"Aspose.Cells - Create New Workbook\nWorkbook class is available for simple use\nC#\nWorkbook workbook = new Workbook(); // Creating a Workbook object\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;, SaveFormat.Xlsx); //Workbooks can be saved in many formats\nNPOI - HSSF XSSF - Create New Workbook\nCreate new Workbook using Workbook class and save using FileOutputStream.\nC#\nIWorkbook workbook = new XSSFWorkbook();\nworkbook.CreateSheet(\u0026amp;ldquo;Sheet A1\u0026amp;rdquo;);\nworkbook.CreateSheet(\u0026amp;ldquo;Sheet A2\u0026amp;rdquo;);\nworkbook.CreateSheet(\u0026amp;ldquo;Sheet A3\u0026amp;rdquo;);\nFileStream sw = File.Create(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nworkbook.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Create New Workbook form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit File Handling Features.\n","date":-62135596800,"description":"","objectID":"e43a4d35958914611083378233a3392f","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworkbooksinnpoiandasposecells/create+new+workbook/","title":"Create New Workbook"},{"content":"Aspose.Cells - Set Print Area\nBy default, only the print area incorporates all areas of the worksheet that contain data. Developers can establish a specific print area of the worksheet.\nTo select a specific print area, use the PageSetup class\u0026amp;rsquo; PrintArea property. Assign a cell range that defines the print area to this property.\nC#\n// Instantiating a Workbook object\nWorkbook workbook = new Workbook();\nworkbook.Worksheets.Add(\u0026amp;ldquo;new sheet\u0026amp;rdquo;);\nworkbook.Worksheets.Add(\u0026amp;ldquo;second sheet\u0026amp;rdquo;);\nWorksheet sheet1 = workbook.Worksheets[0];\nsheet1.Cells[0, 0].Value = 1;\nsheet1.Cells[0, 1].Value = 2;\nsheet1.Cells[0, 2].Value = 3;\nsheet1.Cells[1, 0].Value = 4;\nsheet1.Cells[1, 1].Value = 5;\nWorksheet sheet2 = workbook.Worksheets[1];\nsheet2.Cells[0, 0].Value = 2.1;\nsheet2.Cells[0, 4].Value = 2.2;\nsheet2.Cells[0, 5].Value = 2.3;\nsheet2.Cells[1, 4].Value = 2.4;\nsheet2.Cells[1, 5].Value = 2.5;\n// Accessing the first worksheet in the Workbook file\nWorksheet sheet = workbook.Worksheets[0];\n// Obtaining the reference of the PageSetup of the worksheet\nPageSetup pageSetup = sheet.PageSetup;\n// Specifying the cells range (from A1 cell to F20 cell) of the print area\npageSetup.PrintArea = \u0026amp;ldquo;A1:F20\u0026amp;rdquo;;\nworkbook.Save(\u0026amp;ldquo;test.xlsx\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Set Print Area\nWorkbook.setPrintArea method is available to set page properties of print area.\nC#\nIWorkbook wb = new XSSFWorkbook();\nISheet sheet1 = wb.CreateSheet(\u0026amp;ldquo;new sheet\u0026amp;rdquo;);\nISheet sheet2 = wb.CreateSheet(\u0026amp;ldquo;second sheet\u0026amp;rdquo;);\n// Set the columns to repeat from column 0 to 2 on the first sheet\nIRow row1 = sheet1.CreateRow(0);\nrow1.CreateCell(0).SetCellValue(1);\nrow1.CreateCell(1).SetCellValue(2);\nrow1.CreateCell(2).SetCellValue(3);\nIRow row2 = sheet1.CreateRow(1);\nrow2.CreateCell(1).SetCellValue(4);\nrow2.CreateCell(2).SetCellValue(5);\nIRow row3 = sheet2.CreateRow(1);\nrow3.CreateCell(0).SetCellValue(2.1);\nrow3.CreateCell(4).SetCellValue(2.2);\nrow3.CreateCell(5).SetCellValue(2.3);\nIRow …","date":-62135596800,"description":"","objectID":"1d3ca05224dc85460d080cb9bebc516d","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworkbooksinnpoiandasposecells/set+print+area/","title":"Set Print Area"},{"content":"This section has the following topics:\n Add Data in Cells Create New Workbook Set Print Area  ","date":-62135596800,"description":"","objectID":"dd8f4b2eefcfec0491e4cd5d6392d46c","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworkbooksinnpoiandasposecells/","title":"Working with Workbooks in NPOI and Aspose.Cells"},{"content":"Aspose.Cells - Add Comment in Worksheet\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint sheetIndex = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[sheetIndex];\n//Setting the name of the newly added worksheet\nworksheet.Name = \u0026amp;ldquo;Adding Comment in Execl Cell\u0026amp;rdquo;;\n//Adding a comment to \u0026amp;ldquo;F5\u0026amp;rdquo; cell\nint commentIndex = worksheet.Comments.Add(\u0026amp;ldquo;F5\u0026amp;rdquo;);\n//Adding a string value to the cell\nworksheet.Cells[\u0026amp;ldquo;F5\u0026amp;rdquo;].PutValue(\u0026amp;ldquo;Hello World\u0026amp;rdquo;);\n//Accessing the newly added comment\nComment comment = worksheet.Comments[commentIndex];\n//Setting the comment note\ncomment.Note = \u0026amp;ldquo;Hello Aspose!\u0026amp;quot;;\n//Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;Output-AddingComment.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Add Comment in Worksheet\nC#\nHSSFWorkbook hssfworkbook = new HSSFWorkbook();\nISheet sheet = hssfworkbook.CreateSheet(\u0026amp;ldquo;Cell comments in POI HSSF\u0026amp;rdquo;);\n// Create the drawing patriarch. This is the top level container for all shapes including cell comments.\nHSSFPatriarch patr = (HSSFPatriarch)sheet.CreateDrawingPatriarch();\n//Create a cell in row 3\nICell cell1 = sheet.CreateRow(3).CreateCell(1);\ncell1.SetCellValue(new HSSFRichTextString(\u0026amp;ldquo;Hello, World\u0026amp;rdquo;));\n//anchor defines size and position of the comment in worksheet\nIComment comment1 = patr.CreateCellComment(new HSSFClientAnchor(0, 0, 0, 0, 4, 2, 6, 5));\n// set text in the comment\ncomment1.String = (new HSSFRichTextString(\u0026amp;ldquo;We can set comments in POI\u0026amp;rdquo;));\n//set comment author.\n//you can see it in the status bar when moving mouse over the commented cell\ncomment1.Author = (\u0026amp;ldquo;Apache Software Foundation\u0026amp;rdquo;);\n// The first way to assign comment to a cell is via HSSFCell.SetCellComment method\ncell1.CellComment = (comment1);\n//Write the stream data of workbook to the root directory …","date":-62135596800,"description":"","objectID":"c06eb084c17f92402a9de8361542e2fb","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/add+comment+in+worksheet/","title":"Add Comment In Worksheet"},{"content":"Aspose.Cells - Add Image in Worksheet\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet worksheet = worksheets.Add(\u0026amp;ldquo;My Worksheet\u0026amp;rdquo;);\n//Insert a string value to a cell\nworksheet.Cells[\u0026amp;ldquo;C2\u0026amp;rdquo;].Value = \u0026amp;ldquo;Image\u0026amp;rdquo;;\n//Set the 4th row height\nworksheet.Cells.SetRowHeight(3, 150);\n//Set the C column width\nworksheet.Cells.SetColumnWidth(2, 50);\n//Add a picture to the C4 cell\nint index = worksheet.Pictures.Add(3, 2, 3, 2, \u0026amp;ldquo;../../data/aspose.png\u0026amp;rdquo;);\n//Get the picture object\n//Picture pic = worksheet.getPictures().get(index);\nPicture pic = worksheet.Pictures[index];\n//Set the placement type\npic.Placement = PlacementType.FreeFloating;\nworkbook.Save(\u0026amp;quot;../../data/image.xlsx\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Add Image in Worksheet\nC#\nIWorkbook wb = new XSSFWorkbook();\nISheet sheet1 = wb.CreateSheet(\u0026amp;ldquo;First Sheet\u0026amp;rdquo;);\n//add picture data to this workbook.\nbyte[] bytes = File.ReadAllBytes(\u0026amp;quot;../../data/aspose.png\u0026amp;rdquo;);\nint pictureIdx = wb.AddPicture(bytes, PictureType.PNG);\nICreationHelper helper = wb.GetCreationHelper();\n// Create the drawing patriarch. This is the top level container for all shapes.\nIDrawing drawing = sheet1.CreateDrawingPatriarch();\n// add a picture shape\nIClientAnchor anchor = helper.CreateClientAnchor();\n//set top-left corner of the picture,\n//subsequent call of Picture#resize() will operate relative to it\nanchor.Col1 = 3;\nanchor.Row1 = 2;\nIPicture pict = drawing.CreatePicture(anchor, pictureIdx);\n//auto-size picture relative to its top-left corner\npict.Resize();\nFileStream sw = File.Create(\u0026amp;quot;../../data/image.xlsx\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Add Image in Worksheet form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"857f3946f3d3936eeb31b9b25dbcc86a","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/add+image+in+worksheet/","title":"Add Image in Worksheet"},{"content":"Aspose.Cells - Auto Fit Columns in Worksheet\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Auto-fitting the 1st column of the worksheet\n//Adding a string value to the cell\nworksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(\u0026amp;ldquo;This is a test input\u0026amp;rdquo;);\n//Adding a double value to the cell\nworksheet.Cells[\u0026amp;ldquo;B1\u0026amp;rdquo;].PutValue(20.5);\n//Adding an integer value to the cell\nworksheet.Cells[\u0026amp;ldquo;C1\u0026amp;rdquo;].PutValue(15);\n//Adding a boolean value to the cell\nworksheet.Cells[\u0026amp;ldquo;D1\u0026amp;rdquo;].PutValue(true);\nworksheet.AutoFitColumn(0);\nworksheet.AutoFitColumn(1);\nworksheet.AutoFitColumn(2);\nworksheet.AutoFitColumn(3);\n//Saving the modified Excel file in bin/debug folder\nworkbook.Save(\u0026amp;ldquo;AutoFiltRowsandColumns.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Auto Fit Columns in Worksheet\nC#\nHSSFWorkbook hssfworkbook = new HSSFWorkbook();\nISheet sheet=hssfworkbook.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\nIRow row=sheet.CreateRow(0);\nrow.CreateCell(0).SetCellValue(\u0026amp;ldquo;This is a test input\u0026amp;rdquo;);\nrow.CreateCell(1).SetCellValue(\u0026amp;ldquo;Hello\u0026amp;rdquo;);\nrow.CreateCell(2).SetCellValue(\u0026amp;ldquo;1234.0023\u0026amp;rdquo;);\nsheet.AutoSizeColumn(0);\nsheet.AutoSizeColumn(1);\nsheet.AutoSizeColumn(2);\nFileStream file = new FileStream(@\u0026amp;ldquo;AutoFiltRowsandColumns(NPOI).xls\u0026amp;rdquo;, FileMode.Create);\nhssfworkbook.Write(file);\nfile.Close();\nDownload Running Code\nDownload Auto Fit Column form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"6c643e2959f2177692acda49394b32d2","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/auto+fit+columns+in+worksheet/","title":"Auto Fit Columns in Worksheet"},{"content":"Aspose.Cells - Copy Worksheet\nC#\n//Create a new Workbook by excel file path\nWorkbook wb = new Workbook(\u0026amp;quot;../../data/workbook.xlsx\u0026amp;rdquo;);\n//Create a Worksheets object with reference to the sheets of the Workbook.\nWorksheetCollection sheets = wb.Worksheets;\n//Copy data to a new sheet from an existing sheet within the Workbook.\nsheets.AddCopy(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\nwb.Save(\u0026amp;quot;../../data/workbook.xlsx\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Copy Worksheet\nC#\nIWorkbook wb = new XSSFWorkbook();\nwb.CreateSheet(\u0026amp;ldquo;new sheet\u0026amp;rdquo;);\nwb.CreateSheet(\u0026amp;ldquo;second sheet\u0026amp;rdquo;);\nISheet cloneSheet = wb.CloneSheet(0);\nFileStream sw = File.Create(\u0026amp;ldquo;newWorksheet.xls\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Copy Worksheet form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"d671d8424639d492c5e702783e372009","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/copy+worksheet/","title":"Copy Worksheet"},{"content":"Aspose.Cells - Create New Worksheet\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet worksheet = worksheets.Add(\u0026amp;ldquo;My Worksheet\u0026amp;rdquo;);\n//Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;newWorksheet.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Create New Worksheet\nC#\nIWorkbook wb = new XSSFWorkbook();\nISheet sheet1 = wb.CreateSheet(\u0026amp;ldquo;First Sheet\u0026amp;rdquo;);\nISheet sheet2 = wb.CreateSheet(\u0026amp;ldquo;Second Sheet\u0026amp;rdquo;);\n// Note that sheet name is Excel must not exceed 31 characters\n// and must not contain any of the any of the following characters:\n// 0x0000\n// 0x0003\n// colon (:)\n// backslash ()\n// asterisk (*)\n// question mark (?)\n// forward slash (/)\n// opening square bracket ([)\n// closing square bracket (])\n// You can use org.apache.poi.ss.util.WorkbookUtil#createSafeSheetName(String nameProposal)}\n// for a safe way to create valid names, this utility replaces invalid characters with a space (\u0026amp;rsquo; \u0026amp;lsquo;)\nString safeName = WorkbookUtil.CreateSafeSheetName(\u0026amp;quot;[O\u0026amp;rsquo;Brien\u0026amp;rsquo;s sales*?]\u0026amp;quot;);\nISheet sheet3 = wb.CreateSheet(safeName);\nFileStream sw = File.Create(\u0026amp;ldquo;newWorksheet.xls\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Create New Worksheet form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"7beaa0abb1d7e6968e6a10bd15e6f808","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/create+new+worksheet/","title":"Create New Worksheet"},{"content":"Aspose.Cells - Hiding Rows and Columns in Worksheet\nC#\nWorkbook workbook = new Workbook();\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\nworksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(\u0026amp;ldquo;1\u0026amp;rdquo;);\nworksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(\u0026amp;ldquo;2\u0026amp;rdquo;);\nworksheet.Cells[\u0026amp;ldquo;B1\u0026amp;rdquo;].PutValue(11);\n//Hiding the 1st row of the worksheet\nworksheet.Cells.HideRow(0);\n//Hiding the 1st column of the worksheet\nworksheet.Cells.HideColumn(0);\n//Saving the modified Excel file\nworkbook.Save(\u0026amp;ldquo;Output-HideRowsandColumns.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Hiding Rows and Columns in Worksheet\nC#\nHSSFWorkbook hssfworkbook = new HSSFWorkbook();\nISheet s = hssfworkbook.CreateSheet(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;);\nIRow r1 = s.CreateRow(0);\nIRow r2 = s.CreateRow(1);\n//hide Row 0\nr1.ZeroHeight = true;\n//hide column C\ns.SetColumnHidden(0, true);\nFileStream file = new FileStream(@\u0026amp;ldquo;HidingRowsandColumn(NPOI).xls\u0026amp;rdquo;, FileMode.Create);\nhssfworkbook.Write(file);\nfile.Close();\nDownload Running Code\nDownload Hiding Rows and Columns in Worksheet form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"02c7b5a64aa037fdde0f2deb0e838a28","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/hiding+rows+and+columns+in+worksheet/","title":"Hiding Rows and Columns in Worksheet"},{"content":"Aspose.Cells - Reorder Worksheets\nC#\n//Create a new Workbook.\nWorkbook workbook = new Workbook();\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet worksheet1 = worksheets[0];\nWorksheet worksheet2 = worksheets.Add(\u0026amp;ldquo;Sheet2\u0026amp;rdquo;);\nWorksheet worksheet3 = worksheets.Add(\u0026amp;ldquo;Sheet3\u0026amp;rdquo;);\n//Move Sheets with in Workbook.\nworksheet2.MoveTo(0);\nworksheet1.MoveTo(1);\nworksheet3.MoveTo(2);\n//Save the excel file.\nworkbook.Save(\u0026amp;quot;../../data/AsposeMoveSheet.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Reorder Worksheets\nC#\nIWorkbook wb = new XSSFWorkbook();\nwb.CreateSheet(\u0026amp;ldquo;new sheet\u0026amp;rdquo;);\nwb.CreateSheet(\u0026amp;ldquo;second sheet\u0026amp;rdquo;);\nwb.CreateSheet(\u0026amp;ldquo;third sheet\u0026amp;rdquo;);\nwb.SetSheetOrder(\u0026amp;ldquo;second sheet\u0026amp;rdquo;, 0);\nwb.SetSheetOrder(\u0026amp;ldquo;new sheet\u0026amp;rdquo;, 1);\nwb.SetSheetOrder(\u0026amp;ldquo;third sheet\u0026amp;rdquo;, 2);\nFileStream sw = File.Create(\u0026amp;quot;../../data/Reordered.xls\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Reorder Worksheets form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"0b9c90f5a3a46bce41ee1c3c005116dd","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/reorder+worksheets/","title":"Reorder Worksheets"},{"content":"Aspose.Cells - Set Worksheet Zoom Factor\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet worksheet = worksheets.Add(\u0026amp;ldquo;My Worksheet\u0026amp;rdquo;);\nworksheet.Zoom = 75;\n//Saving the Excel file\nworkbook.Save(\u0026amp;quot;../../data/newWorksheet.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Set Worksheet Zoom Factor\nC#\nIWorkbook wb = new XSSFWorkbook();\nISheet sheet1 = wb.CreateSheet(\u0026amp;ldquo;First Sheet\u0026amp;rdquo;);\nsheet1.SetZoom(3, 4); // 75 percent\nFileStream sw = File.Create(\u0026amp;quot;../../data/newWorksheet.xls\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Set Worksheet Zoom Factor form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"e4d5bd94a727b9ef00fe8af9201c969a","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/set+worksheet+zoom+factor/","title":"Set Worksheet Zoom Factor"},{"content":"Aspose.Cells - Split Cells in Worksheet\nC#\nWorkbook workbook = new Workbook();\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Set the active cell\nworkbook.Worksheets[0].ActiveCell = \u0026amp;ldquo;A10\u0026amp;rdquo;;\n//Split the worksheet window\nworkbook.Worksheets[0].Split();\nworkbook.Save(\u0026amp;ldquo;output-Split.xls\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Split Cells in Worksheet\nC#\nHSSFWorkbook hssfworkbook = new HSSFWorkbook();\nISheet sheet1 = hssfworkbook.CreateSheet(\u0026amp;ldquo;new sheet\u0026amp;rdquo;);\nISheet sheet2 = hssfworkbook.CreateSheet(\u0026amp;ldquo;second sheet\u0026amp;rdquo;);\n//Create a split with the lower left side being the active quadrant\nsheet2.CreateSplitPane(2000, 2000, 0, 0, PanePosition.LowerLeft);\n//Write the stream data of workbook to the root directory\nFileStream file = new FileStream(@\u0026amp;ldquo;output-Split.xls\u0026amp;rdquo;, FileMode.Create);\nhssfworkbook.Write(file);\nfile.Close();\nDownload Running Code\nDownload Split Cells in Worksheet form any of the below mentioned social coding sites:\n CodePlex  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"b7a339689fc461404e3395ecd1ea66c8","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/split+cells+in+worksheet/","title":"Split Cells in Worksheet"},{"content":"Aspose.Cells - Working with Freeze Panes\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\nworksheet.FreezePanes(2, 2, 2, 0);\nworkbook.Save(\u0026amp;ldquo;output-FreezeFile-Aspose.Cells.xls\u0026amp;rdquo;);\nFor more details, visit FreezePanes Method.\nNPOI - HSSF XSSF - Working with Freeze Panes\nC#\nHSSFWorkbook hssfworkbook = new HSSFWorkbook();\nISheet sheet1 = hssfworkbook.CreateSheet(\u0026amp;ldquo;new sheet\u0026amp;rdquo;);\nISheet sheet2 = hssfworkbook.CreateSheet(\u0026amp;ldquo;second sheet\u0026amp;rdquo;);\nISheet sheet3 = hssfworkbook.CreateSheet(\u0026amp;ldquo;third sheet\u0026amp;rdquo;);\n// Freeze just one row\nsheet1.CreateFreezePane(0, 2, 0, 2);\n// Freeze just one column\nsheet2.CreateFreezePane(2, 0, 2, 0);\n// Freeze the columns and rows (forget about scrolling position of the lower right quadrant).\nsheet3.CreateFreezePane(2, 2);\nFileStream file = new FileStream(@\u0026amp;ldquo;output-FreezeFile-NPOI.xls\u0026amp;rdquo;, FileMode.Create);\nhssfworkbook.Write(file);\nfile.Close();\nDownload Running Code\nDownload Working with Freeze Panes form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"7bc2350f85e21f3f63973333696dcad8","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/working+with+freeze+panes/","title":"Working with Freeze Panes"},{"content":"Aspose.Cells - Working with Headers and Footers\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet worksheet = worksheets.Add(\u0026amp;ldquo;My Worksheet\u0026amp;rdquo;);\n//Obtaining the reference of the PageSetup of the worksheet\nPageSetup pageSetup = worksheet.PageSetup;\n//Setting worksheet name at the left header\npageSetup.SetHeader(0, \u0026amp;ldquo;\u0026amp;amp;A\u0026amp;rdquo;);\n//Setting current date and current time at the central header\n//and changing the font of the header\npageSetup.SetHeader(1, \u0026amp;ldquo;\u0026amp;amp;\u0026amp;quot;Times New Roman,Bold\u0026amp;quot;\u0026amp;amp;D-\u0026amp;amp;T\u0026amp;rdquo;);\n//Setting current file name at the right header and changing the font of the header\npageSetup.SetHeader(2, \u0026amp;ldquo;\u0026amp;amp;\u0026amp;quot;Times New Roman,Bold\u0026amp;quot;\u0026amp;amp;12\u0026amp;amp;F\u0026amp;rdquo;);\n//Setting a string at the left footer and changing the font of the footer\npageSetup.SetFooter(0, \u0026amp;ldquo;Hello World! \u0026amp;amp;\u0026amp;quot;Courier New\u0026amp;quot;\u0026amp;amp;14 123\u0026amp;rdquo;);\n//Setting picture at the central footer\npageSetup.SetFooter(1, \u0026amp;ldquo;\u0026amp;amp;G\u0026amp;rdquo;);\nworkbook.Save(\u0026amp;quot;../../data/headerfooter.xlsx\u0026amp;rdquo;);\nNPOI - HSSF XSSF - Working with Headers and Footers\nC#\nIWorkbook wb = new XSSFWorkbook();\nISheet sheet1 = wb.CreateSheet(\u0026amp;ldquo;First Sheet\u0026amp;rdquo;);\nIHeader header = sheet1.Header;\nheader.Center = \u0026amp;ldquo;Center Header\u0026amp;rdquo;;\nheader.Left = \u0026amp;ldquo;Left Header\u0026amp;rdquo;;\nheader.Right = \u0026amp;ldquo;Right Header\u0026amp;rdquo;;\nFileStream sw = File.Create(\u0026amp;quot;../../data/header.xls\u0026amp;rdquo;);\nwb.Write(sw);\nsw.Close();\nDownload Running Code\nDownload Working with Headers and Footers form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Working with Worksheets.\n","date":-62135596800,"description":"","objectID":"e2cddf53b858b62ed8f52bd5fc3c301f","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/working+with+headers+and+footers/","title":"Working with Headers and Footers"},{"content":"This section has the following topics:\n Add Comment In Worksheet Add Image in Worksheet Auto Fit Columns in Worksheet Copy Worksheet Create New Worksheet Hiding Rows and Columns in Worksheet Reorder Worksheets Set Worksheet Zoom Factor Split Cells in Worksheet Working with Freeze Panes Working with Headers and Footers  ","date":-62135596800,"description":"","objectID":"309b76a8fa42eb44e806642e7e82dfc7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/codecomparisonforcommonfeatureswithnpoi/workingwithworksheetsinnpoiandasposecells/","title":"Working With Worksheets in NPOI and Aspose.Cells"},{"content":"This section shows the features that are only available in Aspose.Cells and not in NPOI (HSSF and XSSF).\nIt is very helpful for developers who want to migrate from NPOI to Aspose.Cells.\nThis includes following abundant features of Aspose.Cells as compared to NPOI:\n Data Handling Features in Aspose.Cells  Calculate Sub Totals Find Value in Cells Formula Calculation Engine in Aspose.Cells   Miscellaneous Examples in Aspose.Cells  Convert Spreadsheet to PDF in Aspose.Cells Printing Workbooks in Aspose.Cells Set Print Titles   Working with Charts in Aspose.Cells  Convert Chart to Images Create Charts   Working with Worksheets in Aspose.Cells  Save Each Worksheet to Different PDF Set Worksheet Tab Color in Aspose.Cells    Note: Many more examples are yet to be available soon.\n","date":-62135596800,"description":"","objectID":"5753e35d7d5c320463352c21951dfa28","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/","title":"Missing Features in NPOI"},{"content":"Aspose.Cells - Calculate Sub Totals\nYou can automatically create subtotals for any repeating values in a spreadsheet. Aspose.Cells provides API features that help you add subtotals to spreadsheets programmatically.\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Get the Cells collection in the first worksheet\nCells cells = workbook.Worksheets[0].Cells;\n//Create a cellarea i.e.., B3:C19\nCellArea ca = new CellArea();\nca.StartRow = 2;\nca.StartColumn = 1;\nca.EndRow = 18;\nca.EndColumn = 2;\n//Apply subtotal, the consolidation function is Sum and it will applied to\n//Second column (C) in the list\ncells.Subtotal(ca, 0, ConsolidationFunction.Sum, new int[] { 1 });\n//Save the excel file\nworkbook.Save(\u0026amp;ldquo;AsposeTotal.xls\u0026amp;rdquo;);\nDownload Running Code\nDownload Calculate Sub Totals form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Creating Subtotals.\n","date":-62135596800,"description":"","objectID":"59173fe8bbc4a91c4f23f4cfe71a0a1a","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/datahandlingfeaturesinasposecells/calculate+sub+totals/","title":"Calculate Sub Totals"},{"content":"Aspose.Cells - Find Value in Cells\nIn Microsoft Excel, users can search for cells that contain specific data. For example, clicking Edit and then Find opens the Search dialog. Users enters a value and clicks OK to search for it. Excel highlights matching fields.\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Finding the cell containing the specified formula\nCells cells = worksheet.Cells;\n//Instantiate FindOptions\nFindOptions findOptions = new FindOptions();\n//Finding the cell containing a string value that starts with \u0026amp;ldquo;Or\u0026amp;rdquo;\nfindOptions.LookAtType = LookAtType.StartWith;\nCell cell = cells.Find(\u0026amp;ldquo;SH\u0026amp;rdquo;, null, findOptions);\n//Printing the name of the cell found after searching worksheet\nConsole.WriteLine(\u0026amp;ldquo;Name of the cell containing String: \u0026amp;quot; + cell.Name);\nDownload Running Code\nDownload Find Value in Cells form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Find or Search Data.\n","date":-62135596800,"description":"","objectID":"035b3746584c0c35efd5c27843d674f8","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/datahandlingfeaturesinasposecells/find+value+in+cells/","title":"Find Value in Cells"},{"content":"Aspose.Cells - Formula Calculation Engine\nThe formula calculation engine is embedded in Aspose.Cells. It can not only re-calculate the formula imported from a designer spreadsheet file but also supports to calculate the results of formulas added at runtime.\nC#\n//Instantiating a Workbook object\nWorkbook book = new Workbook();\n//Obtaining the reference of the newly added worksheet\nint sheetIndex = book.Worksheets.Add();\nWorksheet worksheet = book.Worksheets[sheetIndex];\nCells cells = worksheet.Cells;\nCell cell = null;\n//Adding a value to \u0026amp;ldquo;A1\u0026amp;rdquo; cell\ncell = cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\ncell.Value = 1;\n//Adding a value to \u0026amp;ldquo;A2\u0026amp;rdquo; cell\ncell = cells[\u0026amp;ldquo;A2\u0026amp;rdquo;];\ncell.Value = 2;\n//Adding a value to \u0026amp;ldquo;A3\u0026amp;rdquo; cell\ncell = cells[\u0026amp;ldquo;A3\u0026amp;rdquo;];\ncell.Value = 3;\n//Adding a SUM formula to \u0026amp;ldquo;A4\u0026amp;rdquo; cell\ncell = cells[\u0026amp;ldquo;A4\u0026amp;rdquo;];\ncell.Formula = \u0026amp;ldquo;=SUM(A1:A3)\u0026amp;quot;;\n//Calculating the results of formulas\nbook.CalculateFormula();\n//Saving the Excel file\nbook.Save(\u0026amp;ldquo;AsposeFormulaEngine.xls\u0026amp;rdquo;);\nDownload Running Code\nDownload Formula Calculation Engine form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Formula Calculation Engine.\n","date":-62135596800,"description":"","objectID":"628e80962b7115e4d69ad5d24f7c31d9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/datahandlingfeaturesinasposecells/formula+calculation+engine+in+aspose.cells/","title":"Formula Calculation Engine in Aspose.Cells"},{"content":"**This section includes the following topics: **\n Calculate Sub Totals Find Value in Cells Formula Calculation Engine in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"048c05ac67932b211e206ec33ffe7186","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/datahandlingfeaturesinasposecells/","title":"Data Handling Features in Aspose.Cells"},{"content":"Aspose.Cells - Convert Spreadsheet to PDF\nPDF documents are widely used as a standard format of exchanging documents between organizations, government sectors and individuals. Software developers are often asked to device a way to easily convert Microsoft Excel files into PDF documents. Aspose.Cells supports this features.\nC#\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Save the document in PDF format\nworkbook.Save(\u0026amp;ldquo;AsposeConvert.pdf\u0026amp;rdquo;, SaveFormat.Pdf);\nDownload Running Code\nDownload Convert Spreadsheet to PDF form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Converting Excel to PDF Files.\n","date":-62135596800,"description":"","objectID":"e7d7d97e47870845adf8d2131cdb1730","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/miscellaneousexamplesinasposecells/convert+spreadsheet+to+pdf+in+aspose.cells/","title":"Convert Spreadsheet to PDF in Aspose.Cells"},{"content":"Aspose.Cells - Printing Workbooks\nAfter you finish creating your spreadsheet, you will probably want to print a hard copy of the sheet for your need. When you are printing, MS Excel assumes you want to print the entire worksheet area unless you specify your selection.\nPrinting Worksheet\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Create an object for ImageOptions\nImageOrPrintOptions imgOptions = new ImageOrPrintOptions();\n//Get the first worksheet\nWorksheet sheet = workbook.Worksheets[0];\n//Create a SheetRender object with respect to your desired sheet\nSheetRender sr = new SheetRender(sheet, imgOptions);\n//Print the worksheet\nsr.ToPrinter(\u0026amp;ldquo;Samsung ML-1520 Series\u0026amp;rdquo;);\nDownload Running Code\nDownload Printing Workbooks form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Printing Workbooks.\n","date":-62135596800,"description":"","objectID":"3cab4eec2ab1f9fb028bc7ad5f6dfee9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/miscellaneousexamplesinasposecells/printing+workbooks+in+aspose.cells/","title":"Printing Workbooks in Aspose.Cells"},{"content":"Aspose.Cells - Set Print Titles\nAspose.Cells allows you to designate row and column headers to repeat on all pages of a printed worksheet. To do so, use the PageSetup class PrintTitleColumns and PrintTitleRows properties.\nThe rows or columns that will be repeated are defined by passing their row or column numbers. For example, rows are defined as $1:$2 and columns are defined as $A:$B.\nC#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Obtaining the reference of the PageSetup of the worksheet\nPageSetup pageSetup = workbook.Worksheets[0].PageSetup;\n//Defining column numbers A \u0026amp;amp; B as title columns\npageSetup.PrintTitleColumns = \u0026amp;ldquo;$A:$B\u0026amp;rdquo;;\n//Defining row numbers 1 \u0026amp;amp; 2 as title rows\npageSetup.PrintTitleRows= \u0026amp;ldquo;$1:$2\u0026amp;rdquo;;\nDownload Running Code\nDownload Set Print Titles form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Setting Print Options.\n","date":-62135596800,"description":"","objectID":"694e83286e1fcd144fb154974e4a1c93","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/miscellaneousexamplesinasposecells/set+print+titles/","title":"Set Print Titles"},{"content":"**This section includes the following topics: **\n Convert Spreadsheet to PDF in Aspose.Cells Printing Workbooks in Aspose.Cells Set Print Titles  ","date":-62135596800,"description":"","objectID":"7f4416c58e03a4db18c5e607e63f4921","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/miscellaneousexamplesinasposecells/","title":"Miscellaneous Examples in Aspose.Cells"},{"content":"Aspose.Cells - Convert Chart to Images\nCharts are visually appealing and make it easy for users to see comparisons, patterns, and trends in data. The Chart class toImage method converts the chart to an image file, that can be saved to disk or stream.\nC#\n// Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n// Obtaining the reference of the first worksheet\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet sheet = worksheets[0];\n// Adding some sample value to cells\nCells cells = sheet.Cells;\nCell cell = cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\ncell.Value = 50;\ncell = cells[\u0026amp;ldquo;A2\u0026amp;rdquo;];\ncell.Value = 100;\ncell = cells[\u0026amp;ldquo;A3\u0026amp;rdquo;];\ncell.Value = 150;\ncell = cells[\u0026amp;ldquo;B1\u0026amp;rdquo;];\ncell.Value = 4;\ncell = cells[\u0026amp;ldquo;B2\u0026amp;rdquo;];\ncell.Value = 20;\ncell = cells[\u0026amp;ldquo;B3\u0026amp;rdquo;];\ncell.Value = 50;\nChartCollection charts = sheet.Charts;\n// Adding a chart to the worksheet\nint chartIndex = charts.Add(ChartType.Pyramid, 5, 0, 15, 5);\nChart chart = charts[chartIndex];\n//Save the chart image file.\nchart.ToImage(\u0026amp;ldquo;AsposeChartImage.png\u0026amp;rdquo;, ImageFormat.Png);\nDownload Running Code\nDownload Convert Chart to Images form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Converting Chart to Image.\n","date":-62135596800,"description":"","objectID":"beee9c460c9a3afcf4ece1d783d169e9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/workingwithchartsinasposecells/convert+chart+to+images/","title":"Convert Chart to Images"},{"content":"Aspose.Cells - Create Charts\nIt is possible to add a variety of charts to spreadsheets with Aspose.Cells. Aspose.Cells provides many flexible charting objects.\nC#\n// Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n// Obtaining the reference of the first worksheet\nWorksheetCollection worksheets = workbook.Worksheets;\nWorksheet sheet = worksheets[0];\n// Adding some sample value to cells\nCells cells = sheet.Cells;\nCell cell = cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\ncell.Value = 50;\ncell = cells[\u0026amp;ldquo;A2\u0026amp;rdquo;];\ncell.Value = 100;\ncell = cells[\u0026amp;ldquo;A3\u0026amp;rdquo;];\ncell.Value = 150;\ncell = cells[\u0026amp;ldquo;B1\u0026amp;rdquo;];\ncell.Value = 4;\ncell = cells[\u0026amp;ldquo;B2\u0026amp;rdquo;];\ncell.Value = 20;\ncell = cells[\u0026amp;ldquo;B3\u0026amp;rdquo;];\ncell.Value = 50;\nChartCollection charts = sheet.Charts;\n// Adding a chart to the worksheet\nint chartIndex = charts.Add(ChartType.Pyramid, 5, 0, 15, 5);\nChart chart = charts[chartIndex];\n// Adding NSeries (chart data source) to the chart ranging from \u0026amp;ldquo;A1\u0026amp;rdquo; cell to \u0026amp;ldquo;B3\u0026amp;rdquo;\nSeriesCollection serieses = chart.NSeries;\nserieses.Add(\u0026amp;ldquo;A1:B3\u0026amp;rdquo;, true);\n// Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;Chart_Aspose.xls\u0026amp;rdquo;);\nDownload Running Code\nDownload Create Charts form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit How to Create a Chart.\n","date":-62135596800,"description":"","objectID":"2253c3549e0ac9ef74a60d923236e0e7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/workingwithchartsinasposecells/create+charts/","title":"Create Charts"},{"content":"**This section includes the following topics: **\n Convert Chart to Images Create Charts  ","date":-62135596800,"description":"","objectID":"117325f2f688df097cd5f1c3a3eb1a77","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/workingwithchartsinasposecells/","title":"Working with Charts in Aspose.Cells"},{"content":"Aspose.Cells - Save Each Worksheet to Different PDF\nAspose.Cells supports converting XLS files (that contain images, charts etc.) to PDF documents. Aspose.Cells for .NET can work independently to convert a spreadsheet to Pdf document and you do not need to use Aspose.Pdf for .NET for the conversion any longer. The conversion does not require to create / use any temporary file(s) too as the whole process can be done in the memory.\nC#\n//Instantiate a new workbook and open the Excel\n//File from its location\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Get the count of the worksheets in the workbook\nint sheetCount = workbook.Worksheets.Count;\n//Make all sheets invisible except first worksheet\nfor (int i = 1; i \u0026amp;lt; workbook.Worksheets.Count; i++)\n{\nworkbook.Worksheets[i].IsVisible = false;\n}\n//Take Pdfs of each sheet\nfor (int j = 0; j \u0026amp;lt; workbook.Worksheets.Count; j++)\n{\nWorksheet ws = workbook.Worksheets[j];\nworkbook.Save(ws.Name + \u0026amp;ldquo;.pdf\u0026amp;rdquo;);\nif (j \u0026amp;lt; workbook.Worksheets.Count - 1)\n{\nworkbook.Worksheets[j + 1].IsVisible = true;\nworkbook.Worksheets[j].IsVisible =false;\n}\n}\nDownload Running Code\nDownload Save Each Worksheet to Different PDF form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Save Each Worksheet to a Different PDF File.\n","date":-62135596800,"description":"","objectID":"1116dfdf0b1aaf7b960f853dc25f5066","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/workingwithworksheetsinasposecells/save+each+worksheet+to+different+pdf/","title":"Save Each Worksheet to Different PDF"},{"content":"Aspose.Cells - Set Worksheet Tab Color\nAspose.Cells allows you to change the color of individual worksheet tabs to make them prominent from the rest. For example, you can make Expenses red, Sales green, Assets blue, etc.\nSetting Worksheet Tab Color with Microsoft Excel\n Right-click a tab in the tab-sheet at the bottom of the current worksheet. Select Tab color. Select a color from the palette. Click OK.  C#\n//Instantiate a new Workbook\nWorkbook workbook = new Workbook(\u0026amp;quot;../../data/test.xlsx\u0026amp;rdquo;);\n//Get the first worksheet in the book\nWorksheet worksheet = workbook.Worksheets[0];\n//Set the tab color\nworksheet.TabColor = Color.Red;\n//Save the Excel file\nworkbook.Save(\u0026amp;ldquo;AsposeColoredTab_Out.xls\u0026amp;rdquo;);\nDownload Running Code\nDownload Set Worksheet Tab Color form any of the below mentioned social coding sites:\n CodePlex GitHub  For more details, visit Set Worksheet Tab Color.\n","date":-62135596800,"description":"","objectID":"54f4060a9ce8f5952470daab97ee5545","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/workingwithworksheetsinasposecells/set+worksheet+tab+color+in+aspose.cells/","title":"Set Worksheet Tab Color in Aspose.Cells"},{"content":"**This section includes the following topics: **\n Save Each Worksheet to Different PDF Set Worksheet Tab Color in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"b639ec7b5e35bf2c677a63a291deb591","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetfornpoi/missingfeaturesinnpoi/workingwithworksheetsinasposecells/","title":"Working with Worksheets in Aspose.Cells"},{"content":"Contents Summary\n Getting Started  Introduction System Requirements and Supported Platforms  System Requirements Supported Platforms   Download and Configure  Download Required Libraries Download Examples from Social Coding Sites  GitHub   How to configure the source code on Windows Platform  1. Register both dll and interop.dll files e.g. Aspose.Cells.dll and Aspose.Cells.Interop.dll. 2. Enable COM and DOTNET Extensions in PHP. 3. Configure Aspose.Cells Java for PHP Examples  Method 1 Method 2       Support Extend and Contribute  Support Extend and Contribute Source Code     Sample Code Examples  Getting Started\nIntroduction\nSystem Requirements and Supported Platforms\nSystem Requirements\nFollowing are the system requirements to use Aspose.Cells .NET for PHP:\n IIS with PHP and PHP Manager installed. Aspose.Total APIs. Aspose.Cells the Interop dll and tlb file.  Supported Platforms\nFollowing are the supported platforms:\n PHP 5.3 or above Windows OS  Download and Configure\nDownload Required Libraries\nDownload required libraries mentioned below. These are the required for executing Aspose.Cells Java for PHP examples.\n Download Aspose.Cells for .NET (DLL or MSI) files from download section Download Aspose.Cells for .NET interop dll  If you download msi version, you will find Aspose.Cells.dll in installed location which is C:\\Program Files (x86)\\Aspose\\Aspose.Cells for .NET\\Bin\\net2.0 folder by default. However in case you have downloaded DLL version you can extract it and then copy Aspose.Cells.dll from .NET 2.0 folder to your c:\\temp folder for ease of use. Similarly extract interop zip file and copy Aspose.Inteop.dll to c:\\temp\nDownload Examples from Social Coding Sites\nFollowing releases of running examples are available to download on below mentioned social coding sites:\n GitHub\n Aspose.Cells .NET for PHP Examples  Aspose.Cells .NET for PHP    How to configure the source code on Windows Platform\nPlease follow these simple steps in order to open and extend the source …","date":-62135596800,"description":"","objectID":"9246f4bb61889bfad9cd36aa95ec28a3","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/","title":"Aspose.Cells .NET for PHP"},{"content":"","date":-62135596800,"description":"","objectID":"8c5140ad2792ba4748a89522d50767db","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/","title":"PHP Programmers Guide"},{"content":"","date":-62135596800,"description":"","objectID":"c74bf92ffc9fb8c3f17102f33881c33a","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/","title":"Working With Files in PHP"},{"content":"Aspose.Cells - Open Excel Files\nOpening through Path\nSimply open a Microsoft Excel file by referencing the file\u0026amp;rsquo;s path\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/Book1.xls\u0026amp;rsquo;));\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\nDownload Running Code\nDownload Opening Files (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"804ca4999d8028268ae0943f6caf5891","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/filehandlingfeaturesinphp/opening+files+in+php/","title":"Opening Files in PHP"},{"content":"Aspose.Cells - Save Excel Files\nOpening through Path\nSaving a Microsoft Excel file by referencing the file\u0026amp;rsquo;s path\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array());\n//Your Code goes here for any workbook related operations\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026#39;/book1.xls\u0026amp;rsquo;));\nprint \u0026amp;ldquo;File saved successfully!\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Saving Files (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"ea3f2645a3ff9ca9d84f0e3c3d5a94b4","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/filehandlingfeaturesinphp/saving+files+in+php/","title":"Saving Files in PHP"},{"content":"","date":-62135596800,"description":"","objectID":"4e6f3c7136bf1322369b50cf41a8ef60","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/filehandlingfeaturesinphp/","title":"File Handling Features in PHP"},{"content":"Aspose.Cells - Encrypt Excel Files\nEncrypting a Microsoft Excel File\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/Book1.xls\u0026amp;rsquo;));\n$XOR = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.EncryptionType.XOR\u0026amp;rdquo;,array());\n$crypt = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.EncryptionType.StrongCryptographicProvider\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;SetEncryptionOptions\u0026amp;rdquo;,array($XOR,40));\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;SetEncryptionOptions\u0026amp;rdquo;,array($crypt,128));\n$settings = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Settings\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Set($settings,\u0026amp;ldquo;Password\u0026amp;rdquo;,\u0026amp;ldquo;1234\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/encryptedoutBook1.xls\u0026amp;rdquo;));\nprint \u0026amp;ldquo;Completed.\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Encrypting Files (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"8f48460043c6f58245631d067385075d","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/utilityfeaturesinphp/encrypting+files+in+php/","title":"Encrypting Files in PHP"},{"content":"Aspose.Cells - Excel to PDF Conversion\nConvert Microsoft Excel File to PDF\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/Book1.xls\u0026amp;rsquo;));\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/outBook1.pdf\u0026amp;rdquo;));\nprint \u0026amp;ldquo;Conversion Completed\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Excel to PDF Conversion (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"8be5c61a1f271698a198a58046159957","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/utilityfeaturesinphp/excel+to+pdf+conversion+in+php/","title":"Excel to PDF Conversion in PHP"},{"content":"Aspose.Cells - Managing Document Properties\nManaging Document Properties of Microsoft Excel File\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/Book1.xls\u0026amp;rsquo;));\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n//Retrieve a list of all custom document properties of the Excel file\n$customDocProp = $ptr-\u0026amp;gt;Get($worksheets,\u0026amp;ldquo;CustomDocumentProperties\u0026amp;rdquo;,array());\n//Accessing a custom document property by using the property index\n$customProp1 = $ptr-\u0026amp;gt;Get($customDocProp,\u0026amp;ldquo;Item_2\u0026amp;rdquo;,array(3));\n//Accessing a custom document property by using the property name\n$customProp2 = $ptr-\u0026amp;gt;Get($customDocProp,\u0026amp;ldquo;Item\u0026amp;rdquo;,array(\u0026amp;ldquo;Owner\u0026amp;rdquo;));\nprint $ptr-\u0026amp;gt;Get($customProp1,\u0026amp;ldquo;Name\u0026amp;rdquo;,array()) . \u0026amp;quot; -\u0026amp;gt; \u0026amp;quot; . $ptr-\u0026amp;gt;Get($customProp1,\u0026amp;ldquo;Value\u0026amp;rdquo;,array()) . PHP_EOL;\nprint $ptr-\u0026amp;gt;Get($customProp2,\u0026amp;ldquo;Name\u0026amp;rdquo;,array()) . \u0026amp;quot; -\u0026amp;gt; \u0026amp;quot; . $ptr-\u0026amp;gt;Get($customProp2,\u0026amp;ldquo;Value\u0026amp;rdquo;,array()) . PHP_EOL;\n//Retrieve a list of all custom document properties of the Excel file\n$customDocPropColl = $ptr-\u0026amp;gt;Get($worksheets,\u0026amp;ldquo;CustomDocumentProperties\u0026amp;rdquo;,array());\n//Adding a custom document property to the Excel file\n$publisher = $ptr-\u0026amp;gt;Call($customDocPropColl,\u0026amp;ldquo;Add\u0026amp;rdquo;,array(\u0026amp;ldquo;Publisher\u0026amp;rdquo;,\u0026amp;ldquo;Aspose\u0026amp;rdquo;));\n//Add link to content.\n$ptr-\u0026amp;gt;Call($customDocPropColl,\u0026amp;ldquo;AddLinkToContent\u0026amp;rdquo;,array(\u0026amp;ldquo;Owner\u0026amp;rdquo;,\u0026amp;ldquo;MyRange\u0026amp;rdquo;));\n//Accessing the custom document property by using the property name\n$customProp3 = $ptr-\u0026amp;gt;Get($customDocPropColl,\u0026amp;ldquo;Item\u0026amp;rdquo;,array(\u0026amp;ldquo;Owner\u0026amp;rdquo;));\n//Check whether the property is lined to content\n$isLinkedToContent = …","date":-62135596800,"description":"","objectID":"60d5dd743fa18d83805505bdbcadcf28","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/utilityfeaturesinphp/managing+document+properties+in+php/","title":"Managing Document Properties in PHP"},{"content":"Aspose.Cells - Convert Worksheet to Image\nConvert a Microsoft Excel Worksheet to Image File\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/MyTestBook1.xls\u0026amp;rsquo;));\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n$sheet = $ptr-\u0026amp;gt;Get($worksheets,\u0026amp;lsquo;Item\u0026amp;rsquo;,array(0));\n$imgOptions = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Rendering.ImageOrPrintOptions\u0026amp;rdquo;,array());\n$imageFormat = new \\DOTNET(\u0026amp;lsquo;mscorlib\u0026amp;rsquo;, \u0026amp;lsquo;System.Drawing.Imaging.ImageFormat\u0026amp;rsquo;);\n$ptr-\u0026amp;gt;Set($imgOptions,\u0026amp;lsquo;ImageFormat\u0026amp;rsquo;,$imageFormat-\u0026amp;gt;Jpeg,array());\n$ptr-\u0026amp;gt;Set($imgOptions,\u0026amp;lsquo;OnePagePerSheet\u0026amp;rsquo;,true,array());\n$sr = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Rendering.SheetRender\u0026amp;rdquo;,array($sheet,$imgOptions));\n$bitmap = new \\DOTNET(\u0026amp;ldquo;mscorlib\u0026amp;rdquo;, \u0026amp;ldquo;System.Drawing.Bitmap\u0026amp;rdquo;);\n$bitmap-\u0026amp;gt;Save($dataDir . \u0026amp;ldquo;./SheetImage.jpg\u0026amp;rdquo;);\nprint \u0026amp;ldquo;Conversion to Image(s) completed!\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Worksheet to Image (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"b90e02b6828a1c1a2bc06ba7c2b98928","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/utilityfeaturesinphp/worksheet+to+image+conversion+in+php/","title":"Worksheet to Image Conversion in PHP"},{"content":"","date":-62135596800,"description":"","objectID":"3fb7e4abca25502e7b5c816e11a57360","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithfilesinphp/utilityfeaturesinphp/","title":"Utility Features in PHP"},{"content":"Calculating Formulas\nCalculating Formulas\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array());\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n$sheetIndex = $ptr-\u0026amp;gt;Call($worksheets,\u0026amp;ldquo;Add\u0026amp;rdquo;,array());\n$worksheet = $ptr-\u0026amp;gt;Get($worksheets,\u0026amp;ldquo;Item\u0026amp;rdquo;,array($sheetIndex));\n$cells = $ptr-\u0026amp;gt;Get($worksheet,\u0026amp;ldquo;Cells\u0026amp;rdquo;,array());\n$a1 = $ptr-\u0026amp;gt;Get($cells,\u0026amp;ldquo;Item_3\u0026amp;rdquo;,array(\u0026amp;ldquo;A1\u0026amp;rdquo;));\n$ptr-\u0026amp;gt;Call($a1,\u0026amp;ldquo;PutValue\u0026amp;rdquo;,array(1));\n$a2 = $ptr-\u0026amp;gt;Get($cells,\u0026amp;ldquo;Item_3\u0026amp;rdquo;,array(\u0026amp;ldquo;A2\u0026amp;rdquo;));\n$ptr-\u0026amp;gt;Call($a2,\u0026amp;ldquo;PutValue\u0026amp;rdquo;,array(2));\n$a3 = $ptr-\u0026amp;gt;Get($cells,\u0026amp;ldquo;Item_3\u0026amp;rdquo;,array(\u0026amp;ldquo;A3\u0026amp;rdquo;));\n$ptr-\u0026amp;gt;Call($a3,\u0026amp;ldquo;PutValue\u0026amp;rdquo;,array(3));\n$a4 = $ptr-\u0026amp;gt;Get($cells,\u0026amp;ldquo;Item_3\u0026amp;rdquo;,array(\u0026amp;ldquo;A4\u0026amp;rdquo;));\n$ptr-\u0026amp;gt;Call($a3,\u0026amp;ldquo;PutValue\u0026amp;rdquo;,array(3));\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/output.xls\u0026amp;rdquo;));\n$ptr-\u0026amp;gt;Set($a4,\u0026amp;ldquo;Formula\u0026amp;rdquo;,\u0026amp;ldquo;=SUM(A1:A3)\u0026amp;quot;,array());\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;CalculateFormula\u0026amp;rdquo;,array());\n$value = $ptr-\u0026amp;gt;Get($a4,\u0026amp;ldquo;Value\u0026amp;rdquo;,array());\n$stringVal = $ptr-\u0026amp;gt;Call($value,\u0026amp;ldquo;ToString\u0026amp;rdquo;,array());\nprint \u0026amp;ldquo;Calculated Value: \u0026amp;quot; . $stringVal . PHP_EOL;\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/output.xls\u0026amp;rdquo;));\nprint \u0026amp;ldquo;Completed.\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Calculating Formulas (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"995af029517823fc79d34bddf4bc8483","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithformulasinphp/calculating+formulas+in+php/","title":"Calculating Formulas in PHP"},{"content":"","date":-62135596800,"description":"","objectID":"cfd74ab31bab21aa11e017cb7c3e87eb","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithformulasinphp/","title":"Working With Formulas in PHP"},{"content":"","date":-62135596800,"description":"","objectID":"f2fb25efc5279b8300c597fe5d1b703a","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/","title":"Working With Worksheets in PHP"},{"content":"","date":-62135596800,"description":"","objectID":"7f71f5213a561b56d623a068c7f623f3","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/managementfeaturesinphp/","title":"Management Features in PHP"},{"content":"Add Worksheets to Existing Excel File\nAdd Worksheets to Existing Excel File\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/book1.xls\u0026amp;rsquo;));\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n$worksheet_index = $ptr-\u0026amp;gt;Call($worksheets,\u0026amp;ldquo;Add_2\u0026amp;rdquo;,array());\n$worksheet = $ptr-\u0026amp;gt;Get($worksheets,\u0026amp;ldquo;Item\u0026amp;rdquo;,array($worksheet_index));\n$ptr-\u0026amp;gt;Set($worksheet,\u0026amp;ldquo;Name\u0026amp;rdquo;,\u0026amp;ldquo;My Worksheet\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/output.xls\u0026amp;rdquo;));\nprint \u0026amp;ldquo;Completed.\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Add Worksheets to Existing Excel File (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"6279de240693b4858d21c137cd42bb16","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/managementfeaturesinphp/managingworksheetsinphp/add+worksheets+to+existing+excel+file+in+php/","title":"Add Worksheets to Existing Excel File in PHP"},{"content":"Add Worksheets to New Excel File\nAdd Worksheets to New Excel File\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array());\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n$worksheet_index = $ptr-\u0026amp;gt;Call($worksheets,\u0026amp;ldquo;Add_2\u0026amp;rdquo;,array());\n$worksheet = $ptr-\u0026amp;gt;Get($worksheets,\u0026amp;ldquo;Item\u0026amp;rdquo;,array($worksheet_index));\n$ptr-\u0026amp;gt;Set($worksheet,\u0026amp;ldquo;Name\u0026amp;rdquo;,\u0026amp;ldquo;My Worksheet\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/output.xls\u0026amp;rdquo;));\nprint \u0026amp;ldquo;Completed.\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Add Worksheets to New Excel File (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"727af3caed9b496ca31c85283b21d6a9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/managementfeaturesinphp/managingworksheetsinphp/add+worksheets+to+new+excel+file+in+php/","title":"Add Worksheets to New Excel File in PHP"},{"content":"Removing Worksheets Using Sheet Index\nRemoving Worksheets Using Sheet Index\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n/ Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/book1.xls\u0026amp;rsquo;));\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Call($worksheets,\u0026amp;ldquo;RemoveAt\u0026amp;rdquo;,array(0));\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/output.xls\u0026amp;rdquo;));\nDownload Running Code\nDownload Removing Worksheets Using Sheet Index (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"d179f5b5b3f4334a41b409865bff1c1d","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/managementfeaturesinphp/managingworksheetsinphp/removing+worksheets+using+sheet+index+in+php/","title":"Removing Worksheets Using Sheet Index in PHP"},{"content":"Removing Worksheets Using Sheet Name\nRemoving Worksheets Using Sheet Name\nPHP Code\n$dataDir = \u0026amp;lsquo;\u0026#39;;\n// Create Aspose.Cells Helper Object\n$ptr = new \\COM(\u0026amp;lsquo;Aspose.Cells.Interop.InteropHelper\u0026amp;rsquo;);\n// Opening through Path\n// Creating a Workbook object and opening an Excel file using its file path\n$workbook = $ptr-\u0026amp;gt;New(\u0026amp;ldquo;Aspose.Cells.Workbook\u0026amp;rdquo;,array($dataDir . \u0026amp;lsquo;/book1.xls\u0026amp;rsquo;));\n$worksheets = $ptr-\u0026amp;gt;Get($workbook,\u0026amp;ldquo;Worksheets\u0026amp;rdquo;,array());\n$ptr-\u0026amp;gt;Call($worksheets,\u0026amp;ldquo;RemoveAt_2\u0026amp;rdquo;,array(\u0026amp;ldquo;Sheet1\u0026amp;rdquo;));\n$ptr-\u0026amp;gt;Call($workbook,\u0026amp;ldquo;Save\u0026amp;rdquo;,array($dataDir.\u0026amp;quot;/output.xls\u0026amp;rdquo;));\nprint \u0026amp;ldquo;Completed.\u0026amp;rdquo; . PHP_EOL;\nDownload Running Code\nDownload Removing Worksheets Using Sheet Name (Aspose.Cells) from any of the below mentioned social coding sites:\n GitHub  ","date":-62135596800,"description":"","objectID":"985c29fd91c171edcb0f495c29d75c15","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/managementfeaturesinphp/managingworksheetsinphp/removing+worksheets+using+sheet+name+in+php/","title":"Removing Worksheets Using Sheet Name in PHP"},{"content":"","date":-62135596800,"description":"","objectID":"24aaf6cf5ade2c9073beafd62e2a2951","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforphp/phpprogrammersguide/workingwithworksheetsinphp/managementfeaturesinphp/managingworksheetsinphp/","title":"Managing Worksheets in PHP"},{"content":"Contents Summary\n Introduction  Module Features   System Requirements and Supported Platforms Downloading and Installing  Downloading Installing   Using and Video Demo  Using  How to apply Aspose License? Dynamic Forms Settings Dynamic Form Submit Export Saved Data   Video Demo   Support, Extend and Contribute  Support Extend and Contribute  Source Code How to configure source code      Introduction\nAspose.Cells Dynamic Forms for Sitefinity Module allows users to Generate Dynamic Questionnaire and Surveys, save user input into Excel Spreadsheet and Export the results into Excel, Text, CSV and OpenDocument Spreadsheet using Aspose.Cells. This module demonstrates the powerful spreadsheet building feature provided by Aspose.Cells for .NET.\n        Module Features    This initial version of the module is enriched with the following features to make the Forms Building and Export process simple and easy to use\n Save Form Field Settings in Excel Save Form’s User Input Data in to Excel Allow to Add new and Update existing Form Fields Allow to Add TextBox, Multiline TextBox, RadioButtons, CheckBox and DropDownList, DropDownList Items type Fields Allow to Add/Update Label for each Fields Allow to Show/Hide Form Fields Auto Fit Columns to contents length and apply Header Column formatting as Bold Text Export Data to Microsoft Excel Documents (.xls, .xlsx and .xlsb) Export Data to Tab delimited text document (*.txt) Export Data to CSV (Comma delimited) (*.csv) Export Data to OpenDocument Spreadsheet (*.ods) Option to select desired output format before exporting. Exported document is automatically sent to browser for downloading.  System Requirements and Supported Platforms\nIn order to setup Aspose.Cells .NET for Sitefinity add-ons you need to have the following requirements met:\n Sitefinity CMS running on ASP.NET 4.0  Please feel free to contact us if you have any issues setting up this Sitefinity Add-on.\nThe Add-on is supported on all versions of\n Sitefinity CMS running on …","date":-62135596800,"description":"","objectID":"a2c4d06141edf05d052c4cb328cc34bf","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforsitefinity/aspose.cells+forms+for+sitefinity/","title":"Aspose.Cells Forms for Sitefinity"},{"content":"Contents Summary\n Introduction System Requirements and Supported Platforms  System Requirements Supported Platforms   Source Code  How to configure the source code   Installation and Usage  Downloading Installing   Using and Video Demo  Using Video Demo   Support Extend and Contribute  Introduction\nAspose .NET Export Users to Excel for SiteFinity Module allows developers to export SiteFinity Users into Microsoft Excel or OpenOffice Spreadsheet. This module demonstrates the powerful spreadsheet building feature provided by Aspose.Cells.\nSystem Requirements and Supported Platforms\nSystem Requirements\nIn order to setup Aspose.Cells .NET for Sitefinity add-ons you need to have the following requirements met:\n Sitefinity CMS running on ASP.NET 4.0  Please feel free to contact us if you have any issues setting up this Sitefinity Add-on.\nSupported Platforms\nThe Add-on is supported on all versions of\n Sitefinity CMS running on ASP.NET 4.0  Source Code\nYou can get the latest source code from one of the following locations\n CodePlex  Github   How to configure the source code\nYou need to have the following installed in order to open and extend the source code\n Visual Studio 2010 or higher  Please follow these simple steps to get started\n Download/Clone the source code. Open Visual Studio 2010 and Choose File \u0026amp;gt; Open Project Browse to the latest source code that you have downloaded and open the .sln file.  Installation and Usage\nDownloading\nYou can download Aspose .NET Content Exporter for Sitefinity module from one of the following locations\n CodePlex  Github   Installing\nOnce downloaded, please follow these steps to install the Add-on into your Sitefinity website:\nStep 1: Copy files to your Sitefinity installation\nPlease extract the downloaded ZIP file. You will need FTP or direct access to the Sitefinity installation folder on the server to perform the following:\n Copy Aspose.Cells.dll and Aspose.SiteFinity.ExportUsersToExcel.dll into the bin folder of the Sitefinity …","date":-62135596800,"description":"","objectID":"287a1fc9a187feb7b67162e06feaf513","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforsitefinity/sitefinity+export+users+to+excel/","title":"Sitefinity Export Users to Excel"},{"content":"Contents Summary\n Getting Started  Introduction  What is Sitefinity? Aspose.Cells for .NET Aspose.Cells for .NET Plugins      Getting Started\nIntroduction\nWhat is Sitefinity?\nSitefinity is a modern ASP.NET based web Content Management System (CMS), delivering intuitive web content management and robust development environment for business professionals. Here are the projects we have created for this popular CMS.\nAspose.Cells for .NET\nAspose.Cells for .NET is an advanced class library for .NET that enables you to perform a wide range of spreadsheet processing tasks directly within your .NET applications.\nWith Aspose.Cells you can generate, modify, convert, render and print spreadsheet without using Microsoft Excel.\nAspose.Cells for .NET supports XSL, XSLX, OpenOffice and many other formats.\nAspose.Cells for .NET Plugins\nThis section has the following topics:\n Aspose.Cells Forms for Sitefinity Sitefinity Export Users to Excel  ","date":-62135596800,"description":"","objectID":"03b27ba726e8f393f5c2c58a9b31c659","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforsitefinity/","title":"Aspose.Cells .NET for Sitefinity"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing\n5 Using\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n     Introduction    Aspose .NET Database Data Exporter to Excel for Umbraco Module allows users to export data directly from local or remote database tables, views and by custom query into Microsoft Excel or OpenOffice Spreadsheet. This module demonstrates the powerful spreadsheet building feature provided by Aspose.Cells. This initial version of the module is enriched with the following cool features to make the Export process simple and easy to use\nModule Features\nThis initial version of the Add-on have the following features:\n Allow to connect Local MS SQL Server Database Allow to connect Remote MS SQL Server Database Populate all Tables from connected database Populate all Views from connected database Allow to write Custom Query Auto Fit Columns to contents length. Allow to skip string more than 32k in excel cells (LoadOptions) Apply Header Column formating as Bold Text Allow to use as Data Source (Table, Views, Custom Query) Export Data to Microsoft Excel Documents (.xls, .xlsx and .xlsb) Export Data to Tab delimited text document (*.txt) Export Data to CSV (Comma delimited) (*.csv) Export Data to OpenDocument Spreadsheet (*.ods) Option to select desired output format before exporting. Exported document is automatically sent to browser for downloading.   .\nSystem Requirements and Supported Platforms\nSystem Requirements\nIn order to setup Aspose .NET Database Data Exporter to Excel for Umbraco module you need to have the following requirements met:\n Umbraco 6.2.5 \u0026amp;amp; Umbraco 6 versions Umbraco with MS SQL Server Microsoft .Net Framework 4.0  Note: Umbraco 7 and above are not supported in this release. We look forward to hear your feedback …","date":-62135596800,"description":"","objectID":"da72f37a8e8cd43ca1a42d038cca35fb","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforumbraco/umbraco+database+data+exporter+to+excel/","title":"Umbraco Database Data Exporter to Excel"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing\n5 Using\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n     Introduction    Export Members to Excel is an Add-on for Umbraco which allows you to export members from your Umbraco CMS to an Excel and OpenDocument Spreadsheet using Aspose.Cells. A new node titled Export Members To Excel appears under Members tree in Umbraco backend after installation where you can simply select members to export and output format to get members in selected output document format.\nModule Features\nThis initial version of the Add-on have the following features:\n Export members to Microsoft Excel Documents (.xls, .xlsx and .xlsb) Export members to Tab delimited text document (.txt) Export members to CSV (Comma delimited) (*.csv) Export members to OpenDocument Spreadsheet (*.ods) Option to select desired output format before exporting Option to export all or selected members to selected output document format. Works with all .NET versions starting from .NET 2.0. Exported document is automatically sent to browser for downloading If selected a copy of the exported document is saved in App_Data/AsposeMemberExport folder on the server for later use. Compatible with a wide range of Umbraco versions 4.5+ including Version 6 and 7.  System Requirements and Supported Platforms\nSystem Requirements\nIn order to setup this module you need to have the following requirements met:\n Umbraco 6.0 +  Please feel free to contact us if you wish to install this module on other versions of Umbraco.\nSupported Platforms\nThe module is supported on all versions of\n Umbraco running on ASP.NET 4.0  Downloading\nYou can download Export Members to Excel Add-on from one of the following locations\n CodePlex  Github   Installing\nOnce downloaded, please follow …","date":-62135596800,"description":"","objectID":"f10022818d319f87219b8544245ff491","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforumbraco/umbraco+export+members+to+excel/","title":"Umbraco Export Members to Excel"},{"content":"This section has following topics:\n Umbraco Export Members to Excel Umbraco Database Data Exporter to Excel  ","date":-62135596800,"description":"","objectID":"b332ccf22cf109f8f4c53f487e1b19ba","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforumbraco/","title":"Aspose.Cells .NET for Umbraco"},{"content":"   Contents Summary\n1 Introduction 1.1 Aspose.Cells for .NET\n1.2 Explore Aspose.Cells for .NET Examples using Visual Studio\n2 System Requirements and Supported Platforms\n3 Downloading\n4 Installing\n5 Using\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n7.2.3 Source code overview\n     Introduction    Microsoft Visual Studio is an integrated development environment (IDE) from Microsoft. It is used to develop computer programs for Microsoft Windows, as well as web sites, web applications and web services. Visual Studio uses Microsoft software development platforms such as Windows API, Windows Forms, Windows Presentation Foundation, Windows Store and Microsoft Silverlight. It can produce both native code and managed code.\nAspose.Cells for .NET\nAspose.Cells for .NET provides the most flexible group of components that enable .NET applications to create, modify, convert, render and print Excel® spreadsheets without requiring Microsoft Excel® to be installed on the server.\nAspose.Cells for .NET supports all the major Microsoft Excel and other file formats including XLS, XLSX, XLSM, XLTX/XLTM, HTML, CSV, ODS, Tab Delimited, SpreadsheetML and PDF, etc. For more details about Aspose.Cells for .NET API\nExplore Aspose.Cells for .NET Examples using Visual Studio\nAspose Visual Studio Plugin - Explore Aspose.Cells for .NET Examples is a great tool to quickly download and explore Aspose.Cells for .NET API examples. It saves lots of time and efforts by providing a very simple option to seamlessly select, download and open the latest example projects without having to leave your Visual Studio.\nThis version provides the following features:\n Supports Visual Studio 2010 and Visual Studio 2012 and Visual Studio 2013. Easy to launch from File \u0026amp;gt; Aspose menu in Visual Studio Saves time and reduces the learning curve. Enables you to select and open the latest Aspose.Cells for .NET API examples …","date":-62135596800,"description":"","objectID":"13ad86d61ec35fc6864ebea50ea625b9","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvisualstudio/aspose.cells+visual+studio+plugin/","title":"Aspose.Cells Visual Studio Plugin"},{"content":"   Contents Summary\n1 Introduction 1.1 Module Features\n2 System Requirements and Supported Platforms 2.1 System Requirements\n2.2 Supported Platforms\n3 Downloading\n4 Installing 4.1 For Visual Studio 2010, 2012 and 2013\n4.2 For Visual Studio 2005, 2008 and Express editions\n5 Using 5.1 Manually adding ExportGridViewToExcel control\n5.2 FAQs\n5.3 Aspose .NET Export GridView To Excel Control Properties\n6 Video Demo\n7 Support, Extend and Contribute 7.1 Support\n7.2 Extend and Contribute 7.2.1 Source Code\n7.2.2 How to configure the source code\n7.2.3 Source code overview\n     Introduction    Export GridView To Excel Control is an ASP.NET server control which allows exporting contents of GridView into Microsoft Excel or OpenOffice Spreadsheets using Aspose.Cells. It adds Export to Excel button on top of the GridView control. Clicking the button dynamically exports the content of the GridView control to a Microsoft Excel or OpenOffice Spreadsheet and then automatically downloads the exported file to the disk location selected by the user in just couple of seconds.\nModule Features\nThis initial version of the control provides the following features:\n Get an offline copy of your favorite online GridView content for editing, sharing and printing. Inherited from default ASP.NET GridView control and hence have all its features and properties. Export GridView to Xlsx, Xlsb, Xls, Txt, Csv, Ods. Works with all .NET versions starting from .NET 2.0. Ability to customize/localize Export button text. Apply look and feel of your own theme on Export button using css. Option to add custom heading on top of the exported document Option to save each exported document on server at configurable disk path Option to export current page or all pages when paging is enabled  This control allows you to export GridView in the following different file formats.\n Export GridView to Excel Export GridView to Xlsx Export GridView to Xlsb Export GridView to Xls Export GridView to Txt Export GridView to Csv …","date":-62135596800,"description":"","objectID":"904a0faefaa0bff604cd79f4e799e511","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvisualstudio/visual+studio+export+gridview+to+excel+control/","title":"Visual Studio Export GridView To Excel Control"},{"content":"This section has the following topics:\n Visual Studio Export GridView To Excel Control Aspose.Cells Visual Studio Plugin  ","date":-62135596800,"description":"","objectID":"0f2e90041faea0889818e72d995297d7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvisualstudio/","title":"Aspose.Cells .NET for VisualStudio"},{"content":"Contents Summary\n What is VSTO? Aspose.Cells for .Net Aspose.Cells for VSTO  Introduction System Requirements and Supported Platforms  System Requirements Supported Operating Systems .NET Framework versions supported   Downloading Installing Support, Extend and Contribute  Support Extend and Contribute Source Code How to configure the source code     Sample Code Examples  What is VSTO?\nVSTO, or Visual Studio Tools for Office, or Microsoft Visual Studio Tools is part of Microsoft\u0026amp;rsquo;s Visual Studio .NET tools suite and supports the Microsoft .NET Framework. It is used by developers to write code connecting Microsoft Office Word, Excel and Outlook applications. Developers using VSTO can employ C# or Visual Basic languages. It is an alternative to Visual Basic for Applications, or VBA.\nAspose.Cells for .Net\nAspose.Cells for .NET provides the most flexible group of components that enable .NET Application to create and manage Excel Spreadsheets without requiring Microsoft Excel to be installed on the server. Aspose.Cells is one of the leading components for all types of Excel formats manipulation. Unlike similar products from other vendors, Aspose.Cells not only supports spreadsheet generation and other basic file formatting features, but also supports a number of advanced features. These advanced features make it much more convenient for the developers to manipulate spreadsheet contents, cells formatting and files protection. Aspose.Cells also allows importing data into spreadsheets from different data sources, adding common and complex Mathematical, DateTime, Financial, Text Formulas / Functions, supports manipulation of charts, pictures, comments, drawing objects and controls etc.\nAspose.Cells for VSTO\nIntroduction\nThe developers looking for file format libraries may need to walk through the features provided by the libraries available on the market. Mainly, two factors are considered when choosing an option:\n Features Efforts required to use the library  If you …","date":-62135596800,"description":"","objectID":"ec71dc432d5c8014fb5b31d61261bcc3","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/","title":"Aspose.Cells .NET for VSTO"},{"content":"To add borders to cells in a spreadsheet, take the following steps:\n Set up the worksheet:  Instantiate an Application object(VSTO only) Add a Workbook Get the first sheet Add text to the cells that you\u0026amp;rsquo;ll add borders to   Add borders:  Define a range Apply a border style to the range Repeat for each range and each border style you want to set. This example applies hairlines, thin,medium and thick lines   Finish:  Autofit the column that the cells are in to fit the text neatly Save the document    These steps are shown in code below. The first code examples show how to implement them using VSTO with either C# or Visual Basic. After the VSTO examples are examples that show how to perform the same steps using Aspose.Cells for .NET, again using either C# or Visual Basic. The Aspose.Cells code samples are a lot shorter because Aspose.Cells is optimized for efficient coding.\nThe code generates an Excel file with a number of cells on the first sheet, each with a different border:\nCells with borders applied.\nVSTO\n//Instantiate the Application object.\nExcel.Application ExcelApp = Application;\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Put some text into different cells (A2, A4, A6, A8).\nobjSheet.Cells[2, 1] = \u0026amp;ldquo;Hair Lines\u0026amp;rdquo;;\nobjSheet.Cells[4, 1] = \u0026amp;ldquo;Thin Lines\u0026amp;rdquo;;\nobjSheet.Cells[6, 1] = \u0026amp;ldquo;Medium Lines\u0026amp;rdquo;;\nobjSheet.Cells[8, 1] = \u0026amp;ldquo;Thick Lines\u0026amp;rdquo;;\n//Define a range object(A2).\nExcel.Range _range;\n_range = objSheet.get_Range(\u0026amp;ldquo;A2\u0026amp;rdquo;, \u0026amp;ldquo;A2\u0026amp;rdquo;);\n//Get the borders collection.\nExcel.Borders borders = _range.Borders;\n//Set the hair lines style.\nborders.LineStyle = Excel.XlLineStyle.xlContinuous;\nborders.Weight = 1d;\n//Define a range object(A4).\n_range = objSheet.get_Range(\u0026amp;ldquo;A4\u0026amp;rdquo;, \u0026amp;ldquo;A4\u0026amp;rdquo;);\n//Get the borders collection.\nborders = …","date":-62135596800,"description":"","objectID":"c9ddd33a16a5e4804174f2bd17f1aaf5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/add+borders+to+cells+in+a+worksheet+in+vsto+and+aspose.cells/","title":"Add Borders to Cells in a Worksheet in VSTO and Aspose.Cells"},{"content":"To add hyperlinks to cells in a spreadsheet, take the following steps:\n Set up the worksheet:  Instantiate an Application object.(VSTO only.) Add a Workbook. Get the first sheet. Add text to the cells that you\u0026amp;rsquo;ll add a hyperlink to.   Add hyperlink. Save the document.  These steps are shown in the code examples below. The first examples shows how to use VSTO with either C# to add a hyperlink to a cell. The examples that follow show how to do the same thing using Aspose.Cells for .NET, again using C#.\nThe code samples generate an Excel file that has a hyperlink in cell A1 on the first worksheet.\nA hyperlink is added to cell A1.\nVSTO\n//Instantiate the Application object.\nExcel.Application ExcelApp = Application;\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Define a range object(A1).\nExcel.Range _range;\n_range = objSheet.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;A1\u0026amp;rdquo;);\n//Add a hyperlink to it.\nobjSheet.Hyperlinks.Add(_range, \u0026amp;ldquo;http://www.aspose.com/\u0026amp;quot;, Type.Missing, \u0026amp;ldquo;Click to go to Aspose site\u0026amp;rdquo;, \u0026amp;ldquo;Aspose Site!\u0026amp;quot;);\n//Save the excel file.\nobjBook.SaveCopyAs(\u0026amp;ldquo;Hyperlink_test.xls\u0026amp;rdquo;);\n//Quit the Application.\nExcelApp.Quit();\nAspose.Cells\n//Instantiate a new Workbook object.\nWorkbook workbook = new Workbook();\n//Get the First sheet.\nWorksheet worksheet = workbook.Worksheets[0];\n//Define A1 Cell.\nAspose.Cells.Cell cell = worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\n//Add a hyperlink to it.\nint index = worksheet.Hyperlinks.Add(\u0026amp;ldquo;A1\u0026amp;rdquo;, 1, 1, \u0026amp;ldquo;http://www.aspose.com/\u0026amp;quot;);\nworksheet.Hyperlinks[index].TextToDisplay = \u0026amp;ldquo;Aspose Site!\u0026amp;quot;;\nworksheet.Hyperlinks[index].ScreenTip = \u0026amp;ldquo;Click to go to Aspose site\u0026amp;rdquo;;\n//Save the excel file.\nworkbook.Save(\u0026amp;ldquo;Hyperlink_test.xls\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github …","date":-62135596800,"description":"","objectID":"9497b85fef6c35f5d3505f5d861745fe","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/add+hyperlinks+to+cells+in+vsto+and+aspose.cells/","title":"Add Hyperlinks to Cells in VSTO and Aspose.Cells"},{"content":"Migration tip:\n Add new worksheets to an existing Microsoft Excel file. Fill data into the cells of each new worksheet. Activate a sheet in the workbook. Save as Microsoft Excel file.  Below, are parallel code snippets for VSTO (C#) and Aspose.Cells for .NET (C#), that show how to achieve these tasks.\nVSTO\n//intiate application object\nExcel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Declare a Worksheet object.\nExcel.Worksheet newWorksheet;\n//Add 5 new worksheets to the workbook and fill some data\n//into the cells.\nfor (int i = 1; i \u0026amp;lt; 6; i++){\n//Add a worksheet to the workbook.\nnewWorksheet = (Excel.Worksheet)excelApp.Worksheets.Add(Missing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Name the sheet.\nnewWorksheet.Name = \u0026amp;ldquo;New_Sheet\u0026amp;rdquo; + i.ToString();\n//Get the Cells collection.\nExcel.Range cells = newWorksheet.Cells;\n//Input a string value to a cell of the sheet.\ncells.set_Item(i, i, \u0026amp;ldquo;New_Sheet\u0026amp;rdquo; + i.ToString());\n}\n//Activate the first worksheet by default.\n((Excel.Worksheet)excelApp.ActiveWorkbook.Sheets[1]).Activate();\n//Save As the excel file.\nexcelApp.ActiveWorkbook.SaveCopyAs(\u0026amp;ldquo;out_Book1.xls\u0026amp;rdquo;);\n//Quit the Application.\nexcelApp.Quit();\nAspose.Cells\n//Instantiate an instance of license and set the license file\n//through its path\nAspose.Cells.License license = new Aspose.Cells.License();\nlicense.SetLicense(\u0026amp;ldquo;Aspose.Total.lic\u0026amp;rdquo;);\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Instantiate a new Workbook.\n//Open the excel file.\nWorkbook workbook = new Workbook(myPath);\n//Declare a Worksheet object.\nWorksheet newWorksheet;\n//Add 5 new worksheets …","date":-62135596800,"description":"","objectID":"5f8fdd7a692ed3e188eb6b621abccd78","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/adding+new+worksheets+to+workbook+and+activating+a+sheet+in+vsto+and+aspose.cells/","title":"Adding New Worksheets to Workbook and Activating a Sheet in VSTO and Aspose.Cells"},{"content":"Below is the code comparison of applying style to rows and columns of workbooks:\nVSTO\nExcel.Workbook myWorkbook = this.Application.Workbooks.Open(fileName);\nExcel.Worksheet mySheet = myWorkbook.ActiveSheet;\nExcel.Style style = this.Application.ActiveWorkbook.Styles.Add(\u0026amp;ldquo;NewStyle\u0026amp;rdquo;);\nstyle.Font.Name = \u0026amp;ldquo;Verdana\u0026amp;rdquo;;\nstyle.Font.Size = 12;\nstyle.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Red);\nstyle.Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.Gray);\nstyle.Interior.Pattern = Excel.XlPattern.xlPatternSolid;\nExcel.Range FormatingRange = mySheet.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;A10\u0026amp;rdquo;);\nFormatingRange.Style = \u0026amp;ldquo;NewStyle\u0026amp;rdquo;;\nAspose.Cells\nWorkbook myWorkbook = new Workbook(fileName);\nWorksheet mySheet = myWorkbook.Worksheets[myWorkbook.Worksheets.ActiveSheetIndex];\nStyle style = myWorkbook.CreateStyle();\nstyle.VerticalAlignment = TextAlignmentType.Center;\n//Setting the horizontal alignment of the text in the \u0026amp;ldquo;A1\u0026amp;rdquo; cell\nstyle.HorizontalAlignment = TextAlignmentType.Center;\n//Setting the font color of the text in the \u0026amp;ldquo;A1\u0026amp;rdquo; cell\nstyle.Font.Color = Color.Green;\n//Shrinking the text to fit in the cell\nstyle.ShrinkToFit = true;\n//Setting the bottom border color of the cell to red\nstyle.Borders[BorderType.BottomBorder].Color = Color.Red;\n//Creating StyleFlag\nStyleFlag styleFlag = new StyleFlag();\nstyleFlag.HorizontalAlignment = true;\nstyleFlag.VerticalAlignment = true;\nstyleFlag.ShrinkToFit = true;\nstyleFlag.Borders = true;\nstyleFlag.FontColor = true;\n//Accessing a row from the Rows collection\nColumn column = mySheet.Cells.Columns[0];\n//Assigning the Style object to the Style property of the row\ncolumn.ApplyStyle(style, styleFlag);\nmyWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"1f8b96315ef327d64c5f25b620667067","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/apply+styles+to+ranges+in+workbooks/","title":"Apply Styles to Ranges in Workbooks"},{"content":"To apply auto-filtering to a column:\n Create a workbook. Get a worksheet. Add sample data. Apply auto-filter. Auto-fit columns to make the display attractive. Save the spreadsheet.  The code samples in this article show how to perform these steps using VSTO with either C#, or using Apose.Cells, again with either C#.\nVSTO\nExcel.Application ExcelApp = Application;\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet sheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Add data into A1 and B1 Cells as headers.\nsheet.Cells[1, 1] = \u0026amp;ldquo;Product ID\u0026amp;rdquo;;\nsheet.Cells[1, 2] = \u0026amp;ldquo;Product Name\u0026amp;rdquo;;\n//Add data into details cells.\nsheet.Cells[2, 1] = 1;\nsheet.Cells[3, 1] = 2;\nsheet.Cells[4, 1] = 3;\nsheet.Cells[5, 1] = 4;\nsheet.Cells[2, 2] = \u0026amp;ldquo;Apples\u0026amp;rdquo;;\nsheet.Cells[3, 2] = \u0026amp;ldquo;Bananas\u0026amp;rdquo;;\nsheet.Cells[4, 2] = \u0026amp;ldquo;Grapes\u0026amp;rdquo;;\nsheet.Cells[5, 2] = \u0026amp;ldquo;Oranges\u0026amp;rdquo;;\n//Enable Auto-filter.\nsheet.EnableAutoFilter = true;\n//Create the range.\nExcel.Range range = sheet.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;B5\u0026amp;rdquo;);\n//Auto-filter the range.\nrange.AutoFilter(\u0026amp;ldquo;1\u0026amp;rdquo;, \u0026amp;ldquo;\u0026amp;lt;\u0026amp;gt;\u0026amp;rdquo;, Microsoft.Office.Interop.Excel.XlAutoFilterOperator.xlOr, \u0026amp;ldquo;\u0026amp;quot;, true);\n//Auto-fit the second column.\nsheet.get_Range(\u0026amp;ldquo;B1\u0026amp;rdquo;, \u0026amp;ldquo;B5\u0026amp;rdquo;).EntireColumn.AutoFit();\n//Save the copy of workbook as .xlsx file.\nobjBook.SaveCopyAs(\u0026amp;ldquo;vsto_autofilter.xlsx\u0026amp;rdquo;);\nAspose.Cells\n//Instantiate a new Workbook.\nWorkbook objBook = new Workbook();\n//Get the First sheet.\nWorksheet sheet = objBook.Worksheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Add data into A1 and B1 Cells as headers.\nsheet.Cells[0, 0].PutValue(\u0026amp;ldquo;Product ID\u0026amp;rdquo;);\nsheet.Cells[0, 1].PutValue(\u0026amp;ldquo;Product Name\u0026amp;rdquo;);\n//Add data into details cells.\nsheet.Cells[1, 0].PutValue(1);\nsheet.Cells[2, 0].PutValue(2);\nsheet.Cells[3, 0].PutValue(3);\nsheet.Cells[4, 0].PutValue(4);\nsheet.Cells[1, …","date":-62135596800,"description":"","objectID":"fc31936acf1902b84d3e13f974063d06","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/auto+filter+data+in+vsto+and+aspose.cells/","title":"Auto Filter Data in VSTO and Aspose.Cells"},{"content":"Migration Tip:\n\\1. Create Workbook object and get Worksheet. \\2. Insert text in worksheet. \\3. Create new Worksheet and Copy it to previous before made worksheet.\nVSTO\nError rendering macro \u0026amp;lsquo;code\u0026amp;rsquo; : Invalid value specified for parameter lang\nAspose.Cells\nprivate static string fileName =\u0026amp;quot;CopyWorksheets.xlsx\u0026amp;rdquo;;\nWorkbook newWorkbook = new Workbook();\nWorksheet worksheet = newWorkbook.Worksheets.Add(\u0026amp;ldquo;New Sheet\u0026amp;rdquo;);\nCells cells = worksheet.Cells;\ncells[0, 0].PutValue(\u0026amp;ldquo;Some Text\u0026amp;rdquo;);\nWorksheet worksheet2 = newWorkbook.Worksheets.Add(\u0026amp;ldquo;MySheet\u0026amp;rdquo;);\nworksheet2.Copy(worksheet);\nnewWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"e69e2fbb1e304d0a8da42f2c3dadc260","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/copy+worksheets/","title":"Copy Worksheets"},{"content":"This article compares how to create a pie chart using Office Automation and VSTO to using Aspose.Cells for .NET. The steps for creating a pie chart are:\n Creating a workbook and worksheet. Adding sample data. Referencing productsChart. Adding a pie chart, defining the data range and chart title. Saving spreadsheet. The code samples in this article show how to add a pie chart with VSTO, using either C#, compared to creating one with Aspose.Cells, again using either C#.  VSTO\nprivate void PieChart()\n{\n//Instantiate the Application object.\nExcel.Application ExcelApp = Application;\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n// Access a Vsto Worksheet\nMicrosoft.Office.Interop.Excel.Worksheet nativeWorksheet = Globals.ThisAddIn.Application.ActiveWorkbook.ActiveSheet;\nMicrosoft.Office.Tools.Excel.Worksheet sheet = Globals.Factory.GetVstoObject(nativeWorksheet);\n//Add sample data for pie chart\n//Add headings in A1 and B1\nsheet.Cells[1, 1] = \u0026amp;ldquo;Products\u0026amp;rdquo;;\nsheet.Cells[1, 2] = \u0026amp;ldquo;Users\u0026amp;rdquo;;\n//Add data from A2 till B4\nsheet.Cells[2, 1] = \u0026amp;ldquo;Aspose.Cells\u0026amp;rdquo;;\nsheet.Cells[2, 2] = 10000;\nsheet.Cells[3, 1] = \u0026amp;ldquo;Aspose.Slides\u0026amp;rdquo;;\nsheet.Cells[3, 2] = 8000;\nsheet.Cells[4, 1] = \u0026amp;ldquo;Aspose.Words\u0026amp;rdquo;;\nsheet.Cells[4, 2] = 12000;\n//Chart reference\nMicrosoft.Office.Tools.Excel.Chart productsChart;\n//Add a Pie Chart\nproductsChart = sheet.Controls.AddChart(0, 105, 330, 200, \u0026amp;ldquo;ProductUsers\u0026amp;rdquo;);\nproductsChart.ChartType = Microsoft.Office.Interop.Excel.XlChartType.xlPie;\n//Set chart title\nproductsChart.HasTitle = true;\nproductsChart.ChartTitle.Text = \u0026amp;ldquo;Users\u0026amp;rdquo;;\n//Gets the cells that define the data to be charted.\nMicrosoft.Office.Interop.Excel.Range chartRange = sheet.get_Range(\u0026amp;ldquo;A2\u0026amp;rdquo;, \u0026amp;ldquo;B4\u0026amp;rdquo;);\nproductsChart.SetSourceData(chartRange, missing);\n//Access the Active workbook from Vsto sheet\nMicrosoft.Office.Interop.Excel.Workbook workbook = …","date":-62135596800,"description":"","objectID":"4ee38709e6ad72d0139f1207a9f54af5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/create+a+pie+chart+in+vsto+and+aspose.cells/","title":"Create a Pie Chart in VSTO and Aspose.Cells"},{"content":"Migration Tips:\n\\1. Create Workbook object \\2. Get current Worksheet. \\3. Insert some text in any cell. \\4. Save the Workbook.\nVSTO\nBelow is code example for VSTO\nExcel.Workbook newWorkbook = this.Application.Workbooks.Add();\nExcel.Worksheet worksheet = newWorkbook.ActiveSheet;\nExcel.Range cells = worksheet.Cells;\ncells.set_Item(1,1,\u0026amp;ldquo;Some Text\u0026amp;rdquo;);\nnewWorkbook.Save();\nAspose.Cells\nBelow is code example for Aspose.Cells\nWorkbook newWorkbook = new Workbook();\nWorksheet worksheet = newWorkbook.Worksheets.Add(\u0026amp;ldquo;New Sheet\u0026amp;rdquo;);\nCells cells = worksheet.Cells;\ncells[0,0].PutValue(\u0026amp;ldquo;Some Text\u0026amp;rdquo;);\nnewWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"b5f10f70c855156c34538289c8e41a65","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/create+and+save+new+workbooks/","title":"Create and Save New Workbooks"},{"content":"To create a named range:\n Set up the worksheet:  Instantiate an Application object.(VSTO only.) Add a Workbook. Get the first sheet.   Create a named range:  Define a range. Name the range. Save the file.    The code examples below show how to perform these steps using VSTO with either C#. The code examples that follow show how to do the same thing using Aspose.Cells for .NET, again with either C#.\nVSTO\n//Create Excel Object\nExcel.Application xl = Application;\n//Create a new Workbook\nExcel.Workbook wb = xl.Workbooks.Add(Missing.Value);\n//Get Worksheets Collection\nExcel.Sheets xlsheets = wb.Sheets;\n//Select the first sheet\nExcel.Worksheet excelWorksheet = (Excel.Worksheet)xlsheets[1];\n//Select a range of cells\nExcel.Range range = (Excel.Range)excelWorksheet.get_Range(\u0026amp;ldquo;A1:B4\u0026amp;rdquo;, Type.Missing);\n//Add Name to Range\nrange.Name = \u0026amp;ldquo;Test_Range\u0026amp;rdquo;;\n//Put data in range cells\nforeach (Excel.Range cell in range.Cells)\n{\ncell.set_Value(Missing.Value, \u0026amp;ldquo;Test\u0026amp;rdquo;);\n}\n//Save New Workbook\nwb.SaveCopyAs(\u0026amp;ldquo;Test_Range.xls\u0026amp;rdquo;);\n//Quit Excel Object\nxl.Quit();\nAspose.Cells\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Creating a named range\nRange range = worksheet.Cells.CreateRange(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;B4\u0026amp;rdquo;);\n//Setting the name of the named range\nrange.Name = \u0026amp;ldquo;Test_Range\u0026amp;rdquo;;\nfor (int row = 0; row \u0026amp;lt; range.RowCount; row++)\n{\nfor (int column = 0; column \u0026amp;lt; range.ColumnCount; column++)\n{\nrange[row, column].PutValue(\u0026amp;ldquo;Test\u0026amp;rdquo;);\n}\n}\n//Saving the modified Excel file in default (that is Excel 2003) format\nworkbook.Save(\u0026amp;ldquo;Test_Range.xls\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github [Sourceforge](https://sourceforge.net/projects/asposevsto/files/Aspose.Cells Vs VSTO Excel/Creating a Named Range (Aspose.Cells).zip/download) …","date":-62135596800,"description":"","objectID":"0df31144e206b1b387cb41c25c008c0b","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/creating+a+named+range+in+vsto+and+aspose.cells/","title":"Creating a Named Range in VSTO and Aspose.Cells"},{"content":"You can delete any worksheet in a workbook. To delete a worksheet, use the worksheet host item or access the worksheet by using the sheets collection of the workbook.\nVSTO\nExcel.Workbook myWorkbook= this.Application.Workbooks.Open(fileName);\nmyWorkbook.Sheets[2].Delete();\nAspose.Cells\nWorkbook myWorkbook = new Workbook(fileName);\nmyWorkbook.Worksheets.RemoveAt(1);\nmyWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"01e32402962fa8f07e3bca1d1fde2fa7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/delete+worksheets+from+workbooks/","title":"Delete Worksheets from Workbooks"},{"content":"VSTO\nExcel.Workbook myWorkbook = this.Application.Workbooks.Open(fileName);\nExcel.Worksheet mySheet = myWorkbook.ActiveSheet;\nExcel.Range cells = mySheet.Cells;\ncells.set_Item(1, 1, \u0026amp;ldquo;Some Text\u0026amp;rdquo;);\nAspose.Cells\nWorkbook myWorkbook = new Workbook(fileName);\nWorksheet mySheet = myWorkbook.Worksheets[myWorkbook.Worksheets.ActiveSheetIndex];\nCells cells = mySheet.Cells;\ncells[0, 0].PutValue(\u0026amp;ldquo;Some Text\u0026amp;rdquo;);\nmyWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"d17e7c022330cd739fd31b2605d47334","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/display+string+in+worksheet+cell/","title":"Display String in Worksheet Cell"},{"content":"VSTO Excel\nExcel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;List All Worksheets in a Workbook.xls\u0026amp;rdquo;;\n//Open the excel file.\nMicrosoft.Office.Interop.Excel.Workbook ThisWorkbook = excelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\nExcel.Worksheet Worksheet = ThisWorkbook.Worksheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\nfindNow(Worksheet, \u0026amp;ldquo;test\u0026amp;rdquo;);\n//Save the file.\nexcelApp.ActiveWorkbook.Save();\nexcelApp.Quit();\nAspose.Cells\nstatic void Main(string[] args)\n{\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Specify the template Excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the Excel file.\nworkbook.Open(myPath);\n//Get the first sheet.\nAspose.Cells.Worksheet objSheet = workbook.Worksheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\nfindNow(objSheet, \u0026amp;ldquo;test\u0026amp;rdquo;);\nworkbook.Save(myPath);\n}\nprivate static void findNow(Worksheet objSheet, string textToFind)\n{\n//Get Cells collection\nCells cells = objSheet.Cells;\n//Instantiate FindOptions Object\nFindOptions findOptions = new FindOptions();\n//Create a Cells Area\nCellArea ca = new CellArea();\nca.StartRow = 8;\nca.StartColumn = 2;\nca.EndRow = 17;\nca.EndColumn = 13;\n//Set cells area for find options\nfindOptions.SetRange(ca);\n//Set searching properties\nfindOptions.SearchNext = true;\nfindOptions.SeachOrderByRows = true;\nfindOptions.LookInType = LookInType.Values;\n//Find the cell with 0 value\nCell cell = cells.Find(textToFind, null, findOptions);\nConsole.WriteLine(cell.StringValue);\n}\nDownload Sample Code\n Codeplex Github Sourceforge [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/wiki/Find Specific Word Occurrence)  ","date":-62135596800,"description":"","objectID":"0d2f5bd23b5018dd66a2cb94c5bcb955","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/find+specific+word+occurrence/","title":"Find Specific Word Occurrence"},{"content":"VSTO\n//Instantiate the Application object.\nExcel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Get Text of Specific Cell.xlsx\u0026amp;rdquo;;\n//Open the excel file.\nMicrosoft.Office.Interop.Excel.Workbook ThisWorkbook = excelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\nString res = \u0026amp;ldquo;\u0026amp;quot;;\nres = ThisWorkbook.Worksheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;].Range(\u0026amp;ldquo;A1\u0026amp;rdquo;).Text;\nMessageBox.Show(res);\n//Save the file.\nexcelApp.ActiveWorkbook.Save();\nexcelApp.Quit();\nAspose\n//Specify the excel file path.\nstring myPath = \u0026amp;ldquo;Get Text of Specific Cell.xlsx\u0026amp;rdquo;;\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook(myPath);\n//Get worksheet\nWorksheet worksheet = workbook.Worksheets[0];\nString res = \u0026amp;ldquo;\u0026amp;quot;;\nres= worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].Value.ToString();\nConsole.Write(res);\nConsole.ReadKey();\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/wiki/Get Text of Specific Cell)  ","date":-62135596800,"description":"","objectID":"ea52f6dfe28835bc72fc2e03817c7525","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/get+text+of+specific+cell/","title":"Get Text of Specific Cell"},{"content":"This article compares hiding and unhiding worksheets with VSTO, using either C# or Visual Basic, to performing the same task with Aspose.Cells, again using either C# or Visual Basic. Aspose.Cells lets you work without Microsoft Excel installed.\nThe steps to hide a worksheet are:\n Open a file. Get a worksheet. Hide the worksheet. Save the file. To unhide a worksheet again, simply toggle visibility on for the hidden sheet.  The code samples below first show how to hide a worksheet. The first samples show the process with VSTO, using either C#, compared to using Aspose.Cells, again using either C#.\nThe second set of code samples show the line used to unhide the worksheet in VSTO or Aspose.Cells.\nHiding Worksheets\nBelow are code samples for VSTO and Aspose.Cells that illustrate how to hide a worksheet in a workbook.\nVSTO\n//Instantiate the Application object.\nExcel.Application excelApp = Application;\n//Specify the template Excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the Excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Get the first sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)excelApp.ActiveWorkbook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Hide the worksheet.\nobjSheet.Visible = Excel.XlSheetVisibility.xlSheetHidden;\n//Save As the Excel file.\nexcelApp.ActiveWorkbook.Save();\n//Quit the Application.\nexcelApp.Quit();\nAspose.Cells\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Specify the template Excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the Excel file.\nworkbook.Open(myPath);\n//Get the first sheet.\nAspose.Cells.Worksheet objSheet = workbook.Worksheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Hide the worksheet.\nobjSheet.IsVisible = false;\n//Save As the Excel file.\nworkbook.Save(\u0026amp;ldquo;Book1.xls\u0026amp;rdquo;);\nUnHiding Worksheet …","date":-62135596800,"description":"","objectID":"0f38601b37df0ec1fb8c6301f2f4af73","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/hide+and+unhide+worksheets+in+a+workbook+in+vsto+and+aspose.cells/","title":"Hide and Unhide Worksheets in a Workbook in VSTO and Aspose.Cells"},{"content":"To add comments to cells:\n Open an existing Excel file. Add a comment to a cell. Save the file.  To remove the comments, the process is similar, with the exception that the comment is removed.\nThe code samples below illustrate first how to add a comment and then how to remove a comment with either VSTO or Aspose.Cells for .NET.\nInserting Comments\nThese code snippets show how to add a comment to a cell first with VSTO (C#) and then with Aspose.Cells for .NET (C#).\nVSTO\n//Instantiate the Application object.\nExcel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Get the A1 cell.\nExcel.Range rng1 = excelApp.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, Missing.Value);\n//Add the comment with text.\nrng1.AddComment(\u0026amp;ldquo;This is my comment\u0026amp;rdquo;);\n//Save the file.\nexcelApp.ActiveWorkbook.Save();\n//Quit the Application.\nexcelApp.Quit();\nAspose.Cells\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Instantiate a new Workbook.\n//Open the excel file.\nWorkbook workbook = new Workbook(myPath);\n//Add a Comment to A1 cell.\nint commentIndex = workbook.Worksheets[0].Comments.Add(\u0026amp;ldquo;A1\u0026amp;rdquo;);\n//Accessing the newly added comment\nComment comment = workbook.Worksheets[0].Comments[commentIndex];\n//Setting the comment note\ncomment.Note = \u0026amp;ldquo;This is my comment\u0026amp;rdquo;;\n//Save As the excel file.\nworkbook.Save(\u0026amp;ldquo;Book1.xls\u0026amp;rdquo;);\nRemoving Comments\nTo remove a comment from a cell, use the following lines of code for VSTO (C#) and Aspose.Cells for .NET (C#).\nVSTO\n//Remove the comment.\nrng1.Comment.Delete();\nAspose.Cells\n//removing comments\nworkbook.Worksheets[0].Comments.RemoveAt(\u0026amp;ldquo;A1\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex …","date":-62135596800,"description":"","objectID":"f35d32f55114d0309bf578c373c0bc9d","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/inserting+and+removing+cell+comments+in+a+worksheet+in+vsto+and+aspose.cells/","title":"Inserting and Removing Cell Comments in a Worksheet in VSTO and Aspose.Cells"},{"content":"VSTO\nExcel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;List All Worksheets in a Workbook.xlsx\u0026amp;rdquo;;\n//Open the excel file.\nMicrosoft.Office.Interop.Excel.Workbook ThisWorkbook = excelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\nListSheets(ThisWorkbook);\n}\nprivate void ListSheets(Microsoft.Office.Interop.Excel.Workbook workbook)\n{\nint index = 0;\nExcel.Range rng = this.Application.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, missing);\nforeach (Excel.Worksheet displayWorksheet in workbook.Worksheets)\n{\nrng.get_Offset(index, 0).Value2 = displayWorksheet.Name;\nindex++;\n}\n}\nAspose\nstatic void Main(string[] args)\n{\nstring myPath = \u0026amp;ldquo;List All Worksheets in a Workbook.xlsx\u0026amp;rdquo;;\nWorkbook workbook = new Workbook(myPath);\nListSheets(workbook);\n}\nprivate static void ListSheets(Workbook workbook)\n{\nint index=0;\nWorksheet thisWorksheet = workbook.Worksheets[0];\nforeach (Worksheet worksheet in workbook.Worksheets)\n{\nthisWorksheet.Cells[index, 0].Value = worksheet.Name;\nindex++;\n}\n}\nDownload Sample Code\n Codeplex Github Sourceforge [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/wiki/List All Worksheets in a Workbook)  ","date":-62135596800,"description":"","objectID":"8d5a2c82060dfce693fb4eab11773e38","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/list+all+worksheets+in+a+workbook/","title":"List All Worksheets in a Workbook"},{"content":"Open an existing excel file, Merge some cells in the first worksheet in the workbook and save the excel file.\nMerging Cells\nVSTO\nFollowing are the parallel code snippets for VSTO (C#) and Aspose.Cells for .NET (C#).\n//Instantiate the Application object.\nExcel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Get the range of cells i.e.., A1:C1.\nExcel.Range rng1 = excelApp.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;C1\u0026amp;rdquo;);\n//Merge the cells.\nrng1.Merge(Missing.Value);\nrng1 = excelApp.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, Missing.Value);\n//Save the file.\nexcelApp.ActiveWorkbook.Save();\n//Quit the Application.\nexcelApp.Quit();\nAspose.Cells\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Open the excel file.\nworkbook.Open(myPath);\n//Get the range of cells i.e.., A1:C1.\nAspose.Cells.Range rng1 = workbook.Worksheets[0].Cells.CreateRange(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;C1\u0026amp;rdquo;);\n//Merge the cells.\nrng1.Merge();\n//Save the file.\nworkbook.Save(\u0026amp;ldquo;Book1.xls\u0026amp;rdquo;);\nUnMerging Cells\nTo unmerge the cell(s), use the following lines of code for VSTO (C#) and Aspose.Cells for .NET (C#).\nVSTO\n//UnMerge the cell.\nrng1.UnMerge();\nAspose.Cells\nCells rng = workbook.Worksheets[0].Cells;\n//UnMerge the cell.\nrng.UnMerge(0, 0, 1, 3);\nDownload Sample Code\n Codeplex Github [Sourceforge](https://sourceforge.net/projects/asposevsto/files/Aspose.Cells Vs VSTO Excel/Merge or UnMerge Cells in a Worksheet (Aspose.Cells).zip/download) [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/downloads/Merge or UnMerge Cells in a Worksheet (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"80717ecfe12eeff11b3d9a65f8f660c0","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/merge+or+unmerge+cells+in+a+worksheet+in+vsto+and+aspose.cells/","title":"Merge or UnMerge Cells in a Worksheet in VSTO and Aspose.Cells"},{"content":"Below are comparison code example for opening textfile as Workbooks:\nVSTO\nthis.Application.Workbooks.OpenText(@\u0026amp;ldquo;OpenTextFilesAsWorkbooks.txt\u0026amp;rdquo;,\nmissing, 3,\nExcel.XlTextParsingType.xlDelimited,\nExcel.XlTextQualifier.xlTextQualifierNone,\nmissing, missing, missing, true, missing, missing, missing,\nmissing, missing, missing, missing, missing, missing);\nAspose.Cells\nprivate static string fileName = \u0026amp;ldquo;OpenTextFilesAsWorkbooks.xlsx\u0026amp;rdquo;;\nprivate static string TextFile = \u0026amp;ldquo;OpenTextFilesAsWorkbooks.txt\u0026amp;rdquo;;\n//loadoption to represent the option of load file\nLoadOptions loadOptions = new LoadOptions(LoadFormat.CSV);\nWorkbook newWorkbook = new Workbook(TextFile, loadOptions);\nnewWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"c491b4af090a67c77b844822379fcc02","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/open+text+files+as+workbooks/","title":"Open Text Files as Workbooks"},{"content":"VSTO\n//Instantiate the Application object.\nExcel.Application excelApp = Application;\n//Excel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Protect and unProtect Worksheets.xlsx\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Protect the worksheet specifying a password with Structure and Windows attributes.\n((Excel.Worksheet)excelApp.ActiveSheet).Protect(\u0026amp;ldquo;thispassword\u0026amp;rdquo;,\nmissing, missing, missing, missing, missing, missing, missing, missing,\nmissing, missing, missing, missing, true, missing, missing);\n//Unprotect the worksheet specifying its password.\n((Excel.Worksheet)excelApp.ActiveSheet).Unprotect(\u0026amp;ldquo;thispassword\u0026amp;rdquo;);\n//Save the file.\nexcelApp.ActiveWorkbook.Save();\n//Quit the Application.\nexcelApp.Quit();\nAspose.Cells\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Protect and unProtect Worksheets.xlsx\u0026amp;rdquo;;\n//Instantiate a new Workbook.\n//Open the excel file.\nWorkbook workbook = new Workbook(myPath);\n//Protect the worksheet specifying a password with Structure and Windows attributes.\nworkbook.Worksheets[workbook.Worksheets.ActiveSheetIndex].Protect(ProtectionType.All, \u0026amp;ldquo;thispassword\u0026amp;rdquo;, \u0026amp;ldquo;\u0026amp;quot;);\n//Unprotect the worksheet specifying its password.\nworkbook.Worksheets[workbook.Worksheets.ActiveSheetIndex].Unprotect(\u0026amp;ldquo;thispassword\u0026amp;rdquo;);\n//Save As the excel file.\nworkbook.Save(myPath);\nDownload Sample Code\n Codeplex Github Sourceforge [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/wiki/Protect and unProtect Worksheets)  ","date":-62135596800,"description":"","objectID":"dc0b12052da1bb82f40b76adda74fea4","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/protect+and+unprotect+worksheets/","title":"Protect and unProtect Worksheets"},{"content":"To open an existing Microsoft Excel file, protect the workbook with structure and Windows attributes and save the file.\nBelow are parallel code snippets for VSTO (C#) and Aspose.Cells for .NET (C#) that show how to protect a workbook.\nVSTO\nProtecting Workbook\n//Instantiate the Application object.\nExcel.Application excelApp = Application;\n//Excel.Application excelApp = Application;\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;MyBook.xls\u0026amp;rdquo;;\n//Open the excel file.\nexcelApp.Workbooks.Open(myPath, Missing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value,\nMissing.Value, Missing.Value);\n//Protect the workbook specifying a password with Structure and Windows attributes.\nexcelApp.ActiveWorkbook.Protect(\u0026amp;ldquo;007\u0026amp;rdquo;, true, true);\n//Save the file.\nexcelApp.ActiveWorkbook.Save();\n//Quit the Application.\nexcelApp.Quit();\nUnProtecting Workbook\n//Unprotect the workbook specifying its password.\nexcelApp.ActiveWorkbook.Unprotect(\u0026amp;ldquo;007\u0026amp;rdquo;);\nAspose.Cells\nProtecting Workbook\n//Specify the template excel file path.\nstring myPath = \u0026amp;ldquo;Book1.xls\u0026amp;rdquo;;\n//Instantiate a new Workbook.\n//Open the excel file.\nWorkbook workbook = new Workbook(myPath);\n//Protect the workbook specifying a password with Structure and Windows attributes.\nworkbook.Protect(ProtectionType.All, \u0026amp;ldquo;007\u0026amp;rdquo;);\n//Save As the excel file.\nworkbook.Save(\u0026amp;ldquo;MyBook.xls\u0026amp;rdquo;);\nUnProtecting Workbook\n//Unprotect the workbook specifying its password.\nworkbook.Unprotect(\u0026amp;ldquo;007\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github Sourceforge [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/downloads/Protecting and Unprotecting Workbooks (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"47ca1cf075767f833bed87a3b2e030ce","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/protecting+and+unprotecting+workbooks+in+vsto+and+aspose.cells/","title":"Protecting and Unprotecting Workbooks in VSTO and Aspose.Cells"},{"content":"To rotate text in a cell on a worksheet, take the following steps:\n Create a workbook and get a worksheet. Add samples text. Format the text: rotate, add background colour. Save the file. The code samples that follow show how to perform these steps first in VSTO, using either C#, and then in Aspose.Cells, again using either C#.  VSTO\n//intiate Application object\nExcel.Application ExcelApp = Application;\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Put some text into cell B2.\nobjSheet.Cells[2, 2] = \u0026amp;ldquo;Aspose Heading\u0026amp;rdquo;;\n//Define a range object(B2).\nExcel.Range _range;\n_range = objSheet.get_Range(\u0026amp;ldquo;B2\u0026amp;rdquo;, \u0026amp;ldquo;B2\u0026amp;rdquo;);\n//Specify the angle of rotation of the text.\n_range.Orientation = 45;\n//Set the background color.\n_range.Interior.Color = System.Drawing.ColorTranslator.ToWin32(Color.FromArgb(0, 51, 105));\n//Set the font color of cell text\n_range.Font.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.White);\n//Save the excel file.\nobjBook.SaveCopyAs(\u0026amp;ldquo;VSTO_RotateText_test.xlsx\u0026amp;rdquo;);\n//Quit the Application.\nExcelApp.Quit();\nAspose.Cells\n// Instantiate a new Workbook.\nWorkbook objworkbook = new Workbook();\n// Get the First sheet.\nWorksheet objworksheet = objworkbook.Worksheets[0];\n// Get Cells.\nCells objcells = objworksheet.Cells;// Get a particular Cell.\nCell objcell = objcells[\u0026amp;ldquo;B2\u0026amp;rdquo;];// Put some text value.\nobjcell.PutValue(\u0026amp;ldquo;Aspose Heading\u0026amp;rdquo;);\n// Get associated style object of the cell.\nStyle objstyle = objcell.GetStyle();\n// Specify the angle of rotation of the text.\nobjstyle.RotationAngle = 45;\n// Set the custom fill color of the cells.\nobjstyle.ForegroundColor = Color.FromArgb(0, 51, 105);\n// Set the background pattern for fillment color.\nobjstyle.Pattern = BackgroundType.Solid;\n// Set the font color of cell text\nobjstyle.Font.Color = …","date":-62135596800,"description":"","objectID":"5417ba2e781ae69e18476845df04b278","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/rotating+cell+text+in+vsto+and+aspose.cells/","title":"Rotating Cell Text in VSTO and Aspose.Cells"},{"content":"To apply a background image to a spreadsheet:\n Create a workbook and access the sheet you want to apply a background image to. Apply the background image. Save the workbook.  The code samples that follow show how to do this first with VSTO, using either C# or Visual Basic, and then with Aspose.Cells for .NET, again using either C# or Visual Basic.\nThe code examples in this article create a worksheet with a repeating background image, like the one in the screentshot below.\nA background has been set for the worksheet.\nVSTO\n//Instantiate the Application object.\nExcel.Application ExcelApp = Application;\n//Add a Workbook.\nExcel.Workbook objBook = ExcelApp.Workbooks.Add(System.Reflection.Missing.Value);\n//Get the First sheet.\nExcel.Worksheet objSheet = (Excel.Worksheet)objBook.Sheets[\u0026amp;ldquo;Sheet1\u0026amp;rdquo;];\n//Set a background picture for the sheet.\nobjSheet.SetBackgroundPicture(\u0026amp;ldquo;pic.jpeg\u0026amp;rdquo;);\n//Save the excel file.\nobjBook.SaveCopyAs(\u0026amp;ldquo;BackgroundPicBook.xls\u0026amp;rdquo;);\n//Quit the Application.\nExcelApp.Quit();\nAspose.Cells\n//Instantiate a new Workbook.\nWorkbook workbook = new Workbook();\n//Get the first worksheet.\nWorksheet sheet = workbook.Worksheets[0];\n//Define a string variable to store the image path.\nstring ImageUrl = \u0026amp;ldquo;pic.jpeg\u0026amp;rdquo;;\n//Get the picture into the streams.\nFileStream fs = File.OpenRead(ImageUrl);\n//Define a byte array.\nbyte[] imageData = new Byte[fs.Length];\n//Obtain the picture into the array of bytes from streams.\nfs.Read(imageData, 0, imageData.Length);\n//Close the stream.\nfs.Close();\n//Set the background image for the sheet.\nsheet.SetBackground(imageData);\n//Save the excel file.\nworkbook.Save(\u0026amp;ldquo;BackgroundPicBook.xls\u0026amp;rdquo;);\nDownload Sample Code\n Codeplex Github [Sourceforge](https://sourceforge.net/projects/asposevsto/files/Aspose.Cells Vs VSTO Excel/Set Background Picture of a Worksheet (Aspose.Cells).zip/download) [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/downloads/Set Background Picture of a …","date":-62135596800,"description":"","objectID":"410a8c28d87a3e7c176032dadd821476","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/set+background+picture+of+a+worksheet+in+vsto+and+aspose.cells/","title":"Set Background Picture of a Worksheet in VSTO and Aspose.Cells"},{"content":"Below is the comparison code example for VSTO and Aspose.Cells.\nVSTO\nExcel.Workbook myWorkbook = this.Application.Workbooks.Open(fileName);\nExcel.Worksheet mySheet = myWorkbook.ActiveSheet;\nExcel.Range Colors = mySheet.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;, \u0026amp;ldquo;A10\u0026amp;rdquo;);\nColors.Sort(\nColors.Rows[1], Excel.XlSortOrder.xlAscending,\nColors.Rows[2], missing, Excel.XlSortOrder.xlAscending,\nmissing, Excel.XlSortOrder.xlAscending,\nExcel.XlYesNoGuess.xlNo, missing, missing,\nExcel.XlSortOrientation.xlSortColumns,\nExcel.XlSortMethod.xlPinYin,\nExcel.XlSortDataOption.xlSortNormal,\nExcel.XlSortDataOption.xlSortNormal,\nExcel.XlSortDataOption.xlSortNormal);\nAspose.Cells\nWorkbook myWorkbook = new Workbook(fileName);\nWorksheet mySheet = myWorkbook.Worksheets[myWorkbook.Worksheets.ActiveSheetIndex];\nDataSorter sorter = myWorkbook.DataSorter;\nsorter.Order1 = Aspose.Cells.SortOrder.Ascending;\nsorter.Key1 = 0;\nsorter.Sort(mySheet.Cells, 0, 0, 10, 0);\nmyWorkbook.Save(fileName);\nDownload\n CodePlex GitHub  ","date":-62135596800,"description":"","objectID":"c205b6ee72b2ebd25c89f062521941ae","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/sort+data+in+worksheets/","title":"Sort Data in Worksheets"},{"content":"Adding Cell Formula\nVSTO\n//Note: To help you better, the code uses full namespacing\nprivate void AddingCellFormula()\n{\n//Access vsto application\nMicrosoft.Office.Interop.Excel.Application app = Globals.ThisAddIn.Application;\n//Access workbook\nMicrosoft.Office.Interop.Excel.Workbook workbook = app.ActiveWorkbook;\n//Access worksheet\nMicrosoft.Office.Interop.Excel.Worksheet m_sheet = workbook.Worksheets[1];\n//Access vsto worksheet\nMicrosoft.Office.Tools.Excel.Worksheet worksheet = Globals.Factory.GetVstoObject(m_sheet);\n//Access cells A1, A2, A3 , A4\nMicrosoft.Office.Interop.Excel.Range cellA1 = worksheet.Range[\u0026amp;ldquo;A1\u0026amp;rdquo;];\nMicrosoft.Office.Interop.Excel.Range cellA2 = worksheet.Range[\u0026amp;ldquo;A2\u0026amp;rdquo;];\nMicrosoft.Office.Interop.Excel.Range cellA3 = worksheet.Range[\u0026amp;ldquo;A3\u0026amp;rdquo;];\nMicrosoft.Office.Interop.Excel.Range cellA4 = worksheet.Range[\u0026amp;ldquo;A4\u0026amp;rdquo;];\n//Set integer values in cells A1, A2 and A3\ncellA1.Value = 10;\ncellA2.Value = 20;\ncellA3.Value = 30;\n//Add formula in cell A4\ncellA4.Formula = \u0026amp;ldquo;=Sum(A1:A3)\u0026amp;quot;;\n//Set the font bold in cell A4\ncellA4.Font.Bold = true;\n//Set the background color to Yellow in cell A4\ncellA4.Interior.Color = Excel.XlRgbColor.rgbYellow;\n//Save the workbook\nworkbook.SaveAs(\u0026amp;ldquo;OutputVsto.xlsx\u0026amp;rdquo;);\n//Quit the application\napp.Quit();\n}\nAspose.Cells\nprivate static void AddingCellFormula()\n{\n//Create workbook\nWorkbook workbook = new Workbook();\n//Access worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Access cells A1, A2, A3 , A4\nCell cellA1 = worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\nCell cellA2 = worksheet.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;];\nCell cellA3 = worksheet.Cells[\u0026amp;ldquo;A3\u0026amp;rdquo;];\nCell cellA4 = worksheet.Cells[\u0026amp;ldquo;A4\u0026amp;rdquo;];\n//Set integer values in cells A1, A2 and A3\ncellA1.Value = 10;\ncellA2.Value = 20;\ncellA3.Value = 30;\n//Add formula in cell A4\ncellA4.Formula = \u0026amp;ldquo;=Sum(A1:A3)\u0026amp;quot;;\n//Set the font bold in cell A4\n//and set the background color to Yellow in cell A4\nStyle style = cellA4.GetStyle(); …","date":-62135596800,"description":"","objectID":"81290fbaa833ec53f502578ae45e1ef1","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/use+formulas+functions+to+process+data+in+vsto+and+aspose.cells/","title":"Use Formulas Functions to Process Data in VSTO and Aspose.Cells"},{"content":"To create a worksheet with two cells, one with wrapped text and one without:\n Set up the worksheet:  Create a workbook. Access the first worksheet.   Add text:  Add text to cell A1. Add wrapped text to cell A5.   Save the spreadsheet. The code samples below show how to perform these steps using VSTO with either C#. Code samples that show how to do the same thing using Aspose.Cells for .NET, again using either C# follow immediately after.  Running the code results in a spreadsheet with two cells, one that has text that hasn\u0026amp;rsquo;t been wrapped, and one that has:\nOutput using VSTO Excel\nOutput using Aspose.Cells for .NET\nVSTO\n//Access vsto application\nMicrosoft.Office.Interop.Excel.Application app = Globals.ThisAddIn.Application;\n//Access workbook\nMicrosoft.Office.Interop.Excel.Workbook workbook = app.ActiveWorkbook;\n//Access worksheet\nMicrosoft.Office.Interop.Excel.Worksheet m_sheet = workbook.Worksheets[1];\n//Access vsto worksheet\nMicrosoft.Office.Tools.Excel.Worksheet sheet = Globals.Factory.GetVstoObject(m_sheet);\n//Place some text in cell A1 without wrapping\nMicrosoft.Office.Interop.Excel.Range cellA1 = sheet.Cells.get_Range(\u0026amp;ldquo;A1\u0026amp;rdquo;);\ncellA1.Value = \u0026amp;ldquo;Sample Text Unwrapped\u0026amp;rdquo;;\n//Place some text in cell A5 with wrapping\nMicrosoft.Office.Interop.Excel.Range cellA5 = sheet.Cells.get_Range(\u0026amp;ldquo;A5\u0026amp;rdquo;);\ncellA5.Value = \u0026amp;ldquo;Sample Text Wrapped\u0026amp;rdquo;;\ncellA5.WrapText = true;\n//Save the workbook\nworkbook.SaveAs(\u0026amp;ldquo;OutputVsto.xlsx\u0026amp;rdquo;);\n//Quit the application\napp.Quit();\nAspose.Cells\nprivate static void WrappingCellText()\n{\n//Create workbook\nWorkbook workbook = new Workbook();\n//Access worksheet\nWorksheet worksheet = workbook.Worksheets[0];\n//Place some text in cell A1 without wrapping\nCell cellA1 = worksheet.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;];\ncellA1.PutValue(\u0026amp;ldquo;Some Text Unwrapped\u0026amp;rdquo;);\n//Place some text in cell A5 wrapping\nCell cellA5 = worksheet.Cells[\u0026amp;ldquo;A5\u0026amp;rdquo;];\ncellA5.PutValue(\u0026amp;ldquo;Some Text Wrapped\u0026amp;rdquo;);\nStyle style = …","date":-62135596800,"description":"","objectID":"fe692a118d400db7230cb09863afb944","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/wrapping+cell+text+in+vsto+and+aspose.cells/","title":"Wrapping Cell Text in VSTO and Aspose.Cells"},{"content":"This section has following topics:\n Add Borders to Cells in a Worksheet in VSTO and Aspose.Cells Add Hyperlinks to Cells in VSTO and Aspose.Cells Adding New Worksheets to Workbook and Activating a Sheet in VSTO and Aspose.Cells Apply Styles to Ranges in Workbooks Auto Filter Data in VSTO and Aspose.Cells Copy Worksheets Create and Save New Workbooks Create a Pie Chart in VSTO and Aspose.Cells Creating a Named Range in VSTO and Aspose.Cells Delete Worksheets from Workbooks Display String in Worksheet Cell Find Specific Word Occurrence Get Text of Specific Cell Hide and Unhide Worksheets in a Workbook in VSTO and Aspose.Cells Inserting and Removing Cell Comments in a Worksheet in VSTO and Aspose.Cells List All Worksheets in a Workbook Merge or UnMerge Cells in a Worksheet in VSTO and Aspose.Cells Open Text Files as Workbooks Protect and unProtect Worksheets Protecting and Unprotecting Workbooks in VSTO and Aspose.Cells Rotating Cell Text in VSTO and Aspose.Cells Set Background Picture of a Worksheet in VSTO and Aspose.Cells Sort Data in Worksheets Use Formulas Functions to Process Data in VSTO and Aspose.Cells Wrapping Cell Text in VSTO and Aspose.Cells  ","date":-62135596800,"description":"","objectID":"2bc6db3e985e65c2a534e33ef1b582ed","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/codecomparisonforcommonfeatureswithvsto/","title":"Code Comparison for common features with VSTO"},{"content":"A hyperlink is used to create a link between two entities. Everybody is familiar with the use of hyperlinks, especially on websites.\nUsing Aspose.Cells, developers can create different kinds of hyperlinks in Microsoft Excel files. This topic discusses what types of hyperlinks are supported by Aspose.Cells and how they can be used in our Excel files.\nAdding Hyperlinks\nThree types of hyperlink can be added to a cell using Aspose.Cells:\n Adding link to a URL. Adding a link to another cell in the same file. Adding a link to an external file.  Aspose.Cells allows developers to add hyperlinks to Excel files either using the API or designer spreadsheets (spreadsheets where hyperlinks are created manually and Aspose.Cells is used to import them into other spreadsheets).\nAspose.Cells provides a class, Workbook that represents a Microsoft Excel file. The Workbook class contains a WorksheetCollection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class. The Worksheet class provides different methods for adding different hyperlinks to Excel files.\n\\\nAdding Link to a URL\nThe Worksheet class contains a Hyperlinks collection. Each item in the Hyperlinks collection represents a Hyperlink. Add hyperlinks to URLs by calling the Hyperlinks collection\u0026amp;rsquo;s Add method. The Add method takes the following parameters:\n Cell name, the name of the cell the hyperlink will be added to. Number of rows, the number of rows in this hyperlink range. Number of columns, the number of columns in this hyperlink range URL, the URL address.  C#\n//Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint i = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[i];\n//Adding a hyperlink to a URL at \u0026amp;ldquo;A1\u0026amp;rdquo; cell\nworksheet.Hyperlinks.Add(\u0026amp;ldquo;A1\u0026amp;rdquo;, 1, 1, …","date":-62135596800,"description":"","objectID":"a5791fa087aee2cfe87e5fbedca35ef5","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/adding+hyperlinks+to+link+data+in+aspose.cells/","title":"Adding Hyperlinks to Link Data in Aspose.Cells"},{"content":" Delete rows or columns. Edit contents, objects or scenarios. Format cells, rows or columns. Insert rows, columns or hyperlinks. Select locked or unlocked cells. Use pivot tables and much more.  Aspose.Cells supports all the advanced protection settings offered by Excel XP or later versions.\nAdvanced Protection Settings Using Excel XP and Later Versions\nTo view the protection settings available in Excel XP:\n  From the Tools menu, select Protection followed by Protect Sheet. A dialog is displayed.\n**Dialog to show protection options in Excel XP **\n  Allow or restrict worksheets features or apply a password.\n  Advanced Protection Settings Using Aspose.Cells\nAspose.Cells support all of the advanced protection settings.\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file. A worksheet is represented by the Worksheet class.\nThe Worksheet class provides the Protection property that is used to apply these advanced protection settings. The Protection property is in fact an object of the Protection class that encapsulates several Boolean properties for disabling or enabling restrictions.\nBelow is a small example application. It opens an Excel file and uses most of the advanced protection settings supported by Excel XP and later versions.\nC#\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(\u0026amp;ldquo;book1.xls\u0026amp;rdquo;, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook excel = new Workbook(fstream);\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = excel.Worksheets[0];\n//Restricting users to delete columns of the worksheet\nworksheet.Protection.AllowDeletingColumn = false;\n//Restricting users to delete row of the worksheet\nworksheet.Protection.AllowDeletingRow = false;\n//Restricting users to edit contents of the worksheet …","date":-62135596800,"description":"","objectID":"6a77927264b379a1947f6324fee26834","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/advanced+protection+settings+since+excel+xp+in+aspose.cells/","title":"Advanced Protection Settings since Excel XP in Aspose.Cells"},{"content":"Aspose.Cells unique feature that provide flexibility in version conversions without affecting work. SaveFormat is enumeration that can convert document in the extensions given below in table.\n   **Member Name ** **Value ** **Description **     CSV 1 Represents a CSV file.   Xlsx 6 Represents an xlsx file.   Xlsm 7 Represents an xlsm file which enable macros.   Xltx 8 Represents an xltx file.   Xltm 9 Represents an xltm file which enable macros.   TabDelimited 11 Represents a tab delimited text file.   Html 12 Represents a html file.   MHtml 17 Represents a mhtml file.   ODS 14 Represents a ods file.   Excel97To2003 5 Represents an Excel97-2003 xls file.   SpreadsheetML 15 Represents an Excel 2003 xml file.   Xlsb 16 Represents an xlsb file.   Auto 0 If saving the file to the disk,the file format format accords to the extesion of the file name. If saving the file to the stream, the file format is xlsx.   Unknown 255 Represents unrecognized format, cannot be saved.   Pdf 13 Represents a Pdf file.   XPS 20 Represents an XPS file.   TIFF 21 Represents an TIFF file.   SVG 22 Represents an SVG file.   Dif 30 Data Interchange Format.   Below is code snippet that shows conversion from xls to xlsx you can do it vice versa as well      Workbook workbook = new Workbook(\u0026amp;ldquo;Sample.xls\u0026amp;rdquo;);\nworkbook.Save(\u0026amp;ldquo;Converted.xlsx\u0026amp;rdquo;, SaveFormat.Xlsx);\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/downloads/Conversion between Excel Formats (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"6c3f841763c8da545aa35321e52ea5ff","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/conversion/","title":"Conversion"},{"content":"All Excel worksheets have gridlines by default. They help delineate cells, so that it is easy to enter data into particular cells. Gridlines enable us to view a worksheet as a collection of cells, where each cell is easily identifiable.\nControlling the Visibility of the Gridlines\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in the Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing a worksheet. To control the visibility of gridlines, use the Worksheet class\u0026amp;rsquo; IsGridlinesVisible property. IsGridlinesVisible is a Boolean property, which means that it can only store a true or false value.\nA complete example is given below that demonstrates the use of the IsGridlinesVisible property of the Worksheet class to hide the gridlines of the first worksheet of the Excel file.\nIn the screenshot below, you can see that the Book1.xls file contains three worksheets: Sheet1, Sheet2 and Sheet3. All worksheets have gridlines.\n**Book1.xls: worksheet view before modification **\nThe Book1.xls file is opened by calling the Workbook class\u0026amp;rsquo; Open method and the gridlines on the first worksheet are hidden. The modified file is saved as output.xls.\n**Output.xls: worksheet after modification **\nC#\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(\u0026amp;ldquo;book1.xls\u0026amp;rdquo;, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook workbook = new Workbook(fstream);\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Hiding the gridlines of the first worksheet of the Excel file\nworksheet.IsGridlinesVisible = false;\n//Saving the modified Excel file\nworkbook.Save(\u0026amp;ldquo;output.xls\u0026amp;rdquo;);\n//Closing the file stream to free all …","date":-62135596800,"description":"","objectID":"0487745de7168b8b45ba75356a7a2289","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/display+or+hide+gridlines+in+aspose.cells/","title":"Display or Hide Gridlines in Aspose.Cells"},{"content":"All worksheets in an Excel file are composed of cells that are arranged in rows and columns. All rows and columns have unique values that are used to identify them, and to identify individual cells. For example, rows are numbered – 1, 2, 3, 4, etc. – and columns are ordered alphabetically – A, B, C, D, etc. The row and column values are displayed in the headers. Using Aspose.Cells, developers can control the visibility of these row and column headers.\nControlling the Visibility of the Worksheets\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing worksheets. To control the visibility of row and column headers, use the Worksheet class\u0026amp;rsquo; IsRowColumnHeadersVisible property. IsRowColumnHeadersVisible is a Boolean property, which means that it can only store a true or false value.\nA complete example is given below that shows how to use the Worksheet class\u0026amp;rsquo; IsRowColumnHeadersVisible property to hide row and column headers on the first worksheet in a file.\nThe screenshot shows Book1.xls, the input file. It contains three worksheets: Sheet1, Sheet2 and Sheet3. Each worksheet is showing row and column headers.\nBook1.xls: worksheet before modification\nBook1.xls is opened by calling the Workbook class\u0026amp;rsquo; Open method and the row and column headers on the first worksheet are hidden. The modified file is saved as output.xls.\n**Output.xls: worksheet after modification **\nC#\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(\u0026amp;ldquo;book1.xls\u0026amp;rdquo;, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook workbook = new Workbook(fstream);\n//Accessing the first worksheet in the Excel file\nWorksheet …","date":-62135596800,"description":"","objectID":"d64b0d86fd136be982d6db01bb47b932","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/display+or+hide+row+column+headers+in+aspose.cells/","title":"Display or Hide Row Column Headers in Aspose.Cells"},{"content":"Scroll bars are very used to navigate the contents of any file. Normally, there are two kinds of scroll bars:\n Vertical scroll bars Horizontal scroll bars  Microsoft Excel also provides horizontal and vertical scroll bars so that users can scroll through worksheet contents. Using Aspose.Cells, developers can control the visibility of both types of scroll bars in Excel files.\nAspose.Cells provides a class, Workbook that represents an Excel file. The Workbook class provides a wide range of properties and methods for managing an Excel file. To control the visibility of scroll bars, use the Workbook class\u0026amp;rsquo; IsVScrollBarVisible and IsHScrollBarVisible properties. IsVScrollBarVisible and IsHScrollBarVisible are Boolean properties, which means that these properties can only store true or false values.\nBelow is a complete code that opens an Excel file, book1.xls, hides both scroll bars and then saves the modified file as output.xls .\nThe screenshot below shows Book1.xls file containing both scroll bars. The modified file is saved as output.xls file, also shown below.\nBook1.xls: Excel file before any modification\noutput.xls: Excel file after modification\nC#\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(\u0026amp;ldquo;book1.xls\u0026amp;rdquo;, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook workbook = new Workbook(fstream);\n//Hiding the vertical scroll bar of the Excel file\nworkbook.Settings.IsVScrollBarVisible = false;\n//Hiding the horizontal scroll bar of the Excel file\nworkbook.Settings.IsHScrollBarVisible = false;\n//Saving the modified Excel file\nworkbook.Save(\u0026amp;ldquo;output.xls\u0026amp;rdquo;);\n//Closing the file stream to free all resources\nfstream.Close();\n\\\nDownload Running Code\n CodePlex CodePlex [GitHub](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs VSTO Spreadsheets/Aspose.Cells Features missing in VSTO/Display or Hide Scroll …","date":-62135596800,"description":"","objectID":"26a7b293b15be8f4e33252ba56e84c98","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/display+or+hide+scroll+bars+in+aspose.cells/","title":"Display or Hide Scroll Bars in Aspose.Cells"},{"content":"If you closely look at the bottom of a Microsoft Excel file, you will see a number of controls. These include:\n Sheet tabs. Tab scrolling buttons.  Sheet tabs represent the worksheets in the Excel file. Click any tab to switch to that worksheet. The more worksheets in the workbook, the more sheet tabs there are. If the Excel file has a good number of worksheets you need buttons to navigate through them. So, Microsoft Excel provides tab scrolling buttons for scrolling through the sheet tabs.\n**Sheet tabs \u0026amp;amp; tab scrolling buttons **\nUsing Aspose.Cells, developers can control the visibility of sheet tabs and tabs scrolling buttons in Excel files.\nBelow is a complete example that opens an Excel file (book1.xls), hides its tabs and saves the modified file as output.xls.\nYou can see that Book1.xls file contains tabs in the figure below. After the example code is executed, the tabs are hidden, as you can see from the screenshot of the output.xls file below.\n**book1.xls: Excel file before any modification **\n**output.xls: Excel file after modification **\nC#\n//Instantiating a Workbook object\n//Opening the Excel file\nWorkbook workbook = new Workbook(\u0026amp;ldquo;book1.xls\u0026amp;rdquo;);\n//Hiding the tabs of the Excel file\nworkbook.Settings.ShowTabs = false;\n//Saving the modified Excel file\nworkbook.Save(\u0026amp;ldquo;output.xls\u0026amp;rdquo;);\n\\\nControlling the Tab Bar Width\nC#\n//Adjusting the sheet tab bar width\nworkbook.Worksheets.SheetTabBarWidth = 800;\n\\\nDownload Running Code\n CodePlex CodePlex [GitHub](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs VSTO Spreadsheets/Aspose.Cells Features missing in VSTO/Display or Hide Tabs) Code.MSDN  Download Sample Code\n CodePlex CodePlex GitHub Code.MSDN  Attachments: Display or Hide Tabs-001.png (image/png) Display or Hide Tabs-002.png (image/png) Display or Hide Tabs-003.png (image/png)\n","date":-62135596800,"description":"","objectID":"21bac07b88037c01f8eb016fe8530473","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/display+or+hide+tabs+in+aspose.cells/","title":"Display or Hide Tabs in Aspose.Cells"},{"content":"Microsoft Excel (97 - 2007) enables you to encrypt and password protect your spreadsheets. It uses algorithms provided by a cryptographic service provider, or CSP, a set of cryptographic algorithms with different properties. The default CSP is \u0026amp;lsquo;Office 97/2000 Compatible\u0026amp;rsquo; or \u0026amp;lsquo;Weak Encryption (XOR)\u0026#39;. It\u0026amp;rsquo;s important to choose the proper encryption key length. Some CSPs don\u0026amp;rsquo;t support more than 40 or 56 bits. That\u0026amp;rsquo;s considered to be a weak encryption. For strong encryption, a minimum key length of 128 bits is required. Microsoft Windows contains CSPs that offer strong encryption types as well, for example the \u0026amp;lsquo;Microsoft Strong Cryptographic Provider\u0026amp;rsquo;. To give you an idea, 128 bits encryption is what banks use to encrypt the connection with their Internet Banking systems.\nAspose.Cells allows you to encrypt and password protect Microsoft Excel files with your desired encryption type.\nUsing Microsoft Excel\nTo set file encryption settings in Microsoft Excel (here Microsoft Excel 2003):\n  From the Tools menu, select Options. A dialog appears.\n  Select the Security tab.\n  Input a password and click **Advanced Options dialog **\n  Choose the encryption type and confirm the password.\n**Encryption Type dialog **\n  Encryption with Aspose.Cells\nThe following example shows how to encrypt and password protect an excel file using the Aspose.Cells API.\nC#\n//Instantiate a Workbook object.\n//Open an excel file.\nWorkbook workbook = new Workbook(\u0026amp;ldquo;Book1.xls\u0026amp;rdquo;);\n//Specify XOR encryption type.\nworkbook.SetEncryptionOptions(EncryptionType.XOR,40);\n//Specify Strong Encryption type (RC4,Microsoft Strong Cryptographic Provider).\nworkbook.SetEncryptionOptions(EncryptionType.StrongCryptographicProvider, 128);\n//Password protect the file.\nworkbook.Settings.Password = \u0026amp;ldquo;1234\u0026amp;rdquo;;\n//Save the excel file.\nworkbook.Save(\u0026amp;ldquo;encryptedBook1.xls\u0026amp;rdquo;);\n\\\nDownload Running Code\n CodePlex CodePlex …","date":-62135596800,"description":"","objectID":"43f316c17d6ed2d3540133cd4a3d94da","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/encrypting+excel+files+in+aspose.cells/","title":"Encrypting Excel Files in Aspose.Cells"},{"content":"Sometimes, you want to convert or save a workbook with multiple worksheets into text format. For text formats (for example TXT, TabDelim, CSV etc.), by default both Microsoft Excel and Aspose.Cells save the contents of the active worksheet only.\nThe following code example explains how to save an entire workbook into text format. Load the source workbook which could be any Microsoft Excel or OpenOffice spreadsheet file (so XLS, XLSX, XLSM, XLSB, ODS and so on) with any number of worksheets.\nWhen the code is executed, it converts the data of all sheets in the workbook to TXT format.\nYou can modify the same example to save your file to CSV. By default, TxtSaveOptions.Separator is comma, so do not specify a separator if saving to CSV format.\nC#\nstring filePath = \u0026amp;ldquo;source.xlsx\u0026amp;rdquo;;\n//Load your source workbook\nWorkbook workbook = new Workbook(filePath);\n//0-byte array\nbyte[] workbookData = new byte[0];\n//Text save options. You can use any type of separator\nTxtSaveOptions opts = new TxtSaveOptions();\nopts.Separator = \u0026amp;lsquo;\\t\u0026amp;rsquo;;\n//Copy each worksheet data in text format inside workbook data array\nfor (int idx = 0; idx \u0026amp;lt; workbook.Worksheets.Count; idx++)\n{\n//Save the active worksheet into text format\nMemoryStream ms = new MemoryStream();\nworkbook.Worksheets.ActiveSheetIndex = idx;\nworkbook.Save(ms, opts);\n//Save the worksheet data into sheet data array\nms.Position = 0;\nbyte[] sheetData = ms.ToArray();\n//Combine this worksheet data into workbook data array\nbyte[] combinedArray = new byte[workbookData.Length + sheetData.Length];\nArray.Copy(workbookData, 0, combinedArray, 0, workbookData.Length);\nArray.Copy(sheetData, 0, combinedArray, workbookData.Length, sheetData.Length);\nworkbookData = combinedArray;\n}\n//Save entire workbook data into file\nFile.WriteAllBytes(filePath + \u0026amp;ldquo;.out.txt\u0026amp;rdquo;, workbookData);\nDownload Running Code\n CodePlex CodePlex [GitHub](https://github.com/aspose-cells/Aspose.Cells-for-.NET/tree/master/Plugins/Aspose.Cells Vs VSTO …","date":-62135596800,"description":"","objectID":"820272b01d137285cb227ff405b5ce3f","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/save+workbook+to+text+or+csv+format+in+aspose.cells/","title":"Save Workbook to Text or CSV Format in Aspose.Cells"},{"content":"Complex financial worksheets, especially ones developed in collaboration, can hide the most embarrassing errors. Checking formulas for accuracy and finding the source of an error can be difficult when the formula uses precedent cells and dependent cells.\n Precedent cells are cells that are referred to by a formula in another Cell. For example, if cell D10 contains the formula =B5, cell B5 is a precedent to cell D10. Dependent cells contain formulas that refer to other cells. For example, if cell D10 contains the formula =B5, cell D10 is a dependent of cell B5.  To make the spreadsheet easy to read, you might want to clearly show which cells on a spreadsheet are used in a formula. Similarly, you may want to extract the dependent cells of other cells.\nAspose.Cells allows you to trace cells and find out which are linked.\nTracing Precedent and Dependent Cells: Microsoft Excel\nFormulas may change based on modifications made by a client. For example, if cell C1 is dependent on C3 and C4 containing a formula, and C1 is changed (so the formula is overriden), C3 and C4, or other cells, need to change to balance the spreadsheet based on business rules.\nSimilarly, suppose C1 contains the formula \u0026amp;ldquo;=(B122)/(M2N32)\u0026amp;quot;. I want to find the cells that C1 depends on, that is the precedent cells B1, M2 and N32.\nYou might need to trace the dependency of a particular cell to other cells. If business rules are embedded in formulas, we would like to find out the dependency and execute some rules based on it. Similarly if the value of a particular cell is modified, which cells in the worksheet are impacted by that change?\nMicrosoft Excel allows users to trace precedents and dependents.\n On the View Toolbar, select Formula Auditing. The Formula Auditing dialog is displayed. **The Formula Auditing dialog ** Trace Precedents:  Select the cell that contains the formula for which you want to find precedent cells. To display a tracer arrow to each cell that directly provides data to the …","date":-62135596800,"description":"","objectID":"96722e4943a8c20f0fc30baf8934a12e","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/tracing+precedents+and+dependents+in+aspose.cells/","title":"Tracing Precedents and Dependents in Aspose.Cells"},{"content":"This section has following topics:\n Adding Hyperlinks to Link Data in Aspose.Cells Advanced Protection Settings since Excel XP in Aspose.Cells Conversion Converting Worksheet  Converting Worksheet to Image File By Page Converting Worksheet to Image in Aspose.Cells   Display or Hide Gridlines in Aspose.Cells Display or Hide Row Column Headers in Aspose.Cells Display or Hide Scroll Bars in Aspose.Cells Display or Hide Tabs in Aspose.Cells Encrypting Excel Files in Aspose.Cells Import and Export Worksheet  Export data from document  Columns Containing Non-Strongly Typed Data Columns Containing Strongly Typed Data   Import data from document  Importing from Array Importing from ArrayList Importing from Custom Objects Importing from DataTable     Save Workbook to Text or CSV Format in Aspose.Cells Smart Markers in Aspose.Cells  Grouping Data Image Markers Smart Markers feature Using Anonymous Types or Custom Objects Using Nested Objects   Tracing Precedents and Dependents in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"b1d2df788025a7433d9cc0fb67774005","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/","title":"Missing Features in VSTO"},{"content":"Workbook book = new Workbook(\u0026amp;ldquo;Sheet to Image by Page.xls\u0026amp;rdquo;);\nWorksheet sheet = book.Worksheets[0];\nAspose.Cells.Rendering.ImageOrPrintOptions options = new Aspose.Cells.Rendering.ImageOrPrintOptions();\noptions.HorizontalResolution = 200;\noptions.VerticalResolution = 200;\noptions.ImageFormat = System.Drawing.Imaging.ImageFormat.Tiff;\n//Sheet2Image By Page conversion\nSheetRender sr = new SheetRender(sheet, options);\nfor (int j = 0; j \u0026amp;lt; sr.PageCount; j++)\n{\nBitmap pic = sr.ToImage(j);\npic.Save(sheet.Name + \u0026amp;quot; Page\u0026amp;rdquo; + (j + 1) + \u0026amp;ldquo;.tiff\u0026amp;rdquo;);\n}\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-vsto/downloads/Worksheet to image file by Page (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"29862a747e824c2afab9079a62924b67","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/convertingworksheet/converting+worksheet+to+image+file+by+page/","title":"Converting Worksheet to Image File By Page"},{"content":"This document is designed to provide the developers with a detailed understanding on how to convert a worksheet to an image file \u0026amp;amp; worksheet with multiple pages to an image file per page. Sometimes, you might need to present worksheets as images, for example to use them in applications or web pages. You might need to insert the images into a Word document, a PDF file, a PowerPoint presentation or use them in some other scenario. Simply, you want to render the worksheet as an image. Aspose.Cells supports converting worksheets in Microsoft Excel files to images. Also, Aspose.Cells supports converting a workbook to multiple image files, one per page.\nYou might use Office Automation to achieve this, but Office automation has its own drawbacks. There are several reasons and issues involved: for example security, stability, scalability/Speed, price, and features. In short, there are many reasons, but the main one is that Microsoft themselves strongly recommends against Office automation.\nThis article shows how to create a console application in Visual Studio.Net, convert a worksheet to an image, and a worksheet into one image for each worksheet with a few and simplest lines of code using Aspose.Cells API.You need to import Aspose.Cells.Rendering namespace to your program/project. It has several valuable classes, e.g SheetRender, ImageOrPrintOptions, WorkbookRender etc.Aspose.Cells.Rendering.SheetRender class represents a worksheet to render images for the worksheet, it has an overloaded ToImage method that can directly convert a worksheet to image file(s) specified with your desired attributes or options. It can return System.Drawing.Bitmap object and you can Save an image file to the disk/stream. There are several image formats supported, e.g .bmp, .png, .gif, .jpg, .jpeg, .tiff, .emf etc.\n//Create a new Workbook object\n//Open a template excel file\nWorkbook book = new Workbook(\u0026amp;ldquo;Sheet to Image.xls\u0026amp;rdquo;);\n//Get the first worksheet.\nWorksheet sheet = …","date":-62135596800,"description":"","objectID":"69e6d55b066ab616cc4af4d0f780d87e","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/convertingworksheet/converting+worksheet+to+image+in+aspose.cells/","title":"Converting Worksheet to Image in Aspose.Cells"},{"content":"This section has following topics:\n Converting Worksheet to Image File By Page Converting Worksheet to Image in Aspose.Cells  ","date":-62135596800,"description":"","objectID":"0db10d8a600937654b29afffc776abb6","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/convertingworksheet/","title":"Converting Worksheet"},{"content":"This section has following topics:\n Export data from document  Columns Containing Non-Strongly Typed Data Columns Containing Strongly Typed Data   Import data from document  Importing from Array Importing from ArrayList Importing from Custom Objects Importing from DataTable    ","date":-62135596800,"description":"","objectID":"387bc8f1d6413b07ee2077585d6b3c17","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/","title":"Import and Export Worksheet"},{"content":"If all values in the columns of a worksheet are not strongly typed (that means the values in a column may have the different data types) then we can export the worksheet content by calling the ExportDataTableAsString method of the Cells class. ExportDataTableAsString method takes the same set of parameters as that of ExportDataTable method to export worksheet data as DataTable object.\n//Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(FOD_OpenFile.FileName, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook workbook = new Workbook(fstream);\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Exporting the contents of 2 rows and 2 columns starting from 1st cell to DataTable\nDataTable dataTable = worksheet.Cells.ExportDataTableAsString(0, 0, 2, 2, true);\n//Binding the DataTable with DataGrid\ndataGridView2.DataSource = dataTable;\n//Closing the file stream to free all resources\nfstream.Close();\nBelow are the screenshots:\nDownload Sample Code\n Codeplex Github [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Export from Worksheet (Aspose.Cells).zip)  Attachments: Export dialog.png (image/png) Export result window.png (image/png)\n","date":-62135596800,"description":"","objectID":"d24155227e7588cc84e53bde3fd19ab8","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/exportdatafromdocument/columns+containing+non-strongly+typed+data/","title":"Columns Containing Non-Strongly Typed Data"},{"content":"We know that a spreadsheet stores data as a sequence of rows and columns. If all values in the columns of a worksheet are strongly typed (that means all values in a column must have the same data type) then we can export the worksheet content by calling the ExportDataTable method of the Cells class. ExportDataTable method takes the following parameters to export worksheet data as DataTable object: Row Number , represents the row number of the first cell from where the data will be exported\n Column Number , represents the column number of the first cell from where the data will be exported Number of Rows , represents the number of rows to export Number of Columns , represents the number of columns to export Export Column Names , a boolean proeprty that indicates whether the data in the first row of the worksheet should be exported as column names of the DataTable or not  //Creating a file stream containing the Excel file to be opened\nFileStream fstream = new FileStream(FOD_OpenFile.FileName, FileMode.Open);\n//Instantiating a Workbook object\n//Opening the Excel file through the file stream\nWorkbook workbook = new Workbook(fstream);\n//Accessing the first worksheet in the Excel file\nWorksheet worksheet = workbook.Worksheets[0];\n//Exporting the contents of 2 rows and 2 columns starting from 1st cell to DataTable\nDataTable dataTable = worksheet.Cells.ExportDataTable(0, 0,2, 2, true);\n//Binding the DataTable with DataGrid\ndataGridView1.DataSource = dataTable;\n//Closing the file stream to free all resources\nfstream.Close();\n","date":-62135596800,"description":"","objectID":"3f1c1406f39dfe5448829aefa37ae056","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/exportdatafromdocument/columns+containing+strongly+typed+data/","title":"Columns Containing Strongly Typed Data"},{"content":"Aspose.Cells not only facilitates its users to import data to worksheets from external data sources but also allow them to export their worksheet data to a DataTable. As we know that DataTable is the part of ADO.NET and is used to hold data. Once the data is stored in a DataTable, it can be used in any way according to the requirements of users.\nExporting Data to DataTable (.NET) Using Aspose.Cells\nDevelopers can easily export their worksheet data to a DataTable object by calling either ExportDataTable or ExportDataTableAsString method of the Cells class. Both methods are used in different scenarios, which are discussed below in more detail.\nThis section has following topics:\n Columns Containing Non-Strongly Typed Data Columns Containing Strongly Typed Data  ","date":-62135596800,"description":"","objectID":"008069143e2065fb9431035d5297c5f7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/exportdatafromdocument/","title":"Export data from document"},{"content":"Developers can import data from an array to their worksheets by calling the ImportArray method of the Cells collection. There are many overloaded versions of the ImportArray method but a typical overload takes the following parameters:\n Array, represents the array object whose contents need to import Row Number, represents the row number of the first cell where the data will be imported Column Number, represents the column number of the first cell where the data will be imported Is Vertical, a boolean value that specifies to import data vertically or horizontally  //Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint i = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[i];\n//Creating an array containing names as string values\nstring[] names = new string[] { \u0026amp;ldquo;laurence chen\u0026amp;rdquo;, \u0026amp;ldquo;roman korchagin\u0026amp;rdquo;, \u0026amp;ldquo;kyle huang\u0026amp;rdquo; };\n//Importing the array of names to 1st row and first column vertically\nworksheet.Cells.ImportArray(names, 0, 0, true);\n//Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;DataImport from Array.xls\u0026amp;rdquo;);\n","date":-62135596800,"description":"","objectID":"a310a909bb7c1e141a69eb57f3435b7c","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/importdatafromdocument/importing+from+array/","title":"Importing from Array"},{"content":"Developers can import data from an ArrayList to their worksheets by calling the ImportArrayList method of the Cells collection. ImportArray method takes the following parameters: ArrayList , represents the ArrayList object whose contents need to import\n Row Number , represents the row number of the first cell where the data will be imported Column Number , represents the column number of the first cell where the data will be imported Is Vertical , a boolean value that specifies to import data vertically or horizontally  //Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint i = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[i];\n//Instantiating an ArrayList object\nArrayList list = new ArrayList();\n//Add few names to the list as string values\nlist.Add(\u0026amp;ldquo;laurence chen\u0026amp;rdquo;);\nlist.Add(\u0026amp;ldquo;roman korchagin\u0026amp;rdquo;);\nlist.Add(\u0026amp;ldquo;kyle huang\u0026amp;rdquo;);\nlist.Add(\u0026amp;ldquo;tommy wang\u0026amp;rdquo;);\n//Importing the contents of ArrayList to 1st row and first column vertically\nworksheet.Cells.ImportArrayList(list, 0, 0, true);\n//Saving the Excel file\nworkbook.Save(\u0026amp;ldquo;DataImport from Array List.xls\u0026amp;rdquo;);\n","date":-62135596800,"description":"","objectID":"7aa49564d1aadffd020c5461d088e830","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/importdatafromdocument/importing+from+arraylist/","title":"Importing from ArrayList"},{"content":"Developers can import data from collection of objects to a worksheet using ImportCustomObjects. You can provide a list of columns/properties to the method to display your desired list of objects.\n//Instantiate a new Workbook\nWorkbook book = new Workbook();\n//Clear all the worksheets\nbook.Worksheets.Clear();\n//Add a new Sheet \u0026amp;ldquo;Data\u0026amp;rdquo;;\nWorksheet sheet = book.Worksheets.Add(\u0026amp;ldquo;Data\u0026amp;rdquo;);\n//Define List\nList list = new List();\n//Add data to the list of objects\nlist.Add(new WeeklyItem() { AtYarnStage = 1, InWIPStage = 2, Payment = 3, Shipment = 4, Shipment2 = 5 });\nlist.Add(new WeeklyItem() { AtYarnStage = 5, InWIPStage = 9, Payment = 7, Shipment = 2, Shipment2 = 5 });\nlist.Add(new WeeklyItem() { AtYarnStage = 7, InWIPStage = 3, Payment = 3, Shipment = 8, Shipment2 = 3 });\n//We pick a few columns not all to import to the worksheet\nsheet.Cells.ImportCustomObjects((System.Collections.ICollection)list,\nnew string[] { \u0026amp;ldquo;Date\u0026amp;rdquo;, \u0026amp;ldquo;InWIPStage\u0026amp;rdquo;, \u0026amp;ldquo;Shipment\u0026amp;rdquo;, \u0026amp;ldquo;Payment\u0026amp;rdquo; },\ntrue,\n0,\n0,\nlist.Count,\ntrue,\n\u0026amp;ldquo;dd/mm/yyyy\u0026amp;rdquo;,\nfalse);\n//Auto-fit all the columns\nbook.Worksheets[0].AutoFitColumns();\n//Save the Excel file\nbook.Save(\u0026amp;ldquo;ImportedCustomObjects.xls\u0026amp;rdquo;);\n","date":-62135596800,"description":"","objectID":"cf2a5b0d81bffc1bb783894d1a3289eb","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/importdatafromdocument/importing+from+custom+objects/","title":"Importing from Custom Objects"},{"content":"Developers can import data from a DataTable to their worksheets by calling the ImportDataTable method of the Cells collection. There are many overloaded versions of the ImportDataTable method but a typical overload takes the following parameters:DataTable , represents the DataTable object whose contents need to import\n Is Field Name Shown, specifies that whether the names of the columns of DataTable should be imported to worksheet as a first row or not Start Cell , represents the name of the start cell (i.e. \u0026amp;ldquo;A1\u0026amp;rdquo;) from where to import the contents of the DataTable  //Instantiating a Workbook object\nWorkbook workbook = new Workbook();\n//Adding a new worksheet to the Workbook object\nint i = workbook.Worksheets.Add();\n//Obtaining the reference of the newly added worksheet by passing its sheet index\nWorksheet worksheet = workbook.Worksheets[i];\n//Instantiating a \u0026amp;ldquo;Products\u0026amp;rdquo; DataTable object\nDataTable dataTable = new DataTable(\u0026amp;ldquo;Products\u0026amp;rdquo;);\n//Adding columns to the DataTable object\ndataTable.Columns.Add(\u0026amp;ldquo;Product ID\u0026amp;rdquo;, typeof(Int32));\ndataTable.Columns.Add(\u0026amp;ldquo;Product Name\u0026amp;rdquo;, typeof(string));\ndataTable.Columns.Add(\u0026amp;ldquo;Units In Stock\u0026amp;rdquo;, typeof(Int32));\n//Creating an empty row in the DataTable object\nDataRow dr = dataTable.NewRow();\n//Adding data to the row\ndr[0] = 1;\ndr[1] = \u0026amp;ldquo;Aniseed Syrup\u0026amp;rdquo;;\ndr[2] = 15;\n//Adding filled row to the DataTable object\ndataTable.Rows.Add(dr);\n//Creating another empty row in the DataTable object\ndr = dataTable.NewRow();\n//Adding data to the row\ndr[0] = 2;\ndr[1] = \u0026amp;ldquo;Boston Crab Meat\u0026amp;rdquo;;\ndr[2] = 123;\n//Adding filled row to the DataTable object\ndataTable.Rows.Add(dr);\n//Importing the contents of DataTable to the worksheet starting from \u0026amp;ldquo;A1\u0026amp;rdquo; cell,\n//where true specifies that the column names of the DataTable would be added to\n//the worksheet as a header row\nworksheet.Cells.ImportDataTable(dataTable, true, \u0026amp;ldquo;A1\u0026amp;rdquo;);\nworkbook.Save(\u0026amp;ldquo;Import From …","date":-62135596800,"description":"","objectID":"5675d8a15438263b32c43cbe4fac5ee2","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/importdatafromdocument/importing+from+datatable/","title":"Importing from DataTable"},{"content":"Data is the collection of raw facts and we create spreadsheet documents or reports to present these raw facts in a more meaningful manner. Normally, we add data to spreadsheets by ourselves but sometimes, we need to reuse existing data resources and here comes the need to import data to spreadsheets from different data sources. In this topic, we will discuss some techniques to import data to worksheets from different data sources.\n**Importing Data Using Aspose.Cells **When you use Aspose.Cells to open an Excel file, all data in the file is automatically imported but Aspose.Cells also supports to import data from different data sources. A few of these data sources are listed below:\n Array ArrayList DataTable DataColumn DataView DataGrid DataReader GridView  Aspose.Cells provides a class, Workbook that represents an Excel file. Workbook class contains a Worksheets collection that allows to access each worksheet in the Excel file. A worksheet is represented by the Worksheet class. Worksheet class provides a Cells collection.\nCells collection provides very useful methods to import data from different data sources.\nThis section has following topics:\n Importing from Array Importing from ArrayList Importing from Custom Objects Importing from DataTable  ","date":-62135596800,"description":"","objectID":"848b01ee8d8f9265b2541cc9c9b8f3ef","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/importandexportworksheet/importdatafromdocument/","title":"Import data from document"},{"content":"In some Excel reports you might need to break the data into groups to make it easier to read and analyze. One of the primary purposes for breaking data into groups is to run calculations (perform summary operations) on each group of records.\nAspose.Cells smart markers allow you to group your data by field(s) and place summary rows in between data sets or data groups. For example, if grouping data by Customers.CustomerID, you can add a summary record every time the group changes.\nThe example code snippets that follow shows how to group data in an Excel report using smart markers.\nParameters\nFollowing are some of the smart marker parameters used for grouping data. group:normal/merge/repeat\nWe support three types of group that you can choose between.\n normal - The group by field(s) value is not be repeated for the corresponding records in the column; instead they are printed once per data group. merge - The same behavior as for the normal parameter, except that it merges the cells in the group by field(s) for each group set. repeat - The group by field(s) value is repeated for the corresponding records.  If you have multiple parameters, separate them with a commas, but no space: parameterA,parameterB,parameterC\nExample\nThis example shows some of the grouping parameters in action. It uses the Northwind.mdb Microsoft Access database and extract data from the table named \u0026amp;ldquo;Order Details\u0026amp;rdquo;. We create a designer file called SmartMarker_Designer.xls in Microsoft Excel and put smart markers into various cells in worksheets. The markers are processed to fill the worksheets. The data is placed and organized by a group field.\nThe designer file has two worksheets. In the first we put smart markers with grouping parameters as shown in the screenshot below. Three smart markers (with grouping parameters) are placed: \u0026amp;amp;=Order Details.OrderID(group:merge,skip:1), \u0026amp;amp;=Order Details.Quantity(subtotal9:Order Details.OrderID), and \u0026amp;amp;=Order …","date":-62135596800,"description":"","objectID":"2c606598090280abd11d55cc4bdff328","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/smartmarkersinasposecells/grouping+data/","title":"Grouping Data"},{"content":"Aspose.Cells smart markers support image markers too. This section shows you how to insert pictures using smart markers.\nImage Parameters\nSmart marker parameters for managing images.\n Picture:FitToCell - Auto-fit the image to the cell’s row height and column width. Picture:ScaleN - Scale height and width to N percent. Picture:Width:Nin\u0026amp;amp;Height:Nin - Render the image N inches high and N inches wide. You can also sepecify Left and Top positions (in points).  string FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Image Markers.xlsx\u0026amp;rdquo;;\n//Get the image data.\nbyte[] imageData = File.ReadAllBytes(FilePath + \u0026amp;ldquo;Aspose.Cells.png\u0026amp;rdquo;);\n//Create a datatable.\nDataTable t = new DataTable(\u0026amp;ldquo;Table1\u0026amp;rdquo;);\n//Add a column to save pictures.\nDataColumn dc = t.Columns.Add(\u0026amp;ldquo;Picture\u0026amp;rdquo;);\n//Set its data type.\ndc.DataType = typeof(object);\n//Add a new new record to it.\nDataRow row = t.NewRow();\nrow[0] = imageData;\nt.Rows.Add(row);\n//Add another record (having picture) to it.\n//imageData = File.ReadAllBytes(FilePath + \u0026amp;ldquo;Desert.jpg\u0026amp;rdquo;);\n//row = t.NewRow();\n//row[0] = imageData;\n//t.Rows.Add(row);\n//Create WorkbookDesigner object.\nWorkbookDesigner designer = new WorkbookDesigner();\n//Open the temple Excel file.\ndesigner.Workbook = new Workbook(FileName);\n//Set the datasource.\ndesigner.SetDataSource(t);\n//Process the markers.\ndesigner.Process();\n//Save the Excel file.\ndesigner.Workbook.Save(FileName);\nDownload Sample Code\n Codeplex Github Code.MSDN [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Image Markers (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"aacb52bafb1340182557134742976e83","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/smartmarkersinasposecells/image+markers/","title":"Image Markers"},{"content":"Smart markers are used to let Aspose.Cells know what information to place in an Microsoft Excel designer spreadsheet. Smart markers allow you to create templates that contain only specific information and formatting.\nDesigner Spreadsheet \u0026amp;amp; Smart Markers\nDesigner spreadsheets are standard Excel files that contain visual formatting, formulas and smart markers. They can contain smart markers that reference one or more data source, such as information from a project and information for related contacts. Smart markers are written into the cells where you want the information.\nAll smart markers start with \u0026amp;amp;=. An example of a data marker is \u0026amp;amp;=Party.FullName. If the data marker results in more than one item, for example, a complete row, then the following rows are moved down automatically to make room for all of the new information. Thus sub-totals and totals can be placed on the row immediately after the data marker to make calculations based on the inserted data. To make calculations on the inserted rows, use dynamic formulas.\nSmart markers consist of the data source and field name parts for most information. Special information may also be passed with variables and variable arrays. Variables always fill only one cell whereas variable arrays may fill several. Only use one data marker per cell. Unused smart markers are removed.\nSmart marker may also contain parameters. Parameters allow you to modify how the information will be laid out. They are appended to the end of smart marker in parenthesis as a comma separated list.\nSmart Marker Options\n \u0026amp;amp;=DataSource.FieldName \u0026amp;amp;=Data Source.Field Name \u0026amp;amp;=$VariableName \u0026amp;amp;=$VariableArray \u0026amp;amp;==DynamicFormula \u0026amp;amp;=\u0026amp;amp;=RepeatDynamicFormula  Parameters\nThe following parameters are allowed:\n noadd - Do not add extra rows to fit data. skip:n - Skip n number of rows for each row of data. ascending:n or descending:n - Sort data in smart markers. If n is 1, then the column is the first key of the sorter. The data …","date":-62135596800,"description":"","objectID":"00de017409f23ea117b500db805c2e1c","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/smartmarkersinasposecells/smart+markers+feature/","title":"Smart Markers feature"},{"content":"Aspose.Cells also supports anonymous types or custom objects in smart markers. In below example Product class is need to be defined before use.\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Using Custom Objects.xlsx\u0026amp;rdquo;;\n//Instantiate the workbookdesigner object.\nWorkbookDesigner report = new WorkbookDesigner();\n//Get the first worksheet(default sheet) in the workbook.\nAspose.Cells.Worksheet w = report.Workbook.Worksheets[0];\n//Input some markers to the cells.\nw.Cells[\u0026amp;ldquo;A1\u0026amp;rdquo;].PutValue(\u0026amp;ldquo;Test\u0026amp;rdquo;);\nw.Cells[\u0026amp;ldquo;A2\u0026amp;rdquo;].PutValue(\u0026amp;quot;\u0026amp;amp;=MyProduct.Name\u0026amp;rdquo;);\nw.Cells[\u0026amp;ldquo;B2\u0026amp;rdquo;].PutValue(\u0026amp;quot;\u0026amp;amp;=MyProduct.Age\u0026amp;rdquo;);\n//Instantiate the list collection based on the custom class.\nIList list = new List();\n//Provide values for the markers using the custom class object.\nlist.Add(new MyProduct(\u0026amp;ldquo;Simon\u0026amp;rdquo;, 30));\nlist.Add(new MyProduct(\u0026amp;ldquo;Johnson\u0026amp;rdquo;, 33));\n//Set the data source.\nreport.SetDataSource(\u0026amp;ldquo;MyProduct\u0026amp;rdquo;, list);\n//Process the markers.\nreport.Process(false);\n//Save the excel file.\nreport.Workbook.Save(FileName);\n}\n}\nDownload Sample Code\n Codeplex Github Code.MSDN [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Using Custom Objects (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"a5d7b3faacd3f44d4224edf3849a2184","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/smartmarkersinasposecells/using+anonymous+types+or+custom+objects/","title":"Using Anonymous Types or Custom Objects"},{"content":"Aspose.Cells supports nested objects in smart markers, the nested objects should be simple.Individual class need to be defined by user for below code.\nWe use a simple template file. See the designer spreadsheet that contains some nested smart markers.\nstring FilePath = @\u0026amp;quot;......\\Sample Files\u0026amp;quot;;\nstring FileName = FilePath + \u0026amp;ldquo;Using Nested Object.xlsx\u0026amp;rdquo;;\n//Initialize WorkbookDesigner object\nWorkbookDesigner designer = new WorkbookDesigner();\n//Load the template file\ndesigner.Workbook = new Workbook(FileName);\n//Instantiate the List based on the class\nSystem.Collections.Generic.ICollection list = new System.Collections.Generic.List();\n//Create an object for the Individual class\nIndividual p1 = new Individual(\u0026amp;ldquo;Damian\u0026amp;rdquo;, 30);\n//Create the relevant Wife class for the Individual\np1.Wife = new Wife(\u0026amp;ldquo;Dalya\u0026amp;rdquo;, 28);\n//Create another object for the Individual class\nIndividual p2 = new Individual(\u0026amp;ldquo;Mack\u0026amp;rdquo;, 31);\n//Create the relevant Wife class for the Individual\np2.Wife = new Wife(\u0026amp;ldquo;Maaria\u0026amp;rdquo;, 29);\n//Add the objects to the list\nlist.Add(p1);\nlist.Add(p2);\n//Specify the DataSource\ndesigner.SetDataSource(\u0026amp;ldquo;Individual\u0026amp;rdquo;, list);\n//Process the markers\ndesigner.Process(false);\n//Save the Excel file.\ndesigner.Workbook.Save(FileName);\nDownload Sample Code\n Codeplex Github Code.MSDN* [Bitbucket](https://bitbucket.org/asposemarketplace/aspose-for-openxml/downloads/Using Nested Object (Aspose.Cells).zip)  ","date":-62135596800,"description":"","objectID":"ddc36cbc8d875f1b922b36a139216fa7","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/smartmarkersinasposecells/using+nested+objects/","title":"Using Nested Objects"},{"content":"This section has following topics:\n Grouping Data Image Markers Smart Markers feature Using Anonymous Types or Custom Objects Using Nested Objects  ","date":-62135596800,"description":"","objectID":"f1fa92e3b090914412729d5a27d0e90c","permalink":"https://roywangt.github.io/cellsnet/plugins/asposecellsnetforvsto/missingfeaturesinvsto/smartmarkersinasposecells/","title":"Smart Markers in Aspose.Cells"},{"content":"Release Notes\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"d5479556b1a76d6bc32b1f89e052b781","permalink":"https://roywangt.github.io/cellsnet/releasenotes/","title":"Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.7.0.0 New Release\nDear Customers,\nWe have released Aspose.Cells 3.7 for .NET!\nName Change\nPlease note Aspose.Excel has been renamed to Aspose.Cells.\nIf you are upgrading from Aspose.Excel, you need to remove the reference to Aspose.Excel.dll and add a reference to Aspose.Cells.dll. Also you need to change all \u0026amp;ldquo;using\u0026amp;rdquo; or \u0026amp;ldquo;imports\u0026amp;rdquo; namespace Aspose.Excel to Aspose.Cells in your code.\n\\\nEdition Types Change\nThere used to be two edition types: Professional and Enterprise. This has been changed to one edition type Professional.\nThe Professional edition now includes all features that were available in the Enterprise edition. The customers who had Professional edition get access to all the features that were available in the Enterprise edition when they upgrade.\n\\\n**New Features **\n WinForm demos are included in intallation package. Performance and memory usage are optimized.  \\\nFixes\n AutoFitColumn method may cause StackOverflowException when it\u0026amp;rsquo;s called many times. Bug in saving a file with many formulas Named Range and other issues in conversion from Excel file to SpreadsheetML file Row and column style settings Chart value axis number format setting Read scandinavian characters in comments Recursive Reference error in cells when calculating formulas  \\\n","date":-62135596800,"description":"","objectID":"5ee2e9bfaf19e15b57a10ab9f824afcd","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.7.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 3.7.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.7.1.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells v3.7.1!\n Support for adding textboxes dynamically Support StockOpenHighLowClose chart type Support chart GapWidth setting Support loading hyperlinks in spreadsheetML Decreased output file size Optimized CSV file processing Fixed a bug in setting chart smooth line  \\\n","date":-62135596800,"description":"","objectID":"e0cacdcc9beab8914b16ac377283dad3","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.7.1.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 3.7.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.7.2.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v3.7.2!\n Enhanced formula calculation engine to support more Excel functions Optimized performance while load Excel files Fixed a bug to export files as SpreadsheetML Fixed a chart TickLabel setting bug Fixed injecting many comments and list validation bug  ","date":-62135596800,"description":"","objectID":"0a0ac31fc766b6713d0c58060aeedf21","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.7.2.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 3.7.2.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.8.0.0 New Release\nDear Customers,\nWe have released Aspose.Cells for .NET v3.8!\n Supports to create check box at run time Supports to create OLE objects at run time Supports to Protect/Unprotect workbooks Allows to change external links\u0026amp;rsquo; data source Enhanced smart marker processing Enhanced formula calculation engine Fixed bugs in DeleteRows and InsertRows Fixed a bug of repeatedly opening and saving a file with evaluation version Fixed AddCopy bug while copy some formulas Other enhancement and fixes since v3.7  ","date":-62135596800,"description":"","objectID":"18a16bcaa089b86a77b7c620242c5004","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.8.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 3.8.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.8.1.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v3.8.1!\n Supports to set data series error bar Optimize formula calculation Fixed a bug in InsertRange method Fixed a bug in AddCopy method Removed obsolete attributes when converting xls to pdf  ","date":-62135596800,"description":"","objectID":"2c3720a300b3b585e5dff89e9e1a1e6a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.8.1.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 3.8.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.9.0.0 New Release\nDear Customers,\nWe have released Aspose.Cells for .NET v3.9!\n For some external reasons, now class Excel is renamed to Workbook and class ExcelDesigner is renamed to WorkbookDesigner. All properties and method of these two class are not changed. Supports to add EMF images in their raw format New smart marker is added Supports to load text files with custom separator Fixed a bug in setting hyperlinks to local files Fixed bugs in InsertRows method Fixed a bug in Data validation settings Fixed a bug in opening some Excel files  ","date":-62135596800,"description":"","objectID":"2f8150aae452e68b7b91179b0c46fb84","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.9.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 3.9.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 3.9.1.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v3.9.1!\n Custom error bar is supported now. New demos are added. Fixed a bug in formatting styles Fixed a bug in loading transparent images  ","date":-62135596800,"description":"","objectID":"f3189ffd0b83a8480d007dc5b5c92aeb","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+3.9.1.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 3.9.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.0.0.0 New Release\nDear Customers,\nWe have released Aspose.Cells for .NET V4.0!\n Class name change: ExcelHelper-\u0026amp;gt;CellsHelper, ExcelException-\u0026amp;gt;CellsException Shaped AutoFitRow method to make it more precise Added Worksheets.SortNames method to solve a problem when adding a large amount of named ranges. Added new chart demos Fixed a bug in formula setting Fixed a bug when saving file to stream with CSV format  ","date":-62135596800,"description":"","objectID":"29e1a99e251d76e9caa671e31fa6e4dc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.0.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 4.0.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.0.1.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v4.0.1!\n Added new chart demos Fixed bugs in InsertRows/DeleteRows method Fixed bug in loading/saving SpreadsheetML file Fixed bug in loading CSV file which contains a single period(.) in a cell Fixed a bug in xls2pdf feature  ","date":-62135596800,"description":"","objectID":"ea34ddb528943900e97f2ba296738f37","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.0.1.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 4.0.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.0.2.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v4.0.2!\n Supports to autofit rotated text Added new InsertRows/DeleteRows method Supports to create encrypted file based on encrypted template file Shaped InsertRange method Added new C# chart demos Fixed bug while loading file with UNC hyperlinks Fixed bug in formatting cells with an Aspose created Excel file in some cases Shaped formula calculation engine  ","date":-62135596800,"description":"","objectID":"02499cdba51c8306cc9cc2b1256c1adc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.0.2.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 4.0.2.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.0.3.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v4.0.3!\n Supported image header/footer now! Added new Cells.ImportDataRow method. Added new Workbook.LoadData method. Supported relative path hyperlinks. Supported TEXT function in formula calculation engine. Added ApplyStyle methods for rows and columns Fixed bugs in copying worksheets. Fixed bugs in combining workbooks  ","date":-62135596800,"description":"","objectID":"021cf4fdb91a53a81359dc6e04a3d91f","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.0.3.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 4.0.3.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.1.0.0 New Release\nDear Customers,\nWe have released Aspose.Cells for .NET v4.1!\n Provided APIs to create conditional formattings from scratch Provided APIs to create pivot tables from scratch Added LinkedCell property for CheckBox class Added new C# quick start demos Fixed 2 minor bugs in setting formulas Fixed a bug in calculating formulas Fixed the problem of using Aspose.Cells on Windows Vista RC2. This problem is caused by obfucator. Fixed a page orientation bug while converting to pdf file Fixed a bug of copying rows with shared formulas  ","date":-62135596800,"description":"","objectID":"c2060adaa0707da88033967e3a3eb345","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.1.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 4.1.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.1.1.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v4.1.1!\n Enhanced WebForm demos F0007: Supported NPV function in formula calculation engine F0009: Supported to read textboxes string in template files F0015: Supported BIFF7 encryption in some protected files F0016: Supported INDIRECT, ISBLANK, ISERROR, ISNA, ISNUMBER function in formula calculation engine F0017: Supported German datetime format string F0019: Supported to set active cell in a worksheet B0001: Fixed a bug in Cells.MaxDataRowInColumn property B0002: Fixed a bug when loading csv files with blank strings B0003: Fixed a bug when loading comments with more than 8k string content B0004: Fixed a bug to load a file with workbook protection B0005: Fixed a bug in InsertRows method which may cause \u0026amp;ldquo;Invalid formula \u0026amp;hellip;\u0026amp;rdquo; error for some files B0006: Fixed a bug for image distortion when running with 120 DPI screen resolution. B0007: Fixed a bug in CalculateFormula method when comaring two DateTime values  ","date":-62135596800,"description":"","objectID":"92963dbdd1240bdad0b8f563557b7f74","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.1.1.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 4.1.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.1.2.0 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET v4.1.2!\n F0008: Enhanced formula calculation engine F0014: Added CheckBox.Value property F0025: Added feature to convert image in Excel file to Pdf file F0031: Supported more functions while reading formula from file B0009: Fixed a bug about merged cell while converting to pdf file B0010: Fixed a bug about StandardWidth property B0011: Fixed a bug in concatenating ASCII characters between code 128-255 B0012: Fixed a CopyConditionalFormattings bug B0013: Fixed InsertRows/InsertColumn method doesn\u0026amp;rsquo;t update Print_Area bug B0014: Fixed a bug for copying worksheets with images B0015: Fixed a bug while number of worksheets is more than 5k B0016: Fixed a pivot table bug B0017: Fixed bugs in formula calculation engine  ","date":-62135596800,"description":"","objectID":"96c67bfd4fa4138d8ce9e5df36f7899c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.1.2.0+hot+fix+release+notes/","title":"Aspose.Cells .Net 4.1.2.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.2.0.0 New Release\nDear Customers:\nWe have released Aspose.Cells for .NET v4.2!\nIn this new version, some important new features are added:\n Now Aspose.Cells totally supports to manipulate charts, images and other drawing objects in template files Chart2Image feature is supported.Currently only Column, Line, Pie and Bar charts are supported. And only 2D charts are supported. We will support more chart types in the future versions. Xls2Pdf conversion is enhanced and optimized. Formula calculation engine is enhanced and optimized.  ","date":-62135596800,"description":"","objectID":"ae67239bb6bcc36d5a8925a816341971","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.2.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 4.2.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells .Net 4.3.0.0 New Release\nIntroduction\nThis release contains new features, features enhancement and bug fixes since v4.2. Please check following description for more detail information.\nWhat\u0026amp;rsquo;s New?\n3136 - Support to import/export Excel2007 Data/Formattings\nWhat\u0026amp;rsquo;s Improved?\n3155 - Support header and footer page setup settings in xls2pdf conversion\n3170 - Support CELL function in formula calculation engine 3175 - Shape Chart2image feature in 2D Bar, Column, Line and Pie chart\nWhat\u0026amp;rsquo;s Fixed?\n3064 - Xls2Pdf conversion exception bug\n3065 - CheckBox setting problem\n3066 - Conditional formattings bug\nDownload URL: http://www.aspose.com/Downloads/Aspose.Cells/Default.aspx\n","date":-62135596800,"description":"","objectID":"8fba6d271fe2438f6443cf70baa5ac8e","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+.net+4.3.0.0+new+release+release+notes/","title":"Aspose.Cells .Net 4.3.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .Net 4.4.0.0 New Release\n","date":-62135596800,"description":"","objectID":"ec150b3cc39b525e52f4f3ee0b55878c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.cells+for+.net+4.4.0.0+new+release+release+notes/","title":"Aspose.Cells for .Net 4.4.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.5.0.0 New Release\nDear Customers,\nWe have release Aspose.Grid v1.5!\nAspose.Grid is your total grid solution. Aspose.Grid comes packaged with two different GUI .NET components: one to support desktop applications(Aspose.Grid.Desktop ) and another to support web applications(Aspose.Grid.Web ). Both versions are equally matched in order to make implementing in either platform a snap. Aspose.Grid provides the ability to import from and export to Excel® spreadsheets. Doing so means that anyone familiar with Excel (even end-users) can design the look and feel of a grid. Aspose.Grid also offers an easy to use, feature-rich API which provides developers with complete control over the look, feel and behavior of their grid. And most importantly Aspose.Grid is priced to suit your budget. Nowhere else will you find a component as feature-rich, easy to use and as well priced as Aspose.Grid.\n**General Features **\n Provides components for both desktop and web applications Provides support for importing from and exporting to Excel spreadsheets Provides an easy to use, feature-rich API for complete control of the look, feel and behavior of the grid. Provides easy to apply skins Provides extensive support for formulas Provides support for multiple pages Provides support for a large array of cell types Provides support for both edit and view modes Provides support for hiding and unhiding of rows and columns Provides easy, full featured examples in both C# and VB.NET  and many, many more\u0026amp;hellip;\n\\\n Aspose.Grid.Web is an upgrade of Aspose.Excel.Web  ","date":-62135596800,"description":"","objectID":"20853cc0cf3a16abe1841de53dfe0ff0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.5.0.0+new+release+release+notes/","title":"Aspose.Grid .Net 1.5.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.5.1.0 Hot Fix\nDear Customers,\nWe have released Aspose.Grid.Web v1.5.1!\nIn this new fix, we make the following enhancements and fixes:\nAspose.Grid.Desktop:Optimize performance and memory usageSupport Row, column stylesFixed: Scrollbar value bug when freezing rows or columnsFixed: Hyperlink, comment, picture index are not updated when inserting, deleting row or column\nAspose.Grid.Web:Change the control\u0026amp;rsquo;s class name from \u0026amp;ldquo;ExcelWeb\u0026amp;rdquo; to \u0026amp;ldquo;GridWeb\u0026amp;rdquo;.Support hiding header barSupport hiding scroll barSupport relative path for client side usage files.Support cell/table background image style.Support save/load Aspose defined binary file(AGWF-Aspose Grid Web Format).Added new property \u0026amp;ldquo;AGWClientPath\u0026amp;rdquo;, you can use this property set the path for client side usage files(scripts, images, etc.).Fixed color bug when exporting to excel files.Fixed default font bug.\n\\\n","date":-62135596800,"description":"","objectID":"8996a3ca4194d28cdddf450a10afe14c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.5.1.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.5.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.5.2.0 Hot Fix\nWe have released Aspose.Grid 1.5.2!\nRelease Notes\nAspose.Grid.Web\n Fixed: client-side setting color bug Fixed: TableStyle/TableItemStyle CssClass property doesn\u0026amp;rsquo;t take effect bug Support Creating Pivot Table Reports Support client-side multi-cells select/copy/cut/paste/set style Support client-side right-click menu operations: freeze/unfreeze; insert/delete row/column; merge/unmerge cells; Support Hyperlinks(Text or Image Display, UrlLink or CellCommand Action) Added properties: ActiveCell, EnableClientColumnOperations, EnableClientFreeze, EnableClientMergeOperations, EnableClientRowOperations, SelectCells Added Methods: WebCells.GetColumnReadonly, WebCells.SetColumnReadonly, WebCells.GetRowReadonly, WebCells.SetRowReadonly Added events: SheetDataUpdated, LoadCustomData(for Sessionless mode data recovering), CellCommand, ColumnDeleted, ColumnInserted, RowDeleted, RowInserted, PageIndexChanged Changed: Now the client file web-path(/agw_client) and the client files(htc, gif, etc.) are not needed in deploying environment. These files are now embedded in the control. This simplifies the deploying and upgrading operations.  Aspose.Grid.Desktop\nEnhanced:\n Column header text Supported. Context menu Supported. Hyperlinks, comments, pictures exporting supported. Cell button, checkbox, combox supported. CellClick, CellDoubleClick, CellKeyPressed events supported. Applying style to range of cells supported. Data validation supported.  Fixed:\n Minimizing the form that contained the GridDesktop control which set the Dock property Fill, an exception is thrown. Pressing \u0026amp;ldquo;delete\u0026amp;rdquo; key, the GridDesktop control does not raise CellDataChanged event. When row number is greater than 4 digitals, row header\u0026amp;rsquo;s width is not enough. When load from excel file, the font of char that input in a cell is different from the font of cell. Can\u0026amp;rsquo;t input Enter in a cell, now use Control + Enter keys. If …","date":-62135596800,"description":"","objectID":"c26e85869b346ecc59fb343d73ac3434","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.5.2.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.5.2.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.5.3.0 Hot Fix\nWe have just released Aspose.Grid 1.5.3!\nEnhancement and bugfix in this release:\nAspose.Grid.Desktop\nEnhanced:1.Column validation supported.2.Column control supported.3.R1C1 reference style supported.4.Sorting supported.\nAspose.Grid.Web\nFixed bugs:1.When the number of rows is greater than about 100, FreezePanes(Fixed Rows/Columns) sometimes disappeared.2.When multi-select a range of cells and paste data, readonly cells are modified.3.DropDownList type cells can be deleted.4.Column\u0026amp;rsquo;s width are not proper at some region settings.\nEnhanced:1.Support setting custom column/row header captions(WebCells.SetRowCaption, WebCells.SetColumnCaption).2.Support sorting a range of cells, both top to bottom and left to right orientation(WebCells.Sort).3.Support export cells data to a DataTable object(WebCells.Export).4.Aspose.Grid.Web UI Designer. Runs from System Start Menu or Visual Studio Environment(Only Support .net 1.0/1.1 by far).\n","date":-62135596800,"description":"","objectID":"7c9d66b1ff0138c3cbd60faa4fa2f548","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.5.3.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.5.3.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.6.0.0 New Release\nDear Customers,We have just released Aspose.Grid 1.6!Enhancement and Bugfix in this release:Aspose.Grid.Web1. Add Full Support for none IE browsers, including Mozilla, FireFox and Opera.2. Add GridWeb. EnableClientResizeColumnRow property.3. Support relative path when use CustomStyleFileName.Aspose.Grid.Desktop1. Support Exporting to DataTable.2. Rename DataBind() method to ImportDataTable().3. Fixed the ColumnControl bug that Combox or CheckBox control does not work well.4. Add Values collection to Combox control.5. Support Data Binding.\nChanges Since Aspose.Grid release 1.5.0\n","date":-62135596800,"description":"","objectID":"6a33ee5d30a3f715819193ce72b98e6e","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.6.0.0+new+release+release+notes/","title":"Aspose.Grid .Net 1.6.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.7.0.0 New Release\nDear Customers,We have just released Aspose.Grid 1.7!This version inclucdes many new exciting features:Aspose.Grid.Web 1.71.New METAL-LIGHT Look \u0026amp;amp; Feel.2.Added Fully DataBinding Support. Now it supports binding sheets to DataSet, DataTable, DataView or any Collection Objects. The control loads data from the DataSource, and updates the DataSource automatically.3.Added new \u0026amp;ldquo;Worksheets Designer\u0026amp;rdquo; in the vs.net IDE. You may use it to create powerful database binding applications with few mouse clicks and few lines of code.4.Added new Validation types: FreeList, Number, Integer, Date, DateTime and CustomFunction.5.Improved visual effect and usability in None-IE browsers.6.Added 6 new color properties to enable you adjust the ActiveCell/SelectCell/SelectHeader\u0026amp;rsquo;s Color/BackgroundColor.7.Added new property \u0026amp;ldquo;Visible\u0026amp;rdquo; to WebWorksheet. You may use it to hide a worksheet from the TabBar.8.Added Custom Command Buttons Support. You may create your own buttons at the control\u0026amp;rsquo;s TabBar.9.Now you can use the RegularExpression Validation with one of other Validations at the same time.10.Added WebWorksheet.Copy(WebWorksheet) method, enabling you copy a worksheet\u0026amp;rsquo;s content to another worksheet even if they are in two different GridWeb control.11.Added Client-Side Submit/Validation event Support. You may write your own client script to handle the client-side submit or validation error event.12.Added formula functions \u0026amp;ldquo;MIN\u0026amp;rdquo;, \u0026amp;ldquo;MAX\u0026amp;rdquo;.13.Fixed the bug of losting data types when importing from a DataView object.14.Fixed some problems in VS.NET 2005.15.Optimized performance when there are large number of Validations in a sheet.\nAspose.Grid.Desktop 1.71.Grouping rows or columns supported.2.Hiding row column header supported.3.Fixed the Button or ComboBox of a focused cell will hide a part of text of the cell.4.Fixed the bug of AddRow method.5.Fixed the …","date":-62135596800,"description":"","objectID":"c7c71033185347c72fec489f158e86bb","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.7.0.0+new+release+release+notes/","title":"Aspose.Grid .Net 1.7.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.7.1.0 Hot Fix\nDear Customers,\nWe have just released Aspose.Grid 1.7.1!\nAspose.Grid.Web 1.7.1\n  Aspose.Grid.Web Designer now supports .net 2.0 and vs.net 2005.  Aspose.Grid.Desktop\n  Fixed an internal bug  \\\n","date":-62135596800,"description":"","objectID":"81be4f68cb2fbf3b2cd844b9a4b63deb","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.7.1.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.7.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.7.2.0 Hot Fix\nDear Customers,We have released Aspose.Grid 1.7.2!Fixes and Enhancements in this release:Aspose.Grid.Web1. Added \u0026amp;ldquo;Hierarchical View\u0026amp;rdquo; feature in Data Binding mode.2. Fixed some formatting problems when running with none English locale settings.3. Added GridWeb.DisplayCellTip property to let you enable/disable the default tooltips of cells.4. Added GridWeb.NoScroll property.5. Improved performance of adding/deleting rows/columns.6. Creating hyperlinks in column headers supported.7. Creating cell-command in binding columns supported.8. Supports column headers clicking and sorting.\nAspose.Grid.Desktop1. \u0026amp;ldquo;Click start cell then shift and/or ctrl click end cell\u0026amp;rdquo; supported.2. SelectedCellRangeChanged event supported.3. Fixed the not supported the regular style font.4. SetStyle with bitmask supported.5. \u0026amp;ldquo;$A$1\u0026amp;rdquo; formula style supported.6. Fixed the formula styles not supported in ImportExcelFile.7. Fixed the font and font color bug.8. Mouse drag scroll supported.9. \u0026amp;ldquo;Vertical text\u0026amp;rdquo; supported.10. Fixed the bug of grouping same ranges more than twice.\n","date":-62135596800,"description":"","objectID":"40aa7eebf8b6d0a941ac685ca24d0849","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.7.2.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.7.2.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.7.3.0 Hot Fix\nDear Customers, We have just released Aspose.Grid version 1.7.3! New features and enhancements in this release:Aspose.Grid.Web1.CheckBox Validation type supported.2.Added WebCells.Unmerge method.3.Support double-click to auto fit the width of a column.4.Updated C# and VB.NET Demos.5.Full tested under Netscape Browser Version 8.1.\nAspose.Grid.Desktop1.Optimized performance of inserting and deleting row and column.2.Fixed the formular bug referencing to other sheet.3.Fixed the formular bug referencing to absolute address array.4.The \u0026amp;ldquo;VLOOKUP\u0026amp;rdquo; function is supported.5.Fixed the Combobox Control bug that the listbox can\u0026amp;rsquo;t be shown when clicked.\n\\\n","date":-62135596800,"description":"","objectID":"babeff405f142adb1218ec667d4f1f97","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.7.3.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.7.3.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.7.4.0 Hot Fix\nDear Customers,\nWe have just released Aspose.Grid version 1.7.4!\nThis release fixed some bugs and brings some great new features.\nAspose.Grid.Web1.New control: GridWebForm, works with a GridWeb control, enables you to display/edit data in a record based form view window.2.New method Validation.LoadValueList, loads value/text items to the dropdownlist or listmenu.3.Enhanced List/DropDownList/FreeList features, supports Value/Text pair in a list item.4.Supports DataSourceControl DataBinding in Vs.NET 2005.5.Supports DropDown Calendar control in a Date/DateTime validation cell.6.New Property GridWeb.EnableSmartNavigation(bool), Enabled by default. Supports Background Post Back and smooth visual effect without page refreshing.7.New event: GridWeb.BindingChildView, enables you to modify the default child view\u0026amp;rsquo;s bindcolumns before binding the child view sheet.\nAspose.Grid.Desktop1.Fixed the bug of text direction when rotating 90 or -90 degrees.2.Extend no wrap text supported.3.Stdev, averagea functions supported.\n\\\n","date":-62135596800,"description":"","objectID":"c060d1742fe31e890f3f3cfe891f5c08","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.7.4.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.7.4.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.8.0.0 New Release\nDear Customers,We have released Aspose.Grid 1.8!This new version contains many new exciting features and fixes some bugs:Aspose.Grid.Web1.Supports Grouping Rows feature(WebWorksheet.GroupRows).2.Supports Creating Subtotal feature(WebWorksheet.CreateSubtotal).3.Supports Formula Reference Automatic Updating: When inserting/deleting Rows/Columns, all formula reference in the sheet updated automatically.4.Supports Importing/Exporting CSV and SpreadSheetML format files.5.Improved muti-cells pasting.6.New client-side Find/Replace feature.7.New Formula Functions: COUNT, COUNTA, SUBTOTAL.8.Obsolute Event: WebWorksheet.InitializeNewBindRow. Please use GridWeb.InitializeNewBindRow event instead.9.Supports Application Parameters: aspose.grid.web.agw_client_path, aspose.grid.web.force_script_path10.Fixed a bug of inheriting from the GridWeb class.11.Fixed a bug of SmartNavigationg feature.12.Fixed a bug of Re-DataBinding in a sheet.\nAspose.Grid.Desktop1.Fixed the bug of when the formula value is \u0026amp;ldquo;\u0026amp;quot;, the following cells text position shown error.2.Supported index function syntax 1.3.Supported cell function that information type is \u0026amp;ldquo;CONTENTS\u0026amp;rdquo;.4.Fixed the bug of pasting from excel spreadsheet.5.Fixed the bug of when a cell\u0026amp;rsquo;s font and its column font not exist, its row font is not applied to the cell.6.Supported the fonts not in FontFamily.7.Enhanced all demos.\n","date":-62135596800,"description":"","objectID":"11e4fc2a4acdc23a9cb0c2019416eab4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.8.0.0+new+release+release+notes/","title":"Aspose.Grid .Net 1.8.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.9.0.0 New Release\nDear Customers,We have just released Aspose.Grid 1.9!Aspose.Grid.Web 1.91.New formula engine, lifts the performance of calculation for more than 20x than the old one.2.Provides a new interface that enables users define their own formula functions. Please see the API document about WebWorksheets.RegisterCustomFunctionHandler for details.3.Two new server event:RowDeleting, ColumnDeleting4.New client-side functions: getCellValue, setCellValue, getActiveRow, getActiveColumn, setActiveCell, getActiveCell, setActiveCellByCell, getCell, getCellRow, getCellColumn, getCellValueByCell and setCellValueByCell5.New client-side events:onSubmit, onError, onSelectCell, onUnselectCell, onDoubleClickCell, onCellError, onCellUpdated6.Includes Full Featured Demo that shows the usage of the client-side functions and events.7.Supports multiple rows selecting.8.Supports keyboard selecting by holding the shift-key and pressing the arrow keys.9.Supports create hints in the row and column headers.10.Supports paste a string to multiple cells.11.Supports datetime calculation. You may add days in a number to a date type value, or subtract a date value from another date value to get the duration in days between the two date value.12.Fixed a problem. When you set a cell\u0026amp;rsquo;s NumberType to Text, the input string will not be parsed to any other value type and remains to be string type.\n","date":-62135596800,"description":"","objectID":"1c1e1e371f33165597e5dd1075b7654d","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.9.0.0+new+release+release+notes/","title":"Aspose.Grid .Net 1.9.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.9.1.0 Hot Fix\nDear Customers, We have just release Aspose.Grid 1.9.1. New features and enhancements in this release (Since version 1.9.0):Aspose.Grid.Web1. Supports XHTML 1.0 specification.2. Supports Worksheets Serialization. So you can use StateServer or SQLServer as session store.3. Supports both Auto Filtering and Custom Filtering.4. CLS Compliant.5. Supports dragging and scrolling.6. Supports displaying command bar at top side.7. Optimized sheet tab scrolling.\n","date":-62135596800,"description":"","objectID":"523585e021a2fde037219cb46a24ff58","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.9.1.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.9.1.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid .Net 1.9.2.0 Hot Fix\nDear Customers,\nWe have just released Aspose.Grid v1.9.2!\nIntroduction\nThis new version includes all the new features and fixes since v1.9.0.\nWhat\u0026amp;rsquo;s New?\nAspose.Grid.Web\n\\1. Supports XHTML 1.0 specification Rendering.\n\\2. Supports Worksheets Serialization. Now users can use StateServer or SQLServer as session store.\n\\3. Supports both Auto Filtering and Custom Filtering.\n\\4. Supports CLS Compliant.\n\\5. Supports dragging and scrolling.\n\\6. Supports displaying command bar at the top of the control.\n\\7. Supports displaying a \u0026amp;ldquo;Loading\u0026amp;hellip;\u0026amp;rdquo; box when PostBack.\nWhat\u0026amp;rsquo;s Improved?\nAspose.Grid.Web\n\\1. Improved sheet tab scrolling.\n\\2. Greatly improved the performance when there are a large number of validations of List/FreeList/DropdownList.\n\\3. Greatly improved XHTML rendering performance(compared with 1.9.1.0).\nAspose.Grid.Desktop\n\\1. New formula engine, greatly improved the formula executing performance.\nWhat\u0026amp;rsquo;s Fixed?\nAspose.Grid.Web\n\\1. Fixed a problem of incorrect cell style after a sorting operation.\n\\2. Fixed a problem of incorrect DropdownList display in XHTML rendering mode.\nAspose.Grid.Desktop\n\\1. Fixed the bug of pasting a cell from another application.\nDownload URL: http://www.aspose.com/Downloads/Aspose.Grid/Default.aspx\n","date":-62135596800,"description":"","objectID":"eaa7a74150068d5d6d1e089a187bba6e","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+.net+1.9.2.0+hot+fix+release+notes/","title":"Aspose.Grid .Net 1.9.2.0 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Grid for .Net 1.9.3\nDear Customers, We have just released Aspose.Grid v1.9.3!\nIntroduction This new version includes all the new features and fixes since v1.9.2\nWhat\u0026amp;rsquo;s New? Aspose.Grid.Web1. Supports Microsoft AJAX extention for .NET 2.0. You may use the GridWeb with the AJAX extention web control \u0026amp;ldquo;UpdatePanel\u0026amp;rdquo;.2. Supports TAB, SHIFT-TAB navigating.3. New class CellImage. Use WebWorksheet.CellImages object to create a CellImage.4. New method: WebCells.DeleteRows and WebCells.InsertRows, improved performance of deleting or inserting multiple lines of the sheet.5. New property GridWeb.SessionMode, the old GridWeb.EnableSession is obsoleted.6. New client side grid initializing event: OnGridInitClientFunction.7. New client side method: getSelectedCells8. Modified behavior: Totally hides the column when the column\u0026amp;rsquo;s width is set to zero.9. Modified behavior: When GridWeb.ForceValidation is set to false, the grid does not validate input before postback.\nWhat\u0026amp;rsquo;s Improved? Aspose.Grid.Web1. Greatly improved databinding performance.2. Enhanced the space and newline characters processing in the cells.\nWhat\u0026amp;rsquo;s Fixed? Aspose.Grid.Web1. Fixed the problem that when using AutoFilter feature, the filter buttons do not move to the correct position after a column resizing.2. Fixed the parameter order issue of the \u0026amp;ldquo;ATAN2\u0026amp;rdquo; function.3. Fixed the Firefox/Mozilla displaying problem when in XHTML rendering mode.4. Fixed the Hyperlink color problem. Now the hyperlink\u0026amp;rsquo;s color will be the same as the cell\u0026amp;rsquo;s.5. Fixed the problem that the hierachical view wrong displays in XhtmlMode.6. Fixed the problem of pasting data cells from MS-Excel.7. Fixed a formula null pointer problem in multi-user envrionment.8. Fixed a problem with FreezePane feature.\nAspose.Grid.Desktop1. Fixed the problem of Cell Merging and Freezing.\n","date":-62135596800,"description":"","objectID":"66bd24d88a7038e3984fc6ebf432f4d4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/aspose.grid+for+.net+1.9.3+release+notes/","title":"Aspose.Grid for .Net 1.9.3 Release Notes"},{"content":"**Release Notes - 2007 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"af345123d9cc97b904a122ef9e58b1ce","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2007/","title":"Release Notes - 2007"},{"content":"This page contains release notes for Aspose.Cells 4.5.0.0 New Release\nWhat\u0026amp;rsquo;s New?\n\\\n  Convert Worksheet to image.  Support to convert Excel file to HTML file format.  Support to sort the data from left to right.   \\\nWhat\u0026amp;rsquo;s Improved?\n\\\n  Supported more functions in formula calculation engine  Supported more custom filters in autofilter.  Enhanced Excel2007 Xlsx support   Enhanced SpreadsheetML support  Enhanced xls2Pdf conversion  Enhanced Charts2Image conversion.  Enhanced smart marker  Supported getting linked cell of radio button from template file.  \\\nWhat\u0026amp;rsquo;s Fixed?\n\\\n  Bug in Reading and Writing charts.  Bug in calculating formulas  Bug in opening and saving some special xls files.  Bug in Cells.ImportDataTable method  Bug in updating chart references when inserting rows/columns.  ","date":-62135596800,"description":"","objectID":"85301dd06361bfe4b7c2ed43527b23f3","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/aspose.cells+4.5.0.0+new+release+release+notes/","title":"Aspose.Cells 4.5.0.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .Net 4.4.1 Hot Fix\nDear Customers,\nWe have released Aspose.Cells for .NET V4.4.1!\nWhat\u0026amp;rsquo;s New?\n Auto-detect file type when opening an Excel file  What\u0026amp;rsquo;s Improved?\n Enhanced Excel2007 Xlsx support Enhanced xls2pdf conversion Enhanced pivot table support Supported more functions in formula calculation engine  What\u0026amp;rsquo;s Fixed?\n Bug in opening a few special far-east Excel files Bug in formula parsing and calculation Bug in page setup settings Bug in import/export some text files Bug in processing smart markers Problem in installation on vista  ","date":-62135596800,"description":"","objectID":"c2f47e4eed1ef3fdedafc12e6f01bd69","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/aspose.cells+for+.net+4.4.1+hot+fix+release+notes/","title":"Aspose.Cells for .Net 4.4.1 Hot Fix Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .Net V4.4.3 Hotfix\nDear Customers,\nWe have released Aspose.Cells for .NET V4.4.3!\nWhat\u0026amp;rsquo;s New?\n Supported DAYS360 function in formula calculation engine  What\u0026amp;rsquo;s Fixed?\n Bug in print area setting Bug in ImportDataTable method  ","date":-62135596800,"description":"","objectID":"5ead529a7e75692f6dbf1b5f6c2536a0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/aspose.cells+for+.net+v4.4.3+hotfix+release+notes/","title":"Aspose.Cells for .Net V4.4.3 Hotfix Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .Net V4.5.1 Hotfix\nWhat’s New?\n Supports Excel2007 xlsx file encryption/decryption Supports to read/write charts and shapes in Excel2007 xlsx file Supports to get and set the cell Gradient style in Excel2007 file Supports to read/write conditional formatting in Excel2003 SpreadML file Supports to read/write Data Bar , Color Scale , Icon Set conditional formatting in Excel2007 xlsx file  What’s Improved?\n\\\n Enhanced Xls2Pdf conversion Enhanced Chart2Image conversion Enhanced Worksheet2Image conversion and printing worksheet Enhanced copying worksheet  What’s Fixed?\n Fixed a few bugs while reading/writng Excel 97-2003xls file in some special cases Fixed a bug while inserting rows/columns Fixed some bugs while calculating formulas Fixed a data sorting bug Fixed a copying charts bug Fixed some bugs of in autofit feature  ","date":-62135596800,"description":"","objectID":"53587573e93ee0032e86c64d2e45d5c1","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/aspose.cells+for+.net+v4.5.1+hotfix+release+notes/","title":"Aspose.Cells for .Net V4.5.1 Hotfix Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .Net v4.4.2 Hotfix\nDear Customers,\nWe have released Aspose.Cells for .NET V4.4.2!\nWhat\u0026amp;rsquo;s New?\n Added Cell.GetStyle/Cell.SetStyle method to optimize memory usage Supported 2007 Xlsm format  What\u0026amp;rsquo;s Improved?\n Enhanced formula calculation engine Enhanced xls2pdf conversion Enhanced chart2Image conversion  What\u0026amp;rsquo;s Fixed?\n Fixed bugs in CopyRow/CopyColumn method Fixed a bug in Cell.StringValue property Fixed a bug in FreezePanes method  ","date":-62135596800,"description":"","objectID":"3b8827d81d2fe5c2d1f16416f91dc645","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/aspose.cells+for+.net+v4.4.2+hotfix+release+notes/","title":"Aspose.Cells for .Net v4.4.2 Hotfix Release Notes"},{"content":"This page contains release notes for Aspose.Grid V2.0.0.0 New Release\nDear Customers, We have just released Aspose.Grid 2.0.0!\nWhat\u0026amp;rsquo;s New? Aspose.Grid.Web1. GridWeb is now compiled under both 1.0 and 2.0 frameworks.2. Fully supports .NET 2.0 framework.3. Supports .NET 2.0 MEDIUM TRUST LEVEL.4. Supports .NET 2.0 DataSourceControl Binding.5. New Client Api Method resizeColumnToFit.6. Supports Windows Vista.\nAspose.Grid.Desktop1. New property GridCell.Protected, indicates if the cell is protected. If the value is \u0026amp;ldquo;true\u0026amp;rdquo;, user can not modify the cell through the user interface.2. New property ComboBox.IsInputable, indicates if the user can input text to the combobox. The inputted text will be saved as the cell\u0026amp;rsquo;s value.3. New event Desktop.CommentDataChanged, occurs when the comment data has changed..4. New property Validation.CustomMsgForStopEdit, enables the user gets or sets the custom message to show when user enters invalid value.5. New method Worksheet.SetFirstVisibleColumn()/SetFirstVisibleRow() enables the user to set the first visible column/row index of sheet view.6. New method Worksheet.GetFirstVisiableColumn()/GetFirstVisiableRow() enables the user to get the first visible column/row index of sheet view.7. New method Worksheet. AddSelectedRange() enables the user to add new selected range to the worksheet..8. New property Worksheet.ShowGridlines, enables the user to show/hide the gridlines.\nWhat\u0026amp;rsquo;s Improved? Aspose.Grid.Web1. Improved XHTML Support.2. Improved Sorting. Null Cells will always stay at the rear.3. Improved Copy/Paste.\nWhat\u0026amp;rsquo;s Fixed? Aspose.Grid.Web1. Fixed the bug of AutoFilter buttons will not be repositioned after AutoFit a column.2. Fixed a bug of Excel Exporting.3. Fixed a bug of Can\u0026amp;rsquo;t get the Cell object of a Commmand Type Hyperlink when in XhtmlMode. 4. Fixed the bug of AJAX auto updating doesn\u0026amp;rsquo;t work in a form using Master Page.\nAspose.Grid.Desktop1. Fixed a bug of comment display.2. Fixed an …","date":-62135596800,"description":"","objectID":"f992651d5450d67df34759cee5acd4d8","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/aspose.grid+v2.0.0.0+new+release+release+notes/","title":"Aspose.Grid V2.0.0.0 New Release Release Notes"},{"content":"**Release Notes - 2008 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"1be71d78ec93bf0d54d4657e8998ac3a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2008/","title":"Release Notes - 2008"},{"content":"This page contains release notes for Aspose.Cells for .NET v4.7.1\nWe are happy to announce Aspose.Cells for .NET 4.7.1!\nWhat\u0026amp;rsquo;s changed\nl Directly export excel files to pdf stream.\nl Apply Subtotals to worksheet tables.\nl Improve performance of encrypting and decrypting Excel 2007 file.\nl 55 fixes and enhancements.\n\\\n\\\nIssues Resolved in Aspose.Cells 4.7.1\n   **Issue ID ** **Component ** **Summary **     7729 Chart2Image Chart Image does not look like underlying chart object   7938 Charts2Image Percentage sign not showing in pie chart   7981 Charts2Image Exported chart messed up   8114 Charts2Image Saving workbook with chart in HTML broken   8119 Charts2Image Using FillFormat.Pattern   8223 Charts2Image The Category X-Axis title is not being displayed   8113 HTML Html broken on worksheet name containing a space   8420 HTML HTML export format issue   7718 Pdf Supports hyperlink in directly converting cells to pdf   7723 Pdf Font problems with Aspose.Cells converting to PDF   7726 Pdf Cells 4.7.0 saving to PDF stream does not work   7727 Pdf Pdf file is too large   7730 Pdf Key has already been added to dictionary exception   7838 Pdf Excel to PDF produces corrupt pdf file   7978 Pdf Some Aspose.Cells save issues   7980 Pdf Differences in output   7728 SpreadML Index out of range   8116 SpreadML Bad SpreadsheetML when a sheet is deleted   8118 SpreadML Error when a PRINT_AREA exists   7381 Xls Method EndCellinRow for excel2007   7722 Xls Copy validations in copying range.   7731 Xls Date number format with current language specified   7732 Xls Saved Excel file is corrupt   7766 Xls Supports to calculate Large function   7891 Xls Supports to set the fuction CHOOSE   7892 Xls Set Precision as displayed is unchecked   7893 Xls The issue of Workbook.Open   7914 Xls Update Conditional formatting when inserting/deleting columns   7915 Xls The issue of converting cells to pdf   7939 Xls Print titles error after inserting/deleting columns   7979 Xls I in Cell return to ? …","date":-62135596800,"description":"","objectID":"75b50ff0f27b1e990d0c8449c5867e44","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2009/aspose.cells+for+.net+v4.7.1+release+notes/","title":"Aspose.Cells for .NET v4.7.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET v4.8.0\nWe are happy to announce Aspose.Cells for .NET v4.8.0.0!\nWhat\u0026amp;rsquo;s changed:\nl Merge Aspose.Grid suite into Aspose.Cells\nl Optimize the performance of Formula recalculations\nl Improve the performance of inserting/deleting Rows/Columns\nl Enhance the performance of Auto-fit Rows/Columns feature\nl Add WordArt shapes to XLS file\nl Read Gradient Fill effects for the Chart\nl Create spreadsheets with First Page or Even/Odd Header/Footer attributes for Page Setup\nl Support multiple Print Areas in Worksheet-to-Image feature\nl Add Formula Calculation support for some new MS Excel built-in functions\nl Set background image for a Chart type Worksheet\nl Provide support for setting Image Options in Chart-to-Image and Worksheet-to-Image features\nl 101 fixes and other enhancements\n\\\nIssues Resolved in Aspose.Cells for .NET v4.8.0.0\n   **Issue ID ** **Component ** **Summary **     8741 Chart2Image Chart2Image problems   8749 Chart2Image Charts not displaying in Excel PDF   9712 Chart2Image Supports grouped shape to image   9766 Chart2Image Getting zero values   8738 CSV Loading a csv file failed   8737 CSV Opening csv file seems to write to the console   8984 HTML Slow performance when saving workbook as HTML   7915 Pdf The issue of converting cells to pdf   8669 Pdf Excel to PDF Conversion Issue   8672 Pdf Difference in output when generating Excel file to Pdf file   8678 Pdf Cells To PDF, footer image is blurred   8749 Pdf Charts not displaying in Excel PDF   8986 Pdf Converting from Excel to PDF   8988 Pdf saving workbook as PDF broken   9608 Pdf XLS conversion problem (negative length?)   9609 Pdf Save to FileFormatType.Pdf with multithread implementation   9670 Pdf Excel2PDF with grouped shape issue   9761 Pdf Error when save as Aspose.Pdf.xml   9960 Pdf Layout and file size   10145 Pdf Throws System.OutOfMemory Exception   10146 Pdf Save FileFormatType.Pdf Very Bad Quality   8674 Sheet2Image Problem in …","date":-62135596800,"description":"","objectID":"466682f4602cb77f43e8397a37250433","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2009/aspose.cells+for+.net+v4.8.0+release+notes/","title":"Aspose.Cells for .NET v4.8.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .Net V4.7.0 New Release\nWe are happy to announce Aspose.Cells for .NET 4.7.0!\nWhat\u0026amp;rsquo;s changed:\n Supports directly converting Excel files to Pdf. Supports Gridline option of the page setup setting while printing worksheet. Supports to insert a WAV file as Ole object. Supports R/W checkboxes in Excel 2007 files. Supports to use anonymous types or custom object as data source in Smart marker Supports to set display zero value option. Supports to union and intersect two ranges. Supports preserving data after saving the workbook. Supports the option to inserting blank rows in pivot table or not. Enhances the calculate engine and supports more functions. 45 fixes and enhancements.  Issues Resolved in Aspose.Cells 4.7.0\n   **Issue ID ** **Component ** **Summary **     7341 Chart2Image Red tick labels bug   6946 Chart2Image Median Lines lost on Scatter Charts   6968 Chart2Image NumberFormatLinked property of the chart CategoryAxis   6941 Text File Performance enhancement when opening TAB DELIMITED FILE   7340 Pdf Problem with converting some excel files to Pdf   7507 Pdf An xls2pdf bug   7652 Pdf Workbook.Save is throwing error   7447 Pdf Errors saving Workbook to PDF   6944 PivotTable AutoSortField does not effect.   6900 SpreadML Exception is thrown in exporting to SpreadML   6865 Xls Converts the time string value to DateTime   6867 Xls The Smart Marker is same as table.column   7007 Xls Formulas with named ranges   7016 Xls Exclamation in the worksheet name causes an error in formulas   7063 Xls Saving Workbook Error   7084 Xls Inserting a formula issue   7121 Xls AutoFitRow not making rows big enough with wrap text on   7201 Xls Conditional formatting   7335 Xls AutoFitColumns doesn\u0026amp;rsquo;t work   7336 Xls Moving a Shape   7337 Xls ArgumentOutOfRange exception while extracting pictures   7338 Xls The issue of the last cell   7346 Xls System.NullReferenceException with SheetToImage   7366 Xls An errorwhile using …","date":-62135596800,"description":"","objectID":"c96c0ed63bf44d8a6741a78e94ac4f40","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2009/aspose.cells+for+.net+v4.7.0+new+release+release+notes/","title":"Aspose.Cells for .Net V4.7.0 New Release Release Notes"},{"content":"This page contains release notes for Aspose.Grid for .NET V2.0.1 New Release\nWe have just released Aspose.Grid v.\nWhat\u0026amp;rsquo;s changed:\nAspose.Grid.Desktop\n\\\nl Supports importing/exporting to Excel2007xlsx file format.\nl Supports reading merged cells’ style from excel file.\nl Supports Auto RowFilter and Custom RowFilter; adding IgnoreCase and IsStartWithCriteria properties to GridColumn to customize behaviors of auto rowfilter.\nl Adds CustomMsgTitle property to Validation to customize the title of MessageBox.\nl Adds RecalculateFormulas property whose default value is true; when it is set to false, assigning any value to a cell will not recalculate the formula.\nl Adds Width and Height properties to Comment.\nl Adds CommentFont property to GridDesktop to set font of Comments.\nl Provides new versions for the overloaded list of the Add method for the CommentCollection class to specify Width and Height of Comments.\nl Adds IsVisible property to Worksheet.\nl Supports reading/writing CustomProperties of Worksheet in excel files, and adding read-only CustomProperties property to Worksheet.\nl Supports vlookup function/formula.\nl Supports Undo/Redo features when changing values of cells.\nl Adds ContextMenuManager property to GridDesktop to manage context menu.\nl Adds RowColumnHiddenChanged event.\nl Supports multi-selection of rows/columns/regions.\nl Supports importing/ exporting frozen Panes from/ to excel files.\nl 36 fixes and enhancements.\nAspose.Grid.Web\n\\\nl 1 enhancement.\n\\\nIssues Resolved in Aspose.Grid 2.0.1\n   **Issue ID ** **Component ** **Summary **     7942 Grid.Desktop Sets Single or float types value to cell displays blank.   7970 Grid.Desktop The right-bottom borders that were not shown normally.   7971 Grid.Desktop The black border of the focused cell that was not shown normally.   7972 Grid.Desktop Demo Features throws file path exception demonstrating Pictures feature.   7973 Grid.Desktop Adds SetSelectedIndex method to ComboBox to avoid recalculating all the …","date":-62135596800,"description":"","objectID":"3ec3e2225e4688aed26d26007d626b2c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2009/aspose.grid+for+.net+v2.0.1+new+release+release+notes/","title":"Aspose.Grid for .NET V2.0.1 New Release Release Notes"},{"content":"**Release Notes - 2009 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"0a5d86ec8b3c4f320526fda7f13aeb6c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2009/","title":"Release Notes - 2009"},{"content":"This page contains release notes for Aspose.Cells for .NET 4.8.2\n","date":-62135596800,"description":"","objectID":"652f5efd1a35b85ab79880087e755094","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+4.8.2+release+notes/","title":"Aspose.Cells for .NET 4.8.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 4.9.0\nWe are happy to announce Aspose.Cells for .NET v!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Calculates formulas that exceed Excel2003 row/column limitation  Supports MS Excel 2010 Sparklines. Implements 3D effects on charts  Removes Duplicate values  Supports Allow Users to Edit Ranges  The Formula Calculation Engine is enhanced  Detects and removes connections to external data  Sets linked picture in xlsx file  Includes ICustomTypeDesciptor as data source of smart markers  External linked source data in Chart to Image feature is supported  MS Excel 2007 external page setup options in xls file are supported  Specifies HTML content as the cell\u0026amp;rsquo;s value or comment\u0026amp;rsquo;s note 112 fixes and other enhancements.  (Note: Aspose.Cells.Charts class is renamed to Aspose.Cells.ChartCollection class.)\nWhat’s changed in Aspose.Cells.GridWeb:\n Adds new date formats: \u0026amp;ldquo;M/d/yy\u0026amp;rdquo;, \u0026amp;ldquo;MM/dd/yyyy\u0026amp;rdquo; and \u0026amp;ldquo;dd.mm.yyyy\u0026amp;rdquo; Sets error message in the cell’s title when validation is failed at client side Gets column name for a cell at client side Saves Excel files to stream or loads Excel files from stream Supports new functions: INDEX, LOOKUP, MATCH 8 fixes and other enhancements.  What’s changed in Aspose.Cells.GridDesktop:\n Sets \u0026amp;ldquo;MM/DD/YYYY\u0026amp;rdquo; and \u0026amp;ldquo;M/D/YYYY\u0026amp;rdquo; date formats with Format Cells dialog box Imports CSV file format Supports formulas: LOOKUP, MATCH 3 fixes and other enhancements.  Issues Resolved in Aspose.Cells for .NET v4.9.0\n","date":-62135596800,"description":"","objectID":"f1b43471e5e974b03064bf60cd344ee0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+4.9.0+release+notes/","title":"Aspose.Cells for .NET 4.9.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 4.9.1\nWe are happy to announce Aspose.Cells for .NET v!\n\\\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Includes Aspose.Cells for .NET Framework Client Profile assembly Improves the performance of Formula Calculation Engine Enhances the performance of opening xlsx files Supports to create Named Range based on address 23 fixes  \\\nWhat’s changed in Aspose.Cells.GridWeb:\n Supports setting the visibility of horizontal or vertical scroll bars 1 fix  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Performs copying and pasting cells with ComboBox control Handles Popup event of ContextMenu Imports a worksheet from Excel file Retrieves all selected ranges in the worksheet 2 enhancements  \\\nIssues Resolved in Aspose.Cells for .NET v4.9.1\n\\\n   **Issue ID ** **Component ** **Summary **     13526 Chart2Image Issue with Chart ToImage method   14888 Chart2Image PlotArea positioning problem with Chart.ToImage   16011 CSV Read CSV with newline   14183 Pdf Header/Footer not aligning with page margins   14501 Pdf Error when converting the excel file to pdf   15741 Pdf Gridlines not showing   15910 Pdf Missing link between bookmark and page   16207 Pdf Error saving PDF File   16260 Pdf Converting Various file types to tif   16328 Pdf XLS to PDF conversion Problem   16377 Pdf Some text in cells is disappearing   16402 Pdf XLS to PDF conversion Problem   16472 Pdf Formatting issues   16499 Pdf PDF not embedding fonts   13606 Worksheet2Image Some Differences in the Printed/Saved Excel File   16236 Worksheet2Image The issue of sheet2imagebypage   15981 Xls Issue regarding formula calculation   16288 Xls Put Value into the Formula Field   16393 Xls Problem with remove validations   15885 Xlsx Error saving to FileFormatType.Excel2007Xlsx   16224 Xlsx Custom data labels text   16515 Xlsx Cells.InsertRow() within a \u0026amp;lsquo;Named Range\u0026amp;rsquo;   16522 Xlsx Nested subtotals not working properly   16100 GridWeb Custom format issue   15984 …","date":-62135596800,"description":"","objectID":"36c70154658693d0b97da78cbd0477c4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+4.9.1+release+notes/","title":"Aspose.Cells for .NET 4.9.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.0.0\nWe are happy to release Aspose.Cells for .NET v5.0.0!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Includes MS Excel 2007 XLSB file format support. Provides Copy and Paste Special feature. Supports Sorting Smart Markers. 37 enhancement and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports Hiding Context Menu. 3 enhancements and fixes.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Supports Copying ComboBox and provides an event handler to compare items and values of the two ComboBoxes. Includes Text Rotation feature for the cells data. Gets cell location by the client’s coordinates / points.  Issues Resolved in Aspose.Cells for .NET v5.0.0.\n\\\n\\\n\\\nNotable changes for the users:\nWhile trying to keep the API as straightforward and clear as possible, we have decided to recognize and honor the common development practices of the platform; we have re-arranged API Structure/ Namespaces.\nWith this release i.e.., Aspose.Cells for .NET v5.0.0, we have reorganized the API classes for Aspose.Cells component. This change has some major aspects that we follow. We have added new namespaces. The entire API (classes, interfaces, enumerations, structures etc.) were previously located in the Aspose.Cells namespace. Now, certain sets of API have been moved to their relative namespaces, which make the relationship of classes (with their members) and namespaces clear and simplified.\nAll the classes of Aspose.Cells library are split into appropriate namespaces for easy access. The Aspose.Cells namespace is of course the root namespace that provides classes for generating, converting, modifying, rendering and printing Microsoft Excel documents without utilizing Microsoft Excel. The Aspose.Cells component has the following namespaces:\n Aspose.Cells Aspose.Cells.Charts Aspose.Cells.Drawing Aspose.Cells.Rendering Aspose.Cells.Pivot Aspose.Cells.Tables Aspose.Cells.Properties  ","date":-62135596800,"description":"","objectID":"eae7081cf788aeee026d12912c5482dd","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.0.0+release+notes/","title":"Aspose.Cells for .NET 5.0.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.1.0\nWe are happy to announce Aspose.Cells for .NET v!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Includes Smart Tags support for XLSX files. Converts Sparklines to images. Provides support for image Smart Markers. Supports Cell’s gradient fills and theme of XLS file. Renders Cell’s pattern fills in the generated PDF file. Adds support for Pdf/A-1b compliance. Improves performance and quality of the generated PDF files. 46 enhancement and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Converts hierarchical custom collections to Dataset which contain relations.  1 fix.\n\\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Includes Scroll event.  Provides an overloaded version for the SumSelectedRanges method to exclude hidden cells.\n1 fix.\nIssues Resolved in Aspose.Cells for .NET v\n   **Issue ID ** **Component ** **Summary **     17474 GridWeb Borders are not rendered for the merged cells   15467 GridDesktop Changes the duplicate worksheet’s name in ImportExcelFile method   17581 Chart2Image Converts chart to image   17762 Chart2Image Data tables, Values and Category are lost for XY Scatter graphs   17900 Chart2Image Excel Chart to image problem   18023 Chart2Image Bubble charts   18190 Chart2Image Aspose.Cells throwing out of memory exceptions in Azure   18012 CSV Export different to Excel\u0026amp;rsquo;s   16207 Pdf Find error saving PDF File   17535 Pdf One font in XLSX results in two fonts in PDF   17537 Pdf Currency formatted blank cells   17776 Pdf Issue of converting Excel to PDF   17804 Pdf Decimal values are not displayed if only zeroes are there   17821 Pdf Built In Properties   17981 Pdf Excel to PDF Conversion Issue   18021 Pdf Saving to PDF - Troubles with font   18038 Pdf PDF document appears to be corrupted   18136 Pdf Issue of saving PDF   18258 Pdf Calculated formulas not updating on conversion from Cells to PDF   18316 Pdf Conversion Issue with Data showing up as Number signs   18258 Pdf Calculated formulas …","date":-62135596800,"description":"","objectID":"d200019c24471824374226006cf906f8","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.1.0+release+notes/","title":"Aspose.Cells for .NET 5.1.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.1.1\nWe are happy to announce Aspose.Cells for .NET v5.1.1!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Fixes a few issues of Workbook constructor and Workbook.Save() method. 15 enhancements and fixes.  Issues Resolved in Aspose.Cells for .NET v5.1.1\n   **Issue ID ** **Component ** **Summary **     18024 Chart2Image Chart tick label format issue when converting to PDF   18028 Chart2Image Chart_Overlapping issue   18458 Chart2Image Truncated data label issue   18652 Pdf Invalid Cell Name while saving in PDF format   18034 Shape2Image Layout and design of first sheet is lost and text overlaps   18687 Worksheet2Image ToImage throws Exception   18473 Xls Office 2010 has detected a problem with the XLS file   18489 Xls Problem with saving as XLS   18534 Xls Offset Combinations issue   18755 Xls CalculateFormula on my file gives error   18673 Xls Combine with charts causing plot area mismatch   18537 Xlsx Issues with a simple chart   18678 Xlsx Textbox Format is lost for Excel 2007 workbook   18681 Xlsx Hyperlinks for Embedded Objects are lost   18610 Xls Remove ConditonalFormatting of the range   18791 Xls Conditional Formatting issue    ","date":-62135596800,"description":"","objectID":"490ac3512401fd3c40de06a983f596de","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.1.1+release+notes/","title":"Aspose.Cells for .NET 5.1.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.1.2\nWe are happy to announce Aspose.Cells for .NET v5.1.2!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n 19 fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports setting visibilities of context menu items. Provides support for text rotation (90 and -90 degrees). 1 fix.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Supports firing CellDataChanged event when a formula is evaluated.  \\\nIssues Resolved in Aspose.Cells for .NET v5.1.2.\n   **Issue ID ** **Component ** **Summary **     18841 Chart2Image Print Area/ Chart   19065 Pdf Conversion to PDF through Aspose.Cells Shrinks text   19024 Pdf Look and feel of generated PDF is not same as Excel   19170 Pdf SaveAs PDF Issue - Corrupted PDF   19048 SpreadML Error converting Excel2003XML to XLSX   18848 Xls Combine with charts causing plot area mismatch   18791 Xls Conditional Formatting issue as of version 4.8.1   19052 Xls Copy Excel having Command button event handler   16800 Xls Document becomes unreadable   19160 Xls Error Opening Large Files Aspose.Cells v4.7.1.0   18473 Xls Office 2010 has detected a problem with this XLS file   19035 Xls PivotTables unable to view   19033 Xls Problem on attribute IsStrikeout   18949 Xls Undesired behavior of Worksheet.Move method   18819 Xlsx Bar chart format lost when saved   18820 Xlsx Line chart format lost when saved   19054 Xlsx Picture reference deleted with Version 5.1.1.0   18934 Xlsx Pivot tables corrupted on passing through Aspose.Cells   19055 Xlsx Workbook.CalculateFormula() doesn\u0026amp;rsquo;t calculate the values   18632 GridWeb Bug of formula calculation engine    ","date":-62135596800,"description":"","objectID":"1551dd433ce577d1b5c17c7feca8ef90","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.1.2+release+notes/","title":"Aspose.Cells for .NET 5.1.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.1.3\nWe are happy to announce Aspose.Cells for .NET v5.1.3!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Enhances the performance of saving PDF files. 39 enhancements and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports clicking column header to select entire column, clicking top-left corner to select entire sheet’s cells similar to MS Excel’s behavior. Provides support for iterative calculations. Supports named ranges. Allows obtaining data field name at client side. Includes printing feature at client side. Adds valuable functions to the supported formulas list: CELL, ERROR.TYPE, ISBLANK, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISTEXT, ISREF, N, NA, TYPE, COUNTBLANK, LARGE, MAXA, MINA, AVERAGEA, MODE, PERCENTILE, PERCENTRANK, RANK, CHOOSE, HLOOKUP, VLOOKUP. 5 fixes and 1 enhancement.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Allows undoing changes by code. Supports undoing changes of comments. Provides support to set visibilities of comments. Supports to set indent (style) while formatting cells. Imports or exports pictures of Excel files. Adds valuable functions to the supported formulas list: ERROR.TYPE, ISBLANK, ISERROR, ISLOGICAL, ISNA, ISNONTEXT, ISTEXT, ISREF, N, NA, TYPE, COUNTBLANK, LARGE, MAXA, MINA, AVERAGEA, MODE, PERCENTILE, PERCENTRANK, RANK, CHOOSE, HLOOKUP, OFFSET, INDIRECT. 3 fixes.  Issues Resolved in Aspose.Cells for .NET v5.1.3.\n   **Issue ID ** **Component ** **Summary **     19532 GridWeb Entered percent values are treated as string value.   19584 GridWeb WebWorksheets.AddCopy() misses copying formulas.   19622 GridWeb Enable to copy a WebWorksheet object from specified GridWeb control.   19656 GridWeb GridWeb control is rendered very tall in Visual Studio 2010.   19692 GridWeb A StackOverflowException will be raised   19849 GridWeb Serialization issue.   19246 GridDesktop Cells data format issue - Dates turn into numbers   19336 GridDesktop An exception is raised when merging 0 …","date":-62135596800,"description":"","objectID":"64ced6169e1e4531d7c392dfa3d3bab4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.1.3+release+notes/","title":"Aspose.Cells for .NET 5.1.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.1.4\nWe are happy to announce Aspose.Cells for .NET v5.1.4!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Supports exporting encrypted PDF files. 45 enhancements and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Obsolete: NumberType, Custom and IsLocked properties of Aspose.Cells.GridWeb.Data.WebCell are obsolete. These properties are now added to Aspose.Cells.GridWeb.TableItemStyle. Obsolete: Style attribute of Aspose.Cells.GridWeb.Data.WebCell is obsolete. The recommended alternatives are using Aspose.Cells.GridWeb.Data.WebCell.GetStyle() and Aspose.Cells.GridWeb.Data.WebCell.SetStyle() methods. 1 fix and 1 enhancement.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Supports importing/exporting auto-filters in Excel files. 1 fix and 1 enhancement.  Issues Resolved in Aspose.Cells for .NET v5.1.4.\n   **Issue ID ** **Component ** **Summary **     20247 ODS Error in Formula when I save as ODS   18357 Pdf Conversion issue on PIE Graphs   18925 Pdf Issue Convert Excel to PDF   19883 Pdf Throwing Object reference not found error   20011 Pdf Page Breaks with empty page doesn\u0026amp;rsquo;t work   20057 Pdf Excel to PDF conversion issue   20070 Pdf Multibyte font   20071 Pdf Multibyte font color   20450 Pdf Invalid row index   20590 Pdf Truncated text in some cells after conversion to PDF   18934 PivotTable Pivot tables corrupted through Aspose.Cells   20391 PivotTable Pivot Table gives \u0026amp;lsquo;SystemNullReference Exception\u0026amp;rsquo;   20672 PivotTable Excel found unreadable content   20721 PivotTable Input string was not in a correct format   20228 Sheet2Image RLE compression resulting in bitonal TIFFs   20574 Sheet2Image Save to image functionality is not formatting correctly   20181 SpreadsheetML A cell that uses the Hyperlink function throws exception   20519 SpreadsheetML Failed to get Excel 2007 content as XML   20055 Xls Formula contains \u0026amp;lsquo;\\r\u0026amp;rsquo;   20152 Xls Choose Function not evaluating correctly after …","date":-62135596800,"description":"","objectID":"22ab10d3c5886c402ccd017bbae4be22","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.1.4+release+notes/","title":"Aspose.Cells for .NET 5.1.4 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.2.0\nWe are happy to announce Aspose.Cells for .NET v5.2.0!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Supports signing and validating Digital Signatures in XLSX files. Supports R/W Pivot Tables in XLS and XLSX files. Calculates Pivot Table data to cells. 31 enhancement and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports importing/exporting MS Excel’s images.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Supports named ranges. 1 fix and 1 enhancement.  ","date":-62135596800,"description":"","objectID":"6a9b8787a436d27f65eb0d8a6ca62c3b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/aspose.cells+for+.net+5.2.0+release+notes/","title":"Aspose.Cells for .NET 5.2.0 Release Notes"},{"content":"**Release Notes - 2010 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"679b9401bbfe39fad9e6a23beda965c2","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2010/","title":"Release Notes - 2010"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.2.2\nWe are happy to announce Aspose.Cells for .NET v5.2.2!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Supports exporting Tables style to PDF file format. Enhances R/W ODS files. 27 enhancements and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Upgrades all .htc script files to JavaScript files. 2 fixes.  \\\n\\\nIssues Resolved in Aspose.Cells for .NET v5.2.2.\n\\\n","date":-62135596800,"description":"","objectID":"ba97bbe063eef569a7ca6b6a5a35ebfa","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+5.2.2+release+notes/","title":"Aspose.Cells for .NET 5.2.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.3.0\nWe are happy to announce Aspose.Cells for .NET v5.3.0!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Chart-to-Image feature is enhanced. Excel-to-PDF feature is enhanced. R/W ODS files feature is enhanced. Auto-fit rows feature is enhanced. 63 enhancement and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports all features of the control in FireFox. Provides support for converting a list collection to a DataTable object. Supports SMALL function/formula. Imports auto-filters in the Excel files. The performance of client scripts for IE is enhanced. Supports whether to extend maximum row/column automatically when calculating formulas. 1 fix and 1 enhancement.  ","date":-62135596800,"description":"","objectID":"ef2dc8a3e5c4eac1495648aa6d34aaf0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+5.3.0+release+notes/","title":"Aspose.Cells for .NET 5.3.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.3.1\nWe are happy to announce Aspose.Cells for .NET v5.3.1!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Supports Arabic text rendering in PDF conversion. 17 enhancements and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports calculating array constants in Formulas. Supports multiple non-sequential cells operations. 1 enhancement.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n Supports calculating array constants in Formulas. 1 enhancement.  ","date":-62135596800,"description":"","objectID":"be1162ebb81751d15e7dcefe7dc95920","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+5.3.1+release+notes/","title":"Aspose.Cells for .NET 5.3.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.3.2\nWe are happy to announce Aspose.Cells for .NET v5.3.2!\nWhat\u0026amp;rsquo;s changed in Aspose.Cells:\n Inserts a common value into all the cells of the range by using Range.Value. Supports MS Excel 2010 encryption. Provides support to disable/hide Printing-Process dialog box Supports to change paper source while printing. 43 enhancements and fixes.  What’s changed in Aspose.Cells.GridWeb:\n Supports setting grouped rows’ state to ‘Expanded’ or ‘Collapsed’ on the client side. 1 fix.  \\\nWhat’s changed in Aspose.Cells.GridDesktop:\n 1 fix.  Issues Resolved in Aspose.Cells for .NET v5.3.2.\n   **Issue ID ** **Component ** **Summary **     13695 GridWeb Fixed the cursor stays on the same line when using Ctrl-Enter keys   25599 GridDesktop Fixed exporting columns’ styles to Excel file   25346 Formula XLS Link VS. XLSX Link   25496 Formula Numeric fields displaying as #VALUE!   25574 Formula VLOOKUP formula doesn\u0026amp;rsquo;t work with ListObjects   25625 Formula Workbook.CalculateFormula error out   25683 Formula CalculateFormula - StackOverflowException   25699 Formula CELL() function is not working   25147 Html Html saving and Charts css layout issue   24514 Pdf Excel to PDF conversion problem   25149 Pdf PDF export - Garbage Collection performance issue   25260 Pdf XLS to PDF issue   25289 Pdf Number as large exponent issue   25365 Pdf Formatting of individual characters to bold   25490 Pdf Getting Error while merging Empty Excel Documents   25615 Pdf PDF conversion problem   24199 PivotTable PivotTable RefreshData throws exception   25267 PivotTable Pivot table issue   24577 Xls AutoFitColumn is not setting width correctly   25329 Xls OutOfMemoryException upon opening the Excel with two Shapes   25404 Xls Check whether the chart is a 3D chart   25412 Xls Faster way to replace all formulas with value   25422 Xls Bug with image aspect ratio   25423 Xls Write a string into the merged cell   25426 Formula Unable to calculate …","date":-62135596800,"description":"","objectID":"b2583f0108502ade90c8ca15059e2612","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+5.3.2+release+notes/","title":"Aspose.Cells for .NET 5.3.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 5.3.3\n**We are happy to announce Aspose.Cells for .NET v5.3.3! **\n** **\n**1) Aspose.Cells **\n**Enhancements **\n25032 Set Hyperlink’s Target attribute when converting Excel file to Html format\n25960 Render Checkboxes in Html file\n26082 Support Justified Alignment in rendering PDF format\n26341 Excel-to-Pdf enhancement for Mono\n26342 External web links have some strange characters attached\n25332 Enhance various Custom Properties in XLS, XLSX/XLSM documents\n26472 Support STDEV.S function/formula\n**Performance **\n25774 Excel- to-PDF conversion\n** **\n**Exceptions **\n27076 Handle FormatException while opening an ODS file\n27063 Invalid column index - Aspose.Cells.CellsException from SheetRender.ToImage() method\n26571 Aspose.Cells cannot open the XLS file\n26309 Source array was not long enough – exception on opening Excel file\n25972 SheetRender.ToImage() method is failed to render some Worksheets\n**Bugs **\n26141 Render almost blank picture (from Chart.ToImage() method) , the dash lines are not rendered fine\n26570 Title in Chart Image is not appearing on the right side of the chart area\n26601 Data Labels are not visible properly using Chart-to-Image feature\n26686 No values in the generated chart’s image using Chart-to-Image feature 18878 Reduce font size while saving to Pdf file\n19318 Wrong text in PDF Export\n24011 Save to Pdf (bugs)\n26727 Multiple Issues when saving the generated Excel file as PDF\n25920 Pivot Tables getting corrupted\n26100 Setting RefreshDataOnOpeningFile does not seem to work\n26758 Corrupt Pivot Table with Aspose.Cells\n24961 File Corruption issue\n26198 Get Maximum Value of ValueAxis in an Excel Chart\n26198 An Issue with PutValue and ClearContents methods\n26544 Problem with Copying Rows and Conditional Formatting\n26711 Calculated cell has “#VALUE!” after using Workbook.CalculateFormula() method\n26728 Get “#Value!” in the calculated cells\n26984 Problem with formulas calculation across Worksheets\n26308 …","date":-62135596800,"description":"","objectID":"488514db7640bdcca2e5c802067937dc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+5.3.3+release+notes/","title":"Aspose.Cells for .NET 5.3.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 6.0.0\nWe are pleased to announce Aspose.Cells for .NET v6.0.0 for the users!\n\\1) Aspose.Cells\nNew Features\n13872 Export to XPS file\n28363 Create write-protected XLSX files\nEnhancements\n27285 Show expand/collapse buttons for Pivot Table\n27781 Chart’s legend is shrinking when Excel workbook is saved\n27794 Excel Chart Data Labels are moving when Excel file is saved\n28190 Apply Date format to Nullable date fields\n26884 Lost sorting for a column after Save\n27760 Support Table source as named ranges\n27955 Specify Dynamic Print Area while printing or rendering to PDF\nPerformance\n28139 Excel to PDF performance issue\n27095 Problem with Workbook.CalculateFormula() method\n27348 The process is hangs when opening a file which contains shapes\n27367 Opening an XLSX file is slow\nExceptions\n28221 Opening Workbook Causes Exception\n27382 Broken picture causes Aspose.Cells to crash\n27998 Exception thrown when opening legitimate XLSX file\n28318 An exception occurred when saving an XLS workbook in XLSM format\nBugs\n27472 Fail to evaluate some Excel formulas/functions\n27820 Invalid formula obtained if table’s column title contains simple quotes\n27950 Not calculating the array formulas properly\n28070 Workbook.CalculateFormula() is not calculating correctly\n28230 Bug with evaluating Convert function\n28399 ROUND function gives value other than MS Excel\n28369 Special Characters in the formula\n28024 Get Named Ranges and Tables\n18503 Diagonal Lines are not showing correctly in PDF\n27168 Grouped shapes are distorted when saving to PDF\n27240 Excel to PDF Conversion - Chart Ranges Issue\n28112 Saving Excel (XLS) file as PDF results in an issue\n27061 Protected view warning in MS Excel 2010\n27956 Set an existing tables data source to named range(s)\n28045 Pivot Table corrupted after updating source data sheet\n27687 Borders missing on the right and bottom of image in Sheet to Image feature\n27951 Bullets missing in the exported image in Sheet to …","date":-62135596800,"description":"","objectID":"d2ef28cb0c67da644ccc09ff55db1864","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+6.0.0+release+notes/","title":"Aspose.Cells for .NET 6.0.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 6.0.1\n**We are happy to announce Aspose.Cells for .NET v6.0.1!\u0026amp;lt;!-?xml:namespace prefix = o ns = \u0026amp;ldquo;urn:schemas-microsoft-com:office:office\u0026amp;rdquo; /-\u0026amp;gt; **\n** **\n\\1) Aspose.Cells\n** **\n**Enhancements **\n28643 Export column index of each Cell in the SpreadSheetML file\n29067 How to format Axis in a Line chart\n28590 Checking presence of password\nPerformance\n28414 Printing of worksheet takes very long time\n28405 SheetRender.ToImage() hangs without an exception or error\n** **\n**Exceptions **\n28780 SheetRender API throws \u0026amp;ldquo;Format specifier was invalid.\u0026amp;rdquo; exception\n28961 Object Reference Error when converting to PDF\n29163 Destination array was not long enough exception\n28924 Unable to get Worksheet.Validations to work properly\n28867 Parameter invalid in converting Excel to TIFF\n** **\n**Bugs **\n29129 Legend/Data Labels are bold on charts when generating images\n28460 Not evaluating INDIRECT function within VLOOKUP function\n28399 ROUND function by Aspose.Cells gives different value than MS Excel\n28523 INDIRECT formula does not work when generated in XLSB format\n28624 #Recursive Reference! Result is obtained from formula\n28626 Unusual problem with recalculation\n28781 Formula error when sheet name with bracket is used\n28571 Displaced cells in HTML\n24963 Image rendered with transparent backgrounds in PDF output\n28697 Watermark issue when converting to PDF\n28610 Group of objects disappears when converting Excel to PDF\n28815 Incorrect conversion from XLS to PDF\n28960 Text gets cut off when converted to PDF\n28930 Text in cells is truncated when converting to PDF\n29184 Cropped images no longer stay cropped when converting to PDF\n28352 Pivot Table - extra summary column created\n28751 Refresh Pivot table functionality\n28489 Problem converting empty XLSX file to TIFF\n29058 Rendering problem\n28929 Getting bitmap or paper size from SheetRender API bug\n24912 Saving XLSB with data filters adds invalid named range …","date":-62135596800,"description":"","objectID":"d2589fcb63e5fba593785802421f55bc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+6.0.1+release+notes/","title":"Aspose.Cells for .NET 6.0.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.0.0\nWe are happy to announce Aspose.Cells for .NET v7.0.0!\n\\1) Aspose.Cells\nEnhancements\n29480 How to change the position of a Pivot table Item\n29580 Repeating parts of Worksheet based on input data\n29377 Export GroupShape problem into XLS format\n29632 Throw exception when sheet name contains special characters\n29153 Support Conditional Formatting on HTML output\nPerformance\n29451 CalculateFormula() method is Really slow\n29461 The performance of CalculateFormula() method\n30041 Can\u0026amp;rsquo;t Open ODS File\n29983 AutoFitColumns() is extremely slow when columns have Number Format\nExceptions\n\\\n29511\nFailed to open an Excel file\n29827 \u0026amp;ldquo;Not a legal OleAut date\u0026amp;rdquo; Exception\n30056 \u0026amp;ldquo;Invalid end column index\u0026amp;rdquo; Exception\nBugs\n29413 DataRow values are changed\n29599 Chart with 3D Bars to Image issue\n29628 Chart to Image issue\n29765 Radar Chart to Image issue\n29777 VLookup is not working\n29408 Add calculated item in the Pivot table\n29582 File is corrupt and cannot be opened (XLS)\n29293 Aspose.Cells AutoFitColumns feature with trailing spaces\n29390 Data mismatch issue in reading file\n29620 Chart Alignment / Size issue\n30020 Cell’s Gradient Color is not set properly\n29597 Adding document properties removes objects in MS Excel\n29828 ChartPoint.Datalabel has an issue regarding colors\n\\2) GridWeb\nBugs\n29254 Render cells with incorrect styles\n29254 Render double values with DateTime format\n29254 Render cells with incorrect styles when changing active sheet in IE9\n30172 Import Comment images when importing shapes from Excel file\n\\3) GridDesktop\nEnhancements\n29381 Import formulae with values from Excel file\n29381 Import Excel file from stream without calculating all formulae\nBugs\n29489 CommentDataChanged event is not fired after changing a comment\n30172 Import Comment images when importing shapes from Excel file\n","date":-62135596800,"description":"","objectID":"1aa27a58508f6199828ed2b5c06c86dc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+7.0.0+release+notes/","title":"Aspose.Cells for .NET 7.0.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.0.1\nWe are happy to announce Aspose.Cells for .NET v7.0.1!\n\\1) Aspose.Cells\nNew Features\n29512 Add a new overloaded method: Cell.SetStyle(Style style, bool explicitFlag)\nEnhancements\n30331 Add and Delete Rows in the ListObject / Table\nPerformance\n30177 Stack Overflow Exception while generating a PDF file from an ODS file\n30045 Aspose.Cells hangs up when opening the file\nExceptions\n30188 Error occurred when converting Date column (with empty string) in Excel XML format\n30252 “’o:relid\u0026amp;rsquo; is a duplicate attribute name” Exception\nBugs\n29876 Security Warning issue\n27781 Excel chart legends shrinking when saving Excel workbook\n29620 Excel chart lose some formatting when opening and saving it\n30246 Worksheet.IsVisible = false groups sheets in the workbook\n29632 Feature request regarding Exception handling while adding worksheets\n30303 Problem in copying Worksheets\n30035 MS Excel (Format-\u0026amp;gt;AutoFit Row Height) VS Aspose.Cells’ AutoFitRow feature\n29841 Problem with Pie chart\n30154 Issue with Chart data labels\n30153 Macros are disabled in the output XLSM file\n30332 Problem with Chart axis scale changing\n30308 Secondary Axis in XLSX lost on Save\n\\2) GridDesktop\n\\\nNew Features\n29821 Support formula bar control\n","date":-62135596800,"description":"","objectID":"8457111b906073f85627851e31fc9411","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+7.0.1+release+notes/","title":"Aspose.Cells for .NET 7.0.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.0.2\nWe are happy to announce Aspose.Cells for .NET v7.0.2! In this version, we made several enhancements and fixed number of user issues/bugs. Moreover, we have removed some unnecessary older obsolete methods for Sheet-to-Image feature now.\n\\1) Aspose.Cells\nNew Features\n30970 Access document properties of an encrypted XLS file\nEnhancements\n30919 The Worksheet’s TabColor property for Chart type worksheets\n25224 Export data without XLS limitation to SpreadsheetML file\n30672 Smart Markers - How to group Rows (Calculate Totals, Sub-Totals and Grand Totals)\nExceptions\n30548 StackOverflowException occurred when opening certain files\n30609 Workbook constructor throws NullReferenceException\n30989 Exception: Invalid Excel2007Xlsx file\nBugs\n29663 Converting Excel-to-PDF (missing elements issue)\n29692 Problem in Excel-to-PDF conversion\n29840 Problem with version 6.0.1.3 (regarding Charts)\n30102 Problem with Chart Image regarding Data labels and Error bars\n30270 Printing issue - Numbers are shown as “#######”\n30533 Problem with DeleteRange function\n30603 EMF Vs PNG Issue\n30729 Wrap Issue when converting XLS-to-PDF\n30755 Saving as SaveFormat.XLSM causes errors\n30785 Unable to change line style of a ChartPoint\n30787 Broken shapes in the copied worksheet\n30843 Formulas using intersected ranges don\u0026amp;rsquo;t work\n30877 Dates are shown as serial numbers in Charts\n30918 Image problems when saving to XLS format\n30949 Cell content is splitting part way through a word when converting XLS-to-PDF\n30980 Loading and Updating XLSM then Saving causes ERRORS\n30998 Problems with Excel 2010 and XLSM\n31003 Issue with AutoFitRow and the AutoFitMergedCells\n31005 Negative Values in Parentheses\n31068 Saving file crashes after using DeleteRange method in some cases\n31078 Refresh Pivot table - It does not sort properly\n31095 AutoFitRows doesn\u0026amp;rsquo;t work fine\n31098 SheetRender exports double-spaces / inconsistent spacing\n31099 Issue with …","date":-62135596800,"description":"","objectID":"35b6e697b9ab6c9e2ba4734dd993e850","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+7.0.2+release+notes/","title":"Aspose.Cells for .NET 7.0.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.0.3\nWe are happy to announce Aspose.Cells for .NET v7.0.3!\nAspose.Cells\nNew Features\n24953 Support MS Excel’s advanced conditional formatting in the generated PDF file\n30020 Support Cell Gradient Color that is not set properly while converting to PDF document\n40010 Uncheck Multi-level Category Labels while formatting Chart’s Axis\nEnhancements\n31243 Copy range with validation\n31347 Sorting \u0026amp;amp; Dynamic formulas in Smart Markers\n40027 Implement ToString() method in the Cell, Range, Worksheet and other classes/objects\n40080 Enhancement - Excel95 - Excel 2003 file\n40081 Error checking options not working with XLSM files\n\\\nExceptions\n31331 Error occurred while opening XLS file\n40045 NullReferenceException found when setting Header/Footer in Page Setup\n40047 Unable to copy a particular worksheet into another workbook with one worksheet\n40060 Invalid Brush Type when converting Excel workbook to XPS\n40061 StackOverflow on calling WorksheetCollection.GetNamedRanges() method\nPerformance\n31266 XLS to PDF or XPS takes so much time\n40053 Excel-to- PDF Performance decreases as number of worksheets increases\nBugs\n29234 Hide pivot table columns issue\n30224 Charts images do not match Excel’s charts\n30651 Cell.SetStyle(Style style, bool explicitFlag) doesn\u0026amp;rsquo;t work as expected\n31334 BuiltInDocumentProperties.HyperlinkBase can’t be read or set\n40009 Opening XLSM file issue\n40012 The Style changed after merging or adding copy sheet to workbook operation\n40013 RowField Subtotal – formatting issue\n40014 Opening and saving XLSM file throws away macros and ribbons\n40016 Errors while saving Excel files\n40024 Charts not rendering fine in rendering / copying workbooks\n40046 Pivot table does not refresh correctly\n40057 Array formula references aren\u0026amp;rsquo;t updated on deleting a row or column\n40065 Negative bigInt problem\n40073 Aspose.Cells Smart Markers parameters problem\n40074 Chart disappears after Save\n40075 Problems found …","date":-62135596800,"description":"","objectID":"b9de6cec5867628f6a88c8cc9dd213c7","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/aspose.cells+for+.net+7.0.3+release+notes/","title":"Aspose.Cells for .NET 7.0.3 Release Notes"},{"content":"**Release Notes - 2011 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"42f7b948dce11208038ae671f5832120","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2011/","title":"Release Notes - 2011"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.1.0\nWe are happy to announce Aspose.Cells for .NETv7.1.0!\n\\1) Aspose.Cells\nNew Features\n Support to apply Conditional Formatting to Pivot Tables Read configuration of Group Fields in Pivot Tables  Enhancements\n NullReferenceException when opening document with auto-formatted Pivot Table Pivot Table’s filtering in MS Excel 2007 and later versions Chart’s formatting issue Copying worksheet does not work Smart Marker Tags conversion Missing properties (Pivot Table)  -Missing properties (Pivot Field)\n-PivotField.ShowCompact - Incorrect property value in XLS format\n-Pivot Field’s incorrect items value in the grouped fields\n-Reading items from cache (Pivot Field)\n Problems opening a SpreadsheetML file  Performance\n Performance issue on adding range names Memory exception and formula calculations on cells  Exceptions\n Unable to copy a particular worksheet into another workbook  -Pivot table throws exception while refreshing\n ListBox with assigned Input range causes Aspose.Cells crush  Bugs\n-Failed to refresh pivot table in an Excel workbook\n Problem with default paper size Dirty right border on image when converting XLS to PDF Workbook.CalculateFormula() method bug Multiple issues found while upgrading from v5.2.1.0 to v7.0.3.0 Unable to include Row/Column Headings and Comments in the TIFF file Excel-to-Html - word-wrap problem Button’s font attributes are changed after Save Chart’s legend becomes shrunk using Shape.UpperLeftRow() method Error in the output PDF document Multi-line Headers not supported while rendering to PDF file Reading all data from the base fields of Pivot Table Exporting Excel sheet to DataTable gives error Opening ODS files issue Cell border is not rendered properly with Aspose.Cells v7.0.4.x  -Formula results in #Ref\n XLS file crashes MS Excel 2007 Error opening file using Ms Excel Problem with HTML output in the new Aspose.Cells DLL (version)   -Updating XLSX file with Pivot Table causes …","date":-62135596800,"description":"","objectID":"f6545970d81ee69ec2fe9400de65f96a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.1.0+release+notes/","title":"Aspose.Cells for .NET 7.1.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.1.1\nWe are happy to announceAspose.Cells for .NET v7.1.1!\n\\1) Aspose.Cells\nNew Features\n Tracing Precedents and Dependents  Enhancements\n Saving workbook in XLSX is throwing error AutoFitColumn options Is there GetDependents() method in the .NET version  -Support TH elements in the HTML Table\n Excel to PDF (Arabic) - Incorrect word/date formatting on conversion Antivirus software strips out Excel files from emails  Exceptions\n Error while opening a file which has one worksheet with name containing: “!” character Exceptions on loading valid Excel file - every time Range of AutoFilter is not valid Exception after using Combine() and Save() methods for workbooks with externalreferences  Bugs\n Conditional Formatting issue as of the version v4.8.1  -Button properties\n Cells with Feet and Inches are incorrect when converted to PDF Problem rendering em dash characters in PDF output  Page Layout changed in the Merged workbook Save as XLSX sometimes produces an invalid file   -XLS file opens in Protected mode after using Aspose.Cells\n Cell.GetDependents() doesn\u0026amp;rsquo;t work with NamedRange AutoFitRow and IndentLevel issue Problem with named range when using Combine operation TickLabels are not visible when the no. of Ticklabels’ count is larger Problems translating MS Excel charts to PDF, Y-Axis missing Issues with Line width in Graphics and blank text areas Issue with ADDRESS, COUNTBLANK, and IF Functions VLOOKUP AND OFFSET FUNCTIONS Issues No MS Excel Formula Validation Problems with NETWORKDAYS function in XLS output HTML-to-Excel Conversion Issues  - HTML’srowspan and class attributes issues\n-Does Cells support datauri\n Custom formatted borders lost when converting to PDF Gridlines in PDF Export  -Excel Found Unreadable Content error\n Extract the custom pivot style out from the template file Issue found in MS Excel: “Excel Found Unreadable Content…” Column alignment in image when using SheetRender API Excel …","date":-62135596800,"description":"","objectID":"c7a52312f08a7e74a205bcd3268f67b0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.1.1+release+notes/","title":"Aspose.Cells for .NET 7.1.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.1.2\nWe are happy to announce Aspose.Cells for .NET v7.1.2!1) Aspose.Cells\nNew Features\n- Support Tables in XLS files - Customizing the Ribbon XML40452 - Support Workbook.ContentTypePropertiesEnhancements\n- IF() Formula returns “0” instead of “#N/A” - Problems with FirstPageNumber property - Layout changed when document is converted to PDF - The property \u0026amp;lsquo;DragData\u0026amp;rsquo; is missing in \u0026amp;lsquo;PivotField\u0026amp;rsquo; - Change DataSource on Pivot Table. - Issues with Pivot Tables - Convert Workflow diagram/shapes to image(s)Performance\n- Worksheet.RemoveFormulas - performance issue - Pdf Generation =\u0026amp;gt; OutOfMemoryException - Excessive memory usage when converting Excel-to-PDF - Save to PDF uses 3GB for a 10MB Excel file - Opening Workbook takes too long to openExceptions\n- NullReference exception during Save operation if copying worksheet from other workbook - Crash on Workbook.CalculateFormula() method - RowSpan Attribute throws Exception - ArgumentOutOfRangeException occurred while initializing the fileBugs\n- VLOOKUP and OFFSET functions issues - IRR is not computed correctly - MS Excel Calculations’ problems - Array Formula using Indirect() function copies only 1 value - CellsException in calculating TREND() formula - Copy worksheet replaces header and footer - Problem Printing Excel file with embedded EMF images - Pivot Table Issue - Formatting Filter bug - PivotField - Reading items from the cache - Multiple issues while upgrading to latest versions - Creating Workbook with InputStream is not working - Generated XLS file is crashing MS Excel - Dropdown and Chart are removed from workbook after Save - Aspose.Cells not correctly applying custom cell’s formatting - XLSM files are corrupted under certain conditions - The Cell Font size format with non-integer number changed - Insert Symbol at the end of a cell value2) GridDesktop\nBugs\n- Graph values are wrongly displayed for XLSX file - SUM() issue in …","date":-62135596800,"description":"","objectID":"7eaac4208d01f7822d79725320ea098f","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.1.2+release+notes/","title":"Aspose.Cells for .NET 7.1.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.2.1\nWe arehappy to announce Aspose.Cells for .NET v7.2.1!\n\\\n\\1) Aspose.Cells\n\\\nEnhancements\n Shapes’ lines are incorrectly filed after converting to PDF Macro disappeared after saving an XLSM file to XLS format List box options overlap one another Aspose.Cells corrupting XLSM file after calling the Workbook.Save() method Thecomponent destroys properties of the workbook XML’s CalcPr node You want to put a string longer than 32K Smart Markers syntax for column index Smart Markers - Nested Objects  \\\nExceptions\n GetNamedRanges() method throwing Unsupported function Exception: Invalid IMEModeType string val Exception while loading an XLSX Spreadsheet from SharePoint GetNamedRanges() method throwing NullReferenceException Exception while initializing with .xlsm input file Failsto open a document with complex formula(s) Exception on PivotTable’s RefreshData() method Error found while creating a new SheetRender object Exception while file was opening  \\\nBugs\n Disappearing chart title in the Pie charts Chart to image conversion is not working properly Mismatches between Excel chart and the exported chart’s image  -Problems with DataTable in charts when converting to image\n Problem with DataTable in MS Excel charts Differences in chart’s appearance between MS Excel and PDF Converting Excel 97- 2003 to PDF  -Aspose.Cells corrupting XLSM file after calling the Save twice\n Bookmarks on one level issue  -Aspose.Cells permanently hides ActiveX control on Save operation\n Excel 2010 files with Pen data is getting corrupted VLookup with an Indirect returns a “#REF” value The Save call corrupts an XLSM file Named ranges disappeared after Worksheet’s Copy VLookup with an Indirect returns a “#REF” value - 2 Copied chart rotates the Display Unit Labels by 90 degrees Calculation bug with a Workbook Performing Subtotal Calculations on Grouped Column The issues for PDF conversion regarding drawing shapes  -Named Ranges issue …","date":-62135596800,"description":"","objectID":"42ee4a5baae59ab9b4b2f934d099a1ae","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.2.1+release+notes/","title":"Aspose.Cells for .NET 7.2.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.2.2\nWe are happy to announce Aspose.Cells for .NET v7.2.2!\n\\1) Aspose.Cells\nEnhancements\n Multiple Subtotals add extra row Subsequent Subtotal Formulae not using correct range Accessing Shapes data in MS Excel  Map Properties not saved when saving a copy of an Excel file Disable Compatibility Checker in MS Excel Incorrect implementation/interpretation to open incorrect file format  Exceptions\n NullReferenceException on opening/saving an XLSX file Exception: There are too many formats in the worksheet  -Arithmetic operation resulted in an overflow\n-NullReferenceException on saving for this simple example workbook\nBugs\n-Urgent: Functionality changed in \u0026amp;ldquo;FindStringContains\u0026amp;rdquo;\n-Performing Count Subtotal on Date column displays as Date\n-#Recursive Reference! Error\n Copying file using Aspose Cells requires Repair work Thinking an Excel 97 XLS file to be a Word document  -Export to PDF chart is different from Excel version\n Export to PDF chart is different from Excel version -2  -Extra Lines are embedded in the charts\n Text surrounded by quotes option in CSV file Custom properties corrupted with Line break MS Excel Calculations not completing before document is saved Formula is not working fine WorkSheetCollection.AddCopy not updating references Issue when removing data source in Pivot Table Issue with copying Pivot Table (Formatting) Saving with Excel97-2003 format corrupts the file Problems when clearing partial content of a table Could not open the file created by the OXML SDK  \\\n**2) Aspose.Cells.GridWeb **\n**Bugs **\n40683\n Value of SumIf() Function not displayed in GridWeb  40638 - GridWeb - not\nshowing white space 40724\n GridWeb Validation Error - The row numbers are not aligned with the actual rows   ","date":-62135596800,"description":"","objectID":"98ef19d1607ae2196bbac3c9651a5207","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.2.2+release+notes/","title":"Aspose.Cells for .NET 7.2.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.3.0\nWe are happy to announce Aspose.Cells for .NETv7.3.0 for the users!\n\\\n\\1) Aspose.Cells\n\\\nNew Features\n40701 - Support Reading and Writing MHT files\n Support XML Maps  \\\nEnhancements\n Mono supported version issue Can\u0026amp;rsquo;t use formula as parameter of Can custom functions return ranges that can be used to SUM on Applying themes to Charts Problem with Formula referencing an image  \\\nExceptions\n Subtotaling generates Runtime error Exception is thrown when calling Cell.GetPrecedents() method “Invalid Start Row Index” exception while Subtotaling  \\\nBugs\n SheetRender’s XPS and custom Number format issue Chart’s legend items wrapping when saving as an image Bug sheet charts are not showing up An Issue with Cells.ExportDataTableAsString() method and custom formatting A serious problem with Pivot Table Using Workbook.CalculateFormula() method on multiple workbooks on the flygives #VALUE PDF rendering of business shapes (text inside) is not nice Issue with XLS table of contents based on the number of printed pages  -The PDF conversion misses the values ??of the named areas\n Referencing cells with values from array formulas does not work  -Cells Formatting Problem\n Problem with formula referencing an image Array Formulas in SpreadsheetML do not carry over when converting to XLSX Losing named ranges bug in XLSM  \\\n\\2) Aspose.Cells.GridWeb\n\\\nBugs\n An issue with CellCommand hyperlinks Cell.Validation is throwing an InvalidOperationException regression Aspose.Cells.GridWeb control crashes for an Excel file  \\\n","date":-62135596800,"description":"","objectID":"88e5efede3cd8b8e1e784e8f8ea61500","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.3.0+release+notes/","title":"Aspose.Cells for .NET 7.3.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.3.1\nWe are happy to announce Aspose.Cells for .NETv7.3.1 for the users!\n\\\n\\1) Aspose.Cells\n\\\nNew Features\n Conditional formatting - Include DataBar type’s missing fields Conditional formatting - Include IconSet type’s missing values Conditional formatting - Support Read conditional formatting rules with cross-sheet formulas Support Cells.MinDataColumn and Cells.MinDataRow properties Support Cell Background Colors with Conditional Formatting (MS Excel 2010) Data Filters of the PivotTable are supported Advanced data validation of MS Excel 2010 is supported  \\\nEnhancements\n Throws CellsException when changing the part of the array formula Marker types and styles in the charts of Excel 2007/2010 Custom Marker shapes in the chart How to create custom Markers Sub-Charts are not accessible  -AutoShapes in HTML Output\n DataBars - Conditional formatting in PivotTable Losing web queries in MS Excel 2007 formats Manage external data ranges and their properties MS Excel’s XLSB file size Issue  \\\nExceptions\n The static method CellsHelper.DetectFileFormat() throws exception Looking for a solution in Aspose.Cells Exception: “Index was out of range” Loadingworkbook throws: \u0026amp;lsquo;Input string was not in a correct format\u0026amp;rsquo; Shape to image Error in Excel to PDF feature  \\\nBugs\n Image’s color mode formatting is not kept when saving an Excel file MS Excel 2003 Worksheet’s Custom Properties corrupted BUG in calculating Formulas Opening and saving a file with conditional formatting failed Bold style is not seen on ListObject’s header cell Series markers issue  -Quotes in the saved Tab Delimited file\n CSV read/write does not \u0026amp;lsquo;round trip\u0026amp;rsquo; for some inputs  -StringValue returns a wrong value\n 2 small issues with CELL function’s implementation Issues with CELL function GETPIVOTDATA formula calculation issue PPMT formula is causing file recovery after calling Workook.CalculateFormula()method Issuewith IFERROR and …","date":-62135596800,"description":"","objectID":"7baabb6c7bd38ba648ea7e035c06cf46","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.3.1+release+notes/","title":"Aspose.Cells for .NET 7.3.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.3.2\nWe are happy to announce Aspose.Cells for .NETv7.3.2!\n\\\n\\1) Aspose.Cells\n\\\nNew Features\n Support to copy Sparklines in Workbook.Copy()  \\\nEnhancements\n Saving Workbook (XLSM file) removes MS Excel Table’s Array Formulas Anenhancement regarding input formatting for Ranges Find an XML exception while saving a workbook Using ProtectedRange to allow domain users/groups edit permissions  \\\nPerformance\n Performance issues with PivotTables  \\\nExceptions\n Error:“Excel found unreadable content…” NullReferenceException in Aspose.Cells.Workbook..ctor  \\\nBugs\n Range of sheets in formula has been changed after sheets are re-ordered Wrong row height using AutoFitRows with IsTextWrapped option on Protect Workbook with ProtectionType.Windows Problem with Zoom setting in Page Break Preview Table: Convert To Range feature Corrupted file with new Aspose.Cells version Worksheet corrupted after opening the file Add Page Header problem Excel with circular errors showing values instead of error strings The Excel file becomes corrupted after deleting row Hidden pictures disappeared after copying worksheet After save, the Excel worksheet’s data disappeared  -Saving XLSX file with Scatter plot enables extra options\n-DataLabels.ShowBubbleSize issue with XLSX file format\n-Excel Pie Chart’s title is not rendered to image file correctly\n-Incorrect Formula Calculation issue\n German language issue regarding conditional formatting Blank pages after converting to PDF Header/Footer issues in PDF file Lost spaces when rendering Excel range to image Language/regional problem - conditional formatting issue with SheetRender Custom number formatting issue with negative number Set color for Sub Total in PivotTable Problem in saving workbook with calculated members inside a PivotTable Formula and language issues in connection with SheetRender (XPS) Sub Totals are calculated in incorrect order (Smart Markers) Excel’s XLSB file size Issue - Pick …","date":-62135596800,"description":"","objectID":"ca14401d3f5e7501aa1b4bddcbed4f3d","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.3.2+release+notes/","title":"Aspose.Cells for .NET 7.3.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.3.3\nWe are happy to announce Aspose.Cells for .NET v7.3.3!\n\\1) Aspose.Cells\nExceptions\n Corrupted files with new Aspose.Cells version Getting error when saving the Excel file  Bugs\n Applying SetArrayFormula method error Error found when opening the generated file having chart Cells.DeleteRange with  does not update references\n Fit the columns and rows Some spreadsheets will fail while loading/saving process Workbook.CalculateFormula() method issue(s) Chart.CategoryAxis.TickLabels.RotationAngle does not work after copying worksheets Issue with eliminating Chart / Axis Title Chart legend formatting is lost on saving workbook Problem with rendered charts in the PDF Set Gradient color issues Saving MHT file, reading in Aspose.Cells is a problem Some conditional formatting is not rendered correctly Bad text positioning in PDF with mixed size fonts Exporting to PDF from Excel file changes the formulas Worksheet and PDF rendering issues Problem with auto-fitting columns PivotTables Theme issues PivotTable’s refresh fails Problem when upgrading an XLS file with macro to XLSM format   \\\n\\2) Aspose.Cells.GridWeb\n\\\nBugs\n40838 -GridWeb’s formatting is not saved\n41140 -Problem when using Add Row option in the context menu\n\\\n\\3) Aspose.Cells.GridDesktop\n\\\nNew Features\n GridDesktop Scrollbars - How to show/hide vertical and horizontal scrollbars Insert Row / Column event(s)  \\\nBugs\n French keyboard is notsupported  ","date":-62135596800,"description":"","objectID":"89ac619d99ff9345df3a00f318ad47d1","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.3.3+release+notes/","title":"Aspose.Cells for .NET 7.3.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.3.4\nWeare happy to announce Aspose.Cells for .NET v7.3.4!\n\\\n\\1) Aspose.Cells\n\\\nNew Features\n Support Open Office 3D Charts Calculate weighted average on Subtotal row between two columns (SmartMarkers) Detect vertical or horizontal data source of a chart  \\\nEnhancements\n Find and Replace inner texts  \\\nPerformance\n Workbook’s CalculateFormula method takes 30+ seconds Performance degradation for Office 2007 as compared to 2003  -CalculateFormula is taking around 3 minutes on 8 Core machine\n Aspose Cell replacing Excel Wrapper Saving an Excel document takes more than one minute  \\\nExceptions\n “Invalid formula” exception when opening an XLSX file Aspose.Cells throws “ArgumentNullException” exception when opening a templatefile Saving a MHtml file, reading in Aspose.Cells is a problem   \\\nBugs\n Formula is not calculated properly ActiveX Controls Corrupt a Workbook 4 Spreadsheets are failed to be re-written Excel Charts are Locked after Save Error while copying Worksheets  -Filled Radar Graph image rendered with hidden Axis Tick marks via Chart.ToImage method\n-Formatting data labels issue\n Issue with calculating Excel chart Issue with a column chart having both axis Multiple calculated pivot fields result in unreadable file. Custom XML Parts issue This file is corrupted after being saved  -Converting XLS to XLSX and back creates a bad XLS file\n-Converting XLS to XLSX creates a bad document\n Rendering an MS Excel file to PDF document has an issue regarding contents  \\\n\\2) GridWeb\n\\\nBugs\n40838 - GridWeb -Formatting not saved correctly\n41140 - Problem when using“Add Row” option\n41152 - When editing the Aspose.Cells.GridWeb, celljumps around when selected\n41154 - Rendering issue onGridWeb control\n41149 - Highlight Issuewith GridWeb control\n41183 -\n41126 - GridWeb Cell\u0026amp;rsquo;sstyle BorderWidth issue\n\\\n\\3) GridDesktop\n\\\nBugs\n40709 - GridDesktop’s rendering problem\n41098 - Cell Protection / Locking issue with …","date":-62135596800,"description":"","objectID":"c0dfd13a327a7084edaf65749884215a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+.net+7.3.4+release+notes/","title":"Aspose.Cells for .NET 7.3.4 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for Java 7.2.0\nWe are happy to announce Aspose.Cells for .NETv7.2.0!\n\\\n\\1) Aspose.Cells\n\\\nEnhancements\n\\\n Cells.ImportDataView only imports 65535 rows Could not update ComboBox in XLSM file  \\\nExceptions\n\\\n Shapes.AddCopy throws: Index was out of range NullReferenceException after copying worksheet Exception:Invalid MsoLineDashStyle string val occurred while opening the file Unable to convert some XLSX files to TIFF format  \\\nBugs\n\\\n .NET C++ Build Error C2686  Converting XLS file to XLSX discard text formatting Copy charts from one workbook to another Corrupted cell coloring after worksheet copying Hyperlinks not moving with sorted cells Chart problems in designer Spreadsheet Worksheet.Copy() does not copy values for invalid formulas Applying custom style to cells issue ListBox does not recognize selection changes  Chart Title is lost when opening XLSM file with Office 2010  -Bugs when converting an Excel file into an image.\n Upgrade from version v5.1 to v7.0.3 Charts.ToImage() quality issue Charts Gradient effects problem Formula calculation engine problem Problem with calculated cells when saving in PDF format Cells Calculation is incorrect  -Custom formatting of text values when exporting to PDF  Issue with Excel to PDF Conversion  Workbook gets corrupted by removing a sheet which has a pivot table Tables as Data Source for PivotTable broken using Designer Corruption when adding fields to Pivot Table Issue on Pivot Table Rendering After Refresh Corruption when adding fields to Pivot Table Integrity problems with MS Excel 2003  -Style for Pivot Table issue\n SheetRender is not wrapping text properly Worksheet’s Custom Properties with large values The component is corrupting objects which contain Excel Add-In Formulas Cannot get Picture images to print accurately in Aspose.Cells Error while using WorkBook.Copy() method Microsoft Office File Validation Add-In Warning Problems with saving to XLS format with ClearData …","date":-62135596800,"description":"","objectID":"c11eb8573e2030c7422f0acb0cdbd491","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/aspose.cells+for+java+7.2.0+release+notes/","title":"Aspose.Cells for Java 7.2.0 Release Notes"},{"content":"**Release Notes - 2012 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"95ef79ef3bb8057d31aa80da524e80ef","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2012/","title":"Release Notes - 2012"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.4.0\nWe are happy to announce Aspose.Cells for .NETv7.4.0!\n\\\n\\1) Aspose.Cells\n\\\nEnhancements\n Rendering advanced conditional formatting in Sheet-to-Image feature Ruler is invisible in Page Layout view  \\\nPerformance\n Hanged when saving to PDF format  \\\nExceptions\n Exception on opening an Open XML file  \\\nBugs\n Bugin using formula as parameter of a custom function Pivot table’s refresh and calculating data issue HLOOKUPwith INDIRECT formulas bug Unprotect worksheet fails for the files saved with Excel 2013 Footer’s page number issue in export to PDF AcceptAllRevisions is not applied properly when saving Workbook to streams  -Corrupted checkboxes rendered on save\n Decrypting a password protected file corrupts the file  -Corrupted name ranges on save\n Locale settings not working for a cell with a DataTime formatting Error in formatting a document with simple quote in the Header tab column Formatting specific characters in a string is not working for an XLSX file  \\\n\\2) Aspose.Cells.GridWeb\n\\\nNew Features\n41269 - LoadExcel files with drop downs – List data validation.\n41312 - Support click event for drawing objects / shapes\n\\\nEnhancements\n41301 - Directlytype value in a cell is not supported on Chrome, FireFox and Safari\n\\\nBugs\n41279 - GridWeb’svalidation menu list will fail on menu items which contain Dollar sign -\u0026amp;ldquo;$\u0026amp;rdquo;\n41280- GridWeb’s validation menu list is refreshedafter updating the referenced cell value\n41294 - GridWebwill not work on FireFox for the files which contain cells with validation list\n41308 - While editing a cell value, pressing Enter key will lose original linebreak in IE\n Copy-Paste issue in web grid which is notworking for Chrome, FireFox etc.  \\\n\\3) Aspose.Cells.GridDesktop\n\\\nEnhancements\n41291 - Issue while usingthe keyboard to navigate to any cell to enter value\n\\\n","date":-62135596800,"description":"","objectID":"3e3cb34419b0c11935135d9f2d263e41","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.4.0+release+notes/","title":"Aspose.Cells for .NET 7.4.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.4.1\n\\1) Aspose.Cells\nNew Features\nEnhancements\nExceptions\n41371 - FormatException during file’s opening\n41376 - Exception: Index was out of range\n41401 - Finding Hidden rows - Set Add-ins formula\n41382 - Export to PDF - formatting is not correct\n41431 - Exception: “Index was out of range”\nBugs\n41190 - ToTiff function Issue - Cell Orientation\n40865 - Text orientation rendering issue\n41409 - Issue with refreshing the PivotTable\n41411 - Save XLSX to HTML - formatting error\n41406 - DATEDIF formula / function issue\n41350 - Workbook.CalculateFormula is very slow\n41309 - Image Created differently from PC to PC\n41415 - Trouble with opening an XLSX file\n41427 - Excel won\u0026amp;rsquo;t finish loading - Excel 2013 file\n41400 - Worksheet value/input changes on Save\n2\n) Aspose.Cells.GridWeb\nNew Features\n41422 - Excel’s Show Formulas feature\nBugs\n41397 - Performance issue with Aspose.Gridweb\n","date":-62135596800,"description":"","objectID":"5900cb4c8b1e8abd0842ba5c42184cdb","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.4.1+release+notes/","title":"Aspose.Cells for .NET 7.4.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.4.2\n\\1) Aspose.Cells\nNew Features\n41494 - Copying Macros in XSLM file\nEnhancements\nExceptions\n41490 - Exception: Illegal characters in the path\n41487 - Error found on GetNamedRanges() method\nBugs\n41440 - Dotted line Issue - Sheet-to-Image\n41470 - Regarding convert Workbook-to-PDF file\n41442 - ToTiff function: Number Alignment Issues\n41439 - ToTiff function: Border Issues\n41437 - ToTiff function: Currency Issues\n41464 - Invalid Excel file after saving\n41409 - Issue with refreshing the PivotTable\n\\2) Aspose.Cells.GridWeb\nNew Features\n41459 - Using GridWeb in JavaScript\nBugs\n41414 - Reference formula errors / issues\n","date":-62135596800,"description":"","objectID":"0c763fe253e7a82ad7fcc136248661f9","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.4.2+release+notes/","title":"Aspose.Cells for .NET 7.4.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.4.3\n\\1) Aspose.Cells\nNew Features\nEnhancements\n\\\nPerformance\nExceptions\n\\\nBugs\n2\n) GridWeb\nNew Features\n\\\nEnhancements\nBugs\n3\n) GridDesktop\nBugs\n","date":-62135596800,"description":"","objectID":"5c449b60f77065b1e80725d739096f17","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.4.3+release+notes/","title":"Aspose.Cells for .NET 7.4.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.5.0\n\\1) Aspose.Cells\nNew Features\nEnhancements\nPerformance\n41664 - Formulas calculation is slow Exceptions\nBugs\n41748 - Workbook saved as XLSX corrupted\n41710 - One character becomes a question mark\n41614 - PDF not showing the filtered items\n41695 - Chart Legend is in the wrong position\n41632 - Chart Legend can\u0026amp;rsquo;t be aligned center 41745 - Certain Copy/Paste features are broken\n41706 - Border breaks after inserting row 41689 - Worksheet.Copy method Issue\n41648 - Range does not extend its area accordingly\n41642 - Problem with Subtotal (Smart Markers)\n41633 - Add-ins formula issue\n\\2) Aspose.Cells.GridWeb\nBugs\n\\3) Aspose.Cells.GridDesktop\nBugs\n","date":-62135596800,"description":"","objectID":"a99731b11c8122fa6c90499a2631a2cd","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.5.0+release+notes/","title":"Aspose.Cells for .NET 7.5.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.5.1\n\\1) Aspose.Cells\nNew Features\n41522 - Parse Scenarios in XLS to XLSM conversion\nPerformance\n41526 - XLSX to PDF conversion hangs\nExceptions\n41773 - Exception occurs on opening the file\nBugs\n41805 - Workbook formulas do not work\n41685 - Problems with Auto-size for the Textbox\n41751 - Array formula(s) lost on Save\n41787 - File is corrupted on Save\n41747 - Array formulas are not calculated fine\n\\2) Aspose.Cells.GridWeb\nBugs\n","date":-62135596800,"description":"","objectID":"8d18fd39f3df8c0db359937bf53fa8dc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.5.1+release+notes/","title":"Aspose.Cells for .NET 7.5.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.5.2\n\\1) Aspose.Cells\nNew Features\n40611 - Support custom data sorting\nEnhancements\n41849 - Clearing Textboxes is not working\nExceptions\n41843 - Exception: “\n41873 - Exception: “Index was out of range” - caused by writing legend entries\nBugs\n41904 -\n41891 - Issue with refreshing Pivot table(s)\n41868 - DSUM formula issue\n41851 - TextBox.IsPrintable always returns true\n41688 - Font change is affecting the image size\n41887 - Scales of X-axis do not display\n\\2) Aspose.Cells.GridWeb\nNew Features\nBugs\n41899 - Issue when using Freeze Pane feature(s)\n\\\n\\3) Aspose.Cells.GridDesktop\n\\\nEnhancements\nBugs\n\\\n","date":-62135596800,"description":"","objectID":"d31984a93acf47d955250cab41a7a550","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.5.2+release+notes/","title":"Aspose.Cells for .NET 7.5.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.5.3\n\\\n\\1) Aspose.Cells\n\\\nNew Features\n\\\nExceptions\n41931 - CellsException calculating SUBSTITUTE function\n\\\nBugs\n41884 - Output TIF image is not correct\n41865 - Converting Excel to MHTML issue(s)\n41914 - Corrupt files when merging workbooks\n\\\n\\2) Aspose.Cells.GridWeb\n\\\nNew Features\n\\\n**Bugs **\n41975 - Freeze panes feature is not working in IE10 (GridWeb)\n\\\n\\3) Aspose.Cells.GridDesktop\n\\\nBugs\n\\\n\\\n","date":-62135596800,"description":"","objectID":"3c80128c722c0559141a6fcbac53625e","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.5.3+release+notes/","title":"Aspose.Cells for .NET 7.5.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.6.0\n\\1) Aspose.Cells\nNew Features\nEnhancements\nShapePathCollection etc.)\nPerformance\nExceptions\n42003 - Issue with refreshing PivotTables\n42050 - CellsException:\n41956 - Exception when opening the template file\nBugs\n41570 - Excel to PDF Arabic conversion issue\n41983 - PivotTables in XLS files cause corruption\n41948 - Chart to Image conversion issue\n42032 - Excel found unreadable content in XLSX\n42012 - Formula calculation issue\n41997 - Japanese Fonts’ display problem\n\\2) Aspose.Cells.GridWeb\nBugs\n\\3) Aspose.Cells.GridDesktop\nBugs\n42060 - Link to cells in the same workbook\n42056 - ADDRESS formula’s calculation problem\n","date":-62135596800,"description":"","objectID":"e25e4b912078daf3e08af70e570463c8","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.6.0+release+notes/","title":"Aspose.Cells for .NET 7.6.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.6.1\n\\1) Aspose.Cells\nNew Features\nEnhancements\nExceptions\nBugs\n41354 - PivotTable with Smart Markers issue\n41528 - Formatting issues in the output PDF\n\\2) Aspose.Cells.GridWeb\nNew Features\nBugs\n","date":-62135596800,"description":"","objectID":"dd71e3195ac96ca6c8ff77fa811a888b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/aspose.cells+for+.net+7.6.1+release+notes/","title":"Aspose.Cells for .NET 7.6.1 Release Notes"},{"content":"**Release Notes - 2013 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"c874216edea4c8ef9a0c8f386ea8ac63","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2013/","title":"Release Notes - 2013"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.7.1\nAspose.Cells for .NET has been updated to version 7.7.1 and we are pleased to announce this release brings the addition of over 80 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML,OOXML,XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n\\\n**Major Features **\n\\\nSupports reading large files with LightCells\nRework of reading and writing pivot table of xlsb\n\\\n**Minor Features **\n\\\n**New Features **\n\\\n(CELLSNET-42116) - Calculate Min and Max values for DataBars Conditional Formatting\n(CELLSNET-40910) - Read large MS Excel files in light cells mode - (LightCells API)\n(CELLSNET-42230) - Render Conditional Formatting Data Bars with negative values in Sheet to Image feature\n(CELLSNET-42229) - Render cells without colors as transparent cells in the Sheet to Image feature\n(CELLSNET-42243) - Support BitAnd function\n(CELLSNET-40679) - Change the color of all the cells which have some specific color\n\\\n**Enhancements **\n\\\n(CELLSNET-42247) - Conditional formatting on PivotTable is lost when processed with Aspose.Cells\n(CELLSNET-42228) - Embedding DOC file into an XSLX format does not start MS Word to load the embedded DOC\n\\\n**Other Improvements and Changes **\n\\\n**Bugs **\n\\\n(CELLSNET-42220) - Issue with rendering Arrow shape in the output PDF file\n(CELLSNET-42139) - Cell.GetDisplayStyle() is not working for TOP 10% and BOTTOM 10% …","date":-62135596800,"description":"","objectID":"57404e07b6d0b037139adfad55b04853","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+7.7.1+release+notes/","title":"Aspose.Cells for .NET 7.7.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 7.7.2\nAspose.Cells for .NET has been updated to version 7.7.2 and we are pleased to announce this release brings the addition of over 50 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML,OOXML,XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n\\\n**Major Features **\n\\\nSupport opening password protected MS Excel 2013 files\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-42299) - Support B3 (13.9 x 19.7 inches) PaperSizeType\n(CELLSNET-42370) - Apply Justify Distributed Text Alignment setting\n(CELLSNET-42312) - Retrieve RemovePersonalInformation setting\n\\\n**Bugs **\n\\\n(CELLSNET-42349) - Incorrect conversion from HTML to XLSX\n(CELLSNET-42346) - Save as HTML creates too many br tags\n(CELLSNET-42323) - The output PDF does not reflect the chart in the Excel file\n(CELLSNET-42301) - Output PDF fails to calculate the values for Calculated Fields in Pivot Table\n(CELLSNET-42300) - Pivot Table display problem while converting from XLS to XLSM\n(CELLSNET-42285) - Numbers with General as its Number format appear with fractions\n(CELLSNET-42272) - Xlsx file with conditional formatting icon sets gets corrupted after opening and resaving\n(CELLSNET-42271) - Conditional formatting features like icons, slicers and colour gradient are lost in the output XLSB file\n(CELLSNET-42261) - Problem with save as HTML and hidden columns when …","date":-62135596800,"description":"","objectID":"dabd343e39d2bc49d4156e7bb4839f7b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+7.7.2+release+notes/","title":"Aspose.Cells for .NET 7.7.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.0.0\nAspose.Cells for .NET has been updated to version 8.0.0 and we are pleased to announce this release brings the addition of over 50 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML,OOXML,XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n\\\n**Major Features **\n\\\nMemory usage option can be used for performance consideration.\nWhen building workbook with large cells data set, MemorySetting.MemoryPreference option may optimize memory usage for cells data to decrease the memory cost.\n\\\nOther Improvements and Changes \\\n**New Features **\n\\\n(CELLSNET-42399) - Exporting data without hidden rows and columns\n\\\n**Enhancements **\n\\\n(CELLSNET-42487) - PrintTitleRow problem with Turkish Regional Settings\n(CELLSNET-42449) - Aspose.Cells.dll can not pass BinScope check\n(CELLSNET-42417) - Typo in method name - SeriesCollection.SecondCatergoryData\n(CELLSNET-42413) - Scenarios lost during conversion xlsb to xlsm\n\\\n**Performance **\n\\\n(CELLSNET-42445) - Performance Issue with AutoFitRow(int rowIndex) method\n(CELLSNET-42430) - Template file takes longer time to be loaded\n\\\n**Bugs **\n\\\n(CELLSNET-42367) - Vertical text issue in the output pdf\n(CELLSNET-42409) - Calculated field not being calculated/printed\n(CELLSNET-42386) - GetPivotData function computes error value\n(CELLSNET-42368) - Excel file gets corrupted after refreshing pivot table and …","date":-62135596800,"description":"","objectID":"b5de0e6b6c91f1c60c2de45549699caf","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.0.0+release+notes/","title":"Aspose.Cells for .NET 8.0.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.0.1\nAspose.Cells for .NET has been updated to version 8.0.1 and we are pleased to announce this release brings the addition of over 30 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML,OOXML,XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-42511) - Set Pixel format for the rendered image (Excel to Image (TIF) rendering)\n\\\n**Enhancements **\n\\\n(CELLSNET-42525) - Named range does not grow horizontally with smart markers when it refers to a single cell\n\\\n**Performance **\n\\\n(CELLSNET-42505) - CalculateFormula takes more than 9 seconds to process the formulas\n\\\n**Bugs **\n\\\n(CELLSNET-42533) - The output file crashed in MS Excel after adding Pivot filtering\n(CELLSNET-42516) - The hidden comment is shown when exported to HTML\n(CELLSNET-42470) - Excel found unreadable contents message on Aspose.Cells generated XLSX\n(CELLSNET-42468) - Excel found unreadable contents in the spreadsheet after adding the PivotTable\n(CELLSNET-42314) - Many VML elements (controls) do not render properly (Excel to HTML conversion)\n(CELLSNET-42259) - VML Form Elements in HTML Conversion are not Rendered\n(CELLSNET-42180) - Rich Text formatting not maintained.\n(CELLSNET-42540) - Issue using DeleteColumns function\n(CELLSNET-42551) - Spaces between words are lost in output pdf\n(CELLSNET-42543) …","date":-62135596800,"description":"","objectID":"88c43c7d153a523c92f3d084c5b062b6","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.0.1+release+notes/","title":"Aspose.Cells for .NET 8.0.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.0.2\nAspose.Cells for .NET has been updated to version 8.0.2 and we are pleased to announce this release brings the addition of over 30 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML,OOXML,XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-42585) - Change Comment Text Direction\n\\\n**Performance **\n\\\n(CELLSNET-42278) - System.OutOfMemoryException while saving XLSX to PDF where XLSX has lots of blank cells with formatting\n\\\n**Bugs **\n\\\n(CELLSNET-42524) - CalculateTextSize function of the Shape object problems\n(CELLSNET-42401) - CalculateTextSize() does not return correct height\n(CELLSNET-42235) - Problem with TextBox AutoSizing\n(CELLSNET-42104) - CalculateTextSize does not return correct height\n(CELLSNET-42612) - Auto-fit Columns feature is not working for the Pivot\u0026amp;rsquo;s filtered drop down cols\n(CELLSNET-42562) - Formulas are not working with foreign currency\n(CELLSNET-42269) - PivotTable formatting in the output XPS is not correct\n(CELLSNET-42597) - AutoFitRows is causing the Wrapped text to hide in resultant PDF\n(CELLSNET-42615) - SheetRender does not render superscript correctly\n(CELLSNET-42594) - Vertical Text Justification is not working correctly in SheetRender\n(CELLSNET-42580) - Save Excel file to PDF ignores color settings in header …","date":-62135596800,"description":"","objectID":"33b8fe9d7fc668d90bbefdfb70270d4f","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.0.2+release+notes/","title":"Aspose.Cells for .NET 8.0.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.1.0\nAspose.Cells for .NET has been updated to version 8.1.1 and we are pleased to announce this release brings the addition of over 20 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML, OOXML, XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-42761) - Remove scenarios from the worksheets\n\\\n**Bugs **\n\\\n(CELLSNET-42523) - SheetRender fails when UpdateSelectedValue is used\n(CELLSNET-42387) - Text is moved out of banner.\n(CELLSNET-42385) - Curved Connector shape does not appear when rendering XLSX to PDF\n(CELLSNET-42379) - Text in the Matrix is displayed different\n(CELLSNET-42752) - PivotTable Sub-Totals have incorrect cell merging\n(CELLSNET-42703) - Converting the spreadsheet having PivotTable to PDF has style related issues\n(CELLSNET-42386) - GetPivotData function computes erronated value\n(CELLSNET-42742) - Aspose.Cells Embeds Incorrect Fonts in the PDF\n(CELLSNET-42697) - Header is getting duplicated in the output pdf\n(CELLSNET-42759) - X-axis labels of chart are cut off\n(CELLSNET-42756) - Bullet points do not render correctly if they are within a text box\n(CELLSNET-42750) - Arrows are showing mirrored on a vertical axis\n(CELLSNET-42748) - Legend lines are thiner than in Excel\n(CELLSNET-42730) - XLSM to PDF tends to hang when changes are made to the Cell Value …","date":-62135596800,"description":"","objectID":"871bb2930317a08b7e0e3f568921f4d7","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.1.0+release+notes/","title":"Aspose.Cells for .NET 8.1.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.1.2\nAspose.Cells for .NET has been updated to version 8.1.2 and we are pleased to announce this release brings the addition of over 20 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML, OOXML, XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**Performance **\n\\\n(CELLSNET-42820) - FileFormatUtil.DetectFileFormat uses all system\u0026amp;rsquo;s available memory while detecting a corrupted spreadsheet\n\\\n**Bugs **\n\\\n(CELLSNET-42801) - Data is missing when PivotTable is converted to PDF\n(CELLSNET-42800) - Total Title is missing when PivotTable is converted to PDF\n(CELLSNET-42799) - Cell Merging Problem when PivotTable is converted to PDF\n(CELLSNET-42775) - PivotTable bug regarding Subtotals\n(CELLSNET-42749) - Arrow lines are too thick than in Excel\n(CELLSNET-42438) - Merged cell content disappears when rows are filtered and spreadsheet is converted to HTML\n(CELLSNET-42353) - Aspose.Cells produce arrow double in thickness while converting XLS to PDF\n(CELLSNET-42747) - Printed result is not centered correctly and last line get lost\n(CELLSNET-42744) - The text in merged cells are not showing when convert to PDF\n(CELLSNET-42781) - Shape to image Error while converting ExcelShapeToImageRedactedEx.xls to Tiff\n(CELLSNET-42780) - Shape to image Error while converting ExcelShapeToImageError.xls to Tiff …","date":-62135596800,"description":"","objectID":"e6befcaf847f2ca5b6c15eb724731dff","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.1.2+release+notes/","title":"Aspose.Cells for .NET 8.1.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.2.0\nAspose.Cells for .NET has been updated to version 8.2.0 and we are pleased to announce this release brings the addition of over 40 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML, OOXML, XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**Enhancements **\n\\\n(CELLSNET-42892) - An Overload of AutoFitRows Required\n(CELLSNET-42868) - The data validator list does not return expected values\n(CELLSNET-42862) - Unsupported excel 2013 function - Days\n\\\n**Performance **\n\\\n(CELLSNET-42876) - Aspose.Cells hangs on Workbook.Save() method\n(CELLSNET-42840) - Large Excel file is corrupted when more than 45,000 rows are added\n\\\n**Bugs **\n\\\n(CELLSNET-42866) - Vertical Text in the spreadsheet is missing in the resultant PDF\n(CELLSNET-42835) - Text is not aligned in side the shape when XLS is rendered to PDF\n(CELLSNET-42787) - Rendered image is not clear in the output pdf\n(CELLSNET-42526) - Arrow objects are not positioned correctly in the output pdf\n(CELLSNET-42322) - Deleting rows and refreshing the pivot table crashes the output file\n(CELLSNET-42827) - Issue with Multi-thread reading values of cells in the worksheet\n(CELLSNET-42898) - Problem with Styled footer when spreadsheet is rendered as PDF\n(CELLSNET-42880) - The number of pages saved by Aspose.Cells PDF is 3.\n(CELLSNET-42841) - Tiff image …","date":-62135596800,"description":"","objectID":"93e934f7d08de581ebe25ca97c01c341","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.2.0+release+notes/","title":"Aspose.Cells for .NET 8.2.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.2.1\nAspose.Cells for .NET has been updated to version 8.2.1 and we are pleased to announce this release brings the addition of over 30 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML, OOXML, XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-42923) - Support the option of showing the legend without overlapping\n(CELLSNET-42935) - Verify that cell value satisfies data validation rules\n(CELLSNET-42911) - Disable Text Wrapping for DataLabels of the Chart\n\\\n**Bugs **\n\\\n(CELLSNET-42941) - Produces unreadable content error in XLSM file\n(CELLSNET-42933) - Not able to avoid Row Labels when created pivot using aspose\n(CELLSNET-42857) - File gets corrupt on opening and saving\n(CELLSNET-42816) - Diagonal Text Box appears Horizontal when spreadsheet is converted to PDF\n(CELLSNET-42815) - Diagonal Text Box appears Horizontal when spreadsheet is converted to HTML\n(CELLSNET-42676) - Thickness of arrow lines of visio diagram is wrong in the output pdf\n(CELLSNET-41568) - Excel to image with rotated Shape not rendered correctly\n(CELLSNET-40931) - Wrong shapes exported to image\n(CELLSNET-42802) - Graphic rendering issue while converting Xls to PDF\n(CELLSNET-42980) - Incorrect Page Break while rendering the spreadsheet to PDF\n(CELLSNET-42979) - Unwanted extension of border …","date":-62135596800,"description":"","objectID":"0a198d06816ffaa646092441b33d2e33","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.2.1+release+notes/","title":"Aspose.Cells for .NET 8.2.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.2.2\nAspose.Cells for .NET has been updated to version 8.2.2 and we are pleased to announce this release brings the addition of over 60 new useful improvements. Using Aspose.Cells for .NET you can work with XLS, SpreadsheetML, OOXML, XLSB, CSV, HTML, ODS, PDF, XPS and other formats in your applications. You can also view, generate, modify, convert, render and print workbooks all without using Microsoft Excel. Visit the documentation to learn how to get started with Aspose.Cells for .NET. Note this download contains a fully working version of the product, however without a license set it will run in evaluation mode with some limitations. To test Aspose.Cells without these evaluation limitations you can request a free 30-day temporary license. The following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**Performance **\n\\\n(CELLSNET-43015) - Conversion to PDF process seems to hang on a spreadsheet having 115996 rows\n\\\n**Bugs **\n\\\n(CELLSNET-43070) - Error \u0026amp;ldquo;Cannot edit a PivotTable in group edit mode\u0026amp;rdquo;\n(CELLSNET-43061) - Incorrect value calculated as compared to MS Excel\n(CELLSNET-43064) - Causes the \u0026amp;ldquo;Unreadable Content\u0026amp;rdquo; message in MS Excel\n(CELLSNET-43003) - Text in shape renders upside down when spreadsheet is converted to image\n(CELLSNET-43002) - Shape overlapping the text when spreadsheet is rendered as image\n(CELLSNET-42903) - Text Indent issue\n(CELLSNET-42838) - Text in Text Box isn\u0026amp;rsquo;t rendered in the resultant PDF\n(CELLSNET-41658) - Pivot table not retaining conditional formatting\n(CELLSNET-41656) - An error appears about unreadable content.\n(CELLSNET-40921) - Shape orientation is wrong when rendering to image\n(CELLSNET-43056) - Gradation and texture do not display in the renderd PDF file format\n(CELLSNET-43035) - Wrong pdf export - text trimmed and extra space added\n(CELLSNET-43012) - Character \u0026amp;lsquo;P\u0026amp;rsquo; is …","date":-62135596800,"description":"","objectID":"961ad338b610c34732778d72f22cab4f","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.2.2+release+notes/","title":"Aspose.Cells for .NET 8.2.2 Release Notes"},{"content":"This page contains release notes for [ Aspose.Cells for .NET 8.3.0|http://www.aspose.com/downloads/cells/net/new-releases/aspose.cells-for.net-8.3.0/]\nThe following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43112) - Get Text of the Equation of Trendline inside Chart\n(CELLSNET-42303) - Converting chart to image in SVG format\n(CELLSNET-43158) - Support to set AutoRecover workbook property\n\\\n**Bugs **\n\\\n(CELLSNET-41756) - Problem with images in xls to HTML conversion\n(CELLSNET-41755) - Problem with images in xls to PDF conversion\n(CELLSNET-43111) - Adding cell values to the XLSB remove presets\n(CELLSNET-43110) - Error \u0026amp;ldquo;Excel found unreadable content\u0026amp;rdquo; caused by pivotfield (double) in XLSB output\n(CELLSNET-43109) - Error \u0026amp;ldquo;Excel found unreadable content\u0026amp;rdquo; caused by pivotfield (double) in XLSX output\n(CELLSNET-43095) - Graph is shifting its location\n(CELLSNET-43053) - Errors viewing HTML in Chrome and Safari\n(CELLSNET-42984) - Image brightness is lost when rendering image from Excel\n(CELLSNET-42871) - Issue with 2 hyperlinks in 1 cell\n(CELLSNET-42797) - Textboxes lose justify alignment being saved to XPS\n(CELLSNET-42796) - Textboxes lose justify alignment being saved to PDF\n(CELLSNET-42199) - Excel Diagram Does Not Export Correctly\n(CELLSNET-40902) - Excel text box is resized incorrectly when rendering to image\n(CELLSNET-43138) - Red text is rendered in Black while converting SpreadsheetML to PDF format\n(CELLSNET-43133) - Print multiple copies issue\n(CELLSNET-43123) - Custom Margins are ignored\n(CELLSNET-43108) - Hidden formula is made visible\n(CELLSNET-43101) - Printing doesn\u0026amp;rsquo;t respect to page layout\n(CELLSNET-42402) - Compaliance PDF/A-1b failed with Adobe X Pro Preflight\n(CELLSNET-41906) - PDF/A Validation fails and other fonts related issues\n(CELLSNET-41832) - PDF/A created with Aspose Cells failing verifications\n(CELLSNET-43103) - Trendline …","date":-62135596800,"description":"","objectID":"24ecea70742ff9790ce453ce36ab74b8","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/aspose.cells+for+.net+8.3.0+release+notes/","title":"Aspose.Cells for .NET 8.3.0 Release Notes"},{"content":"**Release Notes - 2014 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"fe78c45d06553ae29dd42daf0a554620","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2014/","title":"Release Notes - 2014"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.3.2\nThe following is a list of changes in this version of Aspose.Cells.\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43214) - Ability to specify the absolute position for the PivotItem\n(CELLSNET-43298) - Support to format cell values automatically by Cells.ImportTwoDimensionArray()\n(CELLSNET-43227) - Specify Custom Separators.\n(CELLSNET-43256) - Printing range of pages\n(CELLSNET-43240) - Change the font on just the specific unicode characters\n(CELLSNET-43239) - OnePagePerSheet, PageIndex and PageCount properties for XpsSaveOptions\n(CELLSNET-43220) - Implementation of Chart.HasAxis(axisType, axisGroup) method\n(CELLSNET-43259) - Ability to add Signature Line at specified location\n(CELLSNET-43253) - Ability to check \u0026amp;ldquo;Password to modify\u0026amp;rdquo;\n\\\n**Enhancements **\n\\\n(CELLSNET-43144) - Render HTML for each sheet with the contents of the element only\n(CELLSNET-43282) - Importing a CSV file to an Excel XLSX file\n(CELLSNET-43251) - Aspose.Cells does not increase the corresponding row height\n(CELLSNET-43307) - Chart lines are not smooth and curved at edges\n(CELLSNET-43305) - Copying a Range with PasteType.All does not copy the Hyperlink\n(CELLSNET-43287) - Enhance exceptions while handling un-supported OOXML file formats\n(CELLSNET-43260) - Ability to retrieve Signature Line information from a spreadsheet\n\\\n**Performance **\n\\\n(CELLSNET-43236) - Loading a spreadsheet uses most of the system memory\n\\\n**Bugs **\n\\\n(CELLSNET-43271) - Opening and saving the spreadsheet makes it corrupt\n(CELLSNET-43266) - Second worksheet is not rendered fine in the output PDF\n(CELLSNET-43262) - Methods of IStreamProvider are not called\n(CELLSNET-43248) - PivotTable connections removed for the slicer when re-saving an XLSB file\n(CELLSNET-43215) - PivotItem does not move to specified location while using PivotItem.Move\n(CELLSNET-43205) - Some graphic elements are misplaced in the output HTML …","date":-62135596800,"description":"","objectID":"18cb7986353a59ee28371deba61d155a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.3.2+release+notes/","title":"Aspose.Cells for .NET 8.3.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.4.0\n\\1) Aspose.Cells\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43362) - Support to delete a PivotTable from Worksheet\n(CELLSNET-43279) - Content Type Properties are not shown in XLS format\n(CELLSNET-43276) - Workbook.ContentTypeProperties.Add(name, value, type) is needed\n\\\n**Enhancements **\n\\\n(CELLSNET-43368) - Customizing the generation of CSS while saving Excel to HTML\n(CELLSNET-43361) - Cannot retain the Cell\u0026amp;rsquo;s Number Format after ImportTwoDimensionArray\n(CELLSNET-43454) - Aspose.Pdf does not validate output PDF/A-1B\n(CELLSNET-43452) - PDFA1B compliance of the output PDF was not validated\n(CELLSNET-42646) - Workbook RefreshChartCache works with regional and language settings\n(CELLSNET-43408) - The whole workbook will have the text bold\n(CELLSNET-43357) - Excel found unreadable content after setting up password\n\\\n**Performance **\n\\\n(CELLSNET-43438) - Spreadsheet to HTML generates a 1GB HTML file\n(CELLSNET-43399) - Performance issue with CalculateFormula() method\n\\\n**Bugs **\n\\\n(CELLSNET-43460) - Background-color: rgba(0, 0, 0, 0); makes the background color black\n(CELLSNET-43403) - First column disappears when second Pivot\n(CELLSNET-43390) - Data in Static Pivot Tables is Re-arranged\n(CELLSNET-43369) - Pivot Tables always label first column as \u0026amp;lsquo;Row Labels\u0026amp;rsquo;\n(CELLSNET-43358) - Specifying the BaseItemPosition attribute produces an invalid file\n(CELLSNET-43354) - PivotTable calculation issue: cell value is truncated\n(CELLSNET-43337) - PivotTable.RefreshData corrupting content\n(CELLSNET-43331) - Excel file becomes corrupted after creating pivot table\n(CELLSNET-43328) - Position of images is wrong in the output PDF\n(CELLSNET-43322) - Buttons appeared in the PivotChart when the file is re-saved\n(CELLSNET-42919) - \u0026amp;ldquo;Excel found unreadable\u0026amp;hellip;\u0026amp;rdquo; error after refreshing Pivot Data\n(CELLSNET-43451) - Alignment issue while rendering the worksheet to image …","date":-62135596800,"description":"","objectID":"a499f044f4d6272978907854124b4560","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.4.0+release+notes/","title":"Aspose.Cells for .NET 8.4.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.4.1\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-42514) - Set SQL Data Connection\n(CELLSNET-43449) - Support to Print Comments at the End of Sheet\n(CELLSNET-43513) - Rich Text Feature for Chart\u0026amp;rsquo;s DataLabels\n\\\n**Bugs **\n\\\n(CELLSNET-43475) - Pivot Table\u0026amp;rsquo;s data view in HTML does not correlate\n(CELLSNET-43474) - Pivot Table does not refresh while rendering to HTML\n(CELLSNET-43473) - Report Filter selections change\n(CELLSNET-43450) - Incorrect rendering of HTML while converting spreadsheet to HTML\n(CELLSNET-43428) - pivot table cells in group headers have incorrect styles\n(CELLSNET-43422) - Removing the source sheet causes exception on save\n(CELLSNET-43417) - The sort order of PivotChart\u0026amp;rsquo;s series data points is wrong\n(CELLSNET-43413) - Wrong conversion from HTML file to PDF\n(CELLSNET-43340) - Re-saving the XLS spreadsheet makes the result corrupt\n(CELLSNET-43545) - Date is overlapping with text in the left footer in the rendered PDF file format\n(CELLSNET-43543) - Double cell border is not printing properly for the last cell\n(CELLSNET-43541) - Missing table header border when converting to PDF\n(CELLSNET-43516) - Aspose doesn\u0026amp;rsquo;t print empty page\n(CELLSNET-43508) - Spreadsheet to PDF generates a blank PDF\n(CELLSNET-43507) - Pixels deteriorated a bit for the image in the output PDF file\n(CELLSNET-43481) - Cells that had dates and/or numbers with Hebrew words\n(CELLSNET-43479) - The logo with indentation wrong\n(CELLSNET-43478) - Colon in the end of the last word in the first line broke off\n(CELLSNET-43477) - The spaces between the Hebrew words vanished mashing the sentence into one word\n(CELLSNET-43469) - Support RenderToSize API for Worksheet Image\n(CELLSNET-43526) - FillFormat.GradientColorType returns PresetColors\n(CELLSNET-43521) - API returns null for …","date":-62135596800,"description":"","objectID":"a2b053ba4f729b1bb2261ad3b1adff86","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.4.1+release+notes/","title":"Aspose.Cells for .NET 8.4.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.4.2\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43596) - Add new Module to Worksheet VbaProject\n(CELLSNET-43569) - Support of IFNA formula/function\n\\\n**Bugs **\n\\\n(CELLSNET-43581) - Text is moved out of banner when Excel file is converted to PDF\n(CELLSNET-43639) - Watermarks are not displayed correctly\n(CELLSNET-43645) - Unable to save embedded OLE-object from the XLSX to the HTML\n(CELLSNET-43613) - Custom font does not work with SheetRender\n(CELLSNET-43573) - Columns moved to next page when converting to PDF\n(CELLSNET-43571) - Incorrect page break in the generated PDF via Aspose.Cells\n(CELLSNET-43525) - SheetRender.ToImage generated image has text getting cutoff\n(CELLSNET-43591) - Incorrect Pie Chart\u0026amp;rsquo;s datalabel value\n(CELLSNET-43574) - Data labels\u0026amp;rsquo; text exceeds the chart area when converted to PDF\n(CELLSNET-43568) - Converting Chart to Image and inserting the image\n(CELLSNET-43502) - Major Grid lines disappear and series legend comes on center\n(CELLSNET-41716) - X-Axis labels are not properly displayed\n(CELLSNET-43641) - Issue with calculating formulas when enable Iterative calculation\n(CELLSNET-43637) - Incorrect formula results for PERCENTRANK function\n(CELLSNET-43630) - Issue with calculating LINEST formula/ function\n(CELLSNET-43628) - Spreadsheet disappears from view when Restore Window button is clicked\n(CELLSNET-43612) - System.ArgumentOutOfRangeException while loading a file saved by Aspose.Cells for Java\n(CELLSNET-43604) - ListObjects.DataRange does not update after deleting a row\n(CELLSNET-43603) - Cells.DeleteRows makes the spreadsheet corrupted\n(CELLSNET-43602) - Vlookup formula was not calculated correctly\n(CELLSNET-43590) - Xlsx file gets corrupt on opening and saving\n(CELLSNET-43589) - Cell.GetValidationValue not working for numeric list\n\\\n**Exceptions …","date":-62135596800,"description":"","objectID":"5f4ef96dced668be0ff545d69c9df05a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.4.2+release+notes/","title":"Aspose.Cells for .NET 8.4.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.5.0\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43640) - Cannot render the custom date format pattern g and ge.mm.dd\n(CELLSNET-43682) - ExportDataTableAsString function should export cell vaues as StringValueWithoutFormat\n(CELLSNET-41619) - Convert revision of XLSB to XLSM\n(CELLSNET-40366) - How to know if the license is registered\n\\\n**Performance **\n\\\n(CELLSNET-41836) - System.StackOverflowException occurred in Aspose.Cells.dll\n\\\n**Bugs **\n\\\n(CELLSNET-43702) - Spreadsheet corrupted after opening and saving the template XLSX file\n(CELLSNET-43669) - Adding more than 14 fields to Pivot Table\u0026amp;rsquo;s report filter causes error\n(CELLSNET-43667) - Incorrect formula value after calling Worksheet.CalculateFormula\n(CELLSNET-43584) - Chart labels are lost when converting to PDF\n(CELLSNET-43705) - Date format is different in output pdf\n(CELLSNET-43658) - Error in calculating cell exception occurs on calculating formula\n(CELLSNET-43329) - Calculate formula with SUMIF gives different result than Excel\n(CELLSNET-42598) - Problem in formula calculation\n(CELLSNET-43715) - Cell Pattern Fill - PDF conversion produces large files\n(CELLSNET-43694) - Text Alignment lost when spreadsheet is rendered to image\n(CELLSNET-43693) - Misplaced text while rendering spreadsheet to image\n(CELLSNET-43691) - Text is getting truncated at the bottom\n(CELLSNET-43690) - Text is getting truncated at the bottom while rendering worksheet to image\n(CELLSNET-43676) - Output PDF does not have correct number of Pages\n(CELLSNET-43672) - Bad image quality while rendering worksheet to PNG\n(CELLSNET-43661) - Text getting truncated while rendering spreadsheet to PDF\n(CELLSNET-43644) - Text does not render correctly\n(CELLSNET-43600) - Excel file is not properly rendered\n(CELLSNET-43593) - Text is above the line and other …","date":-62135596800,"description":"","objectID":"480a74134e288b0bfd1542c3c98d813b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.5.0+release+notes/","title":"Aspose.Cells for .NET 8.5.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.5.1\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43703) - ICustomFunction - returning a range instead of a single cell\n(CELLSNET-43777) - Cell.GetHeightOfValue() similar to Cell.GetWidthOfValue() needed\n\\\n**Bugs **\n\\\n(CELLSNET-43744) - PivotTable does not refresh when saving to PDF\n(CELLSNET-43735) - Pivot Table\u0026amp;rsquo;s Banded Rows option is lost\n(CELLSNET-43759) - Pivot Table doesn\u0026amp;rsquo;t keep sorting when combine\n(CELLSNET-43721) - Error message pops up after saving workbook\n(CELLSNET-43724) - Values are not correct when data changes\n(CELLSNET-43719) - Different value after CalculateFormula\n(CELLSNET-43713) - Workbook.CalculateFormula does not calculate correct values\n(CELLSNET-43708) - Calling the Worksheet.GetPrintingPageBreaks changes the TextBox width\n(CELLSNET-43695) - Cell.RemoveArrayFormula does not remove the array formula\n(CELLSNET-41874) - Excel syntax not supported for the formulas\n(CELLSNET-43753) - Aspose.Cells renders 2 pages\n(CELLSNET-43731) - Text is getting cutoff while rendering worksheet to EMF image\n(CELLSNET-43756) - Chart image doesn\u0026amp;rsquo;t contain the same values as the x axis from the excel chart\n(CELLSNET-43728) - Refreshing the PivotTable with new data changes the chart\u0026amp;rsquo;s color style\n(CELLSNET-43726) - Combining Workbooks change the Chart style\n(CELLSNET-43700) - Color of the picture looks differently after converting to PDF\n(CELLSNET-43199) - Contents and shapes are shifting when Excel is saved to PDF\n(CELLSNET-43767) - Excel shows Protected View on Aspose.Cells saved spreadsheet\n(CELLSNET-43762) - Cell.GetPrecedents() not returning correct worksheet name\n(CELLSNET-43761) - The background color of the conditionally formatted cells change\n(CELLSNET-43760) - Conditional format rules corrupted\n(CELLSNET-43742) - Inconsistent Workbook protection …","date":-62135596800,"description":"","objectID":"6257995d4fb510d070225ef867f78b9b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.5.1+release+notes/","title":"Aspose.Cells for .NET 8.5.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.5.2\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43758) - Render to Graphic Context\n\\\n**Bugs **\n\\\n(CELLSNET-43786) - The file is corrupted after refreshing PivotTable in the template file\n(CELLSNET-43594) - PivotField.IsRepeatItemLabels not working in the Pivot Table\n(CELLSNET-43367) - Issue with PivotTable.Format() to format the PivotField header\n(CELLSNET-41618) - Not displaying some pictures and shapes after converting Xls to Html\n(CELLSNET-43817) - CalculateFormula() never ends for some SUMIF Excel formulas\n(CELLSNET-43675) - Problem in calculating NORM.S.DIST function\n(CELLSNET-43741) - Number does not increase when Workbook.Settings.CreateCalcChain is set to true\n(CELLSNET-43818) - Aspose.Cells generates 2 pages while Excel Print Preview shows 1 page\n(CELLSNET-43780) - Wrong Executive paper size when converting to PDF\n(CELLSNET-43776) - Image is converted to black while converting spreadsheet to PdfA1b\n(CELLSNET-43769) - Cell contents are cropped at the top a bit in the output image\n(CELLSNET-43806) - The plot/curve isn\u0026amp;rsquo;t the same for the XY Scatter charts.\n(CELLSNET-43805) - Spreadsheet to PDF Conversion: Bold Style is Lost\n(CELLSNET-43804) - Spreadsheet to PDF Conversion: Contents in TextBox Renders with Indentation\n(CELLSNET-43779) - Chart to Image inconsistency for EMF file format\n(CELLSNET-43772) - The text in the drawing shape is not being wrapped correctly\n(CELLSNET-43771) - Picture has displaced after rendering the spreadsheet to PDF\n(CELLSNET-43748) - TextBox text is overlapped in Excel to PDF rendering\n(CELLSNET-43820) - Spreadsheet containing Slicers becomes corrupt after resaving\n(CELLSNET-43812) - Chart gets blank in the output excel file and does not show up in Excel 2013\n(CELLSNET-43810) - Error opening the saved XLSX file via Aspose.Cells APIs …","date":-62135596800,"description":"","objectID":"2f595c9a737c033e9d11ae7c3f85ff55","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.5.2+release+notes/","title":"Aspose.Cells for .NET 8.5.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.6.0\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43880) - Assign macro to form controls\n\\\n**Enhancements **\n\\\n(CELLSNET-43832) - Worksheet.Shapes.UpdateSelectedValue throwing CellsException sometimes\n(CELLSNET-43823) - Including a Font Directory with CellsHelper, doesn\u0026amp;rsquo;t seem to work\n(CELLSNET-43900) - Hyperlink.TextToDisplay is not updated\n(CELLSNET-43892) - XLSX document size increases with every save\n(CELLSNET-43869) - Aspose.Cells is not able to run in the Medium Trust\n\\\n**Bugs **\n\\\n(CELLSNET-43884) - Wingdings symbols do not render correctly while converting certain spreadsheet to HTML\n(CELLSNET-43877) - Excel always repairs the resultant spreadsheet after adding the PivotTable\n(CELLSNET-43831) - HTML to Excel - CSS Styling Ignored\n(CELLSNET-43750) - Chart changes in resultant spreadsheet after refreshing the Chart\n(CELLSNET-43843) - Workbook.CalculateFormula never returns\n(CELLSNET-43842) - Aspose.Cells Row Insertion Error\n(CELLSNET-43879) - characters overlapped and converted to ######## in Excel to PDF rendering\n(CELLSNET-43854) - Superscript and subscript shifted up too much when generating image\n(CELLSNET-42762) - Chart Axis labels are rendered in jagged text\n(CELLSNET-42384) - WordArt Boxes are balcked out when XLSX is converted to PDF\n(CELLSNET-42380) - SmartArt boxes are coming as black.\n(CELLSNET-42377) - SmartArt layout heading is overlapping with underline under Picture heading.\n(CELLSNET-41493) - Text is being truncated/wrapped in the generated PDF\n(CELLSNET-41398) - Spreadsheet document produces multiple documents when converted\n(CELLSNET-43894) - OLE link ObjectSourceFullName could not be updated\n(CELLSNET-43882) - PageSetup.Zoom has changed after opening and saving the workbook\n(CELLSNET-43881) - Some cell formulas are lost when row is copied …","date":-62135596800,"description":"","objectID":"e68baca0e9e6bc0600fbe0e3c0aa4d75","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.6.0+release+notes/","title":"Aspose.Cells for .NET 8.6.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.6.1\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43905) - Support to change the HTML hyperlink\u0026amp;rsquo;s target attribute to \u0026amp;ldquo;_blank\u0026amp;rdquo;\n(CELLSNET-43885) - Ability to retrieve the ConnectionString of ExternalConnection of type WebQuery\n(CELLSNET-43935) - Ignors hidden Column with ExportTableOptions.PlotVisibleColumns set to true\n(CELLSNET-43925) - Adding a reference to VBA macros in workbook\n\\\n**Enhancements **\n\\\n(CELLSNET-43933) - Cell.Formula can accept an invalid formula and API tries to correct it\n(CELLSNET-43476) - API needed to check whether license is loaded or not\n(CELLSNET-43310) - Renaming of duplicate worksheet names when combining workbooks\n(CELLSNET-42518) - Ability to access sub-objects via smart markers\n\\\n**Bugs **\n\\\n(CELLSNET-43946) - Cell.HtmlString returns a string that renders the normal string as subscript\n(CELLSNET-43941) - Chart is not generated correctly\n(CELLSNET-43936) - Shows legend keys even if Chart.ChartDataTable.ShowLegendKey is set to false\n(CELLSNET-43991) - Removing the worksheets corrupts the resultant XLSX\n(CELLSNET-43988) - Password to Modify is lost when XLSX is re-saved with Aspose.Cells\n(CELLSNET-43984) - Password to Modify converts to Password to Open when XLSM is re-saved\n(CELLSNET-43983) - Password to Modify converts to Password to Open when XLSX is re-saved\n(CELLSNET-43982) - Password to Modify converts to Password to Open when XLTM is re-saved\n(CELLSNET-43981) - Password to Modify is lost when XLTM is re-saved\n(CELLSNET-43980) - Password to Modify converts to Password to Open when XLTX is re-saved\n(CELLSNET-43979) - SetStyle font not applied for certain fonts\n(CELLSNET-43977) - Password to Modify is lost when XLTX is re-saved with Aspose.Cells\n(CELLSNET-43976) - Multiple tries to open password protected XLSX\n(CELLSNET-43973) - …","date":-62135596800,"description":"","objectID":"f1ef46c25176ad97cd47fd54288f203f","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.6.1+release+notes/","title":"Aspose.Cells for .NET 8.6.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.6.2\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43934) - Support smart markers to accept a generic List as a nested object\n\\\n**Bugs **\n\\\n(CELLSNET-44044) - PivotTable.ShowValuesRow has no effect after moving DataField to columns\n(CELLSNET-44043) - Opening and resaving large Excel file corrupts the document\n(CELLSNET-44031) - XLSB corrupted in Excel 2010 after saving in v8.6.1\n(CELLSNET-43990) - Misplaced AutoShape while rendering spreadsheet to PDF\n(CELLSNET-43989) - Space between the lines with in a Text Box is decreased\n(CELLSNET-43901) - PivotTable does not WrapText when refreshing\n(CELLSNET-43808) - PivotTable styling is lost when worksheets are copied to another workbook and rendered to PDF\n(CELLSNET-43786) - The file is corrupted after refreshing PivotTable in the template file\n(CELLSNET-43421) - Arrow does not render correctly while converting spreadsheet to PDF\n(CELLSNET-43391) - Issue with HTML rendering for a table with a hidden column\n(CELLSNET-44045) - Workbook.CalculateFormula methods gets stuck for indefinite time\n(CELLSNET-44051) - Conditional formatting icons missing from PDF\n(CELLSNET-44047) - Pages are zoomed out in the output PDF\n(CELLSNET-44025) - Border thickness is not preserved as per Print Area\n(CELLSNET-44002) - Image gets scaled because of some problem in the code\n(CELLSNET-43960) - Cannot read some password protected file\n(CELLSNET-44062) - Chart\u0026amp;rsquo;s legend entry is not removed when the data source column is hidden\n(CELLSNET-44026) - All leader lines are shown in the output image for a custom chart\n(CELLSNET-44020) - A few of the Data Labels are missing while exporting Chart to Image\n(CELLSNET-44010) - Chart CategoryAxis slanted TickLabel text cut off when converted to image\n(CELLSNET-44000) - DataLabel is missed while rendering the chart to image …","date":-62135596800,"description":"","objectID":"6ec2685db0b120a0551afef8d1c469e4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.6.2+release+notes/","title":"Aspose.Cells for .NET 8.6.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.6.3\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-44084) - Parse Html tags while importing data in bulk\n(CELLSNET-40889) - Load Option : Only open visible sheets\n\\\n**Enhancements **\n\\\n(CELLSNET-44133) - Support for Print Page Size Thermal 3x11\n(CELLSNET-44095) - Support reading/Writing External linked table.\n(CELLSNET-44093) - Obfuscated Exception thrown when loading invalid Workbook\n(CELLSNET-43425) - Cells.ImportGridView does not import Header Row\n(CELLSNET-41718) - Support for nested object collection in Smart Markers\n(CELLSNET-41482) - Support for DateTime when merging using Smart Markers\n\\\n**Performance **\n\\\n(CELLSNET-44096) - Workbook.CalculateFormula gets stuck in for indefinite time\n(CELLSNET-44102) - Performance lag while converting worksheet to EMF\n\\\n**Bugs **\n\\\n(CELLSNET-44092) - Problem reading Hyperlink.Address with Cyrillic characters\n(CELLSNET-44090) - Xlsb file with pivot table gets corrupted in v8.6.2\n(CELLSNET-44073) - Converting to HTML with HtmlHiddenColDisplayType.Remove creates empty Chart\n(CELLSNET-43917) - Text trimmed while converting the spreadsheet to HTML\n(CELLSNET-43914) - Text overflows the box while rendering the spreadsheet to PDF\n(CELLSNET-44111) - Hyperlink address containing Chinese characters are not properly converting\n(CELLSNET-44080) - Cells text shifted right slightly during conversion to pdf\n(CELLSNET-44125) - Save to PDF fails for an Excel document\n(CELLSNET-44117) - Incorrect conversion for the chart\u0026amp;rsquo;s title and legend\n(CELLSNET-44086) - Horizontal axis of chart inside pdf file is scaled wrong and reversed\n(CELLSNET-44079) - Some entries of the chart legend get missing while saving to pdf\n(CELLSNET-44046) - Chart.ToImage modifies labels alignment\n(CELLSNET-44134) - #VALUE! returned for SUMPRODUCT based on ListObject\n(CELLSNET-44132) …","date":-62135596800,"description":"","objectID":"868bcc25a8c340838eceefb1100682be","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/aspose.cells+for+.net+8.6.3+release+notes/","title":"Aspose.Cells for .NET 8.6.3 Release Notes"},{"content":" Aspose.Cells for .NET 8.6.3 Release Notes Aspose.Cells for .NET 8.6.2 Release Notes Aspose.Cells for .NET 8.6.1 Release Notes Aspose.Cells for .NET 8.6.0 Release Notes Aspose.Cells for .NET 8.5.2 Release Notes Aspose.Cells for .NET 8.5.1 Release Notes Aspose.Cells for .NET 8.5.0 Release Notes Aspose.Cells for .NET 8.4.2 Release Notes Aspose.Cells for .NET 8.4.1 Release Notes Aspose.Cells for .NET 8.4.0 Release Notes Aspose.Cells for .NET 8.3.2 Release Notes  ","date":-62135596800,"description":"","objectID":"3272e7b67b0fc713632b5cb5bdcc2cd1","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2015/","title":"Release Notes - 2015"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44374 Import xml map by defining an array of only some columns that are related to the xml map New Feature    CELLSNET-44701 API hides the row containing the DIV tag with style display:none Enhancement    CELLSNET-44700 API does not import the contents between the DIV tags having style display:block Enhancement    CELLSNET-44699 API does not import contents between the DIV tags of HTML Enhancement    CELLSNET-44304 PivotTable.GetCellByDisplayName returns null for anything over the 256th field Enhancement    CELLSNET-44808 Formula in Table or ListObject does not propagate with new rows Enhancement    CELLSNET-44719 Workbook.Worksheets.ExternalLinks does not return the same list Enhancement    CELLSNET-44721 Resultant spreadsheet cannot be loaded in MS Excel Bug    CELLSNET-44695 Load from HTML ignores bold style from style block Bug    CELLSNET-44779 Calculated value of cell D5 is wrong Bug    CELLSNET-44775 Excel To PDF Conversion - Number of pages increased in the output PDF file format  Bug    CELLSNET-44771 Loss of text while converting Excel to PDF  Bug    CELLSNET-44733 Hidden text due to less column width has rendered in image Bug    CELLSNET-44768 Chart title does not change dynamically Bug    CELLSNET-44763 Chart defined using hebrew language pack in MS Office is not exported correctly to image Bug    CELLSNET-44730 Justified list does not display properly in output PDF Bug    CELLSNET-44729 Numbered lists in Excel do not display properly when exporting to PDF Bug    CELLSNET-44720 Arc ends are square not round in the output PDF  Bug    CELLSNET-44715 API returns Pie Chart\u0026amp;rsquo;s Slice color as None Bug    CELLSNET-44804 Workbook having a hyperlink to another worksheet with name containing \u0026amp;lsquo;#\u0026amp;rsquo; character becomes corrupted Bug    CELLSNET-44791 Object positioning changes after simple load and save operation Bug    CELLSNET-44772 Issue with hyperlinks by adding …","date":-62135596800,"description":"","objectID":"2e885464a5a13f238a72939aab7eb2c8","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+16.10.0+release+notes/","title":"Aspose.Cells for .NET 16.10.0 Release Notes"},{"content":"   **Key ** **Summary ** **Category **     CELLSNET-44702 Support MINIF and MAXIF functions New Feature    CELLSNET-44864 Web links on spreadsheet are opened on the same page where GridWeb is loaded New Feature    CELLSNET-44810 UpdateLinkedDataSource() doesn\u0026amp;rsquo;t work when Workbook is loaded from stream  Enhancement    CELLSNET-44877 Deprecated .size() function used in acwmain.js Enhancement    CELLSNET-44801 Mimic MS Excel behavior when \u0026amp;ldquo;Enter\u0026amp;rdquo; key is pressed Enhancement    CELLSNET-44793 Set focus on the formula back when inserting a formula with wrong parameters (invalid formula) Enhancement    CELLSNET-44847 Performance issue with GetPivotData function Performance   CELLSNET-44832 Issue with SheetRender.PageCount that takes a long time to calculate worksheet pages Performance   CELLSNET-44861 Range.Copy() method freezes for big Excel ranges Performance   CELLSNET-44854 Spreadsheet becomes corrupted when Workbook names is appended to the Named Range Bug    CELLSNET-44852 RTL direction is changed to LTR while converting HTML to Excel Bug    CELLSNET-44846 PivotTable is losing filters after RefreshData call Bug    CELLSNET-44823 Pivot Table fails to refresh after changing data source to a Named Range Bug    CELLSNET-44814 Calling PivotTable.CalculateData() causes a crash when there is 1 data column Bug    CELLSNET-44799 Excel file is corrupt after opening and resaving it Bug    CELLSNET-44790 CSS style ignored for column widths, row heights and word wrap, etc. (HTML to Excel)  Bug    CELLSNET-44786 Issue with font-weight and text-align in TD and TH cells Bug    CELLSNET-44448 PivotTable contents are not showing correctly in the output PDF  Bug    CELLSNET-44892 Culture settings for Workbook does not take effect for Chart DataLabels using Chart.ToImage Bug    CELLSNET-44809 SUMPRODUCT function with external ranges results in \u0026amp;lsquo;#REF!\u0026amp;rsquo; error Bug    CELLSNET-44818 Long values in cell renders as \u0026amp;lsquo;#\u0026amp;rsquo; string while converting …","date":-62135596800,"description":"","objectID":"120af4ae2154138268b7d3a5802206e2","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+16.11.0+release+notes/","title":"Aspose.Cells for .NET 16.11.0 Release Notes"},{"content":"   Key Summary Category     CELLSNET-41702 Load specific worksheets in the Workbook (for MS Excel 2007/2010) New Feature    CELLSNET-44943 Support OTS file format  New Feature    CELLSNET-44862 Expand/Collapse grouped rows/columns (Aspose.Cells.GridWeb) New Feature    CELLSNET-44965 Date values prior to 2000 are incorrectly parsed Enhancement    CELLSNET-44954 Fraction formatting gave incorrect formatted result Enhancement    CELLSNET-44944 Make the font substitution mechanism as per .NET\u0026amp;rsquo;s default behaviour Enhancement    CELLSNET-44935 API is not able to locate default fonts in Linux under Mono Enhancement    CELLSNET-44899 Low performance while calculating the formulas for second time Performance   CELLSNET-44967 Performance considerations for NameCollection.Remove method Performance   CELLSNET-44964 Aspose.Cells is hanging when CalculateFormula() is used on Workbook. Performance   CELLSNET-44819 Unable to save source Excel file into HTML and it gets time out Performance   CELLSNET-44960 Pivot Table formatting is lost while converting spreadsheet to PDF file format  Bug    CELLSNET-44951 Row data is misplaced while rendering spreadsheet to PDF after refreshing Pivot Table Bug    CELLSNET-44950 Cell shading is missing while rendering spreadsheet to PDF after refreshing Pivot Table Bug    CELLSNET-44949 Blank columns are missing while rendering spreadsheet to PDF after refreshing Pivot Table Bug    CELLSNET-44930 Column is missing in Pivot Table after refreshing and conversion to PDF Bug    CELLSNET-44929 Data is missing in Pivot Table after refreshing and conversion to PDF Bug    CELLSNET-44908 Spreadsheet containing slicers gets corrupted after simple resave operation Bug    CELLSNET-44206 Calling RefreshData on pivot table corrupts resultant spreadsheet Bug    CELLSNET-44184 Refreshing pivot tables and charts generate corrupt XLSX file Bug    CELLSNET-44974 Cell shading is messed up while refreshing the Pivot Table and rendering to PDF Bug …","date":-62135596800,"description":"","objectID":"acbaf5e6490616d6250b39943f77344c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+16.12.0+release+notes/","title":"Aspose.Cells for .NET 16.12.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 8.7.0\nThe following is a list of improvements and changes in this release of Aspose.Cells\n\\\n\\1) Aspose.Cells\n\\\n**Other Improvements and Changes **\n\\\n**New Features **\n\\\n(CELLSNET-43938) - Support exporting VBA certificate to file or stream\n(CELLSNET-43920) - Support an API to check if VBAcode is signed\n(CELLSNET-43867) - Digitally sign VBA projects/macros\n(CELLSNET-44150) - Ability to work with XML Maps\n(CELLSNET-43992) - Support XML Mapping Import functionality as it is done from Excel Developer tab\n\\\n**Enhancements **\n\\\n(CELLSNET-43878) - VBA digital sign is lost during conversion (XLSM to XLS)\n(CELLSNET-43160) - VBA Project loses digital signature when saving xls as xlsm file format\n(CELLSNET-44169) - Validation.Value1 array order is different to what is shown in Excel\n(CELLSNET-44168) - Unable to create 2-Color Scale conditional formatting\n(CELLSNET-44167) - Support ISOWEEKNUM MS Excel 2013 function\n(CELLSNET-44166) - VBA digital sign is lost during conversion (XLSB to XLSM)\n\\\n**Performance **\n\\\n(CELLSNET-44156) - Console application crashes on Workbook.CalculateFormula\n(CELLSNET-44120) - Workbook.CalculateFormula takes more time to calculate the formulas in the Workbook.\n(CELLSNET-43896) - Process terminated when calling Workbook.CalculateFormula\n\\\n**Bugs **\n\\\n(CELLSNET-44164) - Incomplete HTML structure when saving to a stream\n(CELLSNET-44147) - Refreshing pivot table generates corrupt excel file\n(CELLSNET-44022) - Workbook.Copy does not preserve formatting for pivot tables\n(CELLSNET-44139) - Different values for the same cell before and after calling CalculateFormula() method\n(CELLSNET-44135) - Excel file is not properly (fully) calculated (regarding Charts) prior to PDF generation\n(CELLSNET-44138) - Cell shading overlaps the border causing the border thinning\n(CELLSNET-44136) - Excel shows one page in print preview where Aspose.Cells render to PDF pages\n(CELLSNET-44122) - Images in the sheets are not …","date":-62135596800,"description":"","objectID":"0e7a5323c8469c5f03f603fc0935fced","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.7.0+release+notes/","title":"Aspose.Cells for .NET 8.7.0 Release Notes"},{"content":"Other Improvements and Changes\n   **Key ** **Summary ** **Category **     CELLSNET-44154 Support reading/Writing query table. New Feature   CELLSNET-43616 Support Array formula involving \u0026amp;ldquo;TABLE\u0026amp;rdquo; function. New Feature   CELLSNET-44195 File is opened in Protected View after conversion to XLS file format Enhancement   CELLSNET-44182 Cells find with custom formatting works in older version but not in newer version Enhancement   CELLSNET-44187 Cell values are incorrectly replaced with # when converted to HTML Bug   CELLSNET-44161 Aspose.Cells generated XLSX causes Excel 2007 to repair the spreadsheet Bug   CELLSNET-44063 Pivot table loses header\u0026amp;rsquo;s order after working with input file Bug   CELLSNET-44215 Save to pdf showing extraneous data to the right of the table Bug   CELLSNET-44201 Issue regarding unsupported chars indices in CHAR formula Bug   CELLSNET-44193 Slanted cell shading is not correctly rendering to PDF Bug   CELLSNET-44213 Saving Picture from Worksheet results in slightly different image Bug   CELLSNET-44192 Category labels at the top of the chart are right aligned instead of left aligned Bug   CELLSNET-44240 Issue with renaming a named range Bug   CELLSNET-44239 Cell.ContainsExternalLink return true if formula is =WEEKNUM Bug   CELLSNET-44231 Resaving the spreadsheet corrupts the result Bug   CELLSNET-44222 Workbook with macros gets corrupted with version 8.7.0 Bug   CELLSNET-44220 Setting the WorkbookSettings.Password property corruptes the resultant spreadsheet Bug   CELLSNET-44218 Re-saving the XLSX renames the xl\\embeddings\\oleObject1.bin file Bug   CELLSNET-44214 Copy Range does not keep ListObject settings Bug   CELLSNET-44203 Formula referencing is different across 8.6.2 \u0026amp;amp; 8.7.0 for Worksheet.Copy operation Bug   CELLSNET-44241 System.IndexOutOfRangeException at Cells.ImportData Exception   CELLSNET-44226 System.ArgumentException at Workbook.Save while saving in ODS format Exception   CELLSNET-44225 Exception: \u0026amp;ldquo;Invalid …","date":-62135596800,"description":"","objectID":"8e31b82d46f554d50481d723de8efaf0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.7.1+release+notes/","title":"Aspose.Cells for .NET 8.7.1 Release Notes"},{"content":"Other Improvements and Changes\n   **Key ** **Summary ** **Category **     CELLSNET-44242 Support and usage of CustomXmlParts New Feature   CELLSNET-44313 Get number of rows after applying the filter on GridWeb New Feature   CELLSNET-44307 Detecting encryption on an ODS file does not work Enhancement   CELLSNET-44301 Choose TextBox in terms of name instead of index Enhancement   CELLSNET-44260 Setting the OleObject.ImageData for existing OleObjects in the Workbook Enhancement   CELLSNET-44027 Support IE10 and IE11 in GridWeb Enhancement   CELLSNET-44305 Workbook constructor hangs on loading file Performance   CELLSNET-44262 SVG chart image is wrong produced by Aspose.Cells generated excel file Bug   CELLSNET-44221 File is getting corrupted after getting opened and refreshed Bug   CELLSNET-44075 Drawing shapes are not rendering fine - Excel to PDF conversion Bug   CELLSNET-44208 Text in the TextBox is mirrored while rendering spreadsheet to PDF Bug   CELLSNET-44298 ICustomFunction tries to resolve HYPERLINK as custom function in place of the native excel function Bug   CELLSNET-44268 Issue with Cells.DeleteRange regarding Image which is not moving upwards Bug   CELLSNET-44256 Issue with calculating formula by Aspose.Cells formula calculation engine Bug   CELLSNET-44244 Text formatting fails after CalculateFormula Bug   CELLSNET-44295 Issue with barcode image quality when converting the worksheet directly to a monochrome Bug   CELLSNET-44278 Range exported as image by Aspose.Cells APIs has text overlapping borders Bug   CELLSNET-44251 Different cells spacing when exporting to pdf Bug   CELLSNET-44257 X-Axis and gradient line is wrong when chart is saved in png Bug   CELLSNET-44246 High memory usage while converting to PDF format Bug   CELLSNET-44229 DataLabel\u0026amp;rsquo;s fill format change from Solid Fill to No Fill after re-saving the spreadsheet with Chart Bug   CELLSNET-44228 DataLabel\u0026amp;rsquo;s font change from Calibri to Arial after re-saving the spreadsheet with Chart …","date":-62135596800,"description":"","objectID":"6af177d3214e19e13ae05915b5364a1b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.7.2+release+notes/","title":"Aspose.Cells for .NET 8.7.2 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44376 Provide the ability to prohibit the conversion of long numeric values to exponential notation while importing from HTML New Feature   CELLSNET-44360 Detecting leading single quote mark in the cell New Feature   CELLSNET-44356 Get target or output cell address for an ExternalConnection New Feature   CELLSNET-44340 Support for localization (German) of client side validation New Feature   CELLSNET-44345 Formula for WordArt does not react to argument change while converting XLS to XLSB Enhancement   CELLSNET-44342 Process seems to hang with 100% CPU usage for converting single page spreadsheet to PDF Performance   CELLSNET-44324 XLSM becomes corrupted after re-populating the data and refreshing the Pivot Table Bug   CELLSNET-44312 Line breaks are lost while importing HTML and exporting to spreadsheet Bug   CELLSNET-44311 Borders are lost while importing HTML and exporting to spreadsheet Bug   CELLSNET-44286 Sample1.xlsx is getting corrupted after getting opened and refreshed Bug   CELLSNET-44375 Incorrect encoding with the target (CSV) file Bug   CELLSNET-44368 Million number formatting issue while converting Excel to PDF  Bug   CELLSNET-44347 API renders two PDF pages for one worksheet regardless of setting OnePagePerSheet to true Bug   CELLSNET-44335 Text is getting trimmed while rendering spreadsheet Bug   CELLSNET-44382 Chart is not generated correctly in the output Excel file Bug   CELLSNET-44373 Alignment issue with bulleted list (shape) in the rendered image Bug   CELLSNET-44337 Style of the bulleted list (shape) is different in the output image Bug   CELLSNET-44300 Part of X-axis labels is getting rendered in horizontal orientation while converting chart to image Bug   CELLSNET-44372 Excel file with embedded documents gets corrupt on saving Bug   CELLSNET-44369 #Ref! after copying cells containing references to named cells from one workbook to another Bug   CELLSNET-44359 Removing the …","date":-62135596800,"description":"","objectID":"aca7b38de2f5bb5e03a9b4f59ee315b8","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.8.0+release+notes/","title":"Aspose.Cells for .NET 8.8.0 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-41817 Setting text effect to Offset in Rectangle Shape New Feature    CELLSNET-44407 Border thickness is reduced while rendering when Print Area passes through the cells sharing the border Enhancement    CELLSNET-44413 Make the default value of WorkbookSettings.IsDefaultEncrypted as false Enhancement    CELLSNET-44392 Aspose.Cells.xml is missing in the \u0026amp;ldquo;.\\Bin\\net4.0\u0026amp;rdquo; folder Enhancement    CELLSNET-44291 Optimize the code to make hidden empty columns and rows more efficient Enhancement    CELLSNET-44417 API hangs while converting a corrupted \u0026amp;amp; infected spreadsheet to PDF Performance   CELLSNET-44088 Icons for the conditional formatting rules do not render to HTML Bug    CELLSNET-44263 Formatting is lost while importing HTML as XLSX Bug    CELLSNET-44427 ISO 8601 format dates are being treated as strings instead of dates Bug    CELLSNET-44414 Problem with large images during conversion from Excel to PDF Bug    CELLSNET-44341 Wrong row heights using AutoFitRows with AutoFitMergedCells option on for Chinese and English words in the cells Bug    CELLSNET-44309 Parenthesis not shown rotated in the output PDF (Excel to PDF conversion) Bug    CELLSNET-44302 SheetRender.ToImage not rendering cells border Bug    CELLSNET-43237 Vertical Symbols are not rendered correctly when converting spreadsheets to PDF Bug    CELLSNET-41907 Some of vertical text still cannot be shown properly in the converted PDF file Bug    CELLSNET-44405 Chart image has the \u0026amp;ldquo;Your Organization\u0026amp;rdquo; series at 0% even though it is set to 50% Bug    CELLSNET-44404 Worksheet.Copy method is not copying charts correctly Bug    CELLSNET-44398 EMF rendering of chart does not work properly in newer version Bug    CELLSNET-44397 Chart to Image rendering - Text (Data Labels) is more bold than in the original chart Bug    CELLSNET-44387 Image generated using Chart.ToImage is incorrect Bug    CELLSNET-44365 Part of data series …","date":-62135596800,"description":"","objectID":"329e723cbddc676c61b2b4ee82f7a001","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.8.1+release+notes/","title":"Aspose.Cells for .NET 8.8.1 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44314 How to render Unicode Supplementary characters New Feature    CELLSNET-41817 Setting text effect to Offset in Rectangle Shape Enhancement   CELLSNET-41454 Aspose.Cells incorrectly determines some file formats Enhancement    CELLSNET-44476 Text Direction is ignored when saving as HTML file format Bug    CELLSNET-44457 The bottom borders in the table are lost when converting to HTML file Bug    CELLSNET-44446 All CSS styles are not prefixed when saving as HTML Bug    CELLSNET-44444 Opening and saving file containing Pivot Table result in corrupt spreadsheet Bug    CELLSNET-44443 Pivot Chart to PDF - Secondary y-axis messed up Bug    CELLSNET-44450 Picture rotation is not correct in the resultant PDF Bug    CELLSNET-44303 SheetRender.ToImage not rendering graph\u0026amp;rsquo;s data label(s) correctly Bug    CELLSNET-44478 Zoom level changes after opening and rewriting Excel file Bug    CELLSNET-44477 List Object names conflict on worksheet copy Bug    CELLSNET-44472 CustomXmlParts do not work properly for XLS file Bug    CELLSNET-44466 Cannot show the images correctly after exporting HTML to Excel  Bug    CELLSNET-44465 Charts are removed when deleting blank rows / columns Bug    CELLSNET-44463 Black text in TextBox renders white in the PDF Bug    CELLSNET-44456 Bold style in destination file got lost after Range.CopyData() call Bug    CELLSNET-44453 ExternalLink.IsReferred Property is not working as expected Bug    CELLSNET-44445 CopyStyle (Smart Markers) not working on all merged cells Bug    CELLSNET-44263 Formatting is lost while importing HTML as XLSX Bug    CELLSNET-44439 NullReferenceException at PivotField.IsAscendSort Exception    CELLSNET-44430 Error occurs while performing complex calculations Exception    2) Aspose.Cells Grid Suite         **Key ** **Summary ** **Category **     CELLSNET-44441 When row is selected in newer version, it also selects the first cell of the next row Bug    Public …","date":-62135596800,"description":"","objectID":"d4fa78dbae1683daf856117a470c95e9","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.8.2+release+notes/","title":"Aspose.Cells for .NET 8.8.2 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44175 Support refreshing and calculating Pivot Tables with calculated items New Feature    CELLSNET-44535 Publicise the relevant APIs for adding/manipulating ActiveX controls including Toggle Button New Feature    CELLSNET-44482 Provide an option to save the spreadsheet with Protected View New Feature    CELLSNET-44385 Change character spacing in Excel Textbox New Feature    CELLSNET-41013 Support for \u0026amp;ldquo;WithoutChart\u0026amp;rdquo; loading option New Feature    CELLSNET-44502 Support gridlines for Excel to HTML conversion  Enhancement    CELLSNET-44525 Support decimal value returned by implementation of ICustomFunction and CalculationData.CalculatedValue Enhancement    CELLSNET-44492 Print quality of the simulated bold font is not good Enhancement    CELLSNET-44530 Add Comment Property to ListObject/Table Enhancement    CELLSNET-44523 Using Array Formulas in Smart Markers Enhancement    CELLSNET-44509 ImportDataTable with insertRows=true replaces first row with blank line Enhancement    CELLSNET-44480 Apply table style to rich text settings  Enhancement    CELLSNET-44512 Performance problem in Cells.CopyRows() method Performance   CELLSNET-44514 Problem with PivotItem.IsHidden when refreshing data Bug    CELLSNET-44513 Export Html to Excel - the text \u0026amp;ldquo;!A1\u0026amp;rdquo; added to the end of link Bug    CELLSNET-44500 File becomes corrupted after Pivot Table refreshes and copies workbook Bug    CELLSNET-44470 Cell shading is not applied uniformly while converting spreadsheet to HTML Bug    CELLSNET-44467 Cannot export all HTML content to Excel when the HTML has nested \u0026amp;lsquo;div\u0026amp;rsquo; elements  Bug    CELLSNET-44490 Issue with Custom time format Bug    CELLSNET-44201 Issue regarding unsupported chars indices in CHAR formula Bug    CELLSNET-44521 Conversion to PDF results in 2 PDF pages as opposed to Excel\u0026amp;rsquo;s print preview Bug    CELLSNET-44489 Excel to PDF Conversion - Justified character lost with …","date":-62135596800,"description":"","objectID":"aab65bd9357a2ad0706d2cea468eed62","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.8.3+release+notes/","title":"Aspose.Cells for .NET 8.8.3 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44574 Support expanding text from right to left when exporting file to HTML  New Feature    CELLSNET-44561 Ability to set Default Font while rendering spreadsheet to HTML New Feature    CELLSNET-44562 Ability to set Default Font while rendering spreadsheet to images New Feature    CELLSNET-44552 Refreshing Pivot Table throws exception Bug    CELLSNET-44542 Excel file is not properly rendering into HTML file format Bug    CELLSNET-44541 Contents overlap while converting spreadsheet to HTML Bug    CELLSNET-44520 Pivot Field\u0026amp;rsquo;s dropdown is missing after re-saving XLSX as XLSB Bug    CELLSNET-44518 Spreadsheet becomes corrupted after re-saving XLSX as XLSB Bug    CELLSNET-44501 Refreshing and Calculating Data on existing Pivot Table generates corrupt Excel file Bug    CELLSNET-44447 Chart.ToImage is generating incorrect image Bug    CELLSNET-43656 Some text items are slightly truncated in the output HTML Bug    CELLSNET-44590 Problem exporting Excel to PDF with special characters in the header and footer Bug    CELLSNET-44517 Vertical alignment wrong when generating range to image using SheetRender.ToImage Bug    CELLSNET-44589 Aspose.Cells generated EMF shows incorrect axis labels when inserted into Word document and converted to PDF Bug    CELLSNET-44586 Less than single spacing doesn\u0026amp;rsquo;t export to PDF properly Bug    CELLSNET-44564 Chart\u0026amp;rsquo;s EMF generated under Session 0 does not display all the contents Bug    CELLSNET-44559 Chart.HasAxis is showing wrong value Bug    CELLSNET-44538 Empty PNG 0KB file generated while converting XLSX to HTML Bug    CELLSNET-44591 Cells.ClearContents removes the formula for the cells below the specified range Bug    CELLSNET-44577 Issue with Worksheet.Copy() - All comments after IV column are missing in the copied sheet Bug    CELLSNET-44573 Pictures in worksheets copied from an external XLSX are not sized the same as originals Bug    CELLSNET-44571 …","date":-62135596800,"description":"","objectID":"cf5f8fc5200a5ce0f944a7e3a27cdda3","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.9.0+release+notes/","title":"Aspose.Cells for .NET 8.9.0 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44274 Support TTE font type while rendering spreadsheets to PDF New Feature    CELLSNET-42277 Use private characters in PDF rendering Enhancement    CELLSNET-44630 Numbers formatting (DateTime) lost when importing data from DataGrid (.NET) Enhancement    CELLSNET-44626 Chart copied with CopyRows still reference the source worksheet in Chart Data Range Enhancement    CELLSNET-44619 Convert Date String to Date Format Enhancement    CELLSNET-44625 Colspan as 2 increases the HTML loading and conversion time drastically Performance   CELLSNET-44338 Performance degradation while rendering spreadsheets to PDF Performance   CELLSNET-44610 Bold attribute is lost while converting HTML to XLSX Bug    CELLSNET-44609 Direction of contents is changed while converting HTML to XLSX Bug    CELLSNET-44608 Borders are missing while converting HTML to XLSX Bug    CELLSNET-44607 Cell shading is missing while converting HTML to XLSX Bug    CELLSNET-44606 Contents are missing while converting HTML to XLSX Bug    CELLSNET-44605 Improper conversion of HTML to XLSX Bug    CELLSNET-44579 MHTML to XLS/XLSX is coming back as blank document Bug    CELLSNET-44572 Issue with hyperlinks referencing a worksheet in the same document Bug    CELLSNET-44617 SumProduct formula is not calculated correctly Bug    CELLSNET-44604 Missed text after XLS to Pdf/A conversion Bug    CELLSNET-44603 Vertical alignment issue with cell content touching the top border while rendering spreadsheets to PDF Bug    CELLSNET-44602 Horizontal alignment issue with values preceded by $ sign while rendering spreadsheets to PDF Bug    CELLSNET-42715 Lost fonts in the PDF  Bug    CELLSNET-44637 Result of CalculateTextSize is always the default height if text in a TextBox contains new lines Bug    CELLSNET-44635 Chart is not correct in the sample2.xlsx (Excel to PDF conversion) Bug    CELLSNET-44634 Data Tables are not correct in the sample2.xlsx (Excel to PDF …","date":-62135596800,"description":"","objectID":"bd6c14ce8bb17741a1ad528da9410a61","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.9.1+release+notes/","title":"Aspose.Cells for .NET 8.9.1 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-44274 Support TTE font type while rendering spreadsheets to PDF New Feature    CELLSNET-42277 Use private characters in PDF rendering Enhancement    CELLSNET-44630 Numbers formatting (DateTime) lost when importing data from DataGrid (.NET) Enhancement    CELLSNET-44626 Chart copied with CopyRows still reference the source worksheet in Chart Data Range Enhancement    CELLSNET-44619 Convert Date String to Date Format Enhancement    CELLSNET-44625 Colspan as 2 increases the HTML loading and conversion time drastically Performance   CELLSNET-44338 Performance degradation while rendering spreadsheets to PDF Performance   CELLSNET-44610 Bold attribute is lost while converting HTML to XLSX Bug    CELLSNET-44609 Direction of contents is changed while converting HTML to XLSX Bug    CELLSNET-44608 Borders are missing while converting HTML to XLSX Bug    CELLSNET-44607 Cell shading is missing while converting HTML to XLSX Bug    CELLSNET-44606 Contents are missing while converting HTML to XLSX Bug    CELLSNET-44605 Improper conversion of HTML to XLSX Bug    CELLSNET-44579 MHTML to XLS/XLSX is coming back as blank document Bug    CELLSNET-44572 Issue with hyperlinks referencing a worksheet in the same document Bug    CELLSNET-44617 SumProduct formula is not calculated correctly Bug    CELLSNET-44604 Missed text after XLS to Pdf/A conversion Bug    CELLSNET-44603 Vertical alignment issue with cell content touching the top border while rendering spreadsheets to PDF Bug    CELLSNET-44602 Horizontal alignment issue with values preceded by $ sign while rendering spreadsheets to PDF Bug    CELLSNET-42715 Lost fonts in the PDF  Bug    CELLSNET-44637 Result of CalculateTextSize is always the default height if text in a TextBox contains new lines Bug    CELLSNET-44635 Chart is not correct in the sample2.xlsx (Excel to PDF conversion) Bug    CELLSNET-44634 Data Tables are not correct in the sample2.xlsx (Excel to PDF …","date":-62135596800,"description":"","objectID":"d2aabcceb471d60abad7d7aa8aa8b47b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+8.9.2+release+notes/","title":"Aspose.Cells for .NET 8.9.2 Release Notes"},{"content":"1) Aspose.Cells\n   **Key ** **Summary ** **Category **     CELLSNET-40617 Read/write values from/to ActiveX ComboBox control New Feature    CELLSNET-41264 Using Aspose.Cells.GridDesktop in WPF application  New Feature    CELLSNET-44681 Import of HTML fails when script tag uses CDATA Enhancement    CELLSNET-44693 Contents are missing while converting HTML to XLSX Bug    CELLSNET-44650 Unable to convert background or foreground colors from HTML  Bug    CELLSNET-44645 Error message is shown when double-clicking on any value of the PivotTable in the output file Bug    CELLSNET-44644 The resultant file becomes corrupted when open and save the XLS file Bug    CELLSNET-44622 Final XLSX file has a lack of the caption styles while these are present in the input XLSX and intermediate HTML Bug    CELLSNET-44581 Issue with Spreadsheet to HTML conversion: STYLE tag between BODY and HTML tags Bug    CELLSNET-44718 ICustomFunction doesn\u0026amp;rsquo;t work with [@columnName] Bug    CELLSNET-44705 Wrong SUM displayed when calculating formulas Bug    CELLSNET-44692 API incorrectly calculates the formula value as compared to MS Excel Bug    CELLSNET-44688 Wrong calculation of the cell value Bug    CELLSNET-44684 Wrong value from cell when calculating formulas Bug    CELLSNET-44716 PDF result does not match with Excel for printing title rows Bug    CELLSNET-44713 The data is hidden in the conversion result of PDF Bug   CELLSNET-44675 Rendering to image file fails for a worksheet Bug    CELLSNET-44717 Spreadsheet to XPS: Process never completes and takes too much memory Bug    CELLSNET-44678 Sparklines are not rendered right while rendering spreadsheet to PDF/image Bug    CELLSNET-44654 Chart.Calculate() method spoils the chart image Bug    CELLSNET-44714 Saving to memorystream (SpreadsheetML), the process is hanged and takes lots of time Bug    CELLSNET-44711 Unhiding the row hidden by Aspose.Cells does not work properly in Microsoft Excel Bug    CELLSNET-44709 Picture formula is gone after …","date":-62135596800,"description":"","objectID":"4ad96a31123e1f996c8b9c15bf625292","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/aspose.cells+for+.net+9.0.0+release+notes/","title":"Aspose.Cells for .NET 9.0.0 Release Notes"},{"content":" Aspose.Cells for .NET 16.12.0 Release Notes Aspose.Cells for .NET 16.11.0 Release Notes Aspose.Cells for .NET 16.10.0 Release Notes Aspose.Cells for .NET 9.0.0 Release Notes Aspose.Cells for .NET 8.9.2 Release Notes Aspose.Cells for .NET 8.9.1 Release Notes Aspose.Cells for .NET 8.9.0 Release Notes Aspose.Cells for .NET 8.8.3 Release Notes Aspose.Cells for .NET 8.8.2 Release Notes Aspose.Cells for .NET 8.8.1 Release Notes Aspose.Cells for .NET 8.8.0 Release Notes Aspose.Cells for .NET 8.7.2 Release Notes Aspose.Cells for .NET 8.7.1 Release Notes Aspose.Cells for .NET 8.7.0 Release Notes  ","date":-62135596800,"description":"","objectID":"39fee3e14154f2b6683c99f7c87dd92f","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2016/","title":"Release Notes - 2016"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.02.0.\n   Key Summary Category     CELLSNET-45049 Trim blank rows and columns while exporting spreadsheets to CSV format New Feature    CELLSNET-45069 Bind Worksheet to a Customized Collection object (Aspose.Cells.GridWeb) New Feature    CELLSNET-44787 SortRange doesn\u0026amp;rsquo;t have undo/redo feature (Aspose.Cells.GridDesktop)  New Feature    CELLSNET-44746 Aspose.Cells.GridDesktop: Issue with Undo/Redo function when performing Cut/Copy/Paste New Feature    CELLSNET-44230 Split Panes feature for Aspose.Cells.GridDesktop New Feature    CELLSNET-44416 Auto-rename duplicate column names while exporting data to DataTable New Feature    CELLSNET-44363 Utility method to retrieve all the fonts names in a workbook New Feature    CELLSNET-42687 Get a list of Fonts used in a Spreadsheet New Feature    CELLSNET-45048 The resultant PDF file is not PDFA1B compliant  Enhancement    CELLSNET-45099 Waterfall and TreeMap charts, Series.getValues() should show values as display Enhancement    CELLSNET-45026 CalculateFormula() method takes too long to return Performance   CELLSNET-45071 CellsException: Out of memory, while converting Workbook to TIFF Performance   CELLSNET-45067 Conversion to PDF takes too long Performance   CELLSNET-45105 Loading HTML fails when CultureInfo is French Bug    CELLSNET-45089 HTML to Excel: Excel file is corrupt Bug    CELLSNET-45072 WordArt from the XLS do not render in HTML Bug    CELLSNET-45053 Certain HTML tags are not taken into account and some contents are missing Bug    CELLSNET-45039 Mixed style rule does not take into account when rendering the HTML to Excel Bug    CELLSNET-45036 Contents after a tag are trimmed while importing HTML and converting to XLSX Bug    CELLSNET-45035 Entire cell contents become bold when part of it is in between STRONG tags Bug    CELLSNET-45033 Cell contents are trimmed while importing HTML Bug    CELLSNET-44336 Unable to convert Html to XLSX properly Bug …","date":-62135596800,"description":"","objectID":"c26700c5794e63784116a50f831197b7","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.02.0+release+notes/","title":"Aspose.Cells for .NET 17.02.0 Release Notes"},{"content":"   Key Summary Category     CELLSNET-44747 MS Excel 2016 XLSX file containing Waterfall chart cannot be opened via Aspose.Cells APIs New Feature    CELLSNET-44940 Bind Worksheet to a Customized Collection object (Aspose.Cells.GridWeb) New Feature    CELLSNET-44939 Bind Worksheet to a DataSet object at Run Time (Aspose.Cells.GridWeb) New Feature    CELLSNET-44597 Output Excel file is not good when converting an HTML file to Excel file format Enhancement    CELLSNET-44994 Issue with Date format in German locale when rendering an Excel file to PDF Enhancement    CELLSNET-44986 Representation of double numbers in Aspose.Cells Enhancement    CELLSNET-45023 PivotTable.RefreshData takes a lot of time Performance   CELLSNET-45012 Performance of GETPIVOTDATA Performance   CELLSNET-45009 Formulas with GETPIVOTDATA are not being recalculated in the output file Bug    CELLSNET-45000 Some CSS rules ignored when importing HTML Bug    CELLSNET-44993 Images in table has incorrect position Bug    CELLSNET-44990 Content color has been changed Bug    CELLSNET-44989 Content style has been changed Bug    CELLSNET-44987 Contents have been displaced Bug    CELLSNET-44982 Issue with overriding default styling of TH elements Bug    CELLSNET-44980 Column position has been changed while refreshing the Pivot Table Bug    CELLSNET-44968 Merged cells in XLSX are not displayed as merged in HTML  Bug    CELLSNET-44962 Horizontal and vertical lines are missing in Pivot Table after converting spreadsheet to PDF Bug    CELLSNET-44997 LoadOptions.LoadFilter is not working expectedly Bug    CELLSNET-44991 YIELD function result inaccurate when CalculateFormula() method is called Bug    CELLSNET-44978 Calculating formula returns different results than MS Excel Bug    CELLSNET-45019 Image rendered incorrectly when a cell has Egyptian pound symbol Bug    CELLSNET-43815 WordArt objects become mere dots in the output PDF Bug    CELLSNET-44976 Area chart is slanted at the end in PDF output unlike MS Excel …","date":-62135596800,"description":"","objectID":"2a875b28f007a4f9c6d8c4380fc2df62","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.1.0+release+notes/","title":"Aspose.Cells for .NET 17.1.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.10.\n   Key Summary Category     CELLSNET-45695 Set number format for cells in Chart\u0026amp;rsquo;s Data Table New Feature    CELLSNET-45666 Get SheetId field of Excel worksheet New Feature    CELLSNET-45664 Reading and writing External connection of XLSB file  New Feature    CELLSNET-45660 Sheet to Image rendering - Alignment issue for Asian fonts Enhancement    CELLSNET-45408 Value disappears or changes color when convert to PDF  Bug    CELLSNET-45696 Slicer is not moving down in the sheet when inserting rows Bug    CELLSNET-45675 Error calculating the formulas (involving \u0026amp;ldquo;SUMPRODUCT\u0026amp;rdquo; and \u0026amp;ldquo;TRANSPOSE\u0026amp;rdquo;) Bug    CELLSNET-45651 TextBox size changes when using Chinese font in the workbook in rendering to PDF Bug    CELLSNET-45678 Partially missing characters when converting to image Bug    CELLSNET-45667 Trendline labels are not updated in MS Excel when we manually change the source value in the cells Bug    CELLSNET-45620 Color and interval between scale is different for 3D chart  Bug    CELLSNET-45397 Aspose.Cells recognizes fonts in the chart incorrectly Bug    CELLSNET-45700 MS Excel 2016 Add-in pane removed from file after open/save by Aspose.Cells Bug    CELLSNET-45693 Worksheet is no more protected in the output file in SpreadsheetML to XLSX conversion Bug    CELLSNET-45691 Document is corrupted when re-saving it Bug    CELLSNET-45690 Styles seem to be carried over wrongly for some cells - SpreadsheetML to XLSX conversion Bug    CELLSNET-45688 Date column is not sorted correctly Bug    CELLSNET-45687 Worksheets protection properties are not carried from SpreadsheetML Bug    CELLSNET-45683 SpreadsheetML AllowSort element doesn\u0026amp;rsquo;t work in the output XLSX Bug    CELLSNET-45682 MS Excel prompts an error message \u0026amp;ldquo;Excel found unreadable content\u0026amp;hellip;.\u0026amp;rdquo; Bug    CELLSNET-45676 Document is corrupted when re-saving due to non-break space in worksheet name Bug    CELLSNET-45673 …","date":-62135596800,"description":"","objectID":"3fe4d151e74f8a7195bd63cb9fffbf8e","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.10+release+notes/","title":"Aspose.Cells for .NET 17.10 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.11.\n   Key Summary Category     CELLSNET-45748 XmlMapQuery like functionality needed as available in MS Excel New Feature    CELLSNET-45747 Associated property needed for XMLMaps to get the RootElementName for the map New Feature    CELLSNET-45709 Scale becomes smaller - Fonts issue New Feature    CELLSNET-45743 Protect shared workbook - Set or change password New Feature    CELLSNET-45737 Support PasteType for Aspose.Cells.GridDesktop during Copy/Paste actions New Feature    CELLSNET-45755 Unable to get Text of Smart Art shapes  Enhancement    CELLSNET-45720 Pivot table is taking too long to refresh data  Performance   CELLSNET-45680 Direction of shape is wrong when converted to image format  Bug    CELLSNET-45679 Star shapes are not shown correctly in the output PDF  Bug   CELLSNET-45669 Characters overlap when converting to image Bug    CELLSNET-45665 Some drawing elements are inverted while others are shifted to the right Bug    CELLSNET-43912 Position of the line objects changed while rendering the spreadsheet to PDF Bug    CELLSNET-45715 PivotTable options - Show the values row - gets enabled on re-saving Bug    CELLSNET-45671 Missing total values for the calculated fields when refreshing/calculating PivotTable data Bug    CELLSNET-45650 Error of expanding data to proper columns when saving an MHTML file format to Excel file Bug    CELLSNET-45721 LightCellsDataProvider is removing leading and trailing spaces Bug    CELLSNET-45719 Formula calculation resolves formula unexpectedly to error Bug    CELLSNET-45724 Saving Excel as PDF decreases column width Bug    CELLSNET-45712 Legend of the chart is missing in the output PDF Bug    CELLSNET-45710 Number formatting in chart is lost after saving an Excel file as PDF Bug    CELLSNET-45708 PDF file created by Aspose.Cells causes error in Adobe Acrobat Reader Bug    CELLSNET-45684 Chart to image or PDF - 3D Line Chart is not correct or rotated Bug …","date":-62135596800,"description":"","objectID":"83ab9d80377cf4fe5271da75f73ec237","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.11+release+notes/","title":"Aspose.Cells for .NET 17.11 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.12.\n   Key Summary Category     CELLSNET-45358 Obtain CSS separately from HTML markup when exporting to HTML using streams New Feature    CELLSNET-45697 Implement Cell.FormulaLocal similar to Microsoft Interop FormulaLocal New Feature    CELLSNET-45801 Support for Office-Add-Ins in Excel to PDF rendering New Feature    CELLSNET-45796 Smart Markers - How to auto populate data to second worksheet if data is too large and cannot be inserted into a single sheet  New Feature    CELLSNET-45791 Update \u0026amp;ldquo;Keep change history\u0026amp;rdquo; when Sharing Workbook New Feature    CELLSNET-45746 Text in the cells are overlapping with other cells on Aspose.Cells.GridDesktop New Feature    CELLSNET-45774 Images are confused in a picture shape with texture fill Enhancement    CELLSNET-45731 Refreshing PivotTable corrupts MS Excel file Bug    CELLSNET-45794 Array formula involving \u0026amp;ldquo;MEDIAN\u0026amp;rdquo; is calculated as blank Bug    CELLSNET-45779 Cell text alignment is changed in the converted image Bug    CELLSNET-45772 One page lost when converting worksheet to image Bug    CELLSNET-45764 Status of DataBars is incorrect in the output PDF  Bug    CELLSNET-45785 Series \u0026amp;ldquo;Nominale in Essere (mln)\u0026amp;rdquo; Data Labels positioning is wrong Bug    CELLSNET-45775 Second vertical axis label is missing when converting chart to image Bug    CELLSNET-45762 Chart.Calculate is taking more time and not working Bug    CELLSNET-45799 Absolute path changes to relative path when re-saving an XLSX file Bug    CELLSNET-45797 SetArrayFormula - Not being treated as array formula Bug    CELLSNET-45792 Merged cells lost on copy paste the column to next columns Bug    CELLSNET-45784 Inserting a column causes MS Excel to prompt an error message Bug    CELLSNET-45778 Comment settings changed on opening and saving the MS Excel file Bug    CELLSNET-45773 Fill format is changed for all text shapes in workbook instead of selected one Bug …","date":-62135596800,"description":"","objectID":"6374c1dba906dcc58f69b9ddb157ebc2","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.12+release+notes/","title":"Aspose.Cells for .NET 17.12 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.3.0.\n   Key Summary Category     CELLSNET-45037 Support Custom Total \u0026amp;amp; Grand Total Labels for Pivot Tables New Feature    CELLSNET-45156 Synchronize the paging of the two grids (Aspose.Cells.GridWeb)  New Feature    CELLSNET-45140 Validate updated cells only and ignore validation of other cells (Aspose.Cells.GridWeb)  New Feature    CELLSNET-45158 Change in pivot data source adds additional LinkSource Enhancement    CELLSNET-45168 The shape is skewed/tilted a bit with its text \u0026amp;ldquo;1\u0026amp;rdquo; position changed Bug    CELLSNET-45163 Text in a shape is inverted while rendering worksheet to image Bug    CELLSNET-45161 Angle of the picture in spreadsheet is slightly different Bug    CELLSNET-45159 Auto shape objects have rendered incorrectly Bug    CELLSNET-45138 PrintArea doesn\u0026amp;rsquo;t manage to transform images correctly Bug    CELLSNET-45136 Boxes are rotated when Excel is converted to PDF  Bug    CELLSNET-45182 Resultant spreadsheet cannot be loaded in Excel without repair Bug    CELLSNET-45143 Aspose.Cells produces corrupted pivot table with report filter when saved to XLSB Bug    CELLSNET-45135 Images are overlapping while importing HTML as XLSX Bug    CELLSNET-45134 Column widths are lost while importing HTML as XLSX Bug    CELLSNET-45133 Content styling is lost while importing HTML as XLSX Bug    CELLSNET-45132 WrapText enabled in HTML is lost when saved in XLSX format Bug    CELLSNET-45127 Font style and size is changed after importing HTML as XLSX Bug    CELLSNET-45115 Refreshing the pivot table after adding some data generates corrupt Excel file Bug    CELLSNET-45109 Error in Refresh of Pivot Table grouped by Date column Bug    CELLSNET-45081 Pivot Table\u0026amp;rsquo;s merge labels feature does not work Bug    CELLSNET-45076 Alignment doesn\u0026amp;rsquo;t work and text go out of the cell in Excel to HTML conversion Bug    CELLSNET-45057 Conversion of HTML to XLSX is not correct Bug    CELLSNET-45040 Some …","date":-62135596800,"description":"","objectID":"d4a8e126f3a19cf5c82453b98bc70413","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.3.0+release+notes/","title":"Aspose.Cells for .NET 17.3.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.4.0.\n   Key Summary Category     CELLSNET-45216 Support \u0026amp;ldquo;Lock project for viewing\u0026amp;rdquo; Protection option in VbaProject Properties New Feature    CELLSNET-44219 Password protect the VBA project New Feature    CELLSNET-45246 Implement Sort Warning feature - Sort anything that looks like a number New Feature    CELLSNET-45278 Function SetColumnHeaderToolTip(int colIndex, string toolTip) missing in newer APIs set - Aspose.Cells.GridWeb New Feature    CELLSNET-45201 Change filter list to multiple checkbox selection list for GridWeb New Feature    CELLSNET-42557 PivotTable Grouping and Pivot Report Filter selection disappear when loading in GridWeb New Feature    CELLSNET-45281 Sparklines disappear after rendering to PDF Enhancement    CELLSNET-45280 Sparklines disappear after re-saving the file Enhancement    CELLSNET-44438 OutOfMemoryException while saving CSV to PDF Performance   CELLSNET-45231 Format tag in the SpreadsheetML content keeps hanging on loading Performance   CELLSNET-45219 Remove some calls to string.ToUpper() method (if possible) in the source code Performance   CELLSNET-45242 Some shapes are separated/distorted and dim in the rendered PDF file Bug    CELLSNET-45275 Removing worksheet causes to save a corrupt XLSM Bug    CELLSNET-45262 Saving worksheet as HTML with overflowed text in cells Bug    CELLSNET-45248 Some text is overlapping or invisible and vertical alignment is not right in Excel to HTML rendering Bug    CELLSNET-45229 When HTML is saved as XLSX, text layout is different  Bug    CELLSNET-45228 When HTML is saved as XLSX, text format is changed  Bug    CELLSNET-45227 When HTML is saved as XLSX, part of content is missing  Bug    CELLSNET-45195 When loading HTML and save it as XLSX, paragraphs are missing and changed  Bug    CELLSNET-45254 Issue with Pivot Filters Text Bug    CELLSNET-45267 Number format does not work correctly in the Pivot Table Bug    CELLSNET-45170 Some …","date":-62135596800,"description":"","objectID":"1be341060c02f9e9ca10cb9bdf0defd0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.4.0+release+notes/","title":"Aspose.Cells for .NET 17.4.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.5.\n   Key Summary Category     CELLSNET-41365 Support PDF/A-1a compliance in PdfSaveOptions New Feature    CELLSNET-45347 Remove existing PrinterSettings in Excel file New Feature    CELLSNET-45340 Implement Custom Page Size options for the worksheet  New Feature    CELLSNET-45327 Support exporting HTML cells\u0026amp;rsquo; data to DataTable New Feature    CELLSNET-45316 Support the working of GridWeb when ASP.NET Session state mode is SQL Server New Feature    CELLSNET-45350 OutOfMemory error during image rendering Performance   CELLSNET-45341 Converting XLS to SpreadsheetML having filters corrupts the output file Performance   CELLSNET-45217 Saving Excel to PDF rotates the image Bug    CELLSNET-45306 Wrong styles when save to HTML with css prefix Bug    CELLSNET-45304 Text alignment of the vertically rotated text is wrong in the output HTML  Bug    CELLSNET-45299 Text does not fit into cell when saving as HTML Bug    CELLSNET-45288 Exception occurred on loading an HTML file Bug    CELLSNET-45274 Pivot table data is not refreshed correctly Bug    CELLSNET-45336 Workbook calculation method is unable to calculate XIRR formula - II Bug    CELLSNET-45333 Values in cell M114 and N114 are not correct after Workbook formula calculation Bug    CELLSNET-45318 Workbook calculation method is unable to calculate XIRR formula Bug    CELLSNET-45310 Multiple users face problem in GridWeb when Session state is out of process Bug    CELLSNET-45324 Characters\u0026amp;rsquo; position is not center aligned when rendering an Excel file to PDF Bug    CELLSNET-45339 Converted from ODS to XML (SpreadsheetML) file is not opened by MS Excel Bug    CELLSNET-45326 Cell.HtmlString does not highlight the nested font color properly Bug    CELLSNET-45325 Data validations end up strange after inserting new rows Bug    CELLSNET-45322 Cells.ImportDataTable method has changed Bug    CELLSNET-45314 CopyOptions.ExtendToAdjacentRange property is not working …","date":-62135596800,"description":"","objectID":"468e7f20389dea050aaa775396a63a48","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.5+release+notes/","title":"Aspose.Cells for .NET 17.5 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.6.\n   Key Summary Category     CELLSNET-45356 Enquote all attribute values in HTML New Feature    CELLSNET-45394 Support new functions of Office 365 New Feature    CELLSNET-45348 Support Table as the data source of the chart New Feature    CELLSNET-45317 Remove older Web.config settings of Aspose.Cells.GridWeb like force script_path and forcepath  New Feature    CELLSNET-45370 Exception message is wrong - The count of Hyperlinks cannot be larger than 66530 Enhancement    CELLSNET-45391 Excel footer in the output PDF is not italic - it should be Arial 9 and italic Enhancement    CELLSNET-45328 Copy the PageSetup settings from the existing worksheet  Enhancement    CELLSNET-45345 Some part of subscript labels are cut and shifted to a lower line Bug    CELLSNET-45344 Subscript text is displaced to the right a bit - Excel to PDF Rendering Bug    CELLSNET-44595 Output Excel file is not good when converting an HTML file to Excel file format Bug    CELLSNET-44596 Output Excel file is not good when converting an HTML file to Excel file format - I Bug   CELLSNET-45409 Exception thrown after multiple loading and saving an XLS file Bug    CELLSNET-45411 Load Filter causes crash while loading an Excel file Bug    CELLSNET-45405 Using IFERROR with NPER is unable to be processed correctly Bug    CELLSNET-45414 Output PDF should have one page instead of two pages Bug    CELLSNET-45399 Image rendered incorrectly when a cell has Arabic currency name Bug    CELLSNET-45389 Shape of parentheses is rendered wrong in output PDF/image Bug    CELLSNET-45376 Aspose.Cells saved PDF is not like MS Excel saved PDF  Bug    CELLSNET-45400 Sparklines not displayed properly when rendered as image Bug    CELLSNET-45372 Incorrect legend item colors when BankActionRatPie chart is converted to image Bug    CELLSNET-45371 Incorrect legend item colors when TotalActionRatPie chart is converted to image Bug    CELLSNET-45352 Aspose.Cells values …","date":-62135596800,"description":"","objectID":"2b0c147bd4c038ca2f5c209d5e169294","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.6+release+notes/","title":"Aspose.Cells for .NET 17.6 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.7.\n   Key Summary Category     CELLSNET-45437 Support errors and Boolean value in Russian locale in Excel to PDF rendering New Feature    CELLSNET-45456 Reading cells\u0026amp;rsquo; data, formula and style from numbers file  New Feature    CELLSNET-45483 Support to change the row index start value to 0 (instead of 1) in Aspose.Cells.GridDesktop New Feature    CELLSNET-45434 GridWeb ViewPanel is not always Visible New Feature    CELLSNET-45224 Render PivotTable in GridDesktop New Feature    CELLSNET-45490 Throw error or exception when wrong name is assigned to ListObject.DisplayName property Enhancement    CELLSNET-45470 Link Source DataSource vs. OriginalDataSource vs. Excel=\u0026amp;gt;Data =\u0026amp;gt; Edit links Enhancement    CELLSNET-45439 GridDesktop.GetVersion() method needed to check the version number of GridDesktop on runtime Enhancement    CELLSNET-45457 Application gets stuck while trying to get picture\u0026amp;rsquo;s property Performance   CELLSNET-45388 Arrow shape is not rendered fine in Sheet to Image (.jpg) renderings Bug    CELLSNET-45426 Chart data is unable to refresh data from Pivot Table Bug    CELLSNET-45447 Excel file corrupted when adding PivotTable after importing source data Bug    CELLSNET-45396 Formatting error when Excel file is converted to HTML Bug    CELLSNET-45402 Cell.DisplayStringValue does not match with the original values Bug    CELLSNET-45479 Aspose.Cells 17.5 - Incorrect Digital signing with DSA certificate Bug    CELLSNET-45420 DefaultFont setting not working Bug    CELLSNET-45364 Some shapes/objects are cut in the output PDF Bug    CELLSNET-45491 Some black blur thing attached to the data labels appeared in the output image of the chart Bug    CELLSNET-45476 The date format of the X-axis labels are changed and overridden on Legend entries Bug    CELLSNET-45471 Text \u0026amp;ldquo;III.LowerQualityAboveSML\u0026amp;rdquo; on 2nd page of PDF is broken Bug    CELLSNET-45454 Bubble colors are changed a bit for …","date":-62135596800,"description":"","objectID":"24220761a6c55dd61de5de178287dd73","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.7+release+notes/","title":"Aspose.Cells for .NET 17.7 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.8.\n   **Key ** **Summary ** **Category **     CELLSNET-45357  Option to disable downlevel-revealed type of conditional comments during export to HTML  New Feature    CELLSNET-45330  Render comments when saving as image, HTML or PDF  New Feature    CELLSNET-45014  Support style.xml of the chart since office 2013  New Feature    CELLSNET-45501  Set Default Style of GridDesktop similar to Aspose.Cells.Workbook.DefaultStyle both on Design Time and Run Time  New Feature    CELLSNET-44243  Skip locked cells while navigating with Tab on GridDesktop component  New Feature    CELLSNET-45517  Add support for Share xlsx file  Enhancement   CELLSNET-45554  Synchronize or update the Comment in Client-side after Cell Comment is updated in Server-side  Enhancement   CELLSNET-45530  MS Excel consumes more memory (approx. 2GB) to open the output file  Performance    CELLSNET-45531  Position of shape text is wrong in the output PDF - Excel to PDF conversion  Bug    CELLSNET-45507  Diagrams not rendered correctly in Output Pdf  Bug    CELLSNET-45477  Issues with rendering shapes in Sheet to image conversion  Bug    CELLSNET-45473  Text Alignment issues when saving an XLS file as HTML by Aspose.Cells APIs  Bug    CELLSNET-45536  Text being cut when rendering Excel sheet to Image  Bug    CELLSNET-45524  Redundant line appeared while rendering shapes in Sheet to image conversion  Bug    CELLSNET-45522  Cells to PDF - footer not wrapping when the footer text contains  Bug    CELLSNET-45512  Aspose.Cells creates massive EMF file when rendering Sheet to image file  Bug    CELLSNET-45508  Data is being truncated even after auto fit rows  Bug    CELLSNET-45495  Add digital signatures to already signed document  Bug    CELLSNET-45553  Chart in resulted PDF has unexpected values  Bug    CELLSNET-45551  Image become black when rendering to PDF file format  Bug    CELLSNET-45547  Sparklines are not smoother in the output EMF image  Bug …","date":-62135596800,"description":"","objectID":"1a28c0cc663d3fb5e5dad9fc03d8abbc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.8+release+notes/","title":"Aspose.Cells for .NET 17.8 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 17.9.\n   Key Summary Category     CELLSNET-45614 Determine which Stack Size is needed for a certain Workbook New Feature    CELLSNET-45649 Format the custom Label\u0026amp;rsquo;s font and its cell with Smart Markers  New Feature    CELLSNET-44353 Control loading of external resources in MS Excel workbook New Feature    CELLSNET-40787 Lose Track Changes after conversion (XLS \u0026amp;ndash;\u0026amp;gt; XLSM) New Feature    CELLSNET-45607 Show Cell comment as Excel Tooltip - Aspose.Cells.GridWeb New Feature    CELLSNET-45559 Share Price Series Label is not positioning properly Enhancement    CELLSNET-45626 Exception: \u0026amp;ldquo;Too many entries. Consider setting ZipOutputStream.Enable Zip64\u0026amp;rdquo; on merging the file(s) Enhancement    CELLSNET-45622 Why FitToPagesWide 1 needs to set FitToPagesTall 0 for Fit All Columns on One Page Enhancement    CELLSNET-45576 When RecommendReadOnly is true, IsWriteProtected is also true Enhancement    CELLSNET-45581 GridDesktop should not scroll past last column Enhancement    CELLSNET-45577 GridDesktop should not scroll past last row Enhancement    CELLSNET-45633 GetRanges performance issue when using customfunction with lots of functions to be calculated Performance   CELLSNET-45592 Some drawing elements\u0026amp;rsquo; position is wrong in Excel to PDF rendering Bug    CELLSNET-45575 Grey background on the box is missing in the output PDF Bug    CELLSNET-45516 Shape text dispersed/scattered in Excel to PDF rendering Bug    CELLSNET-45415 Sheet to Image rendering ignores Asian fonts in TextBox with cell reference Bug    CELLSNET-45315 Some text (labels) missing of the shape in Sheet to Image rendering Bug    CELLSNET-45655 Providing one option to control whether keeping number precision format Bug    CELLSNET-45630 HTML output of \u0026amp;ldquo;222.xlsx\u0026amp;rdquo; is not right Bug    CELLSNET-45621 Two image resources created instead of one when saving as HTML file format Bug    CELLSNET-45597 \u0026amp;ldquo;Number stored as …","date":-62135596800,"description":"","objectID":"0ce1c12a0520e1fb36d5925ff051c058","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/aspose.cells+for+.net+17.9+release+notes/","title":"Aspose.Cells for .NET 17.9 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"4f7e72daa42a014f1f7e87c627ae65ad","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2017/","title":"Release Notes - 2017"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.1.\nMajor News\nXamarin\nAspose.Cells for for .NET now also includes Aspose.Cells for iOS via Xamarin and Aspose.Cells for Android via Xamarin assemblies with its regular .NET Dlls.\n\\\n   Key Summary Category     CELLSNET-45740 Find the children Pivot Tables of parent Parent Pivot Table New Feature    CELLSNET-45771 Handle automatic axis units like Microsoft Excel New Feature    CELLSNET-45668 Read and write tableSingleCells of XLSB file  New Feature    CELLSNET-45830 Add events after deleting rows and columns in Aspose.Cells.GridDesktop New Feature    CELLSNET-45805 GridWeb does not render Scrollbars correctly New Feature    CELLSNET-45845 Unsupported external stylesheet during round-trip conversion Enhancement    CELLSNET-45803 XLS format should match with MS Excel 2016 Enhancement    CELLSNET-45842 FontSettings are overwriting each other while MS Excel keeps both of them Enhancement    CELLSNET-45653 Filtering in GridDesktop does not work properly or like Microsoft Excel Enhancement    CELLSNET-45763 Shape text is rotated in Excel to PDF conversion Bug    CELLSNET-45669 Characters overlap when converting to Image Bug    CELLSNET-45841 XLSB file dealing with Power Pivot corrupts on opening and re-saving Bug    CELLSNET-45819 Borders are not shown when export from HTML to Excel Bug    CELLSNET-45807 Gridlines do not appear when HtmlSaveOptions.ExportActiveWorksheetOnly property is set to true Bug    CELLSNET-45788 Support exporting the separate stylesheet for a single-tab document Bug    CELLSNET-45826 Image properties (Title and Subject) are lost after converting XLSX to PDF Bug    CELLSNET-45811 Rendering Excel cuts the right border with some data loss Bug    CELLSNET-45808 Converting Excel to PDF cuts word with apostrophes when using RTL language Bug    CELLSNET-45840 Chart is stretched up after saving to XLS format - \u0026amp;ldquo;mouseover event - embedded.xls\u0026amp;rdquo; Bug    CELLSNET-45815 Chart.Calculate is …","date":-62135596800,"description":"","objectID":"50c28679a2d5ee71d8444689b17529df","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.1+release+notes/","title":"Aspose.Cells for .NET 18.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.10.\n   Key Summary Category     CELLSNET-46311 Get connection points from shapes New Feature    CELLSNET-46194 Change columns\u0026amp;rsquo; fixed size width (i.e., pt/px) into scalable unit like \u0026amp;ldquo;em\u0026amp;rdquo; or \u0026amp;ldquo;percent\u0026amp;rdquo; Enhancement    CELLSNET-46383 Issue with the image source when rendering Excel to HTML file format Bug    CELLSNET-46367 Font size changed from 6.5 to 6 while converting XLSX to HTML  Bug    CELLSNET-46353 Recognize empty tags like while converting HTML to MS Excel file format  Bug    CELLSNET-46341 Sub-Total missing when rows collapsed after refresh Bug    CELLSNET-46330 Issue in number fields while calling the Worksheet.AutoFitColumns() Bug    CELLSNET-42681 XLSB file gets corrupt on opening and saving Bug    CELLSNET-46382 CSV import creates incorrect formatting using PreferredParsers Bug    CELLSNET-46338 \u0026amp;ldquo;_xll\u0026amp;rdquo; attached in front of formula name Bug    CELLSNET-46334 Named range formula (\u0026amp;ldquo;=GET.CELL\u0026amp;rdquo;) not properly created in German locale Bug    CELLSNET-46321 Escape character is displayed as it is in PDF Bug    CELLSNET-46376 PDF output page size(and margins) doesn\u0026amp;rsquo;t match MS Excel output Bug    CELLSNET-46373 Height of image in header truncated along with broken layout during XLSM-\u0026amp;gt;PDF conversion Bug    CELLSNET-46349 Image not repeating properly when print titles are set for rows and columns Bug    CELLSNET-46358 Rendering image from a simple chart takes all resources and then raises exception Bug    CELLSNET-46343 Accessing visibility properties changed the visibility of the chart in the re-saved output Bug    CELLSNET-46390 SourceFullName property of OLE Object is empty while accessing in XLSB Bug    CELLSNET-46385 Header picture/shape is not rendered correctly when re-saving an XLSX file Bug    CELLSNET-46384 Difference in OLE Objects before and after saving the XLSB file Bug    CELLSNET-46378 Phonetic guide missing after copy and save …","date":-62135596800,"description":"","objectID":"9810499ea1c9a26918fc5152b7f1046a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.10+release+notes/","title":"Aspose.Cells for .NET 18.10 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.11.\n   Key Summary Category     CELLSNET-46377 Check if a cell has circular formula New Feature    CELLSNET-46399 Exception occurred while calling PivotTable.RefreshData() New Feature    CELLSNET-46394 Fetch Pivot Table refresh date similar to Interop.Excel New Feature    CELLSNET-46261 Replacement of the texts in SmartArt doesn\u0026amp;rsquo;t work New Feature    CELLSNET-46435 GetValidationValue returns wrong value for large numbers Enhancement    CELLSNET-46117 Text position changes a bit on ungrouping the shape Enhancement    CELLSNET-46400 It hangs while calling PivotTable.RefreshData Performance   CELLSNET-46441 Cell.GetDisplayStyle() hangs for a cell Performance   CELLSNET-46423 Formatting issues while converting XLSX to PDF Bug    CELLSNET-46410 Pivot table format gets messed up after refresh Bug    CELLSNET-46404 Processing diagrams same way as images when saving HTML Bug    CELLSNET-46388 File is corrupt after loading and re-saving an XLSX file format Bug    CELLSNET-46387 Problem sorting pivot table Bug    CELLSNET-46366 Borders and background colors are missing while converting the HTML to XLSX Bug    CELLSNET-46365 Referenced CSS style sheets ignored while opening HTML  Bug    CELLSNET-46431 VLookup formula result is different than MS Excel result Bug    CELLSNET-46430 Array formula is not working after Workbook.Combine in XLSX to XLSB conversion Bug    CELLSNET-46428 Name.RefersTo is not retrieving the correct value Bug    CELLSNET-46413 Creating XLSX with conditional formatting produces corrupted file Bug    CELLSNET-46403 Array formula is not working after Workbook.Combine to save to XLSB file format Bug    CELLSNET-46396 Workbook saved as SVG is corrupted as it is actually TIFF file Bug    CELLSNET-46420 Graph in PDF getting spike issue Bug    CELLSNET-46411 It hangs while converting XLSX to PDF Bug    CELLSNET-46408 Data markers are missing in the output chart image from MS Excel file Bug …","date":-62135596800,"description":"","objectID":"a4ab97f7fbb710f9ba96d0138c1614c5","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.11+release+notes/","title":"Aspose.Cells for .NET 18.11 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.12.\n   Key Summary Category     CELLSNET-46479 Tab name not available when single sheet workbook is converted to HTML New Feature   CELLSNET-46503 Control loading of VBA data using LoadDataFilterOptions New Feature   CELLSNET-42414 Tracked Changes lost during conversion from XLSB to XLSM and XLS to XLSM Enhancement   CELLSNET-46090 Text moved a little bit after ungrouping the shape when saving an XLS to XLSX Enhancement   CELLSNET-46439 Optimization for memory performance: release original stream after loading Workbook Performance   CELLSNET-46371 Gridlines not displayed in some sheets while converting XLSX-\u0026amp;gt;HTML-\u0026amp;gt;XLSX Bug   CELLSNET-46447 Formattings lost in HTML to XLS rendering Bug   CELLSNET-46494 MHT to XLSX conversion - cell content problem Bug   CELLSNET-46468 MS Excel prompts an error when opening the output file Bug   CELLSNET-46487 Non-English locale formula not working Bug   CELLSNET-46489 Deleting a row with an index and reading the row with the same index returns Cell.ValuType: IsNull Bug   CELLSNET-46406 Unable to open password protected ODS document Bug   CELLSNET-46466 Bottom text under the bar code is missing in MS Excel to PDF rendering Bug   CELLSNET-46470 The image is missing after rendition to TIFF output Bug   CELLSNET-46499 Images are not rendered properly when converted from Excel to PDF Bug   CELLSNET-46443 Extra text appeared in the image rendered from MS Excel chart Bug   CELLSNET-46450 Rendered image from MS Excel chart has more axis units than the original chart Bug   CELLSNET-46451 Issue when rendering the template file (containing the chart) to PDF file format Bug   CELLSNET-46454 Legend order rendered differently from Excel chart in session 0 vs. session 1 Bug   CELLSNET-46471 Can\u0026amp;rsquo;t set color marker LineWithDataMarkers in XLS file format Bug   CELLSNET-42729 Text is displaced when SmartArt charts are rendered as HTML file format Bug   CELLSNET-46462 Text …","date":-62135596800,"description":"","objectID":"ad276d166dc0db9abd3103d73641192b","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.12+release+notes/","title":"Aspose.Cells for .NET 18.12 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.2.\n   Key Summary Category     CELLSNET-45889 Convert cell content to Hyperlink - ImportTableOptions.IsFormulas option  New Feature    CELLSNET-45886 Set comment\u0026amp;rsquo;s margins New Feature    CELLSNET-45855 Provide WorkbookSetting.StreamProvider to control external resources New Feature    CELLSNET-45845 Unsupported external stylesheet during round trip conversion Enhancement    CELLSNET-45888 DDE link is not present inside Worksheets.ExternalLinks Enhancement    CELLSNET-45893 Aspose.Cells.GridWeb does not enter text like Microsoft Excel when wrap text is enabled Enhancement    CELLSNET-45833 Image properties (Title and Subject) are lost in Shape to image conversion Bug    CELLSNET-45822 Inverted characters in labels when converting Excel to PDF  Bug    CELLSNET-45776 Some columns data is not fully expanded/displayed when saving an MHtml file to Excel file format Bug    CELLSNET-44829 Output HTML does not match with Microsoft Excel Bug    CELLSNET-44319 Pivot table filter value is not retained upon refresh Bug    CELLSNET-45887 \u0026amp;lsquo;#VALUE!\u0026amp;rsquo; error for ArrayFormula\u0026amp;rsquo;s calculation Bug    CELLSNET-45883 3D Pie chart - is not rendered good in the output PDF Bug    CELLSNET-45881 Opening and saving the input Excel file causes Red Protected View warning in MS Excel Bug    CELLSNET-45880 Part of x-axis labels are rendered in the second line in chart Bug    CELLSNET-45864 EMF converted from Aspose.Cells is not exactly accurate Bug    CELLSNET-45885 The type (attribute) of external link is changed after open/save Bug    CELLSNET-45872 Unable to read Excel data connection when its type is CSV Bug    CELLSNET-45868 PrintTitleRows property value disappears after open and save by Aspose.Cells Bug    CELLSNET-45865 Special characters used in a column name is not working - Smart Markers issue Bug    CELLSNET-45858 Change of link source is impacting contents of drop-downs Bug    CELLSNET-45857 Corrupted …","date":-62135596800,"description":"","objectID":"afe46fcc2ebe75db65ea7a27ff673161","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.2+release+notes/","title":"Aspose.Cells for .NET 18.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.3.\n   Key Summary Category     CELLSNET-42655 Group pivot fields in the Pivot Table  New Feature    CELLSNET-45960 Change the dot from NumPad to decimal separator (\u0026#39;,\u0026#39;) - Aspose.Cells.GridWeb New Feature    CELLSNET-45966 Cause of exception during backward HTML-to-Cells conversion Enhancement    CELLSNET-45976 Error opening ODS file due to possibly different frameworks keep different precision for float values Enhancement    CELLSNET-45981 Add property to the StyleFlag to be set to false to not override the QuotePrefix value Enhancement    CELLSNET-45957 Support keeping the map chart in the template file  Enhancement    CELLSNET-45941 ActiveX control becomes picture when copying sheet from one workbook to another workbook Enhancement    CELLSNET-45928 Data validation - GridWeb should display a dialog with an error message Enhancement    CELLSNET-45935 Workbook.CalculateFormula hangs infinitely when setting specific value to the cell Performance   CELLSNET-45920 Underline of text \u0026amp;ldquo;KEY DRIVERS:\u0026amp;rdquo; is broken in the output image Bug    CELLSNET-45939 Besides broken underline, text is also misaligned as shown in provided screenshot Bug    CELLSNET-45890 Some shapes are not rendered completely as a few parts are missing Bug    CELLSNET-45878 Output Excel file of new version crashes the Microsoft Excel 2016 Bug    CELLSNET-43360 Style issue with HTML to Excel rendering Bug    CELLSNET-45979 VLOOKUPS formula calculation is not working correctly Bug    CELLSNET-45949 Cell text alignment (having mixed fonts) is changed in the converted image Bug    CELLSNET-45940 Conditional formatting not applied while converting Excel file to PDF file format  Bug    CELLSNET-45896 Unwanted borders appear around the image when Excel file is saved to PDF  Bug    CELLSNET-45942 The cell reference for the data label gets lost after open/save Bug    CELLSNET-45923 Last axis label i.e. Jun 17 is missing from the chart image …","date":-62135596800,"description":"","objectID":"c498a7e20bdede322d5c30de95b2b7db","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.3+release+notes/","title":"Aspose.Cells for .NET 18.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.4.\n   Key Summary Category     CELLSNET-46045 Set Pdf Page size while using Chart.ToPdf method New Feature    CELLSNET-45590 Support rendering Histogram MS Excel 2016 Chart New Feature    CELLSNET-46007 Add an equivalent property to the \u0026amp;ldquo;FilterMode\u0026amp;rdquo; property of MS Excel Worksheet object (VBA) New Feature    CELLSNET-46026 Support additional cells modification in cellModifiedOnAjax - Aspose.Cells.GridWeb New Feature    CELLSNET-46013 New cross type with hiding overlayed content when saving as HTML Enhancement    CELLSNET-45965 Ability to process standard LINK element during backward conversion Enhancement    CELLSNET-46032 Do not generate single page blank PDF when Excel file is empty Enhancement    CELLSNET-46027 Excel to PDF rendering - Header/footer problem Enhancement    CELLSNET-45970 When auto-fit a column, Aspose.Cells do not consider the row height when the cell is text wrapped Enhancement    CELLSNET-44985 Issue with auto-fit columns operation with wrapping text on Enhancement    CELLSNET-42701 AutoFitColumns\u0026amp;rsquo; wrap text issue Enhancement    CELLSNET-46005 Writings reversed for different sheets in the output PDF file format Bug    CELLSNET-45958 Incorrect formatting when saving XLSX as HTML Bug    CELLSNET-45907 Missing values in the rendering of chart Bug    CELLSNET-46034 Cannot remove PivotTables (whose data source is external) from XLS file format Bug    CELLSNET-46016 Excel file becomes corrupt after refreshing PivotTable Bug    CELLSNET-45988 Refreshing Pivot Table in \u0026amp;ldquo;Sample2.xlsx\u0026amp;rdquo; generates corrupt Excel file Bug    CELLSNET-46011 Workbook.Calculation gives wrong value for cell F155 Bug    CELLSNET-46001 Wrong evaluation of DateTime values when calculating DateTime functions Bug    CELLSNET-46000 Shrink to fit on cells made text become slightly smaller than normal in the rendered image Bug    CELLSNET-45998 Margins are still there when all margins are set to …","date":-62135596800,"description":"","objectID":"980445fb4c879a1c04487bff7c2025e5","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.4+release+notes/","title":"Aspose.Cells for .NET 18.4 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.5.\n   Key Summary Category     CELLSNET-46095 Implement function CEILING.PRECISE New Feature    CELLSNET-46023 Support Strict Open XML Spreadsheet format New Feature    CELLSNET-46080 The color of the image should be black when converting to PDF  Enhancement    CELLSNET-46087 Page Setup PrintErrorType not working in Excel to PDF rendering Enhancement    CELLSNET-46084 PageSetup.PrintDraft does not take effect while Saving to PDF  Enhancement    CELLSNET-46100 System.OutOfMemoryException while converting Excel file to PDF  Performance   CELLSNET-46033 Page field named \u0026amp;ldquo;Absent item Yes\u0026amp;rdquo; is lost on Refresh Bug    CELLSNET-46096 Calculation error when using calculation chain and defined name Bug    CELLSNET-46047 A few columns are disappeared when importing an Excel file into GridWeb Bug    CELLSNET-46110 Text wrapping is not correct when \u0026amp;ldquo;Issue2 wrapping-no_custom_page_size.xlsx\u0026amp;rdquo; is converted to PDF  Bug    CELLSNET-46109 Text wrapping is not correct when \u0026amp;ldquo;Issue2 wrapping.xlsx\u0026amp;rdquo; is converted to PDF  Bug    CELLSNET-46108 Text wrapping is not correct when \u0026amp;ldquo;Issue3 wrapping.xlsx\u0026amp;rdquo; is converted to PDF  Bug    CELLSNET-46088 Page Setup zoom factor creates incorrect number of pages in PDF Bug    CELLSNET-46076 Exception when saving a workbook to MemoryStream Bug    CELLSNET-46052 Some of the Gridlines around some cells are not drawn correctly Bug    CELLSNET-46036 Chart title is squished where the characters all run together in Excel to PDF rendering Bug    CELLSNET-46082 Pie chart legend colors change after saving to PDF and do not match up with Pie chart slices Bug    CELLSNET-46104 Saving XLSB to XLSM creates corrupt MS Excel file Bug    CELLSNET-46098 Named ranges lost when copying into existing workbook Bug    CELLSNET-46077 Embedded drawing objects are too narrow in the output file when re-saving an XLSX file Bug    CELLSNET-46068 Aspose.Cells returns blank PDF …","date":-62135596800,"description":"","objectID":"b82d76c4e91e891fd7a6f46f200511b6","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.5+release+notes/","title":"Aspose.Cells for .NET 18.5 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.6.\n   Key Summary Category     CELLSNET-46159 Render Slicer shape to image format  New Feature    CELLSNET-46179 Update Slicer in XLSB and XLSX file formats New Feature    CELLSNET-46167 Create Slicer in XLSB and XLSX file formats  New Feature    CELLSNET-44455 Create or update Slicer in Excel 2013 using Aspose.Cells  New Feature    CELLSNET-46130 Add API to get \u0026amp;amp; set CustomXmlPart ID New Feature    CELLSNET-46145 Improve converting line Callout to image Enhancement    CELLSNET-46174 WorkbookRender.ToImage(pageIndex, fileName/stream) and Bitmap WorkbookRender.ToImage(int pageIndex) methods included  Enhancement    CELLSNET-46178 Support DateTimeOffset format when importing custom objects Enhancement    CELLSNET-46171 GroupShape definition is misleading Enhancement    CELLSNET-46152 Relevant methods in Aspose.Cells API are added for GetRangeAddess(), GetCellCount(), GetEntireAddress() and GetOffset()  Enhancement    CELLSNET-46122 Convert smart art from XLSX to XLS file format  Enhancement    CELLSNET-46121 Convert smart art from XLS to XLSX file format  Enhancement    CELLSNET-45961 Ink tools disappeared when converting to PDF Enhancement    CELLSNET-45160 Portions of the picture in the spreadsheet renders in different color while converting worksheet to image Enhancement    CELLSNET-43592 Ink Objects does not render while converting spreadsheet to PDF format Enhancement    CELLSNET-45891 Some shapes are missing and some are dispersed (dis-positioned) - Excel to HTML conversion  Bug    CELLSNET-46112 When Issue4 callout placement.xlsx converted to PDF, formatting is not good  Bug    CELLSNET-45212 Displaced bigger image on converting an XLSM to PDF Bug    CELLSNET-42636 Some drawing shapes are displaced or rendered wrongly in Excel to HTML rendering Bug    CELLSNET-42627 Unable to extract smart art images correctly Bug    CELLSNET-42618 Shape is displaced to cover data in Excel to HTML rendering Bug …","date":-62135596800,"description":"","objectID":"85f6280347589aa90568e1f0a5b554cd","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.6+release+notes/","title":"Aspose.Cells for .NET 18.6 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.7.\n   Key Summary Category     CELLSNET-46046 Round images become square images in the output PDF  New Feature    CELLSNET-43538 Support Pivot Table Slicers New Feature    CELLSNET-41946 Handle slicers and Pivot table New Feature    CELLSNET-46163 Support encrypting and decrypting ODS file  New Feature    CELLSNET-46186 Using List or List as DataSource for importing data into worksheet New Feature    CELLSNET-46185 Add WorkbookSettings.MaxRow and WorkbookSettings.MaxColumn properties  New Feature    CELLSNET-46205 Add WriteProtection.Author property to update the Author Enhancement    CELLSNET-41946 Pivot table filters not working after load and save Bug    CELLSNET-45921 Circle becomes square in Excel to PDF rendering Bug    CELLSNET-46217 \u0026amp;lsquo;#NUM!\u0026amp;rsquo; inside \u0026amp;ldquo;FV(NPER())\u0026amp;rdquo; formula causes evaluation error Bug    CELLSNET-46214 Exception \u0026amp;ldquo;Invalid BIFF8 file\u0026amp;rdquo; when loading an XLS file Bug    CELLSNET-46212 Exception when loading an XLSX file Bug    CELLSNET-46193 Validation is not working in XLS format but it works fine in XLSX format Bug    CELLSNET-46189 The output PDF document isn\u0026amp;rsquo;t the same as the MS Excel output Bug    CELLSNET-46187 Double underline length is not correct - Excel to PDF conversion Bug    CELLSNET-46213 OLE Object broken while saving to XLSB Bug    CELLSNET-46210 Creating comment using HtmlNote property does not work Bug    CELLSNET-46198 Blank PDF created while converting XLSX to PDF Bug    CELLSNET-46196 Chart height is changed in the output file when combining workbooks Bug    CELLSNET-46195 Converting attached XLSX to PDF raises exception Bug    CELLSNET-46192 Converting an XLSX file with dde to XLS will prompt with protected view Bug    CELLSNET-46180 Formatting issue when resizing ListObject/Table Bug    CELLSNET-46216 Exception while loading XLS file Exception    CELLSNET-46207 Index out of range exception in SheetRender.ToImage method Exception …","date":-62135596800,"description":"","objectID":"5cc2895024543b21bc4167292fa321ca","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.7+release+notes/","title":"Aspose.Cells for .NET 18.7 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.8.\n   Key Summary Category     CELLSNET-42992 Apply text alignment to partial text inside the TextBox New Feature    CELLSNET-44155 Read/write connections of XLSB file  New Feature    CELLSNET-46123 Support parsing formulas of revision logs to binary array  New Feature    CELLSNET-46220 Set ContentCopyForAccessibility option while converting spreadsheet to PDF file format  New Feature    CELLSNET-43560 Encrypt an ODS file New Feature    CELLSNET-43556 Open encrypted ODS file New Feature    CELLSNET-46209 Support reading and writing DConn of XLS file  New Feature    CELLSNET-43326 Add overloads to CopyRows and CopyColumns with Paste Special options New Feature    CELLSNET-41637 Retrieve Subtotaling settings New Feature    CELLSNET-46252 Argument to skip row/rows as data headers in exporting range to datatable Enhancement    CELLSNET-46226 Ink Annotations become regular images after conversion Enhancement    CELLSNET-41693 Auto-fit columns improvement is included Enhancement    CELLSNET-46263 Application hangs while converting XLS to PDF Performance   CELLSNET-46262 Cell background is wrong when cell text orientation is inclined in the output PDF  Bug    CELLSNET-44761 Text in a shape has not rendered correctly in PDF Bug    CELLSNET-43916 Shape shadow is missing while converting spreadsheet to HTML  Bug    CELLSNET-46251 Application hangs while converting XLSX to HTML Bug    CELLSNET-46241 Problem with multilines in HTML Bug    CELLSNET-46219 Width from HTML tag is not followed while converting HTML to XLSX Bug    CELLSNET-46280 Exception raised while importing data into Excel file with SmartMarkers  Bug    CELLSNET-46267 Issue with data filtering top rows Bug    CELLSNET-46264 R1C1Formula property has changed its behavior Bug    CELLSNET-46258 Issue calculating reverse VLOOKUP array formula Bug    CELLSNET-46197 Data validation issue - if inserting wrong value and clicking other cell does not …","date":-62135596800,"description":"","objectID":"48bd0b3da4f5c121022b7f5dea4de0c4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.8+release+notes/","title":"Aspose.Cells for .NET 18.8 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 18.9.\n   Key Summary Category     CELLSNET-42992 Applying text alignment to partial text inside the TextBox New Feature    CELLSNET-46308 Export custom document properties to PDF  New Feature    CELLSNET-46301 Get XML path from List Object/Table New Feature    CELLSNET-46315 Support stock chart in ODS file  New Feature    CELLSNET-46304 Add Row.FirstDataCell property to retrieve the first data cell in the row Enhancement    CELLSNET-46298 Create safe sheet names similar to Apache POI Enhancement    CELLSNET-46319 FilterOperatorType.Contains missing from API Enhancement    CELLSNET-46297 Retrieve range of Query Table Enhancement    CELLSNET-46294 Name worksheet same as source file name while converting CSV/TSV to Spreadsheet Enhancement    CELLSNET-46289 Include unsigned Dlls of Aspose.Cells Enhancement    CELLSNET-46290 Wrong colors rendered for shapes in Excel to PDF conversion Bug    CELLSNET-46282 Quite small images rendered in PDF Bug    CELLSNET-46328 Broken hyperlink in HTML Bug    CELLSNET-46322 Issues in number and date values while calling the AutoFitColumns() Bug    CELLSNET-46312 Pivot tables not working after load and save Bug    CELLSNET-46291 Issues in Pivot tables while refreshing and hiding pivot items Bug    CELLSNET-46279 PivotTable.RefreshData throws \u0026amp;lsquo;Index out of range\u0026amp;rsquo; exception Bug    CELLSNET-46303 Formula not calculated properly Bug    CELLSNET-46327 Named ranges when converted into SVG, not capturing the exact fonts and spacing Bug    CELLSNET-46313 Issues in output PDF when using German keywords in scripting headers and footers Bug    CELLSNET-46300 Table/List Object overlapped the data below the table when importing xml data into the spreadsheet Bug    CELLSNET-46318 Vertical gridlines appeared in the chart after calling Chart.Calculate() method Bug    CELLSNET-46287 Horizontal axis is missing in rendered images from Excel chart Bug    CELLSNET-46286 Issue while setting …","date":-62135596800,"description":"","objectID":"3e9a46adcffa40daab881bfb87f8e413","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/aspose.cells+for+.net+18.9+release+notes/","title":"Aspose.Cells for .NET 18.9 Release Notes"},{"content":" Aspose.Cells for .NET 18.12 Release Notes Aspose.Cells for .NET 18.11 Release Notes Aspose.Cells for .NET 18.10 Release Notes Aspose.Cells for .NET 18.9 Release Notes Aspose.Cells for .NET 18.8 Release Notes Aspose.Cells for .NET 18.7 Release Notes Aspose.Cells for .NET 18.6 Release Notes Aspose.Cells for .NET 18.5 Release Notes Aspose.Cells for .NET 18.4 Release Notes Aspose.Cells for .NET 18.3 Release Notes Aspose.Cells for .NET 18.2 Release Notes Aspose.Cells for .NET 18.1 Release Notes  ","date":-62135596800,"description":"","objectID":"811795370656530e88dff8b9e69f0996","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2018/","title":"Release Notes - 2018"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.1.\n   Key Summary Category     CELLSNET-46429 Add PivotTable with Show Report Filter Pages option New Feature   CELLSNET-46014 Support handling overflowing cell content while saving as PDF and image New Feature   CELLSNET-46490 Support Excel95/5.0 XLS files New Feature   CELLSNET-46500 Sort by cell background color New Feature   CELLSNET-46544 Detect if generated MHT file is a worksheet or not New Feature   CELLSNET-46538 When XLSX is saved as PDF or TIFF, the bottom of the text is missing Bug   CELLSNET-46509 R1C1 formulas are read incorrectly for certain cells Bug   CELLSNET-46513 Aspose.Cells formula calculation engine calculates a formula for the cell as \u0026amp;ldquo;0\u0026amp;rdquo; instead of \u0026amp;ldquo;#REF!\u0026amp;rdquo; error Bug   CELLSNET-46535 \u0026amp;ldquo;#NAME?\u0026amp;rdquo; for formulas saved in XLSB format Bug   CELLSNET-46539 Formula case sensitive issue Bug   CELLSNET-46531 Renaming ListColumns corrupts workbook (when there is a PivotTable) Bug   CELLSNET-46511 TIFF created with extra blank pages Bug   CELLSNET-46522 Applying regional settings to print setup headers Bug   CELLSNET-46529 Image missing after XLSX to PDF conversion Bug   CELLSNET-46451 Issue when rendering the template file to PDF file format Bug   CELLSNET-46518 Layout issue (some axis labels are in two lines) when rendering the template file to PDF file format Bug   CELLSNET-46113 File format is not supported exception for XLS document Bug   CELLSNET-46504 Links Path issue Bug   CELLSNET-46506 Difference with ImportObjectArray method Bug   CELLSNET-46541 Combo chart not working with v18.12.x but works with v18.4 and earlier versions Bug   CELLSNET-46543 Exception while calling Cells.DeleteBlankRows Exception   CELLSNET-46459 An exception raises while converting to the Open Strict XML format Exception   CELLSNET-46485 Exception when loading an XLSB file format Exception   CELLSNET-46508 Exception when loading an XLSM file format Exception   Public API and …","date":-62135596800,"description":"","objectID":"d10d5457c706568996de2aa77ee2ec5a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.1+release+notes/","title":"Aspose.Cells for .NET 19.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.10.\n   Key Summary Category     CELLSNET-46926 PageSavingCallback when saving to TIFF New Feature   CELLSNET-46927 IMailMergeDataSource equivalent for Cells New Feature   CELLSNET-46903 Changing style on ContentTypeProperties Enhancement   CELLSNET-46954 Raise Exception similar to Excel instead of hanging program Performance   CELLSNET-46896 Funnel graph disappears Bug   CELLSNET-46934 Delay and memory usage when converting to PDF file format  Bug   CELLSNET-43416 Sorting of the Pivot Field is changed after rendering the spreadsheet to PDF Bug   CELLSNET-44686 Pivot sorting not applied when extracting Chart Bug   CELLSNET-46793 An issue with pivot tables Bug   CELLSNET-46882 Issue when grouping pivot table by date and saving as PDF Bug   CELLSNET-46935 Wrap text not rendered in HTML Bug   CELLSNET-46940 Table borders are not correctly rendered in HTML Bug   CELLSNET-46939 Support for TEXTJOIN() function Bug   CELLSNET-46237 Cell Format does not stick Bug   CELLSNET-46245 Cut/Paste does not copy the name of Cell to the new location in GridDesktop Bug   CELLSNET-46910 List data validations (dropdowns) are not working with Aspose.Cells.GridWeb matrix Bug   CELLSNET-46943 ImportXML function Table data taking from wrong record Bug   CELLSNET-46899 The appearance of the funnel graph changes (title font, number format, graph width) Bug   CELLSNET-46900 The color scheme of the map chart changes Bug   CELLSNET-46902 Manually delete row option is disabled in the table after populating the Excel file using ImportData Bug   CELLSNET-46916 Insert Range is causing file corruption Bug   CELLSNET-46919 Corrupted file when changing to XLSB file format from XLSX Bug   CELLSNET-46925 Issue while extracting OLE object from XLSX Bug   CELLSNET-46928 Conholdate Total license issue Bug   CELLSNET-46929 Chart axis label\u0026amp;rsquo;s (title) orientation changed when copying worksheets Bug   CELLSNET-46933 Opening and saving an XLS …","date":-62135596800,"description":"","objectID":"d3161b4fe1e4f7dc6c2421e55b1188a9","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.10+release+notes/","title":"Aspose.Cells for .NET 19.10 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.11.\n   Key Summary Category     CELLSNET-44956 Support to hide selected ranges and sort the displayed results of Pivot Table New Feature   CELLSNET-46852 Support reading and writing table whose data source is a query table in the XLS file. New Feature   CELLSNET-46967 Support to get indent size in unit of pixels New Feature   CELLSNET-46973 Excel formula not working in generated XLS file Enhancement   CELLSNET-46981 Support to read/write with memory stream for Workbook.ImportXml and Workbook.ExportXml Enhancement   CELLSNET-46905 No changes for link source saved in XLS file Enhancement   CELLSNET-46898 The background of the 3D model turns blue Bug   CELLSNET-46314 Issues while refreshing Pivot Table with \u0026amp;ldquo;Show value as % of grand total\u0026amp;rdquo; Bug   CELLSNET-46789 CalculateData method does not work correctly with PDF format Bug   CELLSNET-46955 HTML to Excel file raises exception \u0026amp;ldquo;Item has already been added\u0026amp;rdquo; Bug   CELLSNET-46987 Can\u0026amp;rsquo;t calculate formula when referencing cells Bug   CELLSNET-46968 The indirect formula does not work properly in MS Excel Bug   CELLSNET-46991 XLSX file is corrupted. Bug   CELLSNET-46994 #Value! in the output Excel file (Opened in Excel 365)after calling the Calculate Formula Bug   CELLSNET-47001 CalculateFormula() causes NullReferenceException Bug   CELLSNET-46953 Content is cut when printing Bug   CELLSNET-46966 Right Border missing when HorizontalAlignment is set to Fill Bug   CELLSNET-45362 Tile picture options don\u0026amp;rsquo;t work for chart backgrounds in XLS files Bug   CELLSNET-46949 OLE objects become pictures when copying worksheets Bug   CELLSNET-46963 Chart labels lose formatting after saving Excel file Bug   CELLSNET-46965 Calling Chart.Calculate() on an empty chart that has an empty auto-text title throws an error Bug   CELLSNET-46971 The newly copied sheet is un-hiding any hidden columns and also resetting columns width Bug   CELLSNET-46972 …","date":-62135596800,"description":"","objectID":"8ba6bfe72cd5deb20a46cb7166a0c4cc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.11+release+notes/","title":"Aspose.Cells for .NET 19.11 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.12.\n   Key Summary Category     CELLSNET-44451 Apply data Sorting for data field with respect to Row field in PivotTable - Mimic results as per user\u0026amp;rsquo;s expected file New Feature   CELLSNETCORE-45 Load data from Datasource with the option to skip some character like Apostrophe New Feature   CELLSNET-47018 Calculating some combo charts can throw an exception Enhancement   CELLSNET-47016 Wrap text is different in the latest version of Aspose.Cells Enhancement   CELLSNET-47023 Chart lost while loading and saving ODS file Enhancement   CELLSNET-47056 Charts not rendered while loading and saving ODS file Enhancement   CELLSNET-46679 Incorrect rendering when exporting XLSX to PDF Bug   CELLSNET-46680 Wingding symbol is missing when converting XLSX to PDF Bug   CELLSNET-46740 Error in pictures while converting Excel file to PDF Bug   CELLSNET-46901 The 3D model position shifts Bug   CELLSNET-46936 Font not rendered fine in HTML Bug   CELLSNET-47013 Numbers on Funnel graph disappear while converting Excel file to PDF Bug   CELLSNET-43846 Pivot Table loses the custom field names and the \u0026amp;ldquo;Show Value As\u0026amp;hellip;\u0026amp;rdquo; setting Bug   CELLSNET-46444 Pivot table value changed after calling the PivotTable.CalculateData Bug   CELLSNET-46484 RefreshData does not sort data before opening the file in Excel Bug   CELLSNET-47010 An issue with pivot table group headers\u0026amp;rsquo; formatting Bug   CELLSNET-47024 Incorrect rows sort order in Pivot tables with Values row Bug   CELLSNET-47034 Column widths and rows height squeezed during HTML to Excel conversion Bug   CELLSNET-47007 Value error is shown while evaluating the formula Bug   CELLSNET-47029 Incorrect value TRUE retrieved from Cell instead of value FALSE Bug   CELLSNET-47052 Corrupted DateTimeFormat while converting Excel to PDF Bug   CELLSNET-46757 Issues while converting XLSX to PDF Bug   CELLSNET-46976 Some border lines disappear in Excel to PDF rendering Bug …","date":-62135596800,"description":"","objectID":"b68a4424d93568dc6bedc82be3d9c627","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.12+release+notes/","title":"Aspose.Cells for .NET 19.12 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.2.\n   Key Summary Category     CELLSNET-46582 Support Range.Hyperlinks property New Feature   CELLSNET-46534 Int32 can be small for Cells.count attribute Enhancement   CELLSNET-46552 Differentiate encrypted XLSX from encrypted PPTX and encrypted DOCX Enhancement   CELLSNET-46568 Setting Box Whisker chart style Enhancement   CELLSNET-46573 Replace invalid characters with suitable symbols like brackets Enhancement   CELLSNET-46581 Open/save removes table alternative text Enhancement   CELLSNET-46584 Performance Issue with Aspose.Cells APIs Performance   CELLSNET-46556 Text of TextBox is cut Bug   CELLSNET-46565 Pictograms are not visible in the output PDF in Excel to PDF rendering Bug   CELLSNET-46477 Conditional formatting in Pivot table does not work in a copied sheet Bug   CELLSNET-46547 Content missing from HTML to Excel Conversion Bug   CELLSNET-46566 XLSX file corrupt after saving with Aspose.Cells APIs Bug   CELLSNET-46572 XLSB is corrupted while adding more than 1 data field whereas XLSX works fine Bug   CELLSNET-46548 NumberValue issue while converting XLSX to PDF file format Bug   CELLSNET-46557 Wrong cell value calculated by Aspose.Cells formula calculation engine Bug   CELLSNET-46578 Worksheet.AutoFitColumns() is not fully fitting columns Bug   CELLSNET-46550 Labels text messed up when converting MS Excel chart to images Bug   CELLSNET-46558 Tick marks of chart are lost when reading and saving an ODS file Bug   CELLSNET-46560 The name of series is lost when saving an ODS file Bug   CELLSNET-46561 The default border of plot area in chart should not be visible for ODS file Bug   CELLSNET-46562 X axis\u0026amp;rsquo;s gridlines are removed when reading and saving XLSX file Bug   CELLSNET-46569 Page Setup settings changed after loading and saving the MS Excel file Bug   CELLSNET-46574 Issue with saving and opening XLSB files Bug   CELLSNET-46555 An exception raises while editing some properties Exception …","date":-62135596800,"description":"","objectID":"80d0a6d4402c09be2661fdd77fca306d","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.2+release+notes/","title":"Aspose.Cells for .NET 19.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.3.\n   Key Summary Category     CELLSNET-46598 Add Name.GetReferredAreas (Boolean recalculate) method to give richer data (including external references and linked data) New Feature   CELLSNET-46580 Incorrect rendering of rotated shapes in Shape to image conversion Bug   CELLSNET-46587 Pivot Table breaks when deleting rows and columns Bug   CELLSNET-46608 Pivot table filters are cleared after load and save Bug   CELLSNET-46623 Issues in embedded shared file URLs while converting Excel file to HTML Bug   CELLSNET-46590 Error in a cell that calls a macro after the file is processed by Aspose.Cells Bug   CELLSNET-46597 Wrong value in PDF in Excel to PDF rendering Bug   CELLSNET-46613 Issues while fetching and creating named ranges Bug   CELLSNET-46625 Wrong table background in output PDF and HTML Bug   CELLSNET-46628 Difference in the output PDF Bug   CELLSNET-46589 Unexpected gridlines appeared in SVG converted from MS Excel worksheet Bug   CELLSNET-46600 Double underline disappears while converting Excel file to PDF Bug   CELLSNET-46626 Space formatting issues while converting XLSX file to PDF Bug   CELLSNET-46585 DataLabel font issue Bug   CELLSNET-46602 OutOfMemoryException while rendering a vertical or horizontal bar graph Bug   CELLSNET-46605 Row increases in height after auto-fit rows(options) operation Bug   CELLSNET-46609 Insert option CopyFormatType.Clear not working properly Bug   CELLSNET-46611 Issues with external links and its display Bug   CELLSNET-46616 Handling ListObject.ConvertToRange on gigantic tables Bug   CELLSNET-46620 Line.SolidFill.Color works improperly on shapes when passing color from Argb or from known name Bug   CELLSNET-46622 Cells.ImportData imports wrong number of columns from datatable Bug   CELLSNET-46624 XLSX file load issue Bug   CELLSNET-46635 Too many page breaks in ODS file (XLSX to ODS rendering) Bug   CELLSNET-46618 Exception \u0026amp;ldquo;Instance is Read-only\u0026amp;rdquo; …","date":-62135596800,"description":"","objectID":"87fb64b5e6cf498a34b928d9df75fc09","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.3+release+notes/","title":"Aspose.Cells for .NET 19.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.4.\n   Key Summary Category     CELLSNET-46619 Support saving Markdown format document New Feature   CELLSNET-46124 Support adding WebExtension shape New Feature   CELLSNET-46553 Support importing JSON files New Feature   CELLSNET-46653 Support adding WebExtension task pane New Feature   CELLSNET-46656 Support threaded comments New Feature   CELLSNET-46657 Support cutting and pasting cells New Feature   CELLSNET-46686 Support taking white space (char code 20) as the number group separator for the French language Enhancement   CELLSNET-46649 Large PDF generated as compared to online tool iLovePDF Enhancement   CELLSNET-46093 Charts do not honor Page Setup Black and White Enhancement   CELLSNET-46677 Exporting Excel to PDF does not render Arabic texts precisely in charts Enhancement   CELLSNET-46639 Support vertical page break for ODS file. Enhancement   CELLSNET-46631 Exception OutOfMemoryException while rendering Performance   CELLSNET-46596 Labels missing in shapes Bug   CELLSNET-46615 Shape.ToImage() exports images of different size Bug   CELLSNET-46637 Formatting errors in generated HTML Bug   CELLSNET-46650 PivotTable.ShowValuesRow not set to false programmatically Bug   CELLSNET-46652 Pivot table slicers are removed after load and save Bug   CELLSNET-46678 PivotField.IsRepeatItemLabels is not maintained in output XLSB Bug   CELLSNET-46671 Range.Copy after Range.CopyData corrupts the workbook Bug   CELLSNET-42423 Saving to PDF trims the row data Bug   CELLSNET-45698 Worksheet.AutoFitColumns method cuts off the long text while rendering to PDF Bug   CELLSNET-46661 Less number of pages rendered in PDF as compared to Excel 365 Bug   CELLSNET-46673 File Size problem when converting Excel to PDF Bug   CELLSNET-46632 ChartPoint.Datalabels.ShowValue not working as expected Bug   CELLSNET-46655 Multi-Level Category Axis Labels lost when saving with RefreshChartCache = true Bug   CELLSNET-46665 Excel file is …","date":-62135596800,"description":"","objectID":"1ae232ac06e9d022bc1c872c472deace","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.4+release+notes/","title":"Aspose.Cells for .NET 19.4 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.5.\n   Key Summary Category     CELLSNET-46703 The new Japanese calendar is not displayed correctly New Feature   CELLSNET-46693 Support background of ODS New Feature   CELLSNET-46695 Set background of ODS file New Feature   CELLSNET-46706 Invalid number order when converting Arabic font to PDF. Enhancement   CELLSNET-46692 Control all external data with IStreamProvider interface Enhancement   CELLSNET-46711 ImportCustomObjects to merged area breaks merge Enhancement   CELLSNET-46713 The method \u0026amp;ldquo;String.StartsWith(\u0026amp;quot;\\0\u0026amp;rdquo;)\u0026amp;rdquo; always returns true on macOS Enhancement   CELLSNET-46719 Exception when setting HTML string using the RGBA color model Enhancement   CELLSNET-46701 Bubble charts processing hangs with version 19.4 Bug   CELLSNET-46682 Option \u0026amp;ldquo;Hide items with no data\u0026amp;rdquo; for Slicer settings is unchecked Bug   CELLSNET-46707 PivotTable.GetChildren() returns wrong number of dependencies Bug   CELLSNET-46689 Saving a workbook as PDF is different than excel\u0026amp;rsquo;s native output Bug   CELLSNET-46704 The output of converting Excel to PDF using Aspose.Cells is different than Excel Bug   CELLSNET-46720 The page structure is corrupted on the last page in Excel to PDF conversion Bug   CELLSNET-46727 Wrong page numbering while saving workbook as PDF Bug   CELLSNET-46700 Pie chart data labels overlap with each other Bug   CELLSNET-46696 Converting XLS with Microsoft graph chart to XLSX and XLSM causes an unreadable content error Bug   CELLSNET-46697 Converting XLSM with OLE object to XLS causes an error Bug   CELLSNET-46712 Converting XLS with Microsoft graph chart to XLSX and XLSM causes an unreadable content error Bug   CELLSNET-46715 Cells.InsertCutCells() Issue Bug   CELLSNET-46725 \u0026amp;ldquo;x000a\u0026amp;rdquo; string is added in multiline chart alt text description Bug   CELLSNET-46683 Exception when rendering an Excel file to PDF Exception   CELLSNET-46690 An exception is raised while …","date":-62135596800,"description":"","objectID":"45ef243851a4830312a97d6231d37c07","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.5+release+notes/","title":"Aspose.Cells for .NET 19.5 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.6.\n   Key Summary Category     CELLSNET-41277 Comments in HTML export of XLS/XLSX files New Feature   CELLSNET-45194 Support Drawing of Slicer while rendering to PDF New Feature   CELLSNET-46742 Add OpenDocument Flat XML Spreadsheet (.fods) file format support New Feature   CELLSNET-46744 Add StarOffice Calc Spreadsheet (.sxc) file format support New Feature   CELLSNET-46714 Embedded OOXML file as a package for XLSX. Enhancement   CELLSNET-46722 Security warning after re-saving an XLS file format Enhancement   CELLSNET-46737 Problems with medium lines/thick lines when XLSX saved as ODS Enhancement   CELLSNET-46755 Detecting whether the object file is chart or oleobject for ODS. Enhancement   CELLSNET-46731 Worksheet.Copy() hangs the application Performance   CELLSNET-46770 Out of memory when refreshing the PivotTable with a large data source Performance   CELLSNET-46730 Chart.ToImage() hangs the application Performance   CELLSNET-46670 Excel file contents get overlapped after adding custom properties Bug   CELLSNET-46747 Grid lines are printed over the embedded object while rendering to PDF Bug   CELLSNET-41479 Slicer settings in generated PDF Bug   CELLSNET-41783 Files generated from a template file that contains a slicer need fixing Bug   CELLSNET-46733 Style/Format lost while saving the Pivot Table as HTML Bug   CELLSNET-46736 Font issue when HTML converted to PDF Bug   CELLSNET-46751 XLSX cannot be converted to HTML Bug   CELLSNET-46766 XIRR function not working if the last row is greater than -62 in the range Bug   CELLSNET-46769 Cell value extracted different than Excel in German culture Bug   CELLSNET-46761 Issue with Aspose.Cells.GridDesktop display when setting resolutions and zoom in a 4k monitor Bug   CELLSNET-46592 Text rendering issues while converting XLSX to PDF Bug   CELLSNET-46735 Page number does not restart to 1 on each sheet in the output PDF Bug   CELLSNET-46739 Tiff compression type …","date":-62135596800,"description":"","objectID":"36a88ad6309967fed53fdf6e7e7ebb4c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.6+release+notes/","title":"Aspose.Cells for .NET 19.6 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.7.\n   Key Summary Category     CELLSNET-42029 Support for adding some sort of Callback event/mechanism that notifies you the progress of the conversion  New Feature   CELLSNET-46791 Support more views but not custom view New Feature   CELLSNET-46808 Support reading table single cells of XLS file. New Feature   CELLSNET-46775 The grouped shape\u0026amp;rsquo;s width cannot be set Enhancement   CELLSNET-46785 The abbreviation case is different for the very same words: HtmlSaveOptions and HTMLLoadOptions, JsonLayoutOptions and JSONUtility, ODSLoadOptions and OdsSaveOptions.  Enhancement   CELLSNET-46811 Support HeadingPairs and TitlesOfParts tags of XLS file. Enhancement   CELLSNET-46783 CalculateFormula is very slow Performance   CELLSNET-46746 CalculateFormula - formulas do not affect charts Bug   CELLSNET-46772 Erroneous PDF created by missing the graphics Bug   CELLSNET-46802 Chart rendered differently in XLS than PDF Bug   CELLSNET-46806 Combo Chart renders to PDF incorrectly Bug   CELLSNET-41449 XLSB with complex PivotTable files Bug   CELLSNET-43921 Rendering XLSX to XLSB produces corrupted file Bug   CELLSNET-44593 Output Excel file is not good while converting HTML to Excel Bug   CELLSNET-46794 Cells shift when HTML converted to XLSX Bug   CELLSNET-46809 The conditional formats have blanked out all cells in the column (columns B, C, and D) Bug   CELLSNET-46778 CalculateFormula() breaks UNICHAR() depiction Bug   CELLSNET-46781 System.Globalization.CultureInfo.CurrentCulture is modified Bug   CELLSNET-46244 GridDesktop Copy and paste with Comment errors out Bug   CELLSNET-46774 Text in rows distorted while converting a large file to PDF Bug   CELLSNET-46798 Problem converting Excel to PDF Bug   CELLSNET-46797 Underline font style is ignored while rendering Excel sheet to BMP/Tiff  Bug   CELLSNET-46664 HeadingPairs and TitlesOfParts tags are restored again after converting cleaned XLS back to XLSM file format …","date":-62135596800,"description":"","objectID":"38db0881b99dee63f2c4ef030eab1e7e","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.7+release+notes/","title":"Aspose.Cells for .NET 19.7 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.8.\n   Key Summary Category     CELLSNET-46823 Support Elliptic Curve Digital Signature Algorithm (ECDSA) for P-384 and P-521 New Feature   CELLSNET-46813 Support for extracting OLE Embedded .MOL file New Feature   CELLSNET-46822 Detecting the difference between internal and external hyperlinks New Feature   CELLSNET-42334 Aspose.Cells.GridWeb compatibility with MVC Enhancement   CELLSNET-46804 Improve performance for calculating large matrix with double values Performance   CELLSNET-46856 The document fails to save when saved more than 10 times Performance   CELLSNET-46827 Content missing in XLSX to ODS conversion Bug   CELLSNET-46833 Shapes are distorted in Excel to PDF conversion Bug   CELLSNET-46835 Drawing shapes are not rendered properly in Excel to PDF rendering Bug   CELLSNET-46848 Issue with Arabic text in Excel to PDF rendering Bug   CELLSNET-44973 Unable to set the fill color of the Pivot Table cells Bug   CELLSNET-46818 Not all styles are exported when saving to HTML Bug   CELLSNET-46824 Pivot table corrupted after pivot source data updated Bug   CELLSNET-46820 Smart marker grouping data issues Bug   CELLSNET-46840 Issue with Workbook.RemoveUnusedStyles method Bug   CELLSNET-46853 Some columns are rendered in red color in Excel to PDF rendering Bug   CELLSNET-46829 DBConnection object is not providing value for DBConnection.ConnectionInfo Bug   CELLSNET-46830 Read and write to Queries Bug   CELLSNET-46841 Opening specific XLS file with Aspose errors Bug   CELLSNET-46845 Issues in the behavior of ImportTableOptions.InsertRows Bug   CELLSNET-46846 Excel file corrupted after re-saving Bug   CELLSNET-46849 Problem with external data connections Bug   CELLSNET-46850 Data grouping not preserved while using Cells.DeleteRange() Bug   CELLSNET-46855 InsertRows wrongly splits grouped rows Bug   CELLSNET-46858 XLSX to ODS conversion changes text font in the textbook Bug   CELLSNET-46859 Print preview does …","date":-62135596800,"description":"","objectID":"6cce698dec7b09d2c66860cb7162d8cc","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.8+release+notes/","title":"Aspose.Cells for .NET 19.8 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 19.9.\n   Key Summary Category     CELLSNET-46864 Support reading and rendering Control of ODS files New Feature   CELLSNET-46877 Add SheetRender.ToPrinter(PrinterSettings PrinterSettings) overload to the APIs New Feature   CELLSNET-46907 Configure ZIP compression level for XLSX/XLSB New Feature   CELLSNET-46890 Results of integer division should not be assigned to floating-point variables Bug   CELLSNET-46883 PivotTables do not retain multiple select options after processing smart markers Bug   CELLSNET-46874 Values not derived from formula and require pressing F2 to get values in cells Bug   CELLSNET-46904 Hyperlinks are lost when importing data from DataTable Bug   CELLSNET-46875 Contents overflow from the page during PDF conversion Bug   CELLSNET-46865 An object is changed after open and save Bug   CELLSNET-46866 Setting the font and font size of Drawing.TextBox is not working in ODS Bug   CELLSNET-46867 Checkboxes lost while resaving XLSX Bug   CELLSNET-46873 Ref! shown as formula not applied Bug   CELLSNET-46876 OLE object link not accessible from XLS file Bug   CELLSNET-46881 Grouping and ungrouping does not hide borders Bug   CELLSNET-46884 Worksheets are grouped while using VisibilityType.VeryHidden/Hidden Bug   CELLSNET-46886 Table with single row expanding to one additional row below after saving the workbook Bug   CELLSNET-46887 Conditional formatting is not retained after opening the file into MS Excel and Save it. Bug   CELLSNET-46891 OleObject\u0026amp;rsquo;s gradient filling is read as FillType.Solid Bug   CELLSNET-46894 Show sheet tab setting unchecked while saving the Excel file Bug   CELLSNET-46906 Aspose.Cells hanged on opening an XLSX file Bug   CELLSNET-46909 OLE Object\u0026amp;rsquo;s formatting changed after opening and saving Excel file Bug   CELLSNET-46857 Filter connections on pivot chart lose settings on save after refreshing pivot tables Bug   CELLSNET-46862 The setting “Hide items with no data” …","date":-62135596800,"description":"","objectID":"36332acc9f140108231cba46db259df4","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/aspose.cells+for+.net+19.9+release+notes/","title":"Aspose.Cells for .NET 19.9 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"4646a0097a6ede95c02165036c182db0","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2019/","title":"Release Notes - 2019"},{"content":"This page contains release notes for Aspose.Cells for .NET 20.1.\n   Key Summary Category     CELLSNET-47026 Support \u0026amp;ldquo;Rank Smallest to Largest\u0026amp;rdquo; and \u0026amp;ldquo;Rank Largest to Smallest\u0026amp;rdquo; display format option New Feature   CELLSNET-47030 Display headings when saving into HTML New Feature   CELLSNET-47089 Support all the data display formats of DataField New Feature   CELLSNET-47062 Support for STDEV.P and STDEV.S New Feature   CELLSNET-47070 Support for Regex in Replace function similar to Find() using options New Feature   CELLSNET-46998 Support for XAdES signatures New Feature   CELLSNET-40174 Inserting CheckBox in chart type sheet New Feature   CELLSNET-43089 Support for Conditional Formatting while converting ODS to XLSX New Feature   CELLSNET-43090 Support for Data Validation while converting ODS to XLSX format New Feature   CELLSNET-47064 Support the shapes in the chart for .xlsx file. Enhancement   CELLSNET-47065 Get PowerQuery from DataConnections Enhancement   CELLSNET-47066 Fetch formatted PowerQuery MCode similar to MS Excel Enhancement   CELLSNET-47008 Issue while rendering an image of a chart at a specific angle Bug   CELLSNET-47063 Render Excel to printer issue when fonts are not installed Bug   CELLSNET-44237 Descend ordering of the PivotTable\u0026amp;rsquo;s DataField Bug   CELLSNET-47002 The calculated value is shown as \u0026amp;ldquo;#REF!\u0026amp;rdquo; in resultant PDF Bug   CELLSNET-47050 Some fields on the first page do not appear in the output PDF Bug   CELLSNET-40733 Open Office .ods file - the conditional formatting doesn\u0026amp;rsquo;t stay Bug   CELLSNET-47039 XY Scatter charts in ODS file are not rendered fine Bug   CELLSNET-47040 Net charts in ODS file are not rendered fine Bug   CELLSNET-47060 Support custom XY of title in ods file Bug   CELLSNET-47072 The difference in the Link path fetched by Aspose.Cells when compared with Excel Bug   CELLSNET-47087 Have a problem when printing the excel file that saved by Aspose.Cells for .NET Bug   CELLSNET-47082 …","date":-62135596800,"description":"","objectID":"72def785940850da06c69effe7f525f1","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2020/aspose.cells+for+.net+20.1+release+notes/","title":"Aspose.Cells for .NET 20.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 20.2.\n   Key Summary Category     CELLSNET-47113 Pipe-delimited / CSV to JSON conversion New Feature   CELLSNET-47141 The link between the Pivot Table and the external connection New Feature   CELLSNET-47135 Aspose.Cells does not consider TEXTJOIN() advanced formula/function as Formula Enhancement   CELLSNET-47126 Aspose.Cells deletes \u0026amp;ldquo;volatileDependencies.xml\u0026amp;rdquo; from file with RTD formulas while updating XLSX file Enhancement   CELLSNET-47159 Too much time cost for PivotTable.CalculateStyle Performance   CELLSNET-42065 Previously calculated Pivot Percentage breaks after the pivot.CalculateData() Bug   CELLSNET-47102 \u0026amp;ldquo;#\u0026amp;rdquo; displayed after converting Excel to PDF on Negative Time custom format(h:mm) Bug   CELLSNET-47118 Incorrect value \u0026amp;lsquo;TRUE\u0026amp;rsquo; retrieved from Cell instead of value \u0026amp;lsquo;FALSE\u0026amp;rsquo; Bug   CELLSNET-47125 Spaces are lost from the formula when fetched using Aspose.Cells for .NET Bug   CELLSNET-47149 Formula calculation is different in Aspose.Cells and MS Excel Bug   CELLSNET-47108 Conditional Formatting not displayed in GridDesktop Bug   CELLSNET-47134 Inserting column takes too much time in Aspose.Cells.GridDesktop Bug   CELLSNET-47138 GridDesktop takes a long time to load large size files Bug   CELLSNET-47043 Unable to select a cell for protected sheet into GridDesktop Bug   CELLSNET-47117 Aspose.Cells 20.1 XAdES type is not defined when reading previously signed files with XAdES signatures Bug   CELLSNET-47081 Rendering Chart to PDF Bug   CELLSNET-47085 The chart is not rendered properly when axis labels\u0026amp;rsquo; text direction is \u0026amp;lsquo;Stack\u0026amp;rsquo; Bug   CELLSNET-47112 The chart to image conversion fails Bug   CELLSNET-47133 Inconsistency when exporting to PDF Bug   CELLSNET-47107 Conditional formatting object gives wrong results for IsAboveAverage attribute Bug   CELLSNET-47114 Workbook RemoveExternalLinks results in a broken document Bug   CELLSNET-47139 ODS …","date":-62135596800,"description":"","objectID":"fc795b3b07172c1f0e940e5c26236c1a","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2020/aspose.cells+for+.net+20.2+release+notes/","title":"Aspose.Cells for .NET 20.2 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 20.3.\n   Key Summary Category     CELLSNET-47130 Support for FLOOR.MATH(-555,5,1) New Feature   CELLSNET-47168 Support for FILTER function New Feature   CELLSNET-47204 Get worksheet unique id New Feature   CELLSNET-47229 Support for setting chart.series.dataLables.TextDirection to vertical New Feature   CELLSNET-47092 Make icons available for IStreamProvider like usual images while saving the document to HTML Enhancement   CELLSNET-47094 Reduce flickering in GridDesktop for smooth resizing Enhancement   CELLSNET-47173 Distinguish hidden/very hidden sheets in Aspose.Cells.GridDesktop Enhancement   CELLSNET-47101 Improve the performance of saving conditional formatting and validation with whole rows. Enhancement   CELLSNET-47178 Indentation lost while creating a table and converting to HTML Bug   CELLSNET-47199 The difference in the calculation for named range while setting CreateCalcChain to true and false Bug   CELLSNET-47077 Could not apply borders to the cells (having data) when importing an Excel file into GridDesktop Bug   CELLSNET-47172 Problem applying Conditional Formatting Bug   CELLSNET-47177 ParetoLine chart series name and line not rendered to the image Bug   CELLSNET-47191 The chart to image difference Bug   CELLSNET-47202 Legend entries are overlapped in the output image of the chart Bug   CELLSNET-47167 Wrong number of visible links Bug   CELLSNET-47184 BIFF5 with Cyrillic content is incorrectly converted to XLSX Bug   CELLSNET-47205 Range.ApplyStyle() on column range massively increased the workbook file size Bug   CELLSNET-47210 The rich formatted string value of a cell is empty in Apple Numbers\u0026#39;09 Bug   CELLSNET-47213 Copying Sheet to another workbook - hidden cells (rows) disappear Bug   CELLSNETCORE-53 Datapoint on Excel chart line is removed after convert to PDF Bug   CELLSNET-47212 NullReferenceException when saving particular XLSM to XLS Exception   CELLSNET-47222 Aspose.Cells 20.2: …","date":-62135596800,"description":"","objectID":"6557c1048956475ccd3e09e7e3e760b2","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2020/aspose.cells+for+.net+20.3+release+notes/","title":"Aspose.Cells for .NET 20.3 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for .NET 20.4.\n   Key Summary Category     CELLSNET-47276 XLSX to CSV, commas required for blank cells also similar to MS Excel New Feature   CELLSNET-47054 Support union of multiple cells as a range New Feature   CELLSNET-47091 Option to update source field of PowerQueryFormulaItems New Feature   CELLSNET-47273 Set Latin text font and Asian text font for the chart category axis Enhancement   CELLSNET-47217 Support databar, color scale and iconset conditional formattings of ODS. Enhancement   CELLSNET-47201 Open the password-protected file using Aspose.Cells.GridDesktop Enhancement   CELLSNET-47254 Support enter new line as in MS-EXCEL in the formula bar Enhancement   CELLSNET-47224 Improve the performance of refreshing pivotables. Performance   CELLSNET-47243 Hang on GetDisplayStyle for a worksheet with rows 65536 Performance   CELLSNET-47289 CalculateFormula() never returns Performance   CELLSNET-47263 Hanging while trying to open ODP document in Workbook constructor Performance   CELLSNET-42556 Sorting of PivotField does not seem to work Bug   CELLSNET-47046 Unopened quote delimiters in IMG HTML attributes in generated HTML markup Bug   CELLSNET-47208 Pivot table not keeping the format with the latest version Bug   CELLSNET-47219 Wrong formula in the table column after insertion of a row and refreshing it Bug   CELLSNET-47261 Excel to HTML rendering - wrong font size in a table exported Bug   CELLSNET-47279 The first column text in all rows is not sub-scripted when exporting the file to HTML Bug   CELLSNET-47163 Issue with inserting Column and Update Reference Bug   CELLSNET-47244 Formulas (MROUND, MIN) not calculated correctly Bug   CELLSNET-47250 Remove duplicates works for the first column only when specifying columnOffsets parameter Bug   CELLSNET-47267 Formulas are not calculated in the template file Bug   CELLSNET-47268 TrimLeadingBlankRowAndColumn inconsistency Bug   CELLSNET-47269 XLSX to CSV conversion - …","date":-62135596800,"description":"","objectID":"6ea69fc5c5f20a6bd6081e4b58713a55","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2020/aspose.cells+for+.net+20.4+release+notes/","title":"Aspose.Cells for .NET 20.4 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"daeadacadcdb907a497bd3f92b66549c","permalink":"https://roywangt.github.io/cellsnet/releasenotes/releasenotes-2020/","title":"Release Notes - 2020"},{"content":"** Aspose.Cells for Node.js via Java : Aspose.Cells for Node.js via Java Home **\nWelcome to Aspose.Cells for Node.js via Java\nAspose.Cells for Node.js via Java presents all the useful features of Aspose.Cells for Java using Node.js. Aspose.Cells for Node.js via Java is a class library that enables you to perform a great range of spreadsheet processing tasks. Aspose.Cells for Node.js via Java is a scalable and feature-rich API that offers spreadsheet format conversion, styling of worksheets to the most granular level, chart management \u0026amp;amp; rendering, and our reliable Formula Calculation Engine. Aspose.Cells for Node.js via Java supports XLS, XLSX, ODS, SpreadsheetML, CSV, Tab Delimited, HTML/MHTML, PDF, XPS and other formats. With Aspose.Cells for Node.js via Java you can generate, modify, convert and render Excel documents.\nAspose.Cells for Node.js via Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for Node.js via Java is ported from Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for Node.js via Java Features Aspose.Cells for Node.js via Java Limitations and API Differences Aspose.Cells for Node.js via Java Release Notes Aspose.Cells for Node.js via Java Product Page Download Aspose.Cells for Node.js via Java Aspose.Cells for Node.js via Java API Reference Guide Aspose.Cells for Node.js via Java Free Support Forum Aspose.Cells for Node.js via Java Paid Support Helpdesk  Attachments: aspose_cells-for-nodejs.png (image/png)\n","date":-62135596800,"description":"","objectID":"66aae68671cb85d9ab2f233a00609406","permalink":"https://roywangt.github.io/cellsnodejsjava/","title":"Aspose.Cells for Node.js via Java"},{"content":"** Aspose.Cells for PHP via Java : Aspose.Cells for PHP via Java Home **\nWelcome to Aspose.Cells for PHP via Java\nAspose.Cells for PHP via Java provides all the valuable features of Aspose.Cells for Java using JavaBridge. Aspose.Cells for PHP via Java is a class library that enables you to perform a great range of spreadsheet processing tasks. Aspose.Cells for PHP via Java is a scalable and feature rich API that offers spreadsheet format conversion, styling of worksheets to the most granular level, chart management \u0026amp;amp; rendering, and our reliable Formula Calculation Engine. Aspose.Cells for PHP via Java supports XLS, XLSX, ODS, SpreadsheetML, CSV, Tab Delimited, HTML/MHTML, PDF, XPS and other formats. With Aspose.Cells for PHP via Java you can generate, modify, convert and render Excel documents.\nAspose.Cells for PHP via Java Resources\nFollowing are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for PHP via Java is ported from Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for PHP via Java Features Aspose.Cells for PHP via Java Limitations and API Differences Aspose.Cells for PHP via Java Release Notes Aspose.Cells for PHP via Java Product Page Download Aspose.Cells for PHP via Java Aspose.Cells for PHP via Java API Reference Guide Aspose.Cells for PHP via Java Free Support Forum Aspose.Cells for PHP via Java Paid Support Helpdesk     ||      \\     Attachments: aspose.cells-for-php-via-java-64.png (image/png)\n","date":-62135596800,"description":"","objectID":"c801b869ecd993ead59a85bb14ea2533","permalink":"https://roywangt.github.io/cellsphpjava/","title":"Aspose.Cells for PHP via Java"},{"content":"This page summarizes Aspose.Cells for Python via Java features.\n   Contents Summary\n1 File Formats and Conversions\n2 Rendering and Printing\n3 Spreadsheet Content Features\n4 Spreadsheet Formatting Features\n5 PageSetup Features\n ||      File Formats and Conversions       XLS, SpreadsheetML (XLSX, XML), Comma Separated Value (CSV), HTML, OpenDocument Spreadsheet (ODS), PDF, Tab Delimited, Plain Text (TXT)  Rendering and Printing\n Render spreadsheet to vector images (EMF) Render worksheets to raster images (Multipage TIFF, GIF) Render worksheets to raster images (PNG, JPEG, etc.) Render Spreadsheet to PDF with high fidelity  Spreadsheet Content Features\n Copy or move worksheets within or between workbooks Insert images, Create conventional and custom charts and Set gradient background for charts using API Add comments to cells Microsoft Excel 2007/2010 themes and colors Create auto-filters Implement data validations Implement data sorting Find and replace text Merge/split Cells Group/ungroup rows and columns Create custom page breaks Calculate complex Excel formulae Support advanced conditional formatting supported in Microsoft Excel 2007/2010 Freeze/unfreeze Panes Insert hyperlinks to link data Implement Smart Markers Specify document properties settings Protect/unprotect worksheets Specify advanced protection options introduced in Excel XP and later versions Create list object/Microsoft Excel tables Create subtotals Insert form controls and other drawing shapes/objects Create pivot tables and pivot charts Preserve or remove addin, VBA, macros Manipulate named ranges Add, preserve or extract OLE objects from the spreadsheets. Implement Microsoft Excel sparklines Encrypt files  Spreadsheet Formatting Features\n Apply all characters formatting in the cells including fonts, colors, effects, borders, and shading Apply all the number format settings (supported in Microsoft Excel) for the cells Set all types of text alignment settings Apply different kinds of Font Settings …","date":-62135596800,"description":"","objectID":"2522d4146c9d2b75fc27e4f12f4d0804","permalink":"https://roywangt.github.io/cellspythonjava/features+overview/","title":"Features Overview"},{"content":"   Contents Summary\n1 Python Version\n2 Supported Operating Systems 2.1 Windows\n ||      Aspose.Cells for Python via Java does not require having Microsoft Excel installed, as Aspose.Cells itself is an Excel spreadsheet creation, conversion, and rendering engine. To view Excel documents produced by Aspose.Cells, you need to have at least a Microsoft Excel Viewer installed.      Python Version\n Python 3.5 or higher  Supported Operating Systems\nWindows\n Microsoft Windows 2000 ( x64, x86) Microsoft Windows XP ( x64, x86) Microsoft Windows Server 2003 ( x64, x86) Microsoft Windows Server 2008 ( x64, x86) Microsoft Windows Server 2012 ( x64, x86) Microsoft Windows Vista ( x64, x86) Microsoft Windows 7 ( x64, x86) Microsoft Windows 8 ( x64, x86) Microsoft Windows 10 ( x64, x86)  ","date":-62135596800,"description":"","objectID":"8938b814b961706ad2000082e05a3d94","permalink":"https://roywangt.github.io/cellspythonjava/system+requirements/","title":"System Requirements"},{"content":"** Aspose.Cells for Python via Java : Home **\nWelcome to Aspose.Cells for Python via Java\nAspose.Cells for Python via Java enables your applications to perform a great range of spreadsheet processing tasks. Aspose.Cells for Python via Java supports the popular spreadsheet (XLS, XLSX, XLSM, XLSB, XLTX, XLTM, CSV, SpreadsheetML, ODS) file formats your business use every day. It also allows exporting Excel® files to PDF, XPS, HTML, MHTML, Plain Text and popular image formats including TIFF, JPG, PNG, BMP, and SVG.\nAspose.Cells for Python via Java Resources\nThe following are the links to some useful resources you may need to accomplish your tasks.\n Aspose.Cells for Java Online Documentation (Aspose.Cells for Python via Java is very similar to Aspose.Cells for Java. So, you can use the same documentation) Aspose.Cells for Python via Java Features Aspose.Cells for Python via Java Release Notes Aspose.Cells for Python via Java Product Page Download Aspose.Cells for Python via Java Aspose.Cells for Python via Java API Reference Guide Aspose.Cells for Python via Java Free Support Forum Aspose.Cells for Python via Java Paid Support Helpdesk  Attachments: aspose_cells-for-python-via-java.png (image/png)\n","date":-62135596800,"description":"","objectID":"a0fb1b4be789cf5ce26d744a777745a7","permalink":"https://roywangt.github.io/cellspythonjava/","title":"Aspose.Cells for Python via Java"},{"content":"","date":-62135596800,"description":"","objectID":"4a36e20218e0a73868e8c65c9d953ce8","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/","title":"Developer Guide"},{"content":"   Contents Summary\n1 Convert Excel to HTML\n ||      Convert Excel to HTML      Aspose.Cells for Python via Java API provides the ability to convert Excel files to HTML documents. For this, the API provides the HtmlSaveOptions class which allows developers to control several aspects of the output HTML.\nThe following code snippet demonstrates the use of HtmlSaveOptions class to export Excel Files to HTML format.\n","date":-62135596800,"description":"","objectID":"dfa3cca146bbfe6488fd55b7e41d0391","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/convert+excel+to+html/","title":"Convert Excel to HTML"},{"content":"   Contents Summary\n1 Convert Excel to Image\n ||      Convert Excel to Image      Aspose.Cells for Python via Java supports converting Excel files to different image forms images. For this, the API provides the SheetRender and ImageOrPrintOptions classes. This class represents the worksheet that will be rendered to an image. The SheetRender class provides the [toImage()](https://apireference.aspose.com/cells/python/asposecells.api/sheetrender#toImage(int, java.lang.String)) method for converting a worksheet to an image file. BMP, PNG, JPEG, TIFF, and EMF formats are supported.\nThe following code snippet demonstrates converting an Excel worksheet to a PNG image.\n","date":-62135596800,"description":"","objectID":"42e780cfedcaf4643aa418592b601f2e","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/convert+excel+to+image/","title":"Convert Excel to Image"},{"content":"   Contents Summary\n1 Convert Excel to Markdown\n ||      Convert Excel to Markdown      Aspose.Cells for Python via Java supports converting Excel files to Markdown format. To export the active worksheet to Markdown, pass SaveFormat.Markdown as the second parameter of the [Workbook.Save](https://apireference.aspose.com/cells/python/asposecells.api/workbook#save(java.lang.String, int)) method. You may also use the MarkdownSaveOptions class to specify additional settings for exporting worksheets to Markdown.\nThe following code example demonstrates exporting active worksheet to Markdown by using SaveFormat.Markdown enumeration member. Please see the output Markdown file generated by the code for reference.\n","date":-62135596800,"description":"","objectID":"d92c51ee07d8ceb8ca66ee6739604ebf","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/convert+excel+to+markdown/","title":"Convert Excel to Markdown"},{"content":"   Contents Summary\n1 Convert Excel to ODS 1.1 Direct Conversion\n1.2 Save the ODS document in ODF 1.1 or 1.2 Specifications\n ||      Convert Excel to ODS      ODS files are created by the Calc program which is a part of the Apache OpenOffice Suite. ODS files store data that is organized in rows and columns and are formatted using the OASIS OpenDocument XML-based standard.\nAspose.Cells for Python via Java supports working ODS files. The following examples demonstrate converting Excel to an ODS file.\nDirect Conversion\nThe simplest way to convert an Excel file to ODS is to load the workbook and save it by passing SaveFormat.ODS as the second parameter of the [Workbook.save](https://apireference.aspose.com/cells/python/asposecells.api/workbook#save(java.lang.String, int)) method.\nThe following code snippet demonstrated converting Excel directly to ODS\nSave the ODS document in ODF 1.1 or 1.2 Specifications\nAspose.Cells for Python via Java supports saving ODS files in ODF 1.1 and ODF 1.2 specifications. For this, the API provides OdsSaveOptions.setStrictSchema11() property. Setting this property to true will save the file with the ODF 1.1 specification. The default value of OdsSaveOptions.setStrictSchema11() is false, so the ODS file saved without special settings is saved with ODF 1.2 specification.\nThe following code snippet demonstrated saving ODS files with ODF 1.1 and 1.2 specifications.\n","date":-62135596800,"description":"","objectID":"6c1bb9c8e4d81dc747cbf1e4460cf2ed","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/convert+excel+to+ods/","title":"Convert Excel to ODS"},{"content":"   Contents Summary\n1 Convert Excel to PDF 1.1 Direct Conversion\n1.2 Advanced Conversion\n ||      Convert Excel to PDF      PDF documents are widely used as a standard format of exchanging documents between organizations, government sectors, and individuals. Software developers are often asked to devise a way to easily convert Microsoft Excel files into PDF documents. Aspose.Cells for Python via Java API provides the ability to convert Excel files to PDF documents (including PDF/A). Aspose.Cell\u0026amp;rsquo;s converts spreadsheets to PDF with a high degree of accuracy and fidelity.\nDirect Conversion\nTo save an Excel file directly to PDF, you may use the [Workbook.save](https://apireference.aspose.com/cells/python/asposecells.api/workbook#save(java.lang.String, com.aspose.cells.SaveOptions)) method and pass SaveFormat.PDF as the second parameter.\nThe following code snippet demonstrates the use of SaveFormat.PDF and the [Workbook.save](https://apireference.aspose.com/cells/python/asposecells.api/workbook#save(java.lang.String, com.aspose.cells.SaveOptions)) method to convert Excel to PDF format.\nAdvanced Conversion\nTo have more control over the conversion to PDF, the API provides the PdfSaveOptions class. The PdfSaveOptions class can be used to set different attributes for the conversion. Setting different properties of the PdfSaveOptions class will give you control over the Print, Font, Security, and Compression settings for the resultant PDF file. The most notable property is the Compliance that enables you to save the Excel files to PDF/A compliant PDF files.\nif your spreadsheet contains formulas, call the Workbook.calculateFormula method just before rendering the spreadsheet to PDF. This ensures that the formula dependent values are recalculated and the correct values are rendered in the PDF.\n","date":-62135596800,"description":"","objectID":"145e7503952e9ac0eb4f77dab0f326f2","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/convert+excel+to+pdf/","title":"Convert Excel to PDF"},{"content":"   Contents Summary\n1 Convert Excel to SVG\n ||      Convert Excel to SVG      SVG(Scalable Vector Graphics) is a specification based on XML standards for two-dimensional vector graphics. It is an open standard that has been under development by the World Wide Web Consortium (W3C) since 1999.\nAspose.Cells for Python via Java supports converting Excel files to SVG images. For this, the API provides the SheetRender, ImageOrPrintOptions, and WorkbookRender classes.\nThe following code snippet demonstrates converting an Excel worksheet to an SVG image.\n","date":-62135596800,"description":"","objectID":"cc45571c605afb1a845d801c8540ead2","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/convert+excel+to+svg/","title":"Convert Excel to SVG"},{"content":"","date":-62135596800,"description":"","objectID":"e7e7ae0fe210fdfd6aefbd428b0eaa10","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/convertingfiles/","title":"Converting Files"},{"content":"   Contents Summary\n1 Convert Excel to HTML with headings\n2 Sample Code\n |     Convert Excel to HTML with headings     Aspose.Cells provides the option to export row and column headings while converting Excel to HTML. This can be achieved by using HtmlSaveOptions.ExportHeadings property provided by the API. The default value of HtmlSaveOptions.ExportHeadings is False. Pass **True **as the parameter to render headings in the output HTML file. The following image shows the output file generated by the following code.\nThe following sample code demonstrates using the HtmlSaveOptions.ExportHeadings property to render headings in the output HTML file.\nSample Code\nAttachments: sampleSelfClosingTags_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"c38b51574b740c3b4147e7f486c7eb6b","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/convert+excel+to+html+with+headings/","title":"Convert Excel to HTML with headings"},{"content":"   Contents Summary\n1 Disable Downlevel Revealed Comments while saving to HTML\n2 Sample Code\n |     Disable Downlevel Revealed Comments while saving to HTML     When Excel file is converted to HTML, Aspose.Cells adds Downlevel-revealed conditional comments in the output HTML file. These conditional comments are mostly relevant to old versions of Internet Explorer and are irrelevant in the modern browsers. For additional information on Downlevel-revealed conditional comments, please visit the following link\nConditional comment - Downlevel-revealed conditional comment\nTo remove Downlevel-revealed conditional comments, Aspose.Cells provides the HtmlSaveOptions.DisableDownlevelRevealedComments property. Setting the HtmlSaveOptions.DisableDownlevelRevealedComments property to **True **will remove the Downlevel-revealed conditional comments in the output HTML file.\nThe following image shows the Downlevel-revealed conditional comments which will be removed in the output HTML file\nSample Code\nAttachments: sampleSelfClosingTags_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"92c644a952e72452967d21cadc81a635","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/disable+downlevel+revealed+comments+while+saving+to+html/","title":"Disable Downlevel Revealed Comments while saving to HTML"},{"content":"   Contents Summary\n1 Excel with unsupported border style to HTML\n ||      Excel with unsupported border style to HTML      Microsoft Excel supports some type of dashed borders that are not supported by Web Browsers. When such files are converted to HTML using Aspose.Cells, those borders are removed. However, Aspose.Cells for Python via Java supports displaying similar borders with HtmlSaveOptions.ExportSimilarBorderStyle property. You may set the value of HtmlSaveOptions.ExportSimilarBorderStyle property to True to export unsupported borders.\nThe following sample code loads the sample Excel file that contains some unsupported borders as shown in the following screenshot. The screenshot further illustrates the effect of HtmlSaveOptions.ExportSimilarBorderStyle property inside the output HTML.\n","date":-62135596800,"description":"","objectID":"c0c376a7cefe2aefb853c1467cb3b8f0","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/excel+with+unsupported+border+style+to+html/","title":"Excel with unsupported border style to HTML"},{"content":"   Contents Summary\n1 Exclude Unused Styles during Excel to HTML conversion\n ||      Exclude Unused Styles during Excel to HTML conversion      Microsoft Excel files may contain many unused styles. When these files are exported to HTML format, the unused styles are also exported. This results in the increased size of the output HTML. Aspose.Cells for Python via Java supports excluding these styles during the conversion of Excel file to HTML. For this, the API provides the HtmlSaveOptions.ExcludeUnusedStyles property. Setting the value of HtmlSaveOptions.ExcludeUnusedStyles property to True will exclude all unused styles from the output HTML.\nThe following screenshot shows unused styles in the HTML file which will be removed by setting the value of HtmlSaveOptions.ExcludeUnusedStyles property to True.\nThe following sample code demonstrates removing unused styles during Excel to HTML conversion.\n","date":-62135596800,"description":"","objectID":"d78f7078d1621e1c8ec9a885d44583e4","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/exclude+unused+styles+during+excel+to+html+conversion/","title":"Exclude Unused Styles during Excel to HTML conversion"},{"content":"   Contents Summary\n1 Export Comments while Saving Excel file to HTML\n ||      Export Comments while Saving Excel file to HTML      When Excel is converted to HTML, comments are not exported. Aspose.Cells for Python via Java provides the feature to export comments during Excel to HTML conversion. To achieve this, the API provides the HtmlSaveOptions.IsExportComments property. Setting the value of HtmlSaveOptions.IsExportComments property to True will export comments in the output HTML.\nThe following screenshot shows the output HTML file generated by the sample code snippet.\nThe following sample code demonstrates exporting comments during Excel to HTML conversion.\n","date":-62135596800,"description":"","objectID":"92674bd1935dc2031faeec903d062301","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/export+comments+while+saving+excel+file+to+html/","title":"Export Comments while Saving Excel file to HTML"},{"content":"   Contents Summary\n1 Export print area range to HTML\n ||      Export print area range to HTML      Aspose.Cells for Python via Java supports exporting only the print area i.e. selected range of cells instead of the entire she\u0026amp;rsquo;st to HTML. For this, the API provides the HtmlSaveOptions.ExportPrintAreaOnly property. Setting this property to True will only export the print area.\nThe following sample code demonstrates the use of the HtmlSaveOptions.ExportPrintAreaOnly property to export only the print area to HTML.\n","date":-62135596800,"description":"","objectID":"8b85e7582daecb90faef92023e56c0c1","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/export+print+area+range+to+html/","title":"Export print area range to HTML"},{"content":"   Contents Summary\n1 Get HTML5 string from Cell\n2 Sample Code\n3 Output\n |     Get HTML5 string from Cell     Using Aspose.Cells for Python via Java, you can get the HTML string form the cell. This can be achieved by using the getHtmlString(boolean html5) method provided by the API. If you pass **false **as a parameter, it will return you Normal HTML but if you pass **true **as a parameter, it will return HTML5 string.\nThe following sample code creates a workbook object and adds some text in cell A1 of the first worksheet. It then gets the Normal HTML and HTML5 string from cell A1 using the getHtmlString(boolean html5) method and prints them.\nSample Code\nThe following is the output generated by the above-provided code snippet.\nOutput\nNormal:\nThis is some text.\nHtml5:\nThis is some text.\r## **Attachments:**\r[sampleSelfClosingTags_out.xlsx](D:\\Projects\\asposecellstechdoc\\static\\cellspythonjava\\attachments\\106202316\\106365185.xlsx) (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) ","date":-62135596800,"description":"","objectID":"1ff19bc029698b55347d7cb42f224723","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/get+html5+string+from+cell/","title":"Get HTML5 string from Cell"},{"content":"HTML can have variety of tags formatting for empty tags like  or . Aspose.Cells supports both these formats. This feature can be tested by converting the attached sample HTML file to Excel file. The sample HTML file and output files can be downloaded from the following links for testing.\nSource File\nOutput File\n\\\nAttachments: sampleSelfClosingTags_out.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"ac10fbc25d6270227c892fdbe9332bac","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/recognize+self-closing+tags/","title":"Recognize self-closing tags"},{"content":"","date":-62135596800,"description":"","objectID":"d6482d185b3a5e0caf7b3eb0befd087b","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/html/","title":"HTML"},{"content":"   Contents Summary\n1 Open CSV Files\n ||      Open CSV Files      Comma Separated Values (CSV) files contain records whose values are delimited or separated by commas. You may use Microsoft Excel to save you spreadsheet in CSV format.\nTo open CSV files, use the LoadOptions class, and select the CSV value, predefined in the FileFormatType enumeration.\nThe following code snippet demonstrates opening CSV file with Aspose.Cells for Python via Java API.\n","date":-62135596800,"description":"","objectID":"6ba2925ac4bcf2ca6ab2cb90df189494","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/openingfiles/open+csv+files/","title":"Open CSV Files"},{"content":"","date":-62135596800,"description":"","objectID":"cff0feea1334cc8506ce2fe800064a07","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/openingfiles/","title":"Opening Files"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Create Slicer to a Pivot Table\n3 Sample Code\n |     Possible Usage Scenarios     Slicers are used to filter data quickly. They can be used to filter data both in a table or pivot table. Microsoft Excel allows you to create a slicer by selecting a table or pivot table and then clicking the Insert \u0026amp;gt; Slicer. Aspose.Cells for Python via Java provides the Worksheet.getSlicers().add() method to create slicer.\nCreate Slicer to a Pivot Table\nThe following code snippet loads the sample Excel file that contains the pivot table. It then creates the slicer based on the first base pivot field. Finally, it saves the workbook in output XLSX format. The following screenshot shows the slicer created by Aspose.Cells in the output Excel file.\nSample Code\nAttachments: sampleCreateSlicerToPivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputCreateSlicerToPivotTable.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"97a8343055d3afa0302f3b5fe6b336d0","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/create+slicer+to+a+pivot+table/","title":"Create Slicer to a Pivot Table"},{"content":"   Contents Summary\n1 Draw Slicer while rendering Excel to PDF\n2 Sample Code\n |     Draw Slicer while rendering Excel to PDF     Aspose.Cells for Python via Java supports exporting Excel to PDF with slicer settings. The API supports this by default, you simply export the Excel file with slicer to PDF, the generated PDF will show the slicer applied. The following code snippet loads the sample Excel file that contains a slicer and saves the workbook as the output PDF file. The following screenshot compares the source Excel file and the generated PDF file.\nSample Code\nAttachments: outputUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleRenderingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputRenderingSlicer.png (image/png) SampleSlicerChart.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) SampleSlicerChart.pdf (application/pdf)\n","date":-62135596800,"description":"","objectID":"e74ebffbbecad3792443753806e13fd9","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/draw+slicer+while+rendering+excel+to+pdf/","title":"Draw Slicer while rendering Excel to PDF"},{"content":"   Contents Summary\n1 Formatting Slicer\n2 Sample Code\n |     Formatting Slicer     Using Microsoft Excel, you can format the slicer by setting its number of columns, styles, etc. Aspose.Cells for Python via Java provides the Slicer.NumberOfColumns and Slicer.StyleType properties to achieve this.\nThe following code snippet loads the sample Excel file that contains a slicer. It accesses the slicer and sets its number of columns and style type and saves it as output Excel file. The screenshot shows how the slicer looks after the execution of the sample code.\nSample Code\nAttachments: sampleFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"f366a5764b043ef3c19a6918c98fe8e3","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/formatting+slicer/","title":"Formatting Slicer"},{"content":"   Contents Summary\n1 Removing Slicer\n2 Sample Code\n |     Removing Slicer     To remove slicer in Microsoft Excel, you simply select the slicer and press the Delete button. To achieve the save using Aspose.Cells for Python via Java, use the Worksheet.getSlicers().remove() method. It will remove the slicer from the worksheet. The following code snippet loads the sample Excel file that contains an existing slicer. It accesses the slicer, removes it, and saves the output Excel file. The following screenshot shows the slicer that will be removed.\nSample Code\nAttachments: outputFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleRemovingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputRemovingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"2823b4e1678bcfdd924ef1192f7e3b65","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/removing+slicer/","title":"Removing Slicer"},{"content":"   Contents Summary\n1 Rendering Slicer\n2 Sample Code\n |     Rendering Slicer     Aspose.Cells for Python via Java supports the rendering of slicer shape. The following code snippet loads the sample Excel file that contains a slicer. It converts the worksheet into an image by setting the print area that covers only the slicer. The flowing image is the output image that shows the rendered slicer. As you can see, the slicer has been rendered properly it looks the same as in the sample Excel file.\nSample Code\nAttachments: outputFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleRenderingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputRenderingSlicer.png (image/png)\n","date":-62135596800,"description":"","objectID":"741503ac5025f58f94432bf5d27cd451","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/rendering+slicer/","title":"Rendering Slicer"},{"content":"   Contents Summary\n1 Updating Slicer\n2 Sample Code\n |     Updating Slicer     Aspose.Cells for Python via Java supports updating slicers. For this, the API provides the Slicer.SlicerCache.SlicerCacheItems property that is used to select or unselect slicer items. The following code snippet loads the sample Excel file that contains a slicer. It unselects the 2nd and 3rd items of the slicer and refreshes the slicer using the Slicer.refresh() method. It then saves the workbook as the output Excel file. The following screenshot shows the effect of the sample code on the sample Excel file. As you can see in the screenshot, refreshing the slicer with selected items has also refreshed the pivot table accordingly.\nSample Code\nAttachments: outputRenderingSlicer.png (image/png) sampleRenderingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputFormattingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) sampleUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet) outputUpdatingSlicer.xlsx (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet)\n","date":-62135596800,"description":"","objectID":"1843d5ea80d72432bd86fb8769009b87","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/updating+slicer/","title":"Updating Slicer"},{"content":"","date":-62135596800,"description":"","objectID":"31db0b3cc74937d50a20582005cb202d","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/slicers/","title":"Slicers"},{"content":"   Contents Summary\n1 Advantages of a List Object\n2 Creating a List Object using Microsoft Excel\n3 Creating a List Object using Aspose.Cells API\n ||      The use of worksheets make is easy to work with different types of lists, for example. phone lists, task lists. etc. Aspose.Cells supports creating and managing lists.      Advantages of a List Object\nThere are quite a few advantages when you convert a list of data to an actual List Object:\n New rows and columns are automatically included. A total row at the bottom of your list can be easily added to display SUM, AVERAGE, COUNT, etc. Columns added to the right are automatically incorporated into the List object. Charts based on rows and columns will be expanded automatically. Named ranges assigned to rows and columns will be expanded automatically. The list is protected from accidental row and column deletion.  Creating a List Object using Microsoft Excel\n**Selecting data range for creating a list object **\nThis displays the Create List dialog.\n**Create List dialog **\nImplementing the List object and specifying Total Row (Select Data, then List, followed by Total Row).\n**Creating a List object **\nCreating a List Object using Aspose.Cells API\nAspose.Cells provides a class, Workbook, that represents a Microsoft Excel file. The Workbook class contains a Worksheets collection that allows access to each worksheet in an Excel file.\nA worksheet is represented by the Worksheet class. The Worksheet class provides a wide range of properties and methods for managing a worksheet. To create a ListObject in a worksheet, use ListObjects collection property of the Worksheet class. Each ListObject is, in fact, an object of the ListObjectCollection class, which further provides the [add](https://apireference.aspose.com/cells/python/asposecells.api/listobjectcollection#add(int, int, int, int, boolean)) method for adding a List object and specifying a range of cells for the list.\nAccording to the specified range of cells, the List …","date":-62135596800,"description":"","objectID":"68a6d93f36e0d11c5e3a0774961ee0a6","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/tables/creating+a+list+object/","title":"Creating a List Object"},{"content":"   Contents Summary\n1 Formatting List Object\n ||      Formatting List Object      A table is a series of rows and columns that contain related data managed independently from the data in other rows and columns. By default, every column in the table has filtering enabled in the header row so that you can filter or sort your list object data quickly. You can add a total row (a special row in a list that provides a selection of aggregate functions useful for working with numerical data) to the list object that provides a drop-down list of aggregate functions for each total row cell.\nAspose.Cells supports formatting List objects. For this, thee API provides the ListObject and TableStyleType classes. The TableStyleType class contains constants that represent the built-in table styles. The following code snippet creates a new List Object and sets it table style type to TABLE_STYLE_MEDIUM_10\n\\\n","date":-62135596800,"description":"","objectID":"748088ac9e0bf6a5d5d29f03d1c8e285","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/tables/formatting+list+object/","title":"Formatting List Object"},{"content":"   Contents Summary\n1 Hide Overlaid Content while converting Excel to HTML\n2 Sample Code\n ||      Hide Overlaid Content while converting Excel to HTML      When you save your Excel file to HTML, you can specify different cross types for cell strings. By default, Aspose.Cells generates HTML as per Microsoft Excel but when you change the HtmlSaveOptions.HtmlCrossStringType to CROSS_HIDE_RIGHT then it hides all the strings at the right side of the cell which are overlaid or overlapping with cell string.\nThe following sample code loads the sample Excel file and saves it to output HTML after setting the HtmlSaveOptions.HtmlCrossStringType as CROSS_HIDE_RIGHT. The screenshot explains how CROSS_HIDE_RIGHT affects the output HTML from the default output.\nSample Code\n","date":-62135596800,"description":"","objectID":"64006de62e3e8d6fb48eebccfdcfdefc","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/tables/hide+overlaid+content+while+converting+excel+to+html/","title":"Hide Overlaid Content while converting Excel to HTML"},{"content":"   Contents Summary\n1 Read and Write Table with Query Table Data Source\n ||      Read and Write Table with Query Table Data Source      With Aspose.Cells for Python via Java, you can read and write a table which has a QueryTable as Datasource. The support for this feature also exists for XLS files. The following code snippet demonstrates reading and writing such a table by first reading the table and then modifying it to add the totals row.\nThe source and output excel files are attached for reference.\nSource File\nOutput File\n","date":-62135596800,"description":"","objectID":"1645e021c2de6bbf81a8266e72b3fc5e","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/tables/read+and+write+table+with+query+table+data+source/","title":"Read and Write Table with Query Table Data Source"},{"content":"   Contents Summary\n1 Set the Comment of Table or List Object inside the Worksheet\n ||      Set the Comment of Table or List Object inside the Worksheet      Aspose.Cells for Python via Java supports adding the comment of List Object. For this, the API provides the ListObject.Comment property. The comment added by the ListObject.Comment property will be visible inside the xl/tables/tableName.xml file.\nThe following screenshot shows the comment created by the sample code in the red rectangle.\nThe following sample code loads the source excel file, sets the comment of the first table or list object inside the worksheet ","date":-62135596800,"description":"","objectID":"f6708539aa4fe86f888b3de995a9877b","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/tables/set+the+comment+of+table+or+list+object/","title":"Set the Comment of Table or List Object"},{"content":"","date":-62135596800,"description":"","objectID":"50457948a05b78bbb68619f4fad296af","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/tables/","title":"Tables"},{"content":"Sometimes, you do need a number of worksheets with common formatting and data. For example, if you work with quarterly budgets, you might want to create a workbook with sheets that contain the same column headings, row headings, and formulas. There is a way to do this: by creating one sheet and then copying it.\nAspose.Cells supports copying and moving worksheets within or between workbooks. Worksheets, complete with data, formatting, tables, matrices, charts, images, and other objects, are copied with the highest degree of precision.\n   Contents Summary\n1 Moving or Copying Sheets using Microsoft Excel 1.1 Copy Worksheets within a Workbook\n1.2 Copy Worksheets between Workbooks\n1.3 Move Worksheets within Workbook\n ||      Moving or Copying Sheets using Microsoft Excel      The following are the steps involved in copying and moving worksheets within or between workbooks.\n Open the workbook that will receive the sheets. Switch to the workbook that contains the sheets you want to move or copy, and then select the sheets. On the Edit menu, click Move or Copy Sheet. In the To book box, click the workbook to receive the sheets. To move or copy the selected sheets to a new workbook, click new book. In the Before sheet box, click the sheet before which you want to insert the moved or copied sheets. To copy the sheets instead of moving them, select the Create a copy checkbox.  Copy Worksheets within a Workbook\nAspose.Cells provides an overloaded WorksheetCollection.addCopy() method that is used to copy an existing worksheet. One version of the method takes the index of the source worksheet as a parameter. The other version takes the name of the source worksheet.\nThe following example shows how to copy an existing worksheet within a workbook.\n\\\nCopy Worksheets between Workbooks\nAspose.Cells provides the Worksheet.copy() method used to copy worksheets to other workbooks. The method takes the source worksheet object as a parameter.\nThe following example shows how to copy a …","date":-62135596800,"description":"","objectID":"9f512df80da92026e0f090f2d3753f6d","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/copying+and+moving+worksheets/","title":"Copying and Moving Worksheets"},{"content":"   Contents Summary\n1 Count the number of cells in the Worksheet\n ||      Count the number of cells in the Worksheet      Aspose.Cells for Python via Java provides the ability to count the number of cells in the worksheet. For this, the API provides the Cells.getCount() or Cells.getCountLarge() properties.\nThe following code snippet shows how to use the Cells.getCount() or Cells.getCountLarge() properties to get the number of cells in a worksheet.\n","date":-62135596800,"description":"","objectID":"1c3f5d38c358d30c29afce090461c11d","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/count+the+number+of+cells+in+the+worksheet/","title":"Count the number of cells in the Worksheet"},{"content":"   Contents Summary\n1 Cut and Paste Cells\n ||      Cut and Paste Cells      Aspose.Cells for Python via Java provides the ability to cut and paste cells. For this, the API provides the [insertCutCells](https://docs.aspose.com/apireference.aspose.com/cells/python/asposecells.api/cells#insertCutCells(com.aspose.cells.Range, int, int, int)) method of the Cells collection. The [insertCutCells](https://docs.aspose.com/apireference.aspose.com/cells/python/asposecells.api/cells#insertCutCells(com.aspose.cells.Range, int, int, int)) method accepts the following parameters.\n Range: The range of cells to be cut. Row Index: The index of the row to insert cells. Column Index: The index of the column to insert cells. ShiftType: The shift direction of the columns.  The following code snippet demonstrates how to cut and paste cells within a worksheet.\n","date":-62135596800,"description":"","objectID":"3ec8ed32087c8f2d5b68ab5a4c871a3d","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/cut+and+paste+cells/","title":"Cut and Paste Cells"},{"content":"   Contents Summary\n1 Possible Usage Scenarios\n2 Find if the Worksheet is Dialog Sheet\n3 Console Output\n ||      Possible Usage Scenarios      Dialog Sheet is an old format of the sheet that contains a dialog box. Such a sheet could be inserted by an older version of Microsoft Excel e.g. 2003 as shown in this screenshot. It can also be inserted with VBA in newer versions e.g. Microsoft Excel 2016.\nFind if the Worksheet is Dialog Sheet\nAspose.Cells for Python via Java provides you with the ability to check if the worksheet is a dialog sheet. For this, it provides the Worksheet.Type property. If Worksheet.Type returns enumeration value SheetType.DIALOG, then it means, you are dealing with a dialog sheet.\nThe following code snippet shows how to check for a dialog sheet. The console output generated by the code is given below for reference.\nConsole Output\nWorksheet is a Dialog Sheet.\n","date":-62135596800,"description":"","objectID":"ee5410e886af19ac955bfa3c82001053","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/find+if+the+worksheet+is+dialog+sheet/","title":"Find if the Worksheet is Dialog Sheet"},{"content":"   Contents Summary\n1 Get Hyperlinks in Range\n ||      Get Hyperlinks in Range      To get hyperlinks in range, use the getHyperlinks() property of the Range class. The getHyperlinks() property gets all the hyperlinks in the selected range.\nThe following code snippet shows how to get all hyperlinks in the selected range.\n","date":-62135596800,"description":"","objectID":"63da84c953d13a9e18ea2b85a14a654e","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/get+hyperlinks+in+range/","title":"Get Hyperlinks in Range"},{"content":"   Contents Summary\n1 Get Range with External Links\n ||      Get Range with External Links      There are many instances where excel files access data from other excel files by the use of external links. Aspose.Cells for Python via Java provides the option to retrieve these external links by using the Name.GetReferredAreas method. The Name.GetReferredAreas method returns an array of type ReferredArea. The ReferredArea class provides an ExternalFileName property that returns the name of the external file.\nThe following code snippet shows how to get external links.\n","date":-62135596800,"description":"","objectID":"f4ab144ea3be2e8dd3c8e6202ceee245","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/get+range+with+external+links/","title":"Get Range with External Links"},{"content":"   Contents Summary\n1 Adding Worksheets to a New Excel File\n2 Adding Worksheets to a Designer Spreadsheet\n3 Accessing Worksheets using Sheet Name\n4 Removing Worksheets 4.1 Removing Worksheets using Sheet Index\n4.2 Removing Worksheets using Sheet Name\n ||      Managing worksheets using Aspose.Cells for Python via Java is very easy. In this article, we will demonstrate added, accessing, and removing worksheets using the Aspose.Cells API.      Adding Worksheets to a New Excel File\nTo create a new Workbook, create an object of the Workbook class. The Workbook class represents an Excel file. Then by using the add method of the WorksheetCollection, new worksheets are added to the Excel file. Finally, to save the newly created Excel file, call the save method of the Workbook class.\nThe following code snippet demonstrates creating a new Excel file and adding a worksheet to it.\nAdding Worksheets to a Designer Spreadsheet\nAdding worksheets to a designer spreadsheet is exactly the same as adding the worksheet to a new Excel file. The only difference is that instead of creating a new Excel file, we open an existing file by the Workbook class.\nThe following code snippet demonstrates adding a worksheet to a designer spreadsheet.\nAccessing Worksheets using Sheet Name\nAfter loading a workbook, developers can access any worksheet by using its index or name. The following code snippet demonstrates accessing a worksheet by using its name.\nRemoving Worksheets\nThere may be times when some sheets meet to be removed from the workbook. For this, the API provides the WorksheetCollection.removeAt method. You can pass it sheet index or sheet name of the sheet to be removed. The following examples demonstrate removing worksheets by using the sheet index and sheet name.\nRemoving Worksheets using Sheet Index\nRemoving Worksheets using Sheet Name\n","date":-62135596800,"description":"","objectID":"da963ca58c41d21e464ff1a401842033","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/manage+worksheets/","title":"Manage Worksheets"},{"content":"","date":-62135596800,"description":"","objectID":"6b72d62dfed4572d402fb1a54fb0094d","permalink":"https://roywangt.github.io/cellspythonjava/developerguide/worksheets/","title":"Worksheets"},{"content":"Customers developing their own SharePoint solutions can get access to our conversion engine using the public API. This includes all supported file formats and conversion options. The detailed interface specifications in our API Reference is accompanied with different C# and VB samples.\n","date":-62135596800,"description":"","objectID":"5fbc43428f405c65d6fc7a800813d98f","permalink":"https://roywangt.github.io/cellssharepoint/public+api/","title":"Public API"},{"content":"** Aspose.Cells for SharePoint : Home **\nAspose.Cells for SharePoint\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"e6732e25d454e22640d631ebeab0d500","permalink":"https://roywangt.github.io/cellssharepoint/","title":"Aspose.Cells for Share Point"},{"content":"The evaluation version of Aspose.Cells for SharePoint has no time limit and free technical support is available for evaluation users too.\nThe download for both evaluation and full versions of Aspose.Cells for SharePoint is the same. Simply download Aspose.Cells for SharePoint from the download page and install it. Aspose.Cells works in evaluation mode by default.\nEvaluation Version Limitations\nEvaluation mode adds an evaluation warning into any exported documents. When you have purchased a license, simply install the license and it will work in licensed mode.\n**In evaluation mode, Aspose.Cells for SharePoint injects an Evaluation Warning **\nAttachments: Evaluate Aspose.Cells for SharePoint-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"442ee2fb6450992027ccd2363025449c","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/evaluate+aspose.cells/","title":"Evaluate Aspose.Cells"},{"content":"Welcome to the Aspose.Cells for SharePoint Documentation!\nAspose.Cells for SharePoint is a flexible solution supporting spreadsheet conversion that makes it possible to convert MS Excel documents within the Microsoft SharePoint applications.\nYou may convert multiple document formats, such as:\n PDF - Adobe Portable Document XLS - MS Excel 97~2003 XLSX - Office Open XML XLSM - Office Open XML for macros enabled TXT - Plain Text XML - Microsoft Excel SpreadsheetML ODS - OpenDocument Spreadsheet CSV - Comma Separated Values XLSB - Excel Binary 2007 MHtml - Multipurpose Internet Mail Extension HTML XPS - XML Paper Specification TIFF - Tagged Image File Format SVG - Scalable Vector Graphics DIF - Drawing Interchange Format  Aspose.Cells for SharePoint is designed to be used with the following products:\n Windows SharePoint Services 3.0 (WSS) Microsoft Office SharePoint Server 2007 (MOSS) Standard Microsoft Office SharePoint Server 2007 (MOSS) Enterprise Microsoft Office SharePoint Server 2010 (MOSS) Standard Microsoft Office SharePoint Server 2010 (MOSS) Enterprise Microsoft Office SharePoint Server 2013 (MOSS) Standard Microsoft Office SharePoint Server 2013 (MOSS) Enterprise Microsoft Office SharePoint Server 2016 (MOSS) Standard Microsoft Office SharePoint Server 2016 (MOSS) Enterprise  There are no additional system requirements beyond the products above.\nThis documentation describes the features, installation, evaluation, licensing, common use cases and settings of Aspose.Cells for SharePoint.\nUse Aspose.Cells for SharePoint from SharePoint’s document library to convert documents\n\\\n\\\n\\\n\\\nAttachments: Introducing Aspose.Cells for SharePoint-001.png (image/png) Introducing Aspose.Cells for SharePoint-002.png (image/png) aspose.Cells-SP_logo.png (image/png) aspose-Cells-for-SharePoint.png (image/png) product_overview1.png (image/png)\n","date":-62135596800,"description":"","objectID":"5dd518b729afb4dc2e4873eb62ab6f0e","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/product+overview/","title":"Product Overview"},{"content":"   Contents Summary\n1 Supported File Formats\n ||      Supported File Formats         Format Description Load Save     XLS Excel 95/5.0 - 2003 Workbook.     XLSX Office Open XML SpreadsheetML Workbook or template file, with or without macros.     XLSB Excel Binary Workbook.     XLSM Excel Macro-Enabled Workbook.     XLTX Excel Template.     XLTM Excel Macro-Enabled Template.     XML Extensible Markup Language     CSV CSV (Comma Separated Value) file.     TSV TSV (Tab-separated values) file.     TabDelimited Tab-delimited text file, same with TSV file.     TXT Delimited plain text file.     HTML HTML format.     MHTML MHTML file.     ODS ODS (OpenDocument Spreadsheet).     PDF Adobe Portable Document Format. |    XPS XML Paper Specification Format. |    SVG Scalable Vector Graphics Format. |    TIFF Tagged Image File Format |    PNG Portable Network Graphics Format |    BMP Bitmap Image Format |    EMF Enhanced metafile Format |    JPEG JPEG is a type of image format that is saved using the method of lossy compression. |    GIF Graphical Interchange Format |     ","date":-62135596800,"description":"","objectID":"aae65da693a6d51f9a6a0f7a70528760","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/supported+file+formats/","title":"Supported File Formats"},{"content":"Server Requirements\nTo install Aspose.Cells for SharePoint you need a computer running one of the following:\n Windows SharePoint Services 3.0 Microsoft Office SharePoint Server 2007 Microsoft SharePoint Server 2010 Microsoft SharePoint Server 2013  WE recommend that you installing Service Pack 2 or later for these products.\nClient Requirements\nYou need a browser to access SharePoint sites. Aspose.Cells for SharePoint is tested with:\n Microsoft Internet Explorer Mozilla FireFox Google Chrome Safari  ","date":-62135596800,"description":"","objectID":"7093b7a664d102ccc1af34385e2e5f15","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/system+requirements/","title":"System Requirements"},{"content":"**This section includes the following topics: **\n Product Overview Supported File Formats Features System Requirements Install Aspose.Cells for SharePoint Evaluate Aspose.Cells License Aspose.Cells for SharePoint  Attachments: Introducing Aspose.Cells for SharePoint-001.png (image/png) Introducing Aspose.Cells for SharePoint-002.png (image/png) aspose.Cells-SP_logo.png (image/png) aspose-Cells-for-SharePoint.png (image/png) Evaluate Aspose.Cells for SharePoint-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"b9859624fb57fa6178822be31eda6f35","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/","title":"Product Information"},{"content":"Aspose.Cells for SharePoint supports to add footer in Excel spreadsheet.\nAttachments: addfooter1.png (image/png)\n","date":-62135596800,"description":"","objectID":"cf7d498eea79e50bd75124adab2979dd","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/add+footer+to+excel+document/","title":"Add Footer to Excel document"},{"content":"Aspose.Cells for SharePoint supports to add Watermark to Excel spreadsheets.\nAttachments: addwatermark1.png (image/png)\n","date":-62135596800,"description":"","objectID":"c044e1b4aee34ce4e81e1e293ded8ef9","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/add+watermark+to+excel+document/","title":"Add Watermark to Excel document"},{"content":"Aspose.Cells for SharePoint provides a toolbar that includes some valuable options and commands:\n Convert with Aspose.Cells Preview Document with Aspose.Cells Search in Document with Aspose.Cells Add Watermark with Aspose.Cells Add Footer with Aspose.Cells  The Aspose.Cells toolbar\nAttachments: aspose_tools.png (image/png) tools1.png (image/png)\n","date":-62135596800,"description":"","objectID":"7b5c7dc152587bb65537a5a076590932","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/aspose+tools+toolbar+-+only+supported+in+sharepoint+2010/","title":"Aspose Tools Toolbar - only supported in SharePoint 2010"},{"content":"To make the conversion process as flexible as possible, Aspose.Cells for SharePoints allows you to set options that define how the converted file will be treated.\nOptions\nThe following options are available during conversion:\nConcatenate Files\nSelect Combine Files to combine files that were originally in different formats into one, single document.\nThis option is available when you select a folder, or several individual files, for conversion. Move documents in the list up or down to set the order in which you want the documents to be combined.\n**Combining files **\nConvert Files in Subfolders\nSelect Convert files in subfolders to recursively convert all of the documents and subfolders in a selected folder.\nThe existing subfolder structure is created in the destination folder.\nThis option is only available under SharePoint 2007. In SharePoint 2010, subfolders are processed by default. To process only files in a root folder in SharePoint 2010, select the individual files instead of the folder, and don\u0026amp;rsquo;t select any subfolders.\nOverwrite Existing Files in the Destination Folder\nIf the destination folder already contains files with the same name as the ones you want to convert, you have two options. Select to overwrite existing files to replace already existing files with freshly converted ones. Clear the option to skip processing files of the same name.\nAttachments: diff_conversion1.png (image/png)\n","date":-62135596800,"description":"","objectID":"be32db3358939fa09dc79ccf9ef6bad5","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/conversion+options/","title":"Conversion Options"},{"content":"With Aspose.Cells for SharePoint you can convert documents between many popular office document formats from a SharePoint document library. Most of the conversions are done with high fidelity and precision.\nSupported Input Formats\nAspose.Cells for SharePoint supports the following input formats:\n XLS – Microsoft Excel 97~2003 XLSX – Office Open XML XLSM, XLTX, XLTM – Office Open XML CSV – Comma Separated Values Worksheet Document ODS – OpenDocument XML – Microsoft Excel SpreadsheetML  To generate documents, Aspose.Cells for SharePoint relies on a built-in version of Aspose.Cells for .NET, the market leading spreadsheet-processing component from Aspose. Microsoft Excel is not used to generate documents.\nSupported Output Formats\nThe full list of output formats supported by Aspose.Cells for SharePoint is:\n PDF – Adobe Portable Document XLS – Microsoft Excel 97 - 2003 XLSX – Office Open XML XLSM – Office Open XML for macros enabled TXT – Plain Text XML – Microsoft Excel SpreadsheetML ODS – OpenDocument CSV – Comma Separated Values XLSB – Microsoft Excel Binary 2007 MHTML – Multipurpose Internet Mail Extension HTML XPS – XML Paper Specification TIFF – Tagged Image File Format SVG – Scalable Vector Graphics DIF – Drawing Interchange Format  **The supported conversion formats available for a file are listed **\nAttachments: Multiple formats support-001.png (image/png) multipleformat1.png (image/png)\n","date":-62135596800,"description":"","objectID":"e19e5fa75215dc13f264256fc9c8bdbd","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/multiple+format+support/","title":"Multiple Format Support"},{"content":"Aspose.Cells for Share Point supports previewing documents directly from SharePoint. The following formats support preview:\n XLS – Microsoft Excel 97 - 2003 XLSX – Office Open XML XLSM, XLTX, XLTM – Office Open XML XML – Microsoft Excel SpreadsheetML  **Selecting a document to preview **\n**Document preview from within a SharePoint library **\nAttachments: previewing_doc1.png (image/png) previewing_doc2.png (image/png) previewing_doc3.png (image/png)\n","date":-62135596800,"description":"","objectID":"b4e961388bbaee92482245600643e309","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/previewing+document/","title":"Previewing document"},{"content":"Aspose.Cells for SharePoint supports searches in documents stored in SharePoint sites. Aspose.Cells for Share Point supports the following input formats to preview documents:\n XLS – Microsoft Excel 97 - 2003 XLSX – Office Open XML XLSM, XLTX, XLTM – Office Open XML XML - Microsoft Excel SpreadsheetML  To search in a document:\n Select a document or folder you want to search. Right-click and select Search in Document with Aspose.Cells. Set the search criteria. The search results are displayed.  **The Search in Document option **\n**Set the search criteria **\n**Search results **\nAttachments: search_in1.png (image/png) search_in2.png (image/png) search_in3.png (image/png)\n","date":-62135596800,"description":"","objectID":"13c215583ef880c581f2ab5a78df4460","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/search+in+a+document/","title":"Search in a Document"},{"content":"Aspose is renowned for its free and unlimited technical support provided directly by the developers of the products. If a new version of a product is available, or if resolving a question results in a fix, all new releases are free if you have an active subscription.\nGetting Support\nForums\nAspose\u0026amp;rsquo;s Support Forums is the place not only to resolve technical issues, but to participate in discussions with the vibrant and growing community of Aspose users. Currently there are over 190,000 users registered at the Aspose website.\nBlogs\nAspose.Blogs is the place to look for information about the latest releases and about what Aspose developers have to say.\nNeed more support?\nAspose offers free support to all users. For companies want that their issue will get prioritized, or who want to influence our product development road map, there are advanced support options like Priority Support and Enterprise Support.\nThere is plenty of activity in the Aspose.Support Forums.\nAttachments: World Class Free Technical Support-001.png (image/png) wcs1.png (image/png)\n","date":-62135596800,"description":"","objectID":"d2134a6b453d7285d9cac5ff3e23fecb","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/world+class+free+technical+support/","title":"World Class Free Technical Support"},{"content":"**This section includes the following topics: **\n Multiple Format Support World Class Free Technical Support Conversion Options Previewing document Aspose Tools Toolbar - only supported in SharePoint 2010 Search in a Document Add Watermark to Excel document Add Footer to Excel document  Attachments: Multiple formats support-001.png (image/png) World Class Free Technical Support-001.png (image/png) diff_conversion1.png (image/png) previewing_doc1.png (image/png) previewing_doc2.png (image/png) previewing_doc3.png (image/png) aspose_tools.png (image/png) search_in1.png (image/png) search_in2.png (image/png) search_in3.png (image/png)\n","date":-62135596800,"description":"","objectID":"54ce8a273a38e4f4b9eee49bb568e358","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/features/","title":"Features"},{"content":"During installation, Aspose.Cells for SharePoint is activated for all selected site collections. After installation, use the Site Actions menu at the root web site of a site collection to activate and deactivate Aspose.Cells for SharePoint.\nActivating Aspose.Cells for SharePoint on a site collection.\n**Activating Aspose.Cells **\nAttachments: Activation and Deactivation after installation-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"56654263155b6a274c0653dbc0703b9e","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/installasposecellsforsharepoint/activation+and+deactivation+after+installation/","title":"Activation and Deactivation after installation"},{"content":"Installing Aspose.Cells for SharePoint walks you through the installation process. This article explains what the installation process is deployed and activated.\n**Deployment **\nAspose.Cells for SharePoint performs the following actions during deployment:\n Installs Aspose.Cells.SharePoint.dll into the Global Assembly Cache and adds a SafeControl entry to the web.config file. Installs feature manifest and other necessary files to the appropriate directories. Registers the feature in the SharePoint database and makes it available for activation at the feature scope.  **Activation **\nAspose.Cells for SharePoint is packaged as a site (site collection) level feature and can be activated and deactivated on site collections.\nDuring activation, the feature makes some changes to the virtual directory of the parent web application of the site collection:\n Adds conversion settings page to the sitemap file. Copies necessary resource files to the App_GlobalResources folder in the virtual directory.  ","date":-62135596800,"description":"","objectID":"7889f499a8588130c7bbb101853d8c40","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/installasposecellsforsharepoint/deployment+and+activation/","title":"Deployment and Activation"},{"content":"Aspose.Cells for SharePoint is downloadable as the Aspose.Cells.SharePoint.zip archive.\nArchive Contents\nThe Aspose.Cells.SharePoint.zip archive contains:\n Aspose.Cells.SharePoint.wsp – SharePoint solution file. Aspose.Cells for SharePoint is packaged as a SharePoint solution to facilitate deployment/retraction and feature activation/deactivation across the server farm. Aspose_LicenseAgreement.rtf – End user license agreement Aspose.Cells for SharePoint.pdf – User documentation Aspose.Cells for SharePoint Documentation.chm – User documentation with Public API reference setup.exe – Setup program setup.exe.config – Setup configuration file  The setup program checks the following conditions before proceeding with installation:\n WSS 3.0, MOSS 2007 or SharePoint 2010 is installed. The user has permission to install SharePoint solutions. SharePoint database is online. WSS Administration service is started. WSS Timer service is started.  WSS Administration service and Timer service are needed because some setup actions rely on a timer job to propagate to all servers in the server farm.\nTo install Aspose.Cells for SharePoint\n Unpack Aspose.Cells.SharePoint zip to the local drive of the MOSS 7.0 or WSS 3.0 server. Run setup.exe and follow the instructions on the screen.  The setup program performs the following actions:\n  Check installation prerequisites. Setup will not continue if any check fails.\n**System check **\n  Display End User License Agreement. The user must accept the agreement in order to proceed.\n**The EULA **\n  Display deployment target selection dialog. The user selects web applications and site collections where the feature shall be activated. See the figure below.\n**Deployment targets **\n  Deploy the feature to the server farm.\n**Running installation **\n  Activate the feature for the selected site collections and configure their parent web applications.\n  Display a list of web applications and site collections where the feature has been deployed and …","date":-62135596800,"description":"","objectID":"f6fbbe89a0d74172f00bd6ba3f43cdd0","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/installasposecellsforsharepoint/installing+aspose.cells+for+sharepoint/","title":"Installing Aspose.Cells for SharePoint"},{"content":"SharePoint by default does not grant full permissions to manage personal sites to portal administrators. That is why activation and deactivation on a personal site collection might fail when it is performed by portal administrators. This includes activation and deactivation during setup.\nGranting Permission to Personal Sites\nWhen this issue occurs during installation, an UnauthorizedAccessException at Microsoft.SharePoint.SPFeature.Activate() is logged to the SharePoint trace log. When deactivation fails as a part of un-installation, an UnauthorizedAccessException is displayed on the last setup screen for the failed deactivation(s).\nTo prevent this issue, grant portal administrators the permission to manage MySite Web application:\n  Go to SharePoint Central Administration and select the Application Management tab.\n  Choose Policy for Web Application under the Application Security group.\n  Make sure you select the correct Web Application for your “My Site” in the Web Application list on the right.\n  Select Add Users on the upper left.\n  Choose All Zones by default on the Add Users screen and click Next.\n  Add the appropriate user(s) or active directory group that you want to have control over your “My Site” Web Application.\n  Select the level of control.\n**Adding users and setting the control level **\n  Click Finish.\n  Attachments: A known issue regarding permissions to the personal site collections-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"118a1e4b79cf5ca639d28b3d5b3f16c4","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/installasposecellsforsharepoint/known+issue+-+permissions+to+personal+site+collections/","title":"Known Issue - Permissions to Personal Site Collections"},{"content":"To uninstall Aspose.Cells for SharePoint, run the setup program. If Aspose.Cells for SharePoint is already installed, the setup program suggests removing or repairing it.\nUninstallation\nDuring removal, the setup program deactivates Aspose.Cells for SharePoint for all site collections and retracts the solution from the server farm.\n**Uninstalling Aspose.Cells **\nPlease note that running the Repair option does not re-activate Aspose.Cells for SharePoint on site collections. Instead, the feature must be activated manually after re-deployment with the Repair option.\nUninstalling using the Remove option and then re-installing may be more convenient as it allows you to select target web applications and site collections during installation.\nAttachments: Uninstalling Aspose.Cells for SharePoint-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"11e4a3eda3bb3b01d0de4df8e9df66e0","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/installasposecellsforsharepoint/uninstalling+aspose.cells+for+sharepoint/","title":"Uninstalling Aspose.Cells for SharePoint"},{"content":"**This section includes the following topics: **\n Installing Aspose.Cells for SharePoint Deployment and Activation Activation and Deactivation after installation Known Issue - Permissions to Personal Site Collections Uninstalling Aspose.Cells for SharePoint  Attachments: Installing Aspose.Cells for SharePoint-001.png (image/png) Installing Aspose.Cells for SharePoint-002.png (image/png) Installing Aspose.Cells for SharePoint-003.png (image/png) Installing Aspose.Cells for SharePoint-004.png (image/png) Installing Aspose.Cells for SharePoint-005.png (image/png) Activation and Deactivation after installation-001.png (image/png) A known issue regarding permissions to the personal site collections-001.png (image/png) Uninstalling Aspose.Cells for SharePoint-001.png (image/png)\n","date":-62135596800,"description":"","objectID":"9a5844232d9344b17aabfe155b8adb15","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/installasposecellsforsharepoint/","title":"Install Aspose.Cells for SharePoint"},{"content":"Once you are happy with your evaluation, buy a license.\nBefore buying, make sure that you understand and agree to the license subscription terms.\nThe license is emailed to you when the order has been paid. The license is a ZIP archive containing a regular SharePoint solution package.\nThe license ZIP contains:\n Aspose.Cells.SharePoint.License.wsp – SharePoint solution package file. The Aspose.Cells for SharePoint license is packaged as a SharePoint solution to facilitate deployment and retraction across the server farm. readme.txt – License installation instructions. License installation is performed from the server console via the stsadm.exe. The steps required to install the license are given below.  Installing the License\nPaths are omitted for clarity. Add the actual path to stsadm.exe and/or solution file when executing the steps below.\n Run stsadm to add the solution to the SharePoint solution store: stsadm.exe -o addsolution -filename Aspose.Cells.SharePoint.License.wsp Deploy the solution to all servers in the farm: stsadm.exe -o deploysolution -name Aspose.Cells.SharePoint.License.wsp -immediate -force Execute administrative timer jobs to complete the deployment immediately: stsadm.exe -o execadmsvcjobs  You will receive a warning when running the deployment step if the Windows SharePoint Services Administration service has not been started. Stsadm.exe relies on this service and Windows SharePoint Timer Service to replicate solution data across the farm. If these services are not running on your server farm, you may need to deploy the license separately to each server.\n","date":-62135596800,"description":"","objectID":"2bf1a0d3fbc0632a06bcf81317f85f3f","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/licenseasposecellsforsharepoint/installing+aspose.cells+for+sharepoint+license/","title":"Installing Aspose.Cells for SharePoint License"},{"content":"To test that a license has been installed correctly, convert any document into desired format. If the document contains no evaluation warning, the license was activated successfully.\n","date":-62135596800,"description":"","objectID":"b45d8938714293d127ec086f31505486","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/licenseasposecellsforsharepoint/testing+a+license/","title":"Testing a License"},{"content":"To uninstall Aspose.Cells for SharePoint license, please use the steps below from the server console.\n Retract the license solution from the farm: stsadm.exe -o retractsolution -name Aspose.Cells.SharePoint.License.wsp -immediate Execute administrative timer jobs to complete the retraction immediately: stsadm.exe -o execadmsvcjobs Wait for the retraction to complete. You can use Central Administration to check if the retraction has completed by going to Central Administration, then Operations and Solution Management. Remove the solution from the SharePoint solution store: stsadm.exe -o deletesolution -name Aspose.Cells.SharePoint.License.wsp  ","date":-62135596800,"description":"","objectID":"9ffd28390542db6f87ab0c797aca601c","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/licenseasposecellsforsharepoint/uninstalling+aspose.cells+for+sharepoint+license/","title":"Uninstalling Aspose.Cells for SharePoint License"},{"content":"**This section includes the following topics: **\n Installing Aspose.Cells for SharePoint License Testing a License Uninstalling Aspose.Cells for SharePoint License  ","date":-62135596800,"description":"","objectID":"e7c4b689065055e8ce09f053e59ab3c5","permalink":"https://roywangt.github.io/cellssharepoint/productinformation/licenseasposecellsforsharepoint/","title":"License Aspose.Cells for SharePoint"},{"content":" Release Notes - 2017 Release Notes - 2014 Release Notes - 2013 Release Notes - 2012 Release Notes - 2011 Release Notes - 2010  ","date":-62135596800,"description":"","objectID":"838802d9135abef5bb3e77311a4a0345","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/","title":"Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 1.0.0\nWe are happy to announce Aspose.Cells for SharePoint v1.0.0!\nWhat\u0026amp;rsquo;s new:\n Support for MS Excel input formats: XLS, XLSX, XLST, XLSM, CSV, ODS, SpreadsheetML, TXT. Support for output formats: XLS, XLSX, CSV, HTML, ODS, PDF, SpreadsheetML, TXT.  ","date":-62135596800,"description":"","objectID":"092cd8ee80d7ddfd04b2a141317a6acb","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2010/aspose.cells+for+sharepoint+1.0.0+release+notes/","title":"Aspose.Cells for SharePoint 1.0.0 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 2.0.0\nWe are happy to announce Aspose.Cells for SharePoint v2.0.0!\nWhat\u0026amp;rsquo;s new:\n· Supports Microsoft SharePoint Server 2010.\n· Adds \u0026amp;ldquo;Overwrite\u0026amp;rdquo; option in file conversion settings page.\n","date":-62135596800,"description":"","objectID":"f427c4b6ec2a33fda059dff723629ef5","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2010/aspose.cells+for+sharepoint+2.0.0+release+notes/","title":"Aspose.Cells for SharePoint 2.0.0 Release Notes"},{"content":"**Release Notes - 2010 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"e86e47179a497983a58adcb77c63394f","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2010/","title":"Release Notes - 2010"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 2.0.1\nWhat\u0026amp;rsquo;s new:\n","date":-62135596800,"description":"","objectID":"a032c1378e28c0013400b6ee8bb88111","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2011/aspose.cells+for+sharepoint+2.0.1+release+notes/","title":"Aspose.Cells for SharePoint 2.0.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 2.0.2\nWe are happy to announce Aspose.Cells for SharePoint v2.0.2!\n\\\nEnhancements\n\\\nEnhancements are made for shapes rendering in the PDF conversion ","date":-62135596800,"description":"","objectID":"f6c2d5a1f3e57022beead41b46972371","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2011/aspose.cells+for+sharepoint+2.0.2+release+notes/","title":"Aspose.Cells for SharePoint 2.0.2 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"0738c4b92071403de11b404a9eaeeff9","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2011/","title":"Release Notes - 2011"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 3.0.0\nWe are happy to announce Aspose.Cells for SharePoint v3.0.0!\nNew Features\n Allow conversions of multiple files at a time Document preview within SharePoint  Enhancements\n Add support for new formats (XLSB, MHtml, XPS, TIFF, SVG, DIF) for conversion Optimize Aspose.Cells for SharePoint component  ","date":-62135596800,"description":"","objectID":"cb5bd3b9c1596295330c02132c741b0b","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2012/aspose.cells+for+sharepoint+3.0.0+release+notes/","title":"Aspose.Cells for SharePoint 3.0.0 Release Notes"},{"content":"**Release Notes - 2012 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"65761e90f74b60d3c77030334d8cead9","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2012/","title":"Release Notes - 2012"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 3.0.1\nWe are happy to announce Aspose.Cells for SharePoint v3.0.1!\nNew Features\nSHAREPOINT-40018- Search in the document at SharePoint\nSHAREPOINT-40015- Add Aspose.Cells for SharePoint toolbar for SharePoint 2010\n\\\nEnhancements\nSHAREPOINT-40014\n Preview documents @ SharePoint  ","date":-62135596800,"description":"","objectID":"4f1cd6eea686728cd0f2775620852459","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2013/aspose.cells+for+sharepoint+3.0.1+release+notes/","title":"Aspose.Cells for SharePoint 3.0.1 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 3.0.2\n\\\nNew Features\nEnhancements\n Fixes an issue regarding the setting Aspose.Total.SharePoint.License.wsp Destination file extension does not change when new file type is selected from the \u0026amp;ldquo;Convert To:\u0026amp;rdquo; drop down list)  ","date":-62135596800,"description":"","objectID":"32e593bd6d6bdacc48b323a0d5fda183","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2013/aspose.cells+for+sharepoint+3.0.2+release+notes/","title":"Aspose.Cells for SharePoint 3.0.2 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"7b651ec015d6aab5d6fd6dd52c86d387","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2013/","title":"Release Notes - 2013"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 3.1.0\nPlease welcome a new release of Aspose.Cells for SharePoint 3.1.0.\nMajor Features\nAspose.Cells for Share Point supports SharePoint 2013.\n(SHAREPOINT-40023) SharePoint 2013 Supported\n","date":-62135596800,"description":"","objectID":"218664a9f21ee4b6a0839d8c560d108f","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2014/aspose.cells+for+sharepoint+3.1.0+release+notes/","title":"Aspose.Cells for SharePoint 3.1.0 Release Notes"},{"content":"**Release Notes - 2014 **\nCollapse all\nExpand all Collapse all\n","date":-62135596800,"description":"","objectID":"4524949844e1fd86d8bdda8b4e8dfb58","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2014/","title":"Release Notes - 2014"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 17.6.\n   Key Summary Category     CELLSSP-25 Support rendering to XLSM file format New Feature   CELLSSP-45 Add Watermark in Excel document New Feature   CELLSSP-46 Add footer in Excel document New Feature   CELLSSP-38 Enhancements are made for conversion feature Enhancement    ","date":-62135596800,"description":"","objectID":"0d5e8d39201eec47b20fa9563e25f3e2","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2017/aspose.cells+for+sharepoint+17.6+release+notes/","title":"Aspose.Cells for SharePoint 17.6 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 17.7.\n   Key Summary Category     CELLSSP-39 Support SharePoint 2016 New Feature   CELLSSP-53 Fixed an issue regarding return result for added Watermark Enhancement    ","date":-62135596800,"description":"","objectID":"c6dcfceb56db0b269e6f7e86dfb34520","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2017/aspose.cells+for+sharepoint+17.7+release+notes/","title":"Aspose.Cells for SharePoint 17.7 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 17.8.\n   Key Summary Category     CELLSSP-61 Add footer to multiple files New Feature   CELLSSP-60 Aspose.Cells for SharePoint 2016 Ribbon menu disabled Bug   CELLSSP-62 Issue with Aspose.Cells for SharePoint 2016 multi-file preview Bug    ","date":-62135596800,"description":"","objectID":"239b00a2d287dedf824bc888f30f2b95","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2017/aspose.cells+for+sharepoint+17.8+release+notes/","title":"Aspose.Cells for SharePoint 17.8 Release Notes"},{"content":"This page contains release notes for Aspose.Cells for SharePoint 17.9.\n   Key Summary Category     CELLSSP-68 Add watermark to multiple files New Feature    ","date":-62135596800,"description":"","objectID":"ae6147159c75966ae08169800117e619","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2017/aspose.cells+for+sharepoint+17.9+release+notes/","title":"Aspose.Cells for SharePoint 17.9 Release Notes"},{"content":"","date":-62135596800,"description":"","objectID":"451451eae464824a815e60282a5dab84","permalink":"https://roywangt.github.io/cellssharepoint/releasenotes/releasenotes-2017/","title":"Release Notes - 2017"},{"content":"SharePoint sites are meant for collaboration, communication and content storage in order to fulfill particular business needs. Aspose.Cells for SharePoint has been introduced to perform certain operations on Microsoft Excel documents available in SharePoint document libraries. This article covers the following:\n A brief note about SharePoint document libraries. The benefits Aspose.Cells for SharePoint. How to convert Microsoft Excel documents into other formats.  A Brief Note on SharePoint Document Libraries\nThe contents on SharePoint sites are in the form of documents shared at a centralized location called a SharePoint document library (sometimes known as a \u0026amp;ldquo;shared document library\u0026amp;rdquo;). Authorized users can upload documents from their local machine to the SharePoint site. These documents are stored in binary format in an SQL Server database used by the SharePoint site. Documents become available to other SharePoint users in the form of a list of hyperlinks as shown below:\n**A document library **\nBenefits\nThe following list highlights a few benefits of using Aspose.Cells for SharePoint:\n The SharePoint site server does not have built-in capability to convert Microsoft Excel files directly on the server. Aspose.Cells for SharePoint adds this feature to the SharePoint site server. Aspose.Cells for SharePoint does not require Microsoft Excel to work. It is installed on the server so SharePoint users do not need Microsoft Excel on their local systems to convert Microsoft Excel documents from one format to another. Aspose.Cells for SharePoint does not require any pre-requisite except those required for creating a SharePoint site. Aspose.Cells for SharePoint is easy to deploy on a SharePoint site server. Aspose.Cells for SharePoint supports a number of input and output formats. Aspose.Cells for SharePoint exposes a public API for developers who need to develop their own SharePoint solutions.  Converting Microsoft Excel Documents with Aspose.Cells for SharePoint …","date":-62135596800,"description":"","objectID":"05d2174fa33050b1bc72109b4f7b5c2f","permalink":"https://roywangt.github.io/cellssharepoint/technicalarticles/aspose.cells+for+sharepoint+-+use+and+benefits/","title":"Aspose.Cells for SharePoint - Use and Benefits"},{"content":"**This section includes the following topics: **\n Aspose.Cells for SharePoint - Use and Benefits  Attachments: Aspose.Cells for SharePoint - Usage and Benefits-001.png (image/png) Aspose.Cells for SharePoint - Usage and Benefits-002.png (image/png) Aspose.Cells for SharePoint - Usage and Benefits-003.png (image/png) Aspose.Cells for SharePoint - Usage and Benefits-004.png (image/png) Aspose.Cells for SharePoint - Usage and Benefits-005.png (image/png) Aspose.Cells for SharePoint - Usage and Benefits-006.png (image/png)\n","date":-62135596800,"description":"","objectID":"afb82d791b7cadea3a6d60fe5bccb2fb","permalink":"https://roywangt.github.io/cellssharepoint/technicalarticles/","title":"Technical Articles"},{"content":"If you want to add footer in an Excel file, please choose “Add Footer with Aspose.Cells” option in the document’s Edit Control Block (ECB).\nThe following options are available during the add footer setup:\nSection\nAdd footer position: Left Section, Center Section, Right Section.\nFooter Script\nIt represents Footer formatting script. Script commands: Command | Description| \u0026amp;amp;P Current page number| \u0026amp;amp;N Page count|\u0026amp;amp;D Current date| \u0026amp;amp;T Current time \u0026amp;amp;A Sheet name \u0026amp;amp;F File name without path \u0026amp;amp;\u0026amp;ldquo;\u0026amp;rdquo; Font name, for example: \u0026amp;amp;\u0026amp;ldquo;Arial\u0026amp;rdquo; \u0026amp;amp;\u0026amp;ldquo;, \u0026amp;rdquo; Font name and font style, for example: \u0026amp;amp;\u0026amp;ldquo;Arial,Bold\u0026amp;rdquo; \u0026amp;amp; Font size. If this command is followed by a plain number to be printed in the header, it will be separated from the font height with a space character. \u0026amp;amp;G Image script For example: \u0026amp;ldquo;\u0026amp;amp;Arial,Bold\u0026amp;amp;8Footer Note\u0026amp;rdquo;.\nAttachments: add_footer1.png (image/png) add_footer2.png (image/png)\n","date":-62135596800,"description":"","objectID":"92be053bc060d077094543317aeb5d14","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/add+footer+to+a+document/","title":"Add Footer to a document"},{"content":"If you want to add footer in multiple Excel files, please choose “Add Footer with Aspose.Cells” option in Ribbon bar.\n\\\nGet all Excel files from data source folder and create file list table.\nSelect file which needs to add footer, click Add Footer button to add footer for selected files. \\\nThe following options are available during adding footer setup:\nSection\nAdd footer position: Left Section, Center Section and Right Section.\nFooter Script\nIt represents Footer formatting script. Script commands: Command | Description| \u0026amp;amp;P Current page number| \u0026amp;amp;N Page count|\u0026amp;amp;D Current date| \u0026amp;amp;T Current time \u0026amp;amp;A Sheet name \u0026amp;amp;F File name without path \u0026amp;amp;\u0026amp;ldquo;\u0026amp;rdquo; Font name, for example: \u0026amp;amp;\u0026amp;ldquo;Arial\u0026amp;rdquo; \u0026amp;amp;\u0026amp;ldquo;, \u0026amp;rdquo; Font name and font style, for example: \u0026amp;amp;\u0026amp;ldquo;Arial,Bold\u0026amp;rdquo; \u0026amp;amp; Font size. If this command is followed by a plain number to be printed in the header, it will be separated from the font height with a space character. \u0026amp;amp;G Image script For example: \u0026amp;ldquo;\u0026amp;amp;Arial,Bold\u0026amp;amp;8Footer Note\u0026amp;rdquo;.\nAttachments: addfootertomultipledocs1.png (image/png) addfootertomultipledocs2.png (image/png)\n","date":-62135596800,"description":"","objectID":"d43d53fe8a9376bbbe7f46f44a90d816","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/add+footer+to+multiple+documents/","title":"Add Footer to multiple documents"},{"content":"If you want to add watermark in an Excel file, please choose “Add WaterMark with Aspose.Cells” option in the document’s Edit Control Block (ECB).\nThe following options are available during the add watermark setup:\nWatermark file\nThe file must be an image file.\nAttachments: add_watermark1.png (image/png) add_watermark2.png (image/png)\n","date":-62135596800,"description":"","objectID":"c0819567232f12746ed752f04f05bdd1","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/add+watermark+to+a+document/","title":"Add Watermark to a document"},{"content":"If you want to add watermark in multiple Excel files, please choose “Add WaterMark with Aspose.Cells” option in the Ribbon bar.\n\\\nGet all Excel files from data source folder and create file list table.\nSelect file which needs to add watermark, click Add Watermark button to add watermark for the selected files. \\\n\\\nThe following options are available during the add water mark setup:\nWatermark file:\n** Input image file path.**\nAttachments: addwatermarkmultiple1.png (image/png) addwatermarkmultiple2.png (image/png)\n","date":-62135596800,"description":"","objectID":"5ed68afc289c2363a4579f6a7caa0f9d","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/add+watermark+to+multiple+documents/","title":"Add Watermark to multiple documents"},{"content":"To convert all files in a folder:\n Select Convert with Aspose.Cells from the ECB of your desired folder while staying in the parent.  To convert multiple files:\n  Select several files in the library and select Convert with Aspose.Cells.\n**Convert all files in the sub-folder **\n  Select the file item in the document list and move it up or down change the conversion order.\n**Changing the conversion order **\n  Using Server Ribbon Button under SharePoint 2010\nUnder SharePoint 2010, the server ribbon button is available instead of the custom action menu used with SharePoint 2007 / WSS 3.\n**Converting documents with Aspose.Cells for SharePoint on SharePoint 2010 **\nAttachments: multi-1.png (image/png) multi-2.png (image/png) multi-3.png (image/png)\n","date":-62135596800,"description":"","objectID":"f432bad918d5db3866b707b655ec484f","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/convert+multiple+files/","title":"Convert Multiple Files"},{"content":"One of the most common tasks that users use Aspose.Cells for, is converting individual files.\nConverting Individual Files\nTo convert a particular document in a document library:\n  Select Convert with Aspose.Cells.SharePoint in the document\u0026amp;rsquo;s Edit Control Block (ECB).\n**Selecting “Convert via Aspose.Cells” item in the document’s ECB **\nThe conversion settings screen is displayed. Here, you can fine-tune the conversion:\n  Select the destination file format from the Convert to list.\n  Enter the output file\u0026amp;rsquo;s name into the Destination file field. By default, Aspose.Cells for SharePoint pre-populates this field with the name of the source file. The extension is added automatically according to the selected format.\n  Start the conversion by clicking Convert. (Or go back to the library, dismissing your settings, by clicking Cancel.)\n  **Conversion Settings screen for one file conversion **\nAttachments: Convert One File-001.png (image/png) Convert One File-002.png (image/png)\n","date":-62135596800,"description":"","objectID":"7085eccf33432de52195674d5b9035fb","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/convert+one+file/","title":"Convert One File"},{"content":"To preview a Microsoft Excel document in the document library:\n  Select Preview Document with Aspose.Cells from the document’s Edit Control Block (ECB).\n**Selecting Preview Document from the menu **\n**Document preview **\n  Attachments: preview1.png (image/png) preview2.png (image/png)\n","date":-62135596800,"description":"","objectID":"f14f87015165bad841cc92666249fcde","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/preview+document/","title":"Preview Document"},{"content":"You may preview multiple Excel documents in the document library.\nTo preview all the files in a folder:\n Select Preview Document with Aspose.Cells in the ECB for your desired folder while staying in the parent.  To preview multiple files from within a folder:\n Select multiple files. With the files still selected, select Preview Document with Aspose.Cells.  **Document preview from withing SharePoint **\nWhen you\u0026amp;rsquo;re previewing several documents, the data area shows the first document in the list. The documents list shows all the previewed documents. To view another document:\n Select a document in the list. Click Preview.  Attachments: preview_multiple1.png (image/png)\n","date":-62135596800,"description":"","objectID":"55866fc0e653144f1c755513ceed7c83","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/preview+multiple+documents/","title":"Preview Multiple Documents"},{"content":"To search all the files in a folder:\n Select Search in Document with Aspose.Cells in the ECB of the desired folder while staying in the parent.  To search several files at once:\n Select multiple files. With the files still selected, select Search Document with Aspose.Cells.  **Searching documents **\nThe following options are available:\n Find Options: Focus your search by searching in cells, for formulas, or finding formulas that contains a specific expression. CaseSensitive: When the case-sensitive option is selected, the search matches characters exactly, including lower- and upper-case letters.  Attachments: searching_in1.png (image/png)\n","date":-62135596800,"description":"","objectID":"c6cc53fd959009ea9ee0ea0bb7cca2c5","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/searching+in+a+document/","title":"Searching in a Document"},{"content":"**This section includes the following topics: **\n Convert One File Convert Multiple Files Preview Document Preview Multiple Documents Searching in a Document Add Watermark to a document Add Footer to a document Add Footer to multiple documents Add Watermark to multiple documents  Attachments: Convert One File-001.png (image/png) Convert One File-002.png (image/png) multi-1.png (image/png) multi-2.png (image/png) multi-3.png (image/png) preview1.png (image/png) preview2.png (image/png) preview_multiple1.png (image/png) searching_in1.png (image/png)\n","date":-62135596800,"description":"","objectID":"b493567d740f362ac761124cddfbb268","permalink":"https://roywangt.github.io/cellssharepoint/usersguide/","title":"User's Guide"}]